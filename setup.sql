/* create database and table */
create database maple; 
use maple;
create table patterns(id int auto_increment primary key, class varchar(256), method varchar(256), pattern varchar(256), support int, alternative int, description varchar(256)); 

/* populate the existing patterns for 30 Java and Android APIs */
insert into patterns (class, method, pattern, support, description) values ('File', 'createNewFile', 'createNewFile(0)@!rcv.exists()', 5564, 'Check whether the file exists before creating it.'); 
insert into patterns (class, method, pattern, support, alternative, description) values ('File', 'createNewFile', 'mkdirs(0)@true; createNewFile(0)true', 1091, 1, 'Create the parent directory first just in case it does not exist.');
insert into patterns (class, method, pattern, support, alternative, description) values ('File', 'createNewFile', 'createNewFile(0)@true; if {; }', 2692, 1, 'Check the return value of creatNewFile. If it is false, the file already exists and cannot be created.');
insert into patterns (class, method, pattern, support, description) values ('Iterator', 'next', 'next(0)@!rcv.hasNext()', 265112, 'Check whether more elements exist before retrieving the next element.');
insert into patterns (class, method, pattern, support, description) values ('HashMap', 'get', 'get(1)@true; if {; }', 14317, 'Check whether HashMap.get returns null before using the return value. HashMap.get returns null when no such key exists.');
insert into patterns (class, method, pattern, support, alternative, description) values ('HashMap', 'get', 'get(1)@rcv.containsKey(arg0)', 1396, 5, 'Check whether the key exists in a HashMap object before retrieving its value.');
insert into patterns (class, method, pattern, support, description) values ('HashMap', 'get', 'get(1)@rcv!=null', 1396, 'Check whether the HashMap object is null before getting a value from it.');
insert into patterns (class, method, pattern, support, description) values ('File', 'mkdir', 'mkdirs(0)@true', 27015, 'Call mkdirs instead of mkdir. Because mkdirs also creates the non-existent parent directories.');
insert into patterns (class, method, pattern, support, description) values ('Cipher', 'init', 'try {; init(2)@true; }; catch {; }', 3475, 'Handle the potential InvalidKeyException thrown by Cipher.init with the try-catch block.');
insert into patterns (class, method, pattern, support, description) values ('InputStream', 'read', 'read(1)@true; close(0)@true', 5408, 'Always close the InputStream object after reading it. Otherwise, it may lead to resource leaks.');
insert into patterns (class, method, pattern, support, description) values ('InputStream', 'read', 'try {; read(1)@true; }; catch {; }', 8962, 'Handle the potential IOException thrown by InputStream.read with the try-catch block.');
insert into patterns (class, method, pattern, support, description) values ('StringTokenizer', 'nextToken', 'nextToken(0)@rcv.hasMoreTokens()', 37272, 'Check whether more tokens exist before retrieving the next token.');
insert into patterns (class, method, pattern, support, description) values ('DataOutputStream', 'write', 'write(1)@true; close(0)@true', 5160, 'Always close the DataOutputStream object after writing data. Otherwise, it may lead to resource leaks.');
insert into patterns (class, method, pattern, support, description) values ('SortedMap', 'firstKey', 'firstKey(0)@!rcv.isEmptry()', 31, 'Check whether the SortedMap is empty first before calling firstKey. Otherwise, it will throw NoSuchElementException.');
insert into patterns (class, method, pattern, support, alternative, description) values ('SortedMap', 'firstKey', 'firstKey(0)@rcv.size()>0', 24, 14, 'Check whether the SortedMap is empty first before calling firstKey. Otherwise, it will throw NoSuchElementException.');
insert into patterns (class, method, pattern, support, description) values ('ApplicationInfo', 'loadIcon', 'try {; loadIcon(1)@true; }; catch {; }', 452, 'Handle the OutOfMemorryError with the try-catch block, when the loaded image is too large.');
insert into patterns (class, method, pattern, support, description) values ('TypedArray', 'getString', 'try {; getString(1)@true; }; catch {; }', 924, 'Handle the IndexOutofBoundsException with the try-catch block if the index is not valid.');
insert into patterns (class, method, pattern, support, description) values ('TypedArray', 'getString', 'getString(1)@true; recycle(0)@true', 2206, 'Always recycle the TypedArray object to avoid resource leaks and GC overhead.');
insert into patterns (class, method, pattern, support, description) values ('RandomAccessFile', 'close', 'finally {; close(0)@true; }', 2059, 'Always close a stream in a finally block to make sure close will always be called. Otherwise, close can be skipped when an exception occurs before close.');
insert into patterns (class, method, pattern, support, description) values ('RandomAccessFile', 'close', 'try {; close(0)@true; }; catch {; }', 6391, 'Handle the potential IOException thrown by close.');
insert into patterns (class, method, pattern, support, description) values ('RandomAccessFile', 'close', 'if {; close(0)@rcv!=null; }', 2059, 'Check whether the receiver object is null before calling close.');
insert into patterns (class, method, pattern, support, description) values ('RandomAccessFile', 'read', 'read(1)@true; close(0)@true', 608, 'Always close a stream after reading it.');
insert into patterns (class, method, pattern, support, description) values ('RandomAccessFile', 'read', 'try {; read(1)@true; }; catch {; }', 894, 'Handle the potential IOException thrown by read.');
insert into patterns (class, method, pattern, support, description) values ('RandomAccessFile', 'read', 'read(1)@true; if {; }', 830, 'Check the return value of read. If it is -1, there is no more data because the end of this file has been reached.');
insert into patterns (class, method, pattern, support, description) values ('RandomAccessFile', 'write', 'write(1)@true; close(0)@true', 1692, 'Always close a stream after writing it.');
insert into patterns (class, method, pattern, support, description) values ('RandomAccessFile', 'write', 'try {; write(1)@true; }; catch {; }', 3312, 'Handle the potential IOException thrown by write.');
insert into patterns (class, method, pattern, support, description) values ('Activity', 'setContentView', 'super.onCreate(1)@true; setContentView(1)@true', 61526, 'Make sure to call super.onCreate before setContentView when overriding the onCreate method. Otherwise, it will throw exceptions.');
insert into patterns (class, method, pattern, support, description) values ('Activity', 'findViewById', 'findViewById(1)@true; if {; }', 294, 'Make sure to check the return value of findViewById before using it. findViewById may return null when no such view exists.');
insert into patterns (class, method, pattern, support, description) values ('PrintWriter', 'close', 'finally {; close(0)@true; }', 4100, 'Always close a stream in a finally block to make sure close will always be called. Otherwise, close can be skipped when an exception occurs before close');
insert into patterns (class, method, pattern, support, description) values ('PrintWriter', 'close', 'try {; close(0)@true; }; catch {; }', 14547, 'Handle the potential IOException thrown by close.');
insert into patterns (class, method, pattern, support, description) values ('PrintWriter', 'close', 'if {; close(0)@rcv!=null; }', 4239, 'Check whether the receiver object is null before calling close.');
insert into patterns (class, method, pattern, support, description) values ('PrintWriter', 'write', 'write(1)@true; close(0)@true', 2931, 'Always close a stream after writing it.');
insert into patterns (class, method, pattern, support, description) values ('PrintWriter', 'write', 'try {; write(1)@true; }; catch {; }', 2804, 'Handle the potential IOException thrown by write.');
insert into patterns (class, method, pattern, support, description) values ('PrintWriter', 'write', 'write(1)@true; flush(0)@true', 2581, 'Always flush the stream to ensure the written data is written to the underlying stream from the internal buffer. Otherwise, the written data may get lost when an unexpected crash occurs or may not exist when another process tries to read the data.');
