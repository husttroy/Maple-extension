results[https://github.com/svn2github/tigervnc/blob/29e6aced262526b2fc5b1d7b39a95d317c516939/branches/1_3/java/com/jcraft/jsch/jce/MD5.java][digest][23] = -> TRY {  -> return md.digest()@ } CATCH(Exception) {}
results[https://github.com/chenshuo/muduo/blob/3c2d9ccc0dbf4cb29221c837d46b0f0348449aa9/examples/filetransfer/loadtest/Handler.java][channelDisconnected][1] = -> TRY {  -> md5=digest.digest()@ -> bigInt=new BigInteger(1,md5,)@ } CATCH(Exception) {}
results[https://github.com/beppec56/odf-xades/blob/f6e641dc169c7e424851cd3f4eebd621cf497770/oxsit-custom_it/src/com/yacme/ext/oxsit/cust_it/comp/security/xades/factory/SAXSignedDocFactory.java][getDigest][1] = -> TRY { -> digest=m_digest.digest()@ } CATCH(Exception) { -> m_aLogger.severe("Error calculating digest: ",ex,)@ }
results[https://github.com/runtimeverification/javamop/blob/e67e777680b9c5cf79b9925913a2b9897abad88a/examples/ERE/PasswordLogin/MessageDigestClass/MessageDigestClass.java][main][1] = -> TRY {  -> md=MessageDigest.getInstance("SHA-1",)@ -> aMessageDigest=md.digest()@ } CATCH(Exception) {}
results[https://github.com/thelinuxbox/enkive/blob/d560ca77cd6750ca17805f23a54ad7585fca45e6/test/java/com/linuxbox/enkive/docstore/mongogrid/MongoGridDocStoreServiceTest.java][setUpClass][1] = -> TRY {  -> messageDigest=getPrimedMessageDigest(testDocument,)@ -> messageDigest.update(testData,)@ -> testDocumentHash=messageDigest.digest()@ } CATCH(Exception) {}
results[https://github.com/liuyijiang/spring-deep-study/blob/b602f4632993049b86d33308c2f46629165a88ff/src/com/util/Coder.java][encryptSHA][16] = -> TRY {  -> sha=MessageDigest.getInstance(KEY_SHA,)@ -> sha.update(data,)@ -> return sha.digest()@ } CATCH(Exception) {}
results[https://github.com/claudius108/expath-libs/blob/aeef712b998e1b0cd47d9bd694f82c1cb5e47d18/expath-crypto/src/test/java/org/expath/crypto/tests/digest/HashPerformanceTest.java][digestStringWithInputStreamTest][6] = -> TRY {  -> algorithm=MessageDigest.getInstance("SHA",)@ -> dis=new DigestInputStream(is,algorithm,)@ -> hash=algorithm.digest()@ } CATCH(Exception) {}
results[https://github.com/claudius108/expath-libs/blob/e97cda36eb28417111c7e72a68398d4963a095fc/crypto/src/test/java/org/expath/crypto/tests/junit/digest/HashPerformanceTest.java][digestInputStreamWithBufferedInputStreamTest][3] = -> TRY {  -> algorithm=MessageDigest.getInstance("SHA",)@ -> dis=new DigestInputStream(bis,algorithm,)@ -> hash=algorithm.digest()@ } CATCH(Exception) {}
results[https://github.com/jonbullock/JBake/blob/680007a8bf7f0a1d8ebb9ca368401d7d88fa62cf/src/main/java/org/jbake/app/FileUtil.java][sha1][1] = -> TRY {  -> complete=MessageDigest.getInstance("SHA-1",)@ -> updateDigest(complete,sourceFile,buffer,)@ -> bytes=complete.digest()@ } CATCH(Exception) {}
results[https://github.com/mattgarkusha/HomeSync/blob/70594de346937cfd0b3533bac2951e927304fc33/IntelliJ Workspace/Password Authentication/src/PasswordAuthenticator.java][validatePassword][2] = -> TRY {  -> hash=MessageDigest.getInstance("SHA-512","BC",)@ -> hash.update(saltAndPassword,)@ -> hashedPassword=hash.digest()@ } CATCH(Exception) {}
results[https://github.com/bomm/thera-pi/blob/9a41f9731a79045b5a794e923416bfc817a2a6ae/Nebraska/src/utils/NUtils.java][<init>][2] = -> TRY { -> this.sha=MessageDigest.getInstance(Constants.HASH_ALGORITHM_SHA_1,Constants.SECURITY_PROVIDER,)@ -> this.state=sha.digest()@ } CATCH(Exception) { -> throw new RuntimeException("kann SHA-1 nicht finden",)@ }
results[https://github.com/swmaestro2012/somap312_17_CurFit/blob/29ad9d3096466d8056da7b7c15499d98e575b22e/app/controllers/Looks.java][calculateHash][2] = -> TRY {  -> dis=new DigestInputStream(bis,algorithm,)@ -> hash=algorithm.digest()@ -> return byteArray2Hex(hash,)@ } CATCH(Exception) {}
results[https://github.com/jazzlly/Notes/blob/828857d5a518ccab9178b421442cec1dcb6ad207/java/security/java.sec.src/src/org/zlex/chapter06_6/MessageDigestCoder.java][encodeMD5][2] = -> TRY {  -> md=getMD5MessageDigest()@ -> md.update(data,)@ -> return md.digest()@ } CATCH(Exception) {}
results[https://github.com/bndtools/bnd/blob/be43f16a6fed3fd7ef78fa646dd5653ecb711e07/biz.aQute.bndlib/src/aQute/bnd/osgi/Jar.java][getTimelessDigest][1] = -> TRY {  -> md=MessageDigest.getInstance("SHA1",)@ -> dout=new DigestOutputStream(IO.nullStream,md,)@ -> return md.digest()@ } CATCH(Exception) {}
results[https://github.com/jazzlly/Notes/blob/2b412eb8c53e63924cb7f6afe781bed3ffb851e6/computer.science/languages/java/security/java.sec.src/src/org/zlex/chapter06_5/MD5Test.java][testByMessageDigest][2] = -> TRY {  -> md=dis.getMessageDigest()@ -> b=md.digest()@ -> md5hex=Hex.encodeHexString(b,)@ } CATCH(Exception) {}
results[https://github.com/bndtools/bnd/blob/a620bea7f5f478a0d25a3fb12d8a61f30d68270b/biz.aQute.bndlib.tests/src/test/deployer/FileRepoTest.java][calculateHash][1] = -> TRY {  -> algorithm.reset()@ -> copy(file,algorithm,)@ -> return algorithm.digest()@ } CATCH(Exception) {}
results[https://github.com/zycgit/hasor/blob/32a1691bf42f0216056baf479760a374d2a0797e/Tags/more_1.x(hypha2.0&submit3.3)/src/more-core/src/test/java/org/test/more/util/MD5.java][getMD5][29] = -> TRY { -> md=java.security.MessageDigest.getInstance("MD5",)@ -> md.update(source,)@ -> tmp=md.digest()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/lalithsuresh/Scaling-HDFS-NameNode/blob/afc156cc261205fcb9314c60fc89e794bcda1e79/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java][<clinit>][81] = -> TRY { -> digester=MessageDigest.getInstance("MD5",)@ -> digester.update(new UID()+"@"+time.getBytes(),)@ -> sync=digester.digest()@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/claudius108/expath-libs/blob/e30cf28d03a98bab558448526ba257f6661b8ceb/expath-crypto/src/main/java/org/expath/crypto/digest/Hash.java][hashBinary][1] = -> TRY {  -> messageDigester=getMessageDigester(algorithm,provider,)@ -> dis=new DigestInputStream(bis,messageDigester,)@ -> resultBytes=messageDigester.digest()@ -> return Base64.encodeToString(resultBytes,true,)@ } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/249ff22f64878a7eac7a4f62f92e7b706ed76c58/test/sun/security/ssl/com/sun/net/ssl/internal/ssl/SSLSocketImpl/ServerTimeout.java][doClientSide][6] = -> TRY {  -> md=MessageDigest.getInstance("SHA",)@ -> transIns=new DigestInputStream(new FileInputStream(transFilename,),md,)@ -> clientDigest=md.digest()@ } CATCH(Exception) {}
results[https://github.com/apache/hadoop-common/blob/9a9fcf826d455aacdc24948300bdf3015302d0f5/common/src/test/core/org/apache/hadoop/io/TestMD5Hash.java][getTestHash][65] = -> TRY {  -> digest=MessageDigest.getInstance("MD5",)@ -> digest.update(buffer,)@ -> return new MD5Hash(digest.digest(),)@ } CATCH(Exception) {}
results[https://github.com/mirror/jpcsp/blob/2adda3dac6b868e8f9e91ac62a9e6680df92b5b6/src/jpcsp/crypto/SHA1.java][doSHA1][2] = -> TRY { -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(bytes,0,lenght,)@ -> sha1Hash=md.digest()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/ianso/scriptus/blob/738124a83bb556197c889b3612df982d161cd40b/src/main/java/net/ex337/scriptus/CryptUtils.java][hash][1] = -> TRY { -> md=MessageDigest.getInstance(hash,)@ -> md.update(str,)@ -> return md.digest()@ } CATCH(Exception) { -> throw new ScriptusRuntimeException("probmem with hash",e,)@ }
results[https://github.com/mlundblad/bc-java/blob/158b54fbacb8926df0e74086e95900924c862b6e/src/test/java/org/bouncycastle/jce/provider/test/SigTest.java][testBadSig][5] = -> TRY {  -> sha1=MessageDigest.getInstance("SHA1","BC",)@ -> sha1.update((byte) 0,)@ -> dig=sha1.digest()@ -> System.arraycopy(dig,0,block,sigHeader.length,dig.length,)@ } CATCH(Exception) {}
results[https://github.com/fakechris/JTrackerServer/blob/a70fc6b7bcb229ae4f6a22c53142c2d98f9b0032/test/com/tracker/backend/TrackerRequestParserTest.java][setUp][3] = -> TRY {  -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(byteHash,)@ -> rawInfoHash=md.digest()@ -> infoHash=StringUtils.getHexString(rawInfoHash,)@ } CATCH(Exception) {}
results[https://github.com/bonitasoft/bonita-studio/blob/2bd5b75b18aeb1ab545055cd977e54f194f7936d/releng/org.bonitasoft.studio-antTasks/src/org/bonitasoft/studio/antTasks/ReplaceDuplicateJarsByLinks.java][createInstance][2] = -> TRY {  -> digester=MessageDigest.getInstance("SHA-1",)@ -> digester.update(bytes,)@ -> res.fileDigest=new String(digester.digest(),)@ } CATCH(Exception) {}
results[https://github.com/LindseyB/CS1653/blob/95dcc6ed376995e5f086497eca7090b6aede6da3/FinalProject/Phase3/GroupServer.java][getHash][2] = -> TRY { -> messageDigest=MessageDigest.getInstance("SHA1","BC",)@ -> messageDigest.update(doHash,)@ -> return messageDigest.digest()@ } CATCH(Exception) { -> e.printStackTrace(System.err,)@ }
results[https://github.com/noctarius/Lightning/blob/da297a8b9e67542f047f30baba10750835481793/lightning-core/src/main/java/org/apache/directmemory/lightning/internal/util/InternalUtil.java][getChecksum][4] = -> TRY { -> digest=MessageDigest.getInstance("SHA-1",)@ -> digest.update(data,0,data.length,)@ -> return digest.digest()@ } CATCH(Exception) { -> throw new RuntimeException("Could not build checksum of data",)@ }
results[https://github.com/Lehirti/Lehirti-Game-Engine/blob/de7124848f23c541bfe4b0c57b40a80083eb60fa/LehirtiGameEngine/src/org/lehirit/util/Hash.java][calculateSHA1][1] = -> TRY {  -> sha1=MessageDigest.getInstance("SHA1",)@ -> dis=new DigestInputStream(bis,sha1,)@ -> return toHex(sha1.digest(),)@ } CATCH(Exception) {}
results[https://github.com/claudius108/expath-libs/blob/aeef712b998e1b0cd47d9bd694f82c1cb5e47d18/expath-crypto/src/test/java/org/expath/crypto/tests/digest/HashPerformanceTest.java][digestString][5] = -> TRY {  -> algorithm=MessageDigest.getInstance("SHA",)@ -> algorithm.update(tempString.getBytes("UTF-8",),)@ -> hash=algorithm.digest()@ } CATCH(Exception) {}
results[https://github.com/mattgarkusha/HomeSync/blob/70594de346937cfd0b3533bac2951e927304fc33/IntelliJ Workspace/Password Authentication/src/PasswordAuthenticator.java][createPassword][1] = -> TRY {  -> hash=MessageDigest.getInstance("SHA-512","BC",)@ -> hash.update(saltAndPassword,)@ -> hashedPassword=hash.digest()@ -> fos.write(hashedPassword,)@ } CATCH(Exception) {}
results[https://github.com/mattgarkusha/HomeSync/blob/48dd174a43b46d97347572a437200b72eef63a09/Android_workspace/ContentProvider/src/com/example/contentprovider/userLoginActivity.java][onClick][1] = -> TRY { -> hash=MessageDigest.getInstance("SHA-512","BC",)@ -> hash.update(userSaltAndPass,)@ -> hashedUserSaltAndPass=hash.digest()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/Mateful/Twitchess/blob/37239b5e8f38f349aefd5919d38cac8bcd381f05/test/de/fhb/projects/chesstwitterbot/unittests/GenerateImageTest.java][getMD5Hash][1] = -> TRY {  -> md=MessageDigest.getInstance("MD5",)@ -> md.update(data,)@ -> hash=md.digest()@ -> return returnHex(hash,)@ } CATCH(Exception) {}
results[https://github.com/adyliu/jafka/blob/75e4fca565d62b4fcd35500372af00fbed9d986d/src/main/java/com/sohu/jafka/utils/Utils.java][md5][2] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(source,)@ -> tmp=md.digest()@ } CATCH(Exception) { -> throw new IllegalArgumentException(e,)@ }
results[https://github.com/corny/jwebsocket/blob/358e365bada5053645f729d17382c6e692aa8a2d/jWebSocket/jWebSocketServer/src/main/java/org/jwebsocket/server/impl/JWebSocketConnectorContext.java][getSessionId][1] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> lBufTarget=md.digest()@ } CATCH(Exception) { -> System.out.println("getMD5: "+ex.getMessage(),)@ }
results[https://github.com/mattgarkusha/HomeSync/blob/48dd174a43b46d97347572a437200b72eef63a09/Android_workspace/ContentProvider/src/com/example/contentprovider/userLoginActivity.java][hashPassword][1] = -> TRY {  -> hash=MessageDigest.getInstance("SHA-512","BC",)@ -> hash.update(saltAndPassword,)@ -> hashedPassword=hash.digest()@ -> stringPass=CryptoUtils.toString(hashedPassword,)@ } CATCH(Exception) {}
results[https://github.com/exoplatform/core/blob/470afd54529b4d35baa7db90cc66e3c785240e9e/exo.core.component.security.core/src/test/java/org/exoplatform/services/security/TestLoginModule.java][testDigestLogin][2] = -> TRY {  -> md=MessageDigest.getInstance("MD5",)@ -> md.update(md5a2.getBytes(),)@ -> bin=md.digest()@ } CATCH(Exception) {}
results[https://github.com/Top-Q/jsystem/blob/442f8e439d673acdeb4eb80494d9eec9bcff77c6/jsystem-core-projects/jsystemCore/src/main/java/jsystem/utils/FileUtils.java][getMD5][1] = -> TRY {  -> md=MessageDigest.getInstance("MD5",)@!(!(file.exists())) -> updateMessageDigest(file,md,)@!(!(file.exists())) -> hash=md.digest()@!(!(file.exists())) -> result=new BigInteger(hash,)@!(!(file.exists())) } CATCH(Exception) {}
results[https://github.com/bwilson30/distributed-ftp/blob/2724fb2fd44003f4e7c314b4beeed973df8807d5/the_final_folder/client/Encrypt.java][createCipher][1] = -> TRY {  -> md=MessageDigest.getInstance("MD5",)@ -> md.update("input".getBytes(),)@ -> digest=md.digest()@ } CATCH(Exception) {}
results[https://github.com/FAP-Team/Fap-Module/blob/5901b2a17fb0eab895ad328aee277b61183b8fc0/fap/app/platino/PlatinoSecurityUtils.java][encriptarPassword][1] = -> TRY {  -> md=MessageDigest.getInstance("MD5",)@ -> md.update(passArray,)@ -> digest=md.digest()@ -> return Base64Utility.encode(digest,)@ } CATCH(Exception) {}
results[https://github.com/Mikuz/Boarder/blob/f4a5d36daaf9dd5cdf96b79557008e91710ca6d5/src/fi/mikuz/boarder/util/FileProcessor.java][calculateHash][1] = -> TRY {  -> algorithm=MessageDigest.getInstance("SHA1",)@ -> dis=new DigestInputStream(bis,algorithm,)@ -> hash=algorithm.digest()@ -> return byteArray2Hex(hash,)@ } CATCH(Exception) {}
results[https://github.com/jintrone/TurkSnet/blob/e6bcc83a2a3ed454e2290e633e6f4a862d71670c/src/main/java/edu/mit/cci/turkit/util/U.java][md5_base64][1] = -> TRY {  -> m=MessageDigest.getInstance("MD5",)@ -> m.update(data,)@ -> return Base64.encodeBytes(m.digest(),)@ } CATCH(Exception) {}
results[https://github.com/jmcc0nn3ll/jetty-project/blob/706f8b36f106ff2eccb297ddc2ebc03ea558f77e/jetty-security/src/main/java/org/mortbay/jetty/security/jaspi/modules/DigestAuthModule.java][newNonce][45] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.reset()@ -> md.update(nounce,0,16,)@ -> hash=md.digest()@ } CATCH(Exception) { -> Log.warn(e,)@ }
results[https://github.com/winhamwr/selenium/blob/b82972939238922ab858ba31bc047725c68da8ae/javasrc/org/openqa/jetty/http/DigestAuthenticator.java][newNonce][13] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.reset()@ -> md.update(nounce,0,16,)@ -> hash=md.digest()@ } CATCH(Exception) { -> log.fatal(this,e,)@ }
results[https://github.com/johndemic/mule-transport-mongodb/blob/6ea92a7e58e00d497cd3f6b24dec6928f2d0ed15/src/test/java/org/mule/transport/mongodb/MongoDBFunctionalTestCase.java][getMD5][2] = -> TRY {  -> m=MessageDigest.getInstance("MD5",)@ -> m.update(bytes,0,bytes.length,)@ -> return new BigInteger(1,m.digest(),).toString(16,)@ } CATCH(Exception) {}
results[https://github.com/claudius108/expath-libs/blob/5b42d5bd4b2fbe0d8e2de7e4130621acf3d1a7a6/expath-crypto/src/test/java/org/expath/crypto/tests/junit/digest/HashPerformanceTest.java][digestWithByteArrayOutputStreamTest][4] = -> TRY {  -> algorithm=MessageDigest.getInstance("SHA",)@ -> LOOP { -> algorithm.update(tempBa,0,tempByteArrayLength,)@tempByteArrayLength>0 } -> hash=algorithm.digest()@ } CATCH(Exception) {}
results[https://github.com/odraudek99/ServerCAS/blob/d6b87ec21c1cc153a3ab6318b619a7a654bdbe6a/cas-server-3.4.2/cas-server-core/src/main/java/org/jasig/cas/util/SamlCompliantUniqueTicketIdGenerator.java][<init>][4] = -> TRY { -> messageDigest=MessageDigest.getInstance("SHA",)@ -> messageDigest.update(sourceId.getBytes("8859_1",),)@ -> this.sourceIdDigest=messageDigest.digest()@ } CATCH(Exception) { -> throw new IllegalStateException("Exception generating digest which should not happen...EVER",)@ }
results[https://github.com/freenet/plugin-Library-official/blob/dd6e05ba14f9bfdd0f1aba3b0692a6480301d183/src/plugins/Library/Library.java][MD5][12] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(b,0,b.length,)@ -> md5hash=md.digest()@ -> return convertToHex(md5hash,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/Jasig/cas/blob/ab45eb01784ee63b5588abfa53dfac2ccee218a8/cas-server-core/src/main/java/org/jasig/cas/util/SamlCompliantUniqueTicketIdGenerator.java][<init>][3] = -> TRY { -> messageDigest=MessageDigest.getInstance("SHA",)@ -> messageDigest.update(sourceId.getBytes("8859_1",),)@ -> this.sourceIdDigest=messageDigest.digest()@ } CATCH(Exception) { -> throw new IllegalStateException("Exception generating digest of source ID.",e,)@ }
results[https://github.com/apache/river/blob/e150abdd925f848d0d43a0b92438ed29c8dea61e/integrationtests/source/vob/qa/src/com/sun/jini/test/spec/url/httpmd/httpmdutil/ComputeDigestCodebase.java][computeMD][5] = -> TRY {  -> md=MessageDigest.getInstance(alg,)@ -> in=new DigestInputStream(bin,md,)@ -> md=in.getMessageDigest()@ -> mdbyte=md.digest()@ -> return digestString(mdbyte,)@ } CATCH(Exception) {}
results[https://github.com/elasticsearch/elasticsearch/blob/4e66658aacbf693dc1f30ceaf19ee4983059effd/src/test/java/org/elasticsearch/benchmark/checksum/ChecksumBenchmarkTest.java][md5][4] = -> TRY {  -> digest=MessageDigest.getInstance("MD5",)@ -> LOOP { -> digest.update(data,)@ } -> digest.digest()@ } CATCH(Exception) {}
results[https://github.com/apache/river/blob/da0039ba2c4e6b7c88c36123ecab6c1d2bf17580/integrationtests/qa/src/com/sun/jini/test/spec/config/configurationfile/ToString_Test.java][runCase][3] = -> TRY {  -> md.update(someValidConf.getBytes(),)@ -> messageDigestString=digestString(md.digest(),)@ -> confHttpmdURL=new URL("httpmd","localhost",port,"/"+confFileName+";"+"MD5="+messageDigestString,)@ } CATCH(Exception) {}
results[https://github.com/jersey/jersey-1.x/blob/77471fc19620f3a36ae562eee3843bfbe8b3916c/jersey-client/src/main/java/com/sun/jersey/api/client/filter/HTTPDigestAuthFilter.java][MD5][1] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(text,0,text.length,)@ -> md5hash=md.digest()@ -> return convertToHex(md5hash,)@ } CATCH(Exception) { -> throw new Error(e,)@ }
results[https://github.com/pgorla/usergrid/blob/63af014591811e242ecf4069c52c9a221123853a/services/src/main/java/org/usergrid/utils/PasswordUtils.java][computeHash][4] = -> TRY {  -> d=java.security.MessageDigest.getInstance("SHA-1",)@ -> d.reset()@ -> d.update(x.getBytes(),)@ -> return d.digest()@ } CATCH(Exception) {}
results[https://github.com/LafayetteCollegeLibraries/metadb-dss/blob/3b8e8d039c0ddd0436826f392b709dde625048cf/webapp-src/src/edu/lafayette/metadb/model/userman/UserManDAO.java][encryptPassword][1] = -> TRY { -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(password.getBytes(),)@ -> raw=md.digest()@ } CATCH(Exception) { -> MetaDbHelper.logEvent(e,)@ }
results[https://github.com/Fudan-University/fudan-sakai/blob/3ff62bd1dc129f05649910ab828c7f33d382b8aa/metaobj/metaobj-impl/api-impl/src/java/org/sakaiproject/metaobj/utils/id/guid/RandomGUID.java][getRandomGUID][4] = -> TRY { -> md5=MessageDigest.getInstance("MD5",)@ -> md5.update(valueBeforeMD5.getBytes(),)@ -> array=md5.digest()@ } CATCH(Exception) { -> logger.error("Error:"+e,)@ }
results[https://github.com/LSTS/imcjava/blob/b26419eaf9a715c8dbb24e5e2accc0e204e99a2f/src/pt/lsts/imc/IMCMessage.java][payloadMD5][2] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(baos.toByteArray(),)@ -> return md.digest()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/NLeSC/vbrowser/blob/95ecb9c00f0d7097b3c5f32b5ead663eb4047232/nl.esciencecenter.ptk/testsrc/nl/nlesc/ptk/crypt/TestCrypter.java][testHash][1] = -> TRY {  -> messageDigest=MessageDigest.getInstance(hashScheme,)@ -> messageDigest.update(password.getBytes("UTF-8",),)@ -> byteHash=messageDigest.digest()@ -> hash=StringUtil.toHexString(byteHash,)@ } CATCH(Exception) {}
results[https://github.com/emilhein/02344/blob/e0684c7be9fc6b711c9aa590e632f6ea35cce357/02334/src/database/Tools.java][hash][2] = -> TRY { -> messageDigest=MessageDigest.getInstance("SHA-256",)@ -> messageDigest.update(password.getBytes("UTF-8",),)@ -> return messageDigest.digest()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/hank/litecoinj/blob/8355a03439758045562b50874fa5aef9e02dfa0a/tools/src/main/java/com/google/bitcoin/tools/BuildCheckpoints.java][main][5] = -> TRY {  -> digest=MessageDigest.getInstance("SHA-256",)@ -> digestOutputStream=new DigestOutputStream(fileOutputStream,digest,)@ -> checkpointsHash=new Sha256Hash(digest.digest(),)@ -> System.out.println("Hash of checkpoints data is "+checkpointsHash,)@ } CATCH(Exception) {}
results[https://github.com/jumpa/geogebra/blob/8b4f0aec5c967092607518b110c20dc4ec540baf/geogebra/geogebra/plugin/GgbAPI.java][getGraphicsViewCheckSum][2] = -> TRY { -> md5=getMessageDigestMD5()@ -> md5.update(bytesOut,)@ -> md5hash=md5.digest()@ -> return Application.convertToHex(md5hash,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/commoncrawl/commoncrawl-crawler/blob/610763c29278e496ed21540f1a11aeb50fa0fade/src/org/commoncrawl/service/crawler/CrawlLog.java][<clinit>][1] = -> TRY { -> digester=MessageDigest.getInstance("MD5",)@ -> digester.update("SOME RANDOM BYTES".getBytes(),)@ -> _sync=digester.digest()@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/fywb251/bsl_impc_android/blob/cac86a8efcdc6534c5409c441f851ec21b6b3187/cube-android/src/com/foreveross/chameleon/util/MD5Util.java][encode][1] = -> TRY { -> messageDigest=MessageDigest.getInstance("MD5",)@ -> messageDigest.update(content.getBytes(),)@ -> return messageDigest.digest()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/strickyak/TerseTalk-Alpha/blob/e9a969bec919840ca4a7a04c2f1fc461b63dd0ba/terse-vm/src/terse/vm/More.java][de_][1] = -> TRY { -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(plain,)@ -> digest=md.digest()@ -> new_digest=Arrays.copyOfRange(digest,0,16,)@ } CATCH(Exception) { -> toss("AES.en: "+e,)@ }
results[https://github.com/padsof-uam/padsof/blob/a6023fddedd61c3fbe45787f9f159f5a9085829d/PADSOF/Padsof/src/padsof/system/Vendor.java][hashPassword][1] = -> TRY {  -> sha256=MessageDigest.getInstance("SHA-256",)@ -> sha256.update(pass.getBytes("UTF-8",),)@ -> return new String(sha256.digest(),"UTF-8",)@ } CATCH(Exception) {}
results[https://github.com/donmelaka/ESBhive/blob/12a5c8404b781e8e7325bdcefa6b028ac7c65bc5/carbon-core/src/main/java/org/wso2/carbon/core/util/SignatureUtil.java][getThumbPrintForAlias][1] = -> TRY {  -> sha=MessageDigest.getInstance(THUMB_DIGEST_ALGORITHM,)@ -> sha.reset()@ -> sha.update(cert.getEncoded(),)@ -> thumb=sha.digest()@ } CATCH(Exception) {}
results[https://github.com/jintrone/TurkSnet/blob/e6bcc83a2a3ed454e2290e633e6f4a862d71670c/src/main/java/edu/mit/cci/turkit/util/U.java][md5][1] = -> TRY {  -> m=MessageDigest.getInstance("MD5",)@ -> m.update(data,)@ -> return new BigInteger(1,m.digest(),).toString(16,)@ } CATCH(Exception) {}
results[https://github.com/nikotsunami/osce/blob/6f957e48f72cbfe7f0d28b1137967d49cd62a853/OsceManager/src/main/java/ch/unibas/medizin/osce/server/eOSCESyncServiceImpl.java][checkSignedWithSHA256][1] = -> TRY { -> md=MessageDigest.getInstance("SHA-256",)@ -> md.update(bytes,)@ -> mdbytes=md.digest()@ } CATCH(Exception) { -> Log.error(e.getMessage(),e,)@ }
results[https://github.com/lijinlone/7stack/blob/dea3636eb1ed9f4cca6fbbce67dc60b87f0e91d2/src/main/java/me/sevenstack/util/Utils.java][sha][2] = -> TRY {  -> sha=MessageDigest.getInstance("SHA-1",)@ -> sha.update(text.getBytes("UTF-8",),)@ -> return hex(sha.digest(),)@ } CATCH(Exception) {}
results[https://github.com/benanhalt/Specify/blob/95cfd1ce1d927f435a707aaba68e25a548a77767/src/edu/ku/brc/util/WebStoreAttachmentMgr.java][calculateHash][2] = -> TRY {  -> IF { -> dis=new DigestInputStream(bis,sha1,)@sha1!=null -> hash=sha1.digest()@sha1!=null -> return byteArray2Hex(hash,)@sha1!=null } } CATCH(Exception) {}
results[https://github.com/johnrengelman/shadow/blob/b8a75934157e4f535db653a35c01617ec168a5c7/shadow/src/intTest/groovy/com/github/jengelman/gradle/plugins/integration/TestFile.java][getHash][2] = -> TRY { -> messageDigest=MessageDigest.getInstance(algorithm,)@ -> messageDigest.update(FileUtils.readFileToByteArray(this,),)@ -> return messageDigest.digest()@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/fnppl/openSDX/blob/7d8d43a32ec5b3ec03d673406784ebdc28dfc2d5/src/org/fnppl/opensdx/keyserverfe/Helper.java][getMD5ForData][1] = -> TRY { -> md=java.security.MessageDigest.getInstance("MD5",)@ -> md.update(b,)@ -> return toHex(md.digest(),)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/eclipse/remus/blob/08bef60d29103db2baf65b817458d0917df41286/bundles/org.eclipse.remus.efs.file/src/org/eclipse/remus/efs/file/FileCryptoManager.java][deriveKey][2] = -> TRY {  -> md=MessageDigest.getInstance(HASH_ALG,)@ -> md.update(this.masterSecret,)@ -> md.update(SALT,)@ -> System.arraycopy(md.digest(),0,key,0,KEY_LENGTH,)@ } CATCH(Exception) {}
results[https://github.com/blueantelope/JingTai/blob/8ee3cbd65a0d9ed6aab3dd8a45a74dd5fd4ed682/com.jingtai.vehiclesys.portal/src/java/main/com/jingtai/vehiclesys/portal/common/Utils.java][md5][2] = -> TRY {  -> mdInst=MessageDigest.getInstance("MD5",)@ -> mdInst.update(btInput,)@ -> md=mdInst.digest()@ -> LOOP { -> val=(int) md[i]&0xff@i<md.length } } CATCH(Exception) {}
results[https://github.com/cipango/cipango/blob/85735170ecd2b0b8647e67971b91546964b0fa9f/cipango-server/src/main/java/org/cipango/server/security/authentication/DigestAuthenticator.java][newNonce][1] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.reset()@ -> md.update(nonce,0,16,)@ -> hash=md.digest()@ } CATCH(Exception) { -> LOG.warn("Unexpected error",e,)@ }
results[https://github.com/strickyak/TerseTalk-Alpha/blob/e9a969bec919840ca4a7a04c2f1fc461b63dd0ba/terse-vm/src/terse/vm/More.java][en_][1] = -> TRY { -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(plain.bytes,)@ -> digest=md.digest()@ -> c1=cipher.update(digest,0,16,)@ } CATCH(Exception) { -> toss("AES.en: "+e,)@ }
results[https://github.com/jentrata/jentrata-msh/blob/25821d04711977a22104f978dc1b630ab2e824d2/Plugins/CorvusAS2Plus/src/test/java/hk/hku/cecid/edi/as2/module/test/OutgoingMessageProcessorTest.java][calculateMIC][2] = -> TRY {  -> md=MessageDigest.getInstance(digestAlg,"BC",)@ -> md.update(content,)@ -> digest=md.digest()@ -> digestString=new String(Base64.encode(digest,),)@ } CATCH(Exception) {}
results[https://github.com/claudius108/expath-libs/blob/e30cf28d03a98bab558448526ba257f6661b8ceb/expath-crypto/src/main/java/org/expath/crypto/digest/Hash.java][hashString][1] = -> TRY {  -> messageDigester=getMessageDigester(algorithm,provider,)@ -> messageDigester.update(data.getBytes(inputStringEncoding,),)@ -> resultBytes=messageDigester.digest()@ -> return Base64.encodeToString(resultBytes,true,)@ } CATCH(Exception) {}
results[https://github.com/adempiere/adempiere/blob/8f4ffa6ab8d8b01c7ef64d3df43954c5f380dce1/JasperReportsWebApp/src/org/compiere/utils/DigestOfFile.java][digestAsByteArray][1] = -> TRY {  -> digestAgent.reset()@ -> LOOP { -> digestAgent.update(buffer,0,bytesRead,)@(bytesRead=is.read(buffer,))>=0 } -> digest=digestAgent.digest()@ } CATCH(Exception) {}
results[https://github.com/santiagoaisa/farmacia/blob/947dde06c388890ba3955ac6021c0ae3f223f7ba/farmacia/src/com/zarcillo/negocio/Encriptar.java][encriptar][1] = -> TRY { -> messageDigest=MessageDigest.getInstance("SHA-256",)@ -> messageDigest.reset()@ -> messageDigest.update(buffer,)@ -> digest=messageDigest.digest()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/jdereg/java-util/blob/7232c45413bea6b7fe8684afb8933a57bfd597b2/src/main/java/com/cedarsoftware/util/EncryptionUtilities.java][createAesCipher][1] = -> TRY {  -> d=getMD5Digest()@ -> d.update(key.getEncoded(),)@ -> iv=d.digest()@ -> paramSpec=new IvParameterSpec(iv,)@ } CATCH(Exception) {}
results[https://github.com/subbuss/newsrack/blob/469276db942a952566287e3a78983fc6ad21fe09/src/newsrack/util/StringUtils.java][md5][1] = -> TRY { -> md5=MessageDigest.getInstance("MD5",)@ -> md5.update(s.getBytes("UTF-8",),)@ -> raw=md5.digest()@ } CATCH(Exception) { -> _log.error("md5",e,)@ }
results[https://github.com/cs301w09/301_project/blob/a2bd45528b0230b2e5bd4a8058c858f3f87ad8d2/tests/src/ca/ualberta/test/persistence/PasswordStorageTest.java][testVerifyPassword][1] = -> TRY {  -> digest=MessageDigest.getInstance("SHA-256",)@ -> digest.update(password.getBytes(),)@ -> hashPassword=digest.digest()@ -> outputStream.write(hashPassword,)@ } CATCH(Exception) {}
results[https://github.com/Kukambara/worldofzaar/blob/9e3f357e2bf3c6eb5a7e49b95e4b45c1854a08a6/src/main/java/com/worldofzaar/util/HashConverter.java][md5File][1] = -> TRY { -> m=MessageDigest.getInstance("MD5",)@ -> m.update(fileBytes,0,fileBytes.length,)@ -> hash=new BigInteger(1,m.digest(),).toString(16,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/benschi11/Alt_F4/blob/db8a036f89847dc74fc3f5737362cab51ad8b871/framework/src/play/libs/Codec.java][hexSHA1][2] = -> TRY { -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(value.getBytes("utf-8",),)@ -> digest=md.digest()@ -> return byteToHexString(digest,)@ } CATCH(Exception) { -> throw new UnexpectedException(ex,)@ }
results[https://github.com/AsyncHttpClient/async-http-client/blob/e1232e04da09c0975a1f2771d9cf93435b00cb8d/src/test/java/com/ning/http/client/RealmTest.java][getMd5][2] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(what.getBytes("ISO-8859-1",),)@ -> hash=md.digest()@ -> bi=new BigInteger(1,hash,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/sleuthkit/hadoop_framework/blob/fe22ee6a2b2514d6283a91a14a396f78060fcc84/core/src/main/java/com/lightboxtechnologies/spectrum/Uploader.java][main][1] = -> TRY {  -> hasher=FsEntryUtils.getHashInstance("MD5",)@ -> hashedIn=new DigestInputStream(System.in,hasher,)@ -> System.out.println(new String(Hex.encodeHex(hasher.digest(),),),)@ } CATCH(Exception) {}
results[https://github.com/medusa-project/akubra-dell-dx/blob/a20649609aa65802d3fd91748621ce954262ee7e/src/test/java/edu/illinois/medusa/FedoraBlobTest.java][testMD5Metadata][1] = -> TRY {  -> md=MessageDigest.getInstance("MD5",)@ -> md.update(content.getBytes(),)@ -> md5_bytes=md.digest()@ -> base64=new String(Base64.encodeBase64(md5_bytes,),)@ } CATCH(Exception) {}
results[https://github.com/terraframe/Runway-SDK/blob/67d1c346f13932edbf5b8cded75c23d76da8d782/runwaysdk-test/src/main/java/com/runwaysdk/business/EntityGenTest.java][testSetHash][1] = -> TRY {  -> digest=MessageDigest.getInstance("MD5",new Sun(),)@ -> digest.update(in.getBytes(),)@ -> hash=Base64.encodeToString(digest.digest(),false,)@ } CATCH(Exception) {}
results[https://github.com/apache/wss4j/blob/8e8b80fc1353e8a277eebc465ad3a1ce362ff8bd/wss4j-dom/src/test/java/org/apache/ws/security/message/UsernameTokenTest.java][testUsernameTokenDigestText][1] = -> TRY {  -> sha=MessageDigest.getInstance("MD5",)@ -> sha.reset()@ -> sha.update(password,)@ -> passwdDigest=Base64.encode(sha.digest(),)@ -> builder.setUserInfo("wernerd",passwdDigest,)@ } CATCH(Exception) {}
results[https://github.com/solmix/solmix/blob/82a18a6304bae341f215c7ed4a58cdfec6c74aaf/framework/org.solmix.framework.util/src/main/java/org/solmix/commons/util/DataUtil.java][hashValue][1] = -> TRY {  -> md=MessageDigest.getInstance(algorithm,)@ -> md.reset()@ -> md.update(plaintext.getBytes(),)@ -> cipherbytes=md.digest()@ -> work=new BigInteger(1,cipherbytes,)@ } CATCH(Exception) {}
results[https://github.com/copton/ocram/blob/ed1d3c45f5b321bbd3c1fffeb99d962b13de57e1/applications/contiki/OcramCoojaPlugin.java][startPlugin][1] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(contents,)@ -> checksum=getHex(md.digest(),)@ } CATCH(Exception) { -> throw new OcramError("failed to determine md5 sum of elf file",e,)@ } -> log("md5 sum of "+path+": "+checksum,)@
results[https://github.com/mdaniel/svn-caucho-com-resin/blob/303b5d6aac3d758dbd873c8928ec9ec80da16539/modules/resin/src/com/caucho/security/DigestBuilder.java][buildDigest][1] = -> TRY {  -> md=MessageDigest.getInstance("sha1",)@ -> LOOP { -> md.update((byte) password[i],)@i<password.length } -> mdDigest=md.digest()@ -> Base64.encode(sb,mdDigest,0,mdDigest.length,)@ } CATCH(Exception) {}
results[https://github.com/difi/oxalis/blob/5bc39ca6738cf104332f0497960cce3f62734eaf/oxalis-start-outbound/src/main/java/eu/peppol/outbound/util/Util.java][calculateMD5][1] = -> TRY {  -> messageDigest=MessageDigest.getInstance(ALGORITHM_MD5,)@ -> messageDigest.reset()@ -> messageDigest.update(value.getBytes("iso-8859-1",),0,value.length(),)@ -> digest=messageDigest.digest()@ } CATCH(Exception) {}
results[https://github.com/OWASP/WebGoat/blob/7414ec751dfaf64d2ee4505c397c0291c8b8e155/ webgoat/main/project/org/owasp/webgoat/lessons/HttpOnly.java][createCustomCookieValue][1] = -> encoder=new BASE64Encoder()@ -> TRY { -> md=MessageDigest.getInstance("SHA",)@ -> md.update(buffer,)@ -> value=encoder.encode(md.digest(),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/violetagg/apache-tomcat-8.0/blob/544ad5102fdfcf41c35d19c1b3b0919c4526fdf1/java/org/apache/catalina/realm/RealmBase.java][digest][1] = -> TRY { -> md.reset()@ -> md.update(bytes,)@ -> return HexUtils.toHexString(md.digest(),)@ } CATCH(Exception) { -> log.error(sm.getString("realmBase.digest",),e,)@ }
results[https://github.com/ind9/crawler4j/blob/c900868e5e3e737504d555a75ff11e251af82d03/src/test/java/edu/uci/ics/crawler4j/examples/imagecrawler/Cryptography.java][MD5][1] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(str.getBytes(),)@ -> return hexStringFromBytes(md.digest(),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/bitrepository/reference/blob/618968904f7bdc69de5e71a4048407b91ccbd487/bitrepository-core/src/main/java/org/bitrepository/protocol/utils/ChecksumUtils.java][CalculateChecksumWithMessageDigest][1] = -> TRY { -> digester=MessageDigest.getInstance(algorithmName,)@ -> LOOP { -> digester.update(bytes,0,bytesRead,)@(bytesRead=content.read(bytes,))>0 } -> return digester.digest()@ } CATCH(Exception) { -> throw new CoordinationLayerException("Cannot calculate the checksum.",e,)@ }
results[https://github.com/wjsl/accumulo/blob/c31bf3aa2092782c65bf23839aac442f44127b39/src/server/src/main/java/org/apache/accumulo/server/test/randomwalk/image/Write.java][visit][1] = -> TRY {  -> alg=MessageDigest.getInstance("SHA-1",)@ -> alg.update(imageBytes,)@ -> hash=alg.digest()@ -> m.put(META_COLUMN_FAMILY,SHA1_COLUMN_QUALIFIER,new Value(hash,),)@ -> row=new Text(hash,)@ } CATCH(Exception) {}
results[https://github.com/weishengshui/posserver/blob/1b7acae53633217e7bd326136b4b5ccf32f92a50/qqapi/src/main/java/com/chinarewards/qqgbvpn/qqapi/util/TuanUtil.java][MD5][1] = -> TRY {  -> mdInst=MessageDigest.getInstance("MD5",)@ -> mdInst.update(s.getBytes(),)@ -> md=mdInst.digest()@ -> LOOP { -> val=(int) md[i]&0xff@i<md.length } } CATCH(Exception) {}
