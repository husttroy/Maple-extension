results[https://github.com/cantwait/psp/blob/6ccd8a3f7985e19b5bc75bb4e9582cadbdf01479/psp-services/src/com/pdvsa/psp/serializer/DateAdapter.java][unmarshal][43] = -> TRY {  -> return dateFormat.parse(v,)@ } CATCH(Exception) {}
results[https://github.com/apache/poi/blob/9926c8900688f2bf4813dd7c10ca0f89ddffc11a/src/scratchpad/testcases/org/apache/poi/hslf/record/TestComment2000Atom.java][testCreate][2] = -> TRY {  -> date_a=sdf.parse("2006-01-24 10:26:15.205",)@ -> a.setDate(date_a,)@ } CATCH(Exception) {}
results[https://github.com/Adobe-Consulting-Services/acs-aem-commons/blob/44669d5d1d2570e20656951eea3d1c46e1014ba9/bundle/src/test/java/com/adobe/acs/commons/replication/impl/ReplicateVersionImplTest.java][getDate][50] = -> TRY {  -> sdf=new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss",)@ -> date=sdf.parse(datetime,)@ } CATCH(Exception) {}
results[https://github.com/LynkLin/hrm-client/blob/bb314a0184954c9834cbddf4b7082fa9afec2820/src/com/lynk/hrm/common/Utils.java][formatDateToCn][1] = -> TRY {  -> return formatCn.format(format.parse(date,),)@ } CATCH(Exception) {}
results[https://github.com/PieceMaker/OpenJUMP/blob/ddd3352783072d8eba011a49c57feea4c77c2779/src/jumptest/junit/GMLWriterTestCase.java][testToString][1] = -> TRY {  -> doAssert("1921-04-18",dateFormatter.parse("1921-04-18",),AttributeType.DATE,)@ } CATCH(Exception) {}
results[https://github.com/fnppl/openSDX/blob/3d9afce481f76e82ade1113cdc3421148fc383fa/src/org/fnppl/opensdx/security/SecurityHelper.java][parseDate][3] = -> TRY {  -> return datemeGMT.parse(date,).getTime()@ } CATCH(Exception) {}
results[https://github.com/LuckyStars/nbc/blob/e4374d5162db8a8a8a60791ef9361f2f0b6c0cc6/function-schoolmaster2/java/function-schoolmaster2/src/main/com/nbcedu/function/schoolmaster2/utils/Utils.java][safeParseSimpleDate][1] = -> TRY { -> return dateSdf.parse(origin,)@ } CATCH(Exception) { -> return new Date()@ }
results[https://github.com/bobmcwhirter/drools/blob/d95020e66fd5b0056d922bd540fdb1599531d8c5/drools-examples/drools-insurance/src/test/java/org/acme/insurance/test/DriverTest.java][setUp][4] = -> TRY {  -> df=new java.text.SimpleDateFormat("dd/MM/yyyy",)@ -> defaultBirthday=df.parse("18/09/1983",)@ } CATCH(Exception) {}
results[https://github.com/brunopedroso/besouro/blob/cb3054d6580218b81dfbfe1db0bdffc497466361/test/athos/model/EpisodeClassifierTest.java][setUp][1] = -> TRY {  -> this.clock=new Clock(dateFormat.parse("01/01/2005 08:30:45",),)@ } CATCH(Exception) {}
results[https://github.com/nuodb/migration-tools/blob/d0e4e14dec80e61ff647a5131fa0a08076984447/core/src/main/java/com/nuodb/migrator/utils/xml/DateTransform.java][read][1] = -> TRY {  -> return (isEmpty(value,))?null:format.parse(value,)@ } CATCH(Exception) {}
results[https://github.com/tiesmaster/JGet/blob/6ac57e664f90308a7d36c334b2a2abfcaeb6ba53/src/nic/view/Mainframe.java][parseDate][5] = -> TRY {  -> sdf=new SimpleDateFormat("EEE MMM d HH:mm:ss yyyy",Locale.US,)@ -> return sdf.parse(timestamp,)@ } CATCH(Exception) {}
results[https://github.com/maxluo/zhaisujie/blob/a77fa4390c3e53904c02cefce2a68a6fcc2c4a11/src/com/ag/zhaisujie/DateUtil.java][toDateByDT][2] = -> TRY { -> return sdf1.parse(dateTime,)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/carlosbrando/shindig/blob/61affe80dd47b60d8acaf8eb0b7f0bfc526ccaf9/java/samples/src/test/java/org/apache/shindig/social/opensocial/jpa/spi/SpiTestUtil.java][buildDate][2] = -> TRY { -> return DATE_FORMATTER.parse(dateAsString,)@ } CATCH(Exception) { -> throw new RuntimeException("Failed to parse date - "+dateAsString,e,)@ }
results[https://github.com/deegree/deegree2-desktop/blob/7cc2ff1a90c8f8c5f09941b42cdc8ad480d9b43a/src/main/java/org/deegree/igeo/style/model/classification/Intervallables.java][getAsIntervallable][1] = -> TRY {  -> return new DateIntervallable(dateFormatter.parse(string,),defaultPattern,)@ } CATCH(Exception) {}
results[https://github.com/apache/poi/blob/5c061765b834c2f090e54bbee1b14f6847a2ec9b/src/scratchpad/testcases/org/apache/poi/hslf/util/TestSystemTimeUtils.java][testWriteDateA][1] = -> TRY {  -> date=sdf.parse("2006-01-24 10:26:15.205",)@ -> SystemTimeUtils.storeDate(date,out_a,)@ } CATCH(Exception) {}
results[https://github.com/apache/poi/blob/5c061765b834c2f090e54bbee1b14f6847a2ec9b/src/scratchpad/testcases/org/apache/poi/hslf/util/TestSystemTimeUtils.java][testWriteDateB][1] = -> TRY {  -> date=sdf.parse("2006-01-24 21:25:03.725",)@ -> SystemTimeUtils.storeDate(date,out_b,12,)@ } CATCH(Exception) {}
results[https://github.com/charleso/naca/blob/9fe1dd7b410a08e36c346ee9711baefd5bb116fc/JLib/src/jlib/misc/DateUtil.java][dateString2Calendar][1] = -> TRY {  -> d1=ms_dfYYYYMMDD.parse(s,)@ -> cal.setTime(d1,)@ } CATCH(Exception) {}
results[https://github.com/derekhiggins/ovirt-engine/blob/3439311394886f76ae498e505b3f9c32f7e5f7cb/backend/manager/modules/dal/src/test/java/org/ovirt/engine/core/dao/AuditLogDAOTest.java][testRemoveAllBeforeDate][2] = -> TRY {  -> cutoff=EXPECTED_DATE_FORMAT.parse("2010-12-20 13:11:00",)@ -> dao.removeAllBeforeDate(cutoff,)@ } CATCH(Exception) {}
results[https://github.com/economist239/BrandAnalytics/blob/4999d6bd3a0354ba36996f7c4c7bc83e953bb86e/tasker/src/test/DataParseTest.java][testDate][1] = -> TRY {  -> System.out.println(FORMATTER.parse("Mon, 30 Apr 2012 01:22:12 GMT",),)@ } CATCH(Exception) {}
results[https://github.com/mcidasv/mcidasv/blob/3584b78af088c8c36b9d2a609a0f764f8e7ee3fc/edu/wisc/ssec/mcidasv/data/dateChooser/JTextFieldDateEditor.java][caretUpdate][9] = -> TRY { -> date=dateFormatter.parse(getText(),)@ } CATCH(Exception) { -> setForeground(Color.RED,)@ }
results[https://github.com/Fudan-University/fudan-sakai/blob/10f8fe5c9646b8f053a98933ad496dd44ee5bdad/samigo/samigo-app/src/java/org/sakaiproject/tool/assessment/ui/listener/util/TimeUtil.java][convertFromTimeZone1StringToServerDate][3] = -> TRY { -> ndf.setTimeZone(tz1,)@ -> serverDate=ndf.parse(tz1string,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/camunda/camunda-bpm-platform/blob/217777be2b909661d54cd807cc3ccb4d5299a4d5/activiti-engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/timer/StartTimerEventTest.java][testFixedDateStartTimerEvent][24] = -> TRY {  -> ClockUtil.setCurrentTime(new SimpleDateFormat("dd/MM/yyyy hh:mm:ss",).parse("15/11/2036 11:12:30",),)@ } CATCH(Exception) {}
results[https://github.com/ga-m3dv/ga-worldwind-suite/blob/18d7b6c52c3cae466ae118bfa18ddaa73ccf14fc/Common/src/test/java/au/gov/ga/worldwind/common/layers/earthquakes/HistoricEarthquakesLayerTest.java][getMillisForDate][8] = -> TRY {  -> sdf=new SimpleDateFormat("yyyy-MM-dd",)@ -> parsedDate=sdf.parse(string,)@ -> return parsedDate.getTime()@ } CATCH(Exception) {}
results[https://github.com/Adobe-Consulting-Services/acs-aem-commons/blob/45742fd4d18aff8030ada84e82535c99f494661a/bundle/src/main/java/com/adobe/acs/commons/replicatepageversion/impl/ReplicatePageVersionServlet.java][getDate][2] = -> TRY { -> sdf=new SimpleDateFormat("yyyy-MM-dd,hh:mm:ss",)@ -> date=sdf.parse(datetime,)@ } CATCH(Exception) { -> log.error("exception occured",e,)@ }
results[https://github.com/benschi11/Alt_F4/blob/db8a036f89847dc74fc3f5737362cab51ad8b871/samples-and-tests/just-test-cases/app/controllers/Users.java][fresh][5] = -> TRY { -> u.birth=new SimpleDateFormat("dd/MM/yyyy",).parse("21/12/1980",)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/mwaddell/EverToDo/blob/65347d96509be1220ed95398d5fc1c3b126cedf4/tests/src/com/todotxt/todotxttouch/task/TaskTest.java][testMarkComplete][3] = -> TRY {  -> date=new SimpleDateFormat("yyyyMMdd",).parse("20110228",)@ -> task.markComplete(date,)@ } CATCH(Exception) {}
results[https://github.com/NIF-au/TissueStack/blob/014d8ff75d301ce6fe536ad6bd071562d3ad1e0b/packaging/jdk1.6.0_25/db/demo/programs/localcal/src/CalEvent.java][getDay][5] = -> TRY {  -> return dayFormat.format(fullFormat.parse(getDate(),),)@ } CATCH(Exception) {}
results[https://github.com/openmrs/openmrs-module-webservices.rest/blob/7e87bdbf857051fd8ca6b94f8df9cf8bbc11cf06/omod/src/test/java/org/openmrs/module/webservices/rest/web/ConversionUtilTest.java][convert_shouldReturnEqualsDateFromString][3] = -> TRY {  -> date=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS",).parse("2011-05-01T00:00:00.000",)@ -> cal.setTime(date,)@ } CATCH(Exception) {}
results[https://github.com/Hparsig/MovieTheater/blob/57dce1b77cbbdef579efcbe49ae81bd6d3e122cd/src/movieTheater/GUI/CreateShow.java][actionPerformed][2] = -> TRY { -> date=dateFormat.parse(startDate.getText(),)@ } CATCH(Exception) { -> e1.printStackTrace()@ }
results[https://github.com/sebglon/evasion-en-ligne/blob/bbcba9bee4d91b853351dd99face66b0a3d6e4df/api/src/main/java/org/evasion/cloud/api/data/adapter/DateAdapter.java][unmarshal][4] = -> TRY {  -> IF { -> return null@v.length()==0 } -> return dateFormat.parse(v,)@!(v.length()==0) } CATCH(Exception) {}
results[https://github.com/lqjliu/ghlh/blob/432517a6d760c79ef5ffde2cc15bac3e08fd8c34/src/main/java/com/ghlh/util/DateUtil.java][parseDay][6] = -> df=new SimpleDateFormat("yyyy-MM-dd",)@ -> TRY { -> result=df.parse(sDate,)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/ginatrapani/todo.txt-android/blob/f48db60d8b80062fd69f04297e36220291cc9362/tests/src/com/todotxt/todotxttouch/task/TaskTest.java][testConstructor_simple_prependDate][6] = -> TRY {  -> date=new SimpleDateFormat("yyyyMMdd",).parse("20110228",)@ -> task=new Task(1,input,date,)@ } CATCH(Exception) {}
results[https://github.com/apavlo/h-store/blob/e1f70e244e03e6adc24af4950455535ee2119e5f/src/hsqldb19b3/org/hsqldb/HsqlDateTime.java][getDateSeconds][10] = -> TRY { -> d=sdfd.parse(s,)@ -> return d.getTime()/1000@ } CATCH(Exception) { -> throw Error.error(ErrorCode.X_22007,)@ }
results[https://github.com/ivanstojkovic/doodle/blob/cf262cd5c8b28cf945989b536d73a5982d35f576/feeder/src/main/java/at/tuwien/sbc/feeder/gui/components/DateTextField.java][validateField][1] = -> input=this.getText()@ -> TRY { -> this.df.parse(input,)@ } CATCH(Exception) { -> this.setForeground(Color.RED,)@ }
results[https://github.com/openGDA/gda-core/blob/f0be28dd9095e4c700ab1c8189aabaef4570b59f/uk.ac.gda.core/test/gda/data/PathConstructorTest.java][testPathConstructorIkittenAccess][1] = -> TRY {  -> IcatProvider.getInstance().setOperatingDate(dateFormat.parse(date,),)@ } CATCH(Exception) {}
results[https://github.com/frostwire/frostwire-desktop/blob/90eacf1ef657a5664fd9b5e2e84d819091f9ea3c/lib/jars-src/h2-1.3.164/org/h2/util/DateTimeUtils.java][parseDateTime][11] = -> dateFormat=getDateFormat(format,locale,timeZone,)@ -> TRY { -> return dateFormat.parse(date,)@ } CATCH(Exception) { -> throw DbException.get(ErrorCode.PARSE_ERROR_1,e,date,)@ }
results[https://github.com/jgzornoza/SistemaVotacion/blob/1d30fef6b4becf4b54798f0d0d94da7dd77fb9a6/VotingToolAndroidProject/libraries/votingsystem/src/main/java/org/votingsystem/util/DateUtils.java][getDateFromDirPath][1] = -> TRY { -> formatter=new SimpleDateFormat("/yyyy/MMM/dd/",)@ -> result=formatter.parse(dateStr,)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/betfair/cougar/blob/ee8e0abe7feca419b3d647f536354144a14b19bb/cougar-framework/cougar-util/src/test/java/com/betfair/cougar/logging/records/EventLogRecordTest.java][testDate][1] = -> TRY {  -> sdf=new SimpleDateFormat("dd/MM/yyyy",)@ -> things[0]=sdf.parse("01/12/1970",)@ -> mle.setFieldsToLog(things,)@ } CATCH(Exception) {}
results[https://github.com/e-yamane/framework/blob/65cf3246c15db5edf44118cf98ce72df8a8fb50a/src/java/jp/rough_diamond/commons/util/DateManagerTest.java][testAfterSetting][2] = -> TRY {  -> sdf=new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS",)@ -> d=sdf.parse("2011/04/06 13:12:11.500",)@ -> DateManager.DM.setDate(d,)@ } CATCH(Exception) {}
results[https://github.com/jboss-fuse/fuse/blob/9204f0a3b18dede3539b041d7554b63e966fb932/components/camel-sap/org.fusesource.camel.component.sap.test/src/org/fusesource/camel/component/sap/util/RfcUtilTest.java][testFlightConnectionGetListRequest][3] = -> TRY {  -> dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ",)@ -> flightDate=dateFormat.parse("2012-02-01T00:00:00.000-0500",)@ -> date_range.put("LOW",flightDate,)@ } CATCH(Exception) {}
results[https://github.com/cbockermann/streams/blob/92a5cc8340a20ac4d97793036045b4c4bd302219/stream-mining/src/test/java/stream/io/TrafficLabelExtraction.java][parseDate][3] = -> TRY { -> date=fmt.parse(data+"00",)@ -> return date.getTime()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/azavea/OpenTreeMap-Android/blob/6ef695afbb2336268488570fffc0d504636ff2d4/OpenTreeMap/src/org/azavea/otm/data/PendingEdit.java][getSubmittedTime][1] = -> TRY {  -> when=data.getString("submitted",)@ -> format=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss'",)@ -> return format.parse(when,)@ } CATCH(Exception) {}
results[https://github.com/ciaranj/luntbuild/blob/e350d33e9000d7b1fe86a61a6ae5794d89070171/luntbuild-prototype-core/test/src/com/luntsys/luntbuild/utility/TestLuntbuild.java][testSvnGetRevisionSince][2] = -> TRY {  -> sinceDate=INPUT_DATE_FORMAT.parse("2006-01-28T04:07:11Z",)@ -> revisions=svnAdaptor.getRevisionsSince(sinceDate,null,crateAntProject(),)@ } CATCH(Exception) {}
results[https://github.com/Activiti/Activiti/blob/bdcbc9661e6d9efad9771f8c90b5217166596d27/modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskQueryTest.java][testTaskWithoutDueDate][1] = -> TRY {  -> dueDate=new SimpleDateFormat("dd/MM/yyyy hh:mm:ss",).parse("01/02/2003 01:12:13",)@ -> task.setDueDate(dueDate,)@ } CATCH(Exception) {}
results[https://github.com/dianping/cat/blob/e7fd5d2b6afc7323884d8c8e112813b89d5ebb6b/cat-home/src/test/java/com/dianping/cat/report/analyzer/GraphBuilderTest.java][test][5] = -> TRY {  -> period=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",).parse("2013-12-18 10:00:00",)@ -> builder.buildHourlyTask(HeartbeatAnalyzer.ID,"ReviewWeb",period,)@ } CATCH(Exception) {}
results[https://github.com/untoldwind/time4u/blob/458375114970bca5a7764cbf2773868371171683/server/ejb/src/main/java/de/objectcode/time4u/server/ejb/seam/api/io/DateXmlAdatper.java][unmarshal][1] = -> TRY {  -> return new Date(m_format.parse(str,).getTime(),)@ } CATCH(Exception) {}
results[https://github.com/openmrs/openmrs-module-calculation/blob/0ff7b5006c4de56a8bd3cb6a1bc79be7ed4e26da/api/src/test/java/org/openmrs/calculation/patient/PatientBehaviorTest.java][shouldCalculateTheAgesOfPatientsInACohortBasedOnContextualInfoAndParameterValues][2] = -> TRY {  -> date=new SimpleDateFormat(TEST_DATE_FORMAT,).parse("2000-01-01",)@ -> ctxt.setNow(date,)@ } CATCH(Exception) {}
results[https://github.com/tulh/TDD/blob/07d621dd2dc3ce513452b29169a469c149b879f6/Kata3/src/test/java/com/kata/bankaccount/service/BankAccountServiceTest.java][testOpenBankAccount][1] = -> TRY {  -> simpleDateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",)@ -> newDate=simpleDateFormat.parse("2013-07-31 14:24:00",)@ -> bankAccount.setOpenTimeStamp(newDate,)@ } CATCH(Exception) {}
results[https://github.com/GoogleCloudPlatform/appengine-tck/blob/e3b41de2f7d9a3b3a6d2a2c4138d88b052049f8e/site/teamcity/teamcity-server/src/main/java/com/google/appengine/tck/teamcity/ReportsMain.java][parse][1] = -> TRY { -> return new SimpleDateFormat("dd.MM.yyyy HH:mm",).parse(string,)@ } CATCH(Exception) { -> throw new IllegalArgumentException(e,)@ }
results[https://github.com/jblaya/openmrs-core/blob/75c383759791b44e572e7a38193aa38a5f494bd5/api/src/test/java/org/openmrs/api/FormServiceTest.java][purgeFormResource_shouldDeleteAFormResource][3] = -> TRY {  -> previous=new SimpleDateFormat("yyyy-MM-dd",).parse("2011-10-16",)@ -> resource.setValue(previous,)@ } CATCH(Exception) {}
results[https://github.com/duckweed/fitnesse-verify/blob/a98bb17a208b148ddb8a19f1c2e252388c6f8001/src/util/DateTimeUtils.java][getDateFromString][6] = -> format=new SimpleDateFormat(dateFormatString,)@ -> TRY { -> date=format.parse(dateString,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/panbasten/BA/blob/6762ad4589ed2a6f4ffbd87d71b80a7196558364/ba/fly-core/src/main/java/com/flywet/platform/bi/core/utils/DateUtils.java][parseDate][1] = -> TRY { -> format=new SimpleDateFormat(pattern,)@ -> date=format.parse(strDate,)@ } CATCH(Exception) { -> logger.error("parseDate error:"+e,)@ }
results[https://github.com/nblair/sometime/blob/c2a2e049f40ed85d8e8e7ccfcfd281e2a9c9259e/sched-assist-api/src/test/java/org/jasig/schedassist/messaging/XMLDataUtilsTest.java][testConvertDate][3] = -> TRY {  -> dateFormat=new SimpleDateFormat("yyyyMMdd-HHmm",)@ -> example=dateFormat.parse("20090122-1401",)@ -> calendar=XMLDataUtils.convertDateToXMLGregorianCalendar(example,)@ } CATCH(Exception) {}
results[https://github.com/lyncode/jtwig/blob/00e0937b33b3cfb33aacbf6b24d063fe3830252a/jtwig-functions/src/test/java/com/lyncode/jtwig/functions/internal/string/DateFormatTest.java][testExecuteWithoutFormat][1] = -> TRY {  -> date=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",).parse("2011-01-01 00:00:00",)@ -> result=(String) underTest.execute(date,)@ } CATCH(Exception) {}
results[https://github.com/apache/openejb/blob/395d3b9dfb899d56e7bce840a63e526397d1efe7/sandbox/release-tools/src/main/java/org/apache/openejb/tools/release/cmd/ReviewCommits.java][main][1] = -> TRY {  -> reviewed=new SimpleDateFormat("yyyy-MM-dd",).parse("2012-01-05",)@ -> commits=commits.greater("date",reviewed,)@ } CATCH(Exception) {}
results[https://github.com/droolsjbpm/drools/blob/63021da325036ec6fbdf4019e8c8293db21555ec/drools-examples/drools-examples-drl/src/main/java/org/drools/tutorials/banking/SimpleDate.java][<init>][2] = -> TRY {  -> setTime(format.parse(datestr,).getTime(),)@ } CATCH(Exception) {}
results[https://github.com/thomasattic/castor/blob/0c1463687be937e709aac4a61727b2970d3f1f25/cpactf/src/test/java/org/castor/cpa/test/test2567/TestQuery.java][query][1] = -> TRY {  -> df=new SimpleDateFormat("yyyy-MM-dd",)@ -> loadDate=df.parse("2004-04-26",)@ -> qry.bind(loadDate,)@ } CATCH(Exception) {}
results[https://github.com/NUBIC/psc-mirror/blob/cdb7ef614995bad3deb655d71679528adb76eca9/core/src/test/java/edu/northwestern/bioinformatics/studycalendar/dao/auditing/AuditEventDaoTest.java][testGetAuditEventsBySearchCriteria][2] = -> TRY {  -> sdf=DateFormat.getUTCFormat()@ -> time=sdf.parse("2010-08-17 23:26:58.361",)@ -> auditEvents=dao.getAuditEventsWithLaterTimeStamp(className,objectId,time,)@ } CATCH(Exception) {}
results[https://github.com/vuamitom/openmrs/blob/8dd0cdcffde5051f086f6d315c33b156b34366d3/api/src/test/java/org/openmrs/util/OpenmrsUtilTest.java][openmrsDateFormat_shouldAllowSingleDigitDatesAndMonths][3] = -> TRY {  -> sdf=OpenmrsUtil.getDateFormat(new Locale("en",),)@ -> sdf.parse("1/1/2001",)@ } CATCH(Exception) {}
results[https://github.com/fits/try_samples/blob/463d39f8db56b428e414b2b6cd743185252f0da6/blog/20140427/parse_isodate/Sample1.java][main][1] = -> TRY {  -> df=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX",)@ -> date=df.parse(args[0],)@ -> System.out.println(date,)@ } CATCH(Exception) {}
results[https://github.com/frontlinesms/smslib/blob/87f0ec2ee5695c6082a039ba7352fb65bae5ac1a/src/test/java/org/smslib/util/TpduUtilsTest.java][testDecodeServiceCentreTimestamp][1] = -> TRY {  -> expectedTs=DATE_FORMAT.parse(expected,).getTime()@ -> assertDateEquals("Timestamp decoded incorrectly.",expectedTs,ts,)@ } CATCH(Exception) {}
results[https://github.com/lyncode/jtwig/blob/00e0937b33b3cfb33aacbf6b24d063fe3830252a/jtwig-functions/src/test/java/com/lyncode/jtwig/functions/internal/string/DateFormatTest.java][testExecuteWithFormat][1] = -> TRY {  -> date=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",).parse("2011-01-01 00:00:00",)@ -> result=(String) underTest.execute(date,"yyyy",)@ } CATCH(Exception) {}
results[https://github.com/apache/poi/blob/4841ed0d4709755837cc5bfa8f10b0e6897b79f0/src/scratchpad/testcases/org/apache/poi/hslf/record/TestComment2000.java][testChange][1] = -> TRY {  -> new_date=sdf.parse("2006-01-24 22:25:03.725",)@ -> c2a.setDate(new_date,)@ -> c2n.setDate(new_date,)@ } CATCH(Exception) {}
results[https://github.com/thelabtech/staffsite-java/blob/10ccb38eb5947d7aff8b5d8491764425f504e5a7/services-src/source/org/alt60m/crs/application/CRSApplication.java][getDiscountsAvailable][2] = -> TRY {  -> redoDate=new java.text.SimpleDateFormat("MM-dd-yyyy",)@ -> today=redoDate.parse(redoDate.format(today,),)@ } CATCH(Exception) {}
results[https://github.com/arhughes/droidchatty/blob/7df68c6f4456a9fcc0b0942843d0e27cd9c630da/src/cc/hughes/droidchatty/ShackApi.java][convertTime][1] = -> TRY { -> dt=_shackDateFormat.parse(original,)@ -> return _displayDateFormat.format(dt,)@ } CATCH(Exception) { -> Log.e("DroidChatty","Error parsing date",ex,)@ }
results[https://github.com/CamelCookbook/camel-cookbook-examples/blob/51191a0d3f39ac33c85fe7342ff9a264bf078cdc/camel-cookbook-structuring-routes/src/main/java/org/camelcookbook/structuringroutes/templating/OrderFilenameProcessor.java][process][3] = -> TRY {  -> simpleDateFormat=new SimpleDateFormat(countryDateFormat,)@ -> date=simpleDateFormat.parse(countrySpecificDate,)@ -> universalDate=universalDateFormat.format(date,)@ } CATCH(Exception) {}
results[https://github.com/droolsjbpm/jbpm-form-modeler/blob/85da48de6c97050f6e60a8caa88b7ff2ffa071a9/jbpm-form-modeler-core/jbpm-form-modeler-service/jbpm-form-modeler-ui/src/main/java/org/jbpm/formModeler/core/processing/fieldHandlers/DateFieldHandler.java][getTheDate][1] = -> TRY {  -> date=(!(ArrayUtils.isEmpty(values,)))?values[0]:null@ -> return (!(StringUtils.isEmpty(date,)))?sdf.parse(date,):null@ } CATCH(Exception) {}
results[https://github.com/exoplatform/jcr/blob/8cb5f954d2d92c4de7fc072f824a5f9b5d668233/component/core/src/test/java/org/exoplatform/services/jcr/impl/value/TestDateValueFormat.java][testTestStringDateValue][1] = -> TRY {  -> sdf=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ",Locale.US,)@ -> d=sdf.parse(javaDate,)@ -> cdate.setTime(d,)@ } CATCH(Exception) {}
results[https://github.com/apache/poi/blob/4841ed0d4709755837cc5bfa8f10b0e6897b79f0/src/scratchpad/testcases/org/apache/poi/hslf/record/TestComment2000.java][testCommentAtomB][2] = -> TRY {  -> exp_b=sdf.parse("2006-01-24 22:25:03.725",)@ -> assertEquals(exp_b,c2b.getDate(),)@ } CATCH(Exception) {}
results[https://github.com/PieceMaker/OpenJUMP/blob/f40342e89d6b98a6f48358d1a8d484a09c0dd2d4/src/org/geotools/dbffile/DbfFile.java][main][1] = -> TRY {  -> System.out.println(new SimpleDateFormat("yyyymmdd",).parse("00010101",),)@ } CATCH(Exception) {}
results[https://github.com/PieceMaker/OpenJUMP/blob/83485dc43a65cb9f84b44b8f542553275740a17f/src/com/vividsolutions/jump/workbench/ui/EnterWKTDialog.java][main][1] = -> TRY {  -> System.out.println(new SimpleDateFormat().parse("2003-12-05",),)@ } CATCH(Exception) {}
results[https://github.com/tandong8888/topsun/blob/fe0a7546ac2a625f4f9fb347db5ff0891365af9d/com.topsun.posclient.widget/src/com/hexapixel/widgets/generic/DateHelper.java][getDate][1] = -> TRY {  -> df=new SimpleDateFormat(dateFormat,)@ -> df.setLenient(false,)@ -> return df.parse(str,)@ } CATCH(Exception) {}
results[https://github.com/echocat/jomon/blob/83d33451fc6eef949afebd4a6d17975eac9c2ff2/net/http/src/main/java/org/echocat/jomon/net/http/browsers/BrowserDefinitionParser.java][<init>][1] = -> TRY {  -> _version=Long.valueOf(_next[0],)@ -> _date=new SimpleDateFormat(BROWSER_DEFINITION_DATE_PATTERN,Locale.US,).parse(_next[1],)@ } CATCH(Exception) {}
results[https://github.com/vyloy/lnvc/blob/38625c0c7f2c0e5c562bcd3cea11043a281b6a54/lcm/src/com/lorent/web/action/CronConferenceAction.java][parseTime][1] = -> TRY {  -> conf.setCronHours(sdf.parse(datetimePair.getStartTime(),),)@ } CATCH(Exception) {}
results[https://github.com/spring-projects/spring-xd/blob/af9942cb577b0ae4212ef272929dc658710fc3a9/spring-xd-dirt/src/test/java/org/springframework/xd/dirt/plugins/job/ExpandedJobParametersConverterTests.java][convertDateAndNumberJobParametersToJson][1] = -> TRY {  -> simpleDateFormat=new SimpleDateFormat("yyyy/MM/dd",)@ -> date=simpleDateFormat.parse("2014/02/18",)@ -> assertEquals(date,jobParameters.getDate("param1",),)@ } CATCH(Exception) {}
results[https://github.com/dianping/cat/blob/6c183e8cc50c38958d6be262898054914108eb86/cat-consumer-advanced/src/test/java/com/dianping/cat/consumer/metric/MetricAnalyzerTest.java][setUp][1] = -> TRY {  -> sdf=new SimpleDateFormat("yyyyMMdd HH:mm",)@ -> date=sdf.parse("20120101 00:00",)@ -> m_analyzer.initialize(date.getTime(),Constants.HOUR,Constants.MINUTE*5,)@ } CATCH(Exception) {}
results[https://github.com/bjpeterdelacruz/HiREAP/blob/dacea99a70cc3db38d5143d3e5e6aee32d118e16/src/org/wattdepot/hnei/csvexport/NonmonotonicallyIncreasingData.java][getSensorData][3] = -> TRY { -> date=this.formatDate.parse(tstamp,)@ -> startTimestamp=Tstamp.makeTimestamp(date.getTime(),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/vuamitom/openmrs/blob/5e08eb552736d28872ea6f6be3c47d067d46e7bd/test/api/org/openmrs/test/api/EncounterServiceTest.java][shouldGetEncountersFromDate][1] = -> TRY {  -> fromDate=new SimpleDateFormat("yyyy-dd-MM",).parse("2006-01-01",)@ -> encounters=Context.getEncounterService().getEncounters(null,null,fromDate,null,null,null,true,)@ } CATCH(Exception) {}
results[https://github.com/ixcode/platform/blob/011759fa9992d984236bd418cdf7e4b22b675b0d/core/src/test/unit/java/ixcode/platform/text/format/UtcDateFormatTest.java][provides_utc_offset_output][1] = -> TRY {  -> simpleDateFormat=new SimpleDateFormat("yyyy-MM-dd hh:mm:ss",)@ -> someDate=simpleDateFormat.parse("2011-01-23 06:30:45",)@ -> result=new UtcDateFormat().format(someDate,)@ } CATCH(Exception) {}
results[https://github.com/Activiti/Activiti/blob/c42cc5b68c45c137e239bbdbdb3048433cd7fd56/modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/usertask/TaskDueDateExtensionsTest.java][testDueDateStringExtension][3] = -> TRY {  -> date=new SimpleDateFormat("dd-MM-yyyy HH:mm:ss",).parse("06-07-1986 12:10:00",)@ -> assertEquals(date,task.getDueDate(),)@ } CATCH(Exception) {}
results[https://github.com/ghillert/jrecruiter/blob/6215a7ec713924b74cda2a21e581d33d70110ff9/jrecruiter-web/src/test/java/org/jrecruiter/web/DateConverterTest.java][testConvertFromString][2] = -> TRY {  -> formatter=new SimpleDateFormat("MM/dd/yyyy",)@ -> expectedDate=formatter.parse(dateAsString,)@ -> Assert.assertTrue(expectedDate.equals(ret,),)@ } CATCH(Exception) {}
results[https://github.com/bogeblad/infoglue/blob/6121804d1858cfc1dcd86e8269a8754ac18d49e3/src/java/org/infoglue/cms/applications/common/ValueConverter.java][toDate][2] = -> TRY {  -> IF { -> return null@dateString==null||dateString.length()==0 } -> formatter=new SimpleDateFormat(pattern,)@!(dateString==null||dateString.length()==0) -> return formatter.parse(dateString,)@!(dateString==null||dateString.length()==0) } CATCH(Exception) {}
results[https://github.com/zkoss/zats/blob/73742d69a8e98cc0597805c9a1eb84d5745dd56f/zats-mimic/src/main/java/org/zkoss/zats/mimic/impl/operation/input/AbstractInputAgentBuilder.java][parseDate][1] = -> TRY { -> return new SimpleDateFormat(format,).parse(value,)@ } CATCH(Exception) { -> throw new AgentException(e.getMessage(),e,)@ }
results[https://github.com/Netflix/governator/blob/5dc80e588ec28386270241a254e1655c3e3eb44c/src/test/java/com/netflix/governator/lifecycle/TestConfiguration.java][testDynamicConfiguration][1] = -> TRY {  -> formatter=new SimpleDateFormat("yyyy-MM-dd",)@ -> Assert.assertEquals(obj.aDynamicDate.get(),formatter.parse("1964-11-06",),)@ } CATCH(Exception) {}
results[https://github.com/terraframe/Runway-SDK/blob/67d1c346f13932edbf5b8cded75c23d76da8d782/runwaysdk-test/src/main/java/com/runwaysdk/business/EntityGenTest.java][testSetDate][2] = -> TRY {  -> sdf=new SimpleDateFormat(Constants.DATE_FORMAT,)@ -> businessDAO=BusinessDAO.get(id,)@ -> out=sdf.parse(businessDAO.getValue("aDate",),)@ } CATCH(Exception) {}
results[https://github.com/hank/litecoinj/blob/8998ef18c9f7ff3bdcd6e4606c7edb2477e2a6ed/core/src/test/java/com/google/bitcoin/core/BlockChainTest.java][estimatedBlockTime][1] = -> TRY {  -> d=prod.estimateBlockTime(200000,)@ -> assertEquals(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ",).parse("2012-10-23T08:35:05.000-0700",),d,)@ } CATCH(Exception) {}
results[https://github.com/snowdrop/snowdrop-examples/blob/a3a1edcf676836c83d492fc6ac1a1d1149da876b/sportsclub/spring-4_1/sportsclub-domain/src/test/java/org/jboss/snowdrop/samples/sportsclub/domain/TestAccount.java][testMonthlyEndOfMonthEST][4] = -> TRY {  -> date=formatter.parse("31-03-2011 16:25 EST",)@ -> timeInterval=account.getBillingPeriodFor(date,)@ -> Assert.assertTrue(timeInterval.contains(date,),)@ } CATCH(Exception) {}
results[https://github.com/oleronning/fellesprosjekt/blob/15617b8b38845ca2475471daf2b0aea64f487a64/src/no/ntnu/fp/server_logic/SqlRequestImpl.java][convertStringDateToGregorianDate][1] = -> TRY { -> simpleDateFormat=new SimpleDateFormat("yyyy-MM-dd hh:mm:ss",)@ -> date=simpleDateFormat.parse(dateToConvert,)@ -> gregDate.setTime(date,)@ } CATCH(Exception) { -> System.out.print(e,)@ }
results[https://github.com/ginatrapani/todo.txt-android/blob/f48db60d8b80062fd69f04297e36220291cc9362/tests/src/com/todotxt/todotxttouch/task/TaskTest.java][testMarkComplete_twice][1] = -> TRY {  -> date=new SimpleDateFormat("yyyyMMdd",).parse("20110228",)@ -> task.markComplete(date,)@ -> task.markComplete(date,)@ } CATCH(Exception) {}
results[https://github.com/nblair/sometime/blob/c2a2e049f40ed85d8e8e7ccfcfd281e2a9c9259e/sched-assist-api/src/test/java/org/jasig/schedassist/model/CommonDateOperationsTest.java][testParseDateTimePhrase][1] = -> TRY {  -> df=CommonDateOperations.getDateTimeFormat()@ -> expectedDate=df.parse("20080614-1200",)@ -> Assert.assertEquals(expectedDate,CommonDateOperations.parseDateTimePhrase("20080614-1200",),)@ } CATCH(Exception) {}
results[https://github.com/sipXtapi/sipXtapi/blob/98e5de988cd21fac3011daa44304667246f76c34/sipXconfig/web/test/org/sipfoundry/sipxconfig/components/DateTimeEditorTest.java][testToDateTime][1] = -> TRY {  -> format=new SimpleDateFormat("HH:mm",)@ -> time=format.parse("14:35",)@ -> actual.setTime(DateTimeEditor.toDateTime(date,time,Locale.US,),)@ } CATCH(Exception) {}
results[https://github.com/eastseven/tsm/blob/ba200489f8eb664376754b33dbdddce3ef28f2aa/tsm/src/main/java/com/justinmobile/tsm/history/dao/hibernate/SubscribeHistoryDaoHibernate.java][main][1] = -> TRY {  -> date=new SimpleDateFormat("yyyyMM",).parse(subscribeDate,)@ -> System.out.println(date,)@ -> c.setTime(date,)@ } CATCH(Exception) {}
results[https://github.com/nblair/sometime/blob/ad0d5f30fa55eab04a1f7b79ed8d4b8c4ad5ed5e/sometime-api/src/test/java/org/jasig/schedassist/model/CommonDateOperationsTest.java][testParseDatePhrase][1] = -> TRY {  -> df=CommonDateOperations.getDateFormat()@ -> expectedDate=df.parse("20080614",)@ -> Assert.assertEquals(expectedDate,CommonDateOperations.parseDatePhrase("20080614",),)@ } CATCH(Exception) {}
results[https://github.com/unclebob/fitnesse/blob/6882e56db551cc51b29e5c6cc46ab98de3179876/src/fitnesse/responders/run/XmlFormatter.java][setTestTime][1] = -> format=new SimpleDateFormat("MM/dd/yyyy HH:mm:ss",)@ -> TRY { -> date=format.parse(time,)@ -> testTime=date.getTime()@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/jblaya/openmrs-core/blob/52b0b68c74ab7892128991731e554f564020e723/api/src/test/java/org/openmrs/hl7/HL7UtilTest.java][getTimeZoneOffset_shouldReturnTimezoneForGivenDateAndNotTheCurrentDate][1] = -> TRY {  -> Assert.assertEquals("-0500",HL7Util.getTimeZoneOffset("197804110615",new SimpleDateFormat("yyyyMMdd",).parse("20091225",),),)@ } CATCH(Exception) {}
results[https://github.com/geotools/geotools/blob/0a08b12846eb08d4cd158a1b0ead0d590ceb14d7/modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicReaderTest.java][timeAdditionalDim][1] = -> TRY {  -> formatD=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",)@ -> formatD.setTimeZone(TimeZone.getTimeZone("GMT",),)@ -> timeD=formatD.parse("2008-10-31T00:00:00.000Z",)@ } CATCH(Exception) {}
results[https://github.com/QADM/SCG/blob/d1e8ab7779bc95141c59c886f3353afc6754ce63/opentaps-1.5/opentaps/opentaps-tests/src/org/opentaps/tests/entity/HibernateTests.java][testAllMajorFieldTypes][1] = -> TRY {  -> sdf=new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss",)@ -> timeDate=sdf.parse("2009-3-11 23:45:13",)@ -> testDateTimeField=new java.sql.Timestamp(timeDate.getTime(),)@ } CATCH(Exception) {}
results[https://github.com/fake666/namnam/blob/c243e7919d6f40301fdcf3861a119a716c3a4bba/app/namnamparser/src/namnam/parser/erlangennuernberg/NamNamParserErlangenNuernbergBase.java][getDateFromString][1] = -> TRY {  -> IF { -> return null@d==null||"".equals(d.trim(),) } -> date=sdf.parse(d.substring(3,),)@!(d==null||"".equals(d.trim(),)) } CATCH(Exception) {}
results[https://github.com/svn2github/icemobile/blob/75d929cada75fc6b3f4717fc83ab98f9df6f3859/components/component/src/org/icefaces/mobi/component/timespinner/TimeSpinnerRenderer.java][convertStringInput][1] = -> df1=new SimpleDateFormat(patternIn,)@ -> TRY { -> aDate=df1.parse(inString,)@ -> returnString=df2.format(aDate,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/Activiti/Activiti/blob/bdcbc9661e6d9efad9771f8c90b5217166596d27/modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/StartTimerEventTest.java][testExpressionStartTimerEvent][1] = -> TRY {  -> processEngineConfiguration.getClock().setCurrentTime(new SimpleDateFormat("dd/MM/yyyy hh:mm:ss",).parse("15/11/2036 11:12:30",),)@ } CATCH(Exception) {}
