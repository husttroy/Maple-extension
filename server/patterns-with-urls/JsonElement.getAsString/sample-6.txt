results[https://github.com/eclipse/stardust.ui.web/blob/b04014956ea123d48bfb21e8f0ead85a000d44ce/web-modeler/src/main/java/org/eclipse/stardust/ui/web/modeler/marshaling/GsonUtils.java][safeGetAsString] = -> IF { -> member=jsonObject.get(memberName,)@jsonObject.has(memberName,) -> IF { -> return member.getAsString()@member.isJsonPrimitive() && jsonObject.has(memberName,) } }
results[https://github.com/continuuity/weave/blob/135b1c6d1c68b7c023852b3188d4c7008799496d/core/src/main/java/com/continuuity/weave/internal/json/JsonUtils.java][getAsString] = -> jsonElement=json.get(property,)@ -> IF { -> return null@jsonElement.isJsonNull() } -> IF { -> return jsonElement.getAsString()@jsonElement.isJsonPrimitive() && !(jsonElement.isJsonNull()) } -> return jsonElement.toString()@!(jsonElement.isJsonPrimitive()) && !(jsonElement.isJsonNull())
results[https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/blob/ebbc7209aa12a9c52c685e066a675a5c52c341f0/openid-connect-common/src/main/java/org/mitre/discovery/util/JsonUtils.java][getAsString] = -> IF { -> e=o.get(member,)@o.has(member,) -> IF { -> return e.getAsString()@e!=null&&e.isJsonPrimitive() && o.has(member,) } ELSE { -> return null@!(e!=null&&e.isJsonPrimitive()) && o.has(member,) } } ELSE { -> return null@!(o.has(member,)) }
results[https://github.com/wikimedia/analytics-kraken/blob/b79a140d0d369ff66c34cc9713d7512a82924693/src/main/java/org/wikimedia/analytics/kraken/funnel/UserActionNode.java][<init>] = -> componentValues=new HashMap<ComponentType, String>()@ -> LOOP { -> value=json.get(type.toString().toLowerCase(),)@ -> IF { -> valueString=value.getAsString()@value!=null&&value.isJsonPrimitive() -> componentValues.putAll(splitProject(valueString,),)@value!=null&&value.isJsonPrimitive() -> componentValues.put(type,valueString,)@value!=null&&value.isJsonPrimitive() } }
results[https://github.com/wikimedia/kraken/blob/b79a140d0d369ff66c34cc9713d7512a82924693/src/main/java/org/wikimedia/analytics/kraken/funnel/UserActionNode.java][<init>] = -> componentValues=new HashMap<ComponentType, String>()@ -> LOOP { -> value=json.get(type.toString().toLowerCase(),)@ -> IF { -> valueString=value.getAsString()@value!=null&&value.isJsonPrimitive() -> componentValues.putAll(splitProject(valueString,),)@value!=null&&value.isJsonPrimitive() -> componentValues.put(type,valueString,)@value!=null&&value.isJsonPrimitive() } }
results[https://github.com/Spoutcraft/Spoutcraft/blob/5cbbc2b07edaf4194a36130a7e74321e5b30ace0/src/main/java/com/prupe/mcpatcher/Config.java][getSelectedLauncherProfile] = -> path=new File(minecraftDir,"launcher_profiles.json",)@ -> json=JsonUtils.parseJson(path,)@ -> IF { -> element=json.get("selectedProfile",)@json!=null -> IF { -> return element.getAsString()@element!=null&&element.isJsonPrimitive() && json!=null } }
results[https://github.com/ubee/funf-open-sensing-framework/blob/1867866f944f1c1300d3b1a6939f81b4df642c1e/src/edu/mit/media/funf/config/DefaultRuntimeTypeAdapterFactory.java][read] = -> el=Streams.parse(in,)@ -> runtimeType=getRuntimeType(el,type,)@ -> IF { -> throw new ParseException("RuntimeTypeAdapter: Unable to parse runtime type.",)@runtimeType==null } -> delegate=delegateFactory.create(gson,TypeToken.get(runtimeType,),)@!(runtimeType==null) -> IF { -> typeObject=new JsonObject()@!(runtimeType==null) && el.isJsonPrimitive()&&el.getAsJsonPrimitive().isString() -> typeObject.addProperty(TYPE,el.getAsString(),)@!(runtimeType==null) && el.isJsonPrimitive()&&el.getAsJsonPrimitive().isString() } -> return delegate.read(new JsonTreeReader(el,),)@!(runtimeType==null)
results[https://github.com/DM2E/dm2e-ws/blob/d74d0ee9770a50544ceae50bda5aa20e8ef55039/src/main/java/eu/dm2e/ws/services/file/FileService.java][compare] = -> arg0Prop=arg0.get(this.compareProp,)@ -> arg1Prop=arg1.get(this.compareProp,)@ -> IF { -> return 0@null==arg0Prop&&null==arg1Prop } -> IF { -> return -1@!(null==arg0Prop&&null==arg1Prop) && null!=arg0Prop&&null==arg1Prop } -> IF { -> return +1@!(null==arg0Prop&&null==arg1Prop) && !(null!=arg0Prop&&null==arg1Prop) && null==arg0Prop&&null!=arg1Prop } -> return arg0Prop.getAsString().compareTo(arg1Prop.getAsString(),)@!(null==arg0Prop&&null==arg1Prop) && !(null!=arg0Prop&&null==arg1Prop) && !(null==arg0Prop&&null!=arg1Prop)
results[https://github.com/Aleks-Ya/hh-java-api/blob/668eae99a19f36240d8ae56961ea6fc6f00b72c5/src/ru/yaal/project/hhapi/parser/deserializer/SalaryDeserializer.java][deserialize] = -> TRY { -> object=(JsonObject) element@ -> toElement=object.get("to",)@ -> to=(toElement.isJsonPrimitive())?toElement.getAsInt():null@ -> fromElement=object.get("from",)@ -> from=(fromElement.isJsonPrimitive())?fromElement.getAsInt():null@ -> currencyElement=object.get("currency",)@ -> IF { -> currencyId=currencyElement.getAsString()@currencyElement.isJsonPrimitive() -> currency=Currency.CURRENCIES.getById(currencyId,)@currencyElement.isJsonPrimitive() } -> return new Salary(from,to,currency,)@ } CATCH { }
results[https://github.com/Aleks-Ya/hh-java-api/blob/c36e941349fce1842dc1c4581835c0f882b30bff/src/ru/yaal/project/hhapi/parser/SalaryDeserializer.java][deserialize] = -> TRY { -> object=(JsonObject) element@ -> toElement=object.get("to",)@ -> to=(toElement.isJsonPrimitive())?toElement.getAsInt():null@ -> fromElement=object.get("from",)@ -> from=(fromElement.isJsonPrimitive())?fromElement.getAsInt():null@ -> currencyElement=object.get("currency",)@ -> IF { -> currencyId=currencyElement.getAsString()@currencyElement.isJsonPrimitive() -> currency=Constants.Currency.CURRENCIES.getById(currencyId,)@currencyElement.isJsonPrimitive() } -> return new Salary(from,to,currency,)@ } CATCH { }
