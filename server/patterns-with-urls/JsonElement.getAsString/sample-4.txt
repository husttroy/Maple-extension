results[https://github.com/eclipse/stardust.ui.web/blob/b04014956ea123d48bfb21e8f0ead85a000d44ce/web-modeler/src/main/java/org/eclipse/stardust/ui/web/modeler/marshaling/GsonUtils.java][safeGetAsString] = -> IF { -> member=jsonObject.get(memberName,)@jsonObject.has(memberName,) -> IF { -> return member.getAsString()@member.isJsonPrimitive() && jsonObject.has(memberName,) } }
results[https://github.com/continuuity/weave/blob/135b1c6d1c68b7c023852b3188d4c7008799496d/core/src/main/java/com/continuuity/weave/internal/json/JsonUtils.java][getAsString] = -> jsonElement=json.get(property,)@ -> IF { -> return null@jsonElement.isJsonNull() } -> IF { -> return jsonElement.getAsString()@jsonElement.isJsonPrimitive() && !(jsonElement.isJsonNull()) } -> return jsonElement.toString()@!(jsonElement.isJsonPrimitive()) && !(jsonElement.isJsonNull())
results[https://github.com/eclipse/stardust.ui.web/blob/b04014956ea123d48bfb21e8f0ead85a000d44ce/web-modeler/src/main/java/org/eclipse/stardust/ui/web/modeler/service/XsdSchemaUtils.java][updateImports] = -> model=ModelUtils.findContainingModel(schema,)@ -> LOOP { -> element=entry.getValue()@ -> IF { -> updateReferences(facade,model,element.getAsString(),)@element.isJsonPrimitive() } }
results[https://github.com/Spoutcraft/Spoutcraft/blob/5cbbc2b07edaf4194a36130a7e74321e5b30ace0/src/main/java/com/prupe/mcpatcher/Config.java][getSelectedLauncherProfile] = -> path=new File(minecraftDir,"launcher_profiles.json",)@ -> json=JsonUtils.parseJson(path,)@ -> IF { -> element=json.get("selectedProfile",)@json!=null -> IF { -> return element.getAsString()@element!=null&&element.isJsonPrimitive() && json!=null } }
results[https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/blob/ebbc7209aa12a9c52c685e066a675a5c52c341f0/openid-connect-common/src/main/java/org/mitre/discovery/util/JsonUtils.java][getAsString] = -> IF { -> e=o.get(member,)@o.has(member,) -> IF { -> return e.getAsString()@e!=null&&e.isJsonPrimitive() && o.has(member,) } ELSE { -> return null@!(e!=null&&e.isJsonPrimitive()) && o.has(member,) } } ELSE { -> return null@!(o.has(member,)) }
results[https://github.com/testmycode/tmc-netbeans/blob/eb0dcbfa2c0627866382ab772b6ecf60741ba8eb/src/fi/helsinki/cs/tmc/utilities/ByteArrayGsonSerializer.java][deserialize] = -> IF { -> return Base64.decodeBase64(je.getAsString(),)@je.isJsonPrimitive()&&(JsonPrimitive) je.isString() } ELSE { -> IF { -> return null@je.isJsonNull() && !(je.isJsonPrimitive()&&(JsonPrimitive) je.isString()) } ELSE { -> throw new JsonParseException("Not a base64 string.",)@!(je.isJsonNull()) && !(je.isJsonPrimitive()&&(JsonPrimitive) je.isString()) } }
results[https://github.com/testmycode/tmc-netbeans/blob/8e912f183fd24cba4df969c336d3d23b820c06ba/tmc-plugin/src/fi/helsinki/cs/tmc/utilities/ByteArrayGsonSerializer.java][deserialize] = -> IF { -> return Base64.decodeBase64(je.getAsString(),)@je.isJsonPrimitive()&&(JsonPrimitive) je.isString() } ELSE { -> IF { -> return null@je.isJsonNull() && !(je.isJsonPrimitive()&&(JsonPrimitive) je.isString()) } ELSE { -> throw new JsonParseException("Not a base64 string.",)@!(je.isJsonNull()) && !(je.isJsonPrimitive()&&(JsonPrimitive) je.isString()) } }
results[https://github.com/SpigotMC/BungeeCord/blob/38f12840ca16f8ee0930d91db7e0865c1c0e2dd9/api/src/main/java/net/md_5/bungee/chat/ComponentSerializer.java][deserialize] = -> IF { -> return new TextComponent(json.getAsString(),)@json.isJsonPrimitive() } -> object=json.getAsJsonObject()@!(json.isJsonPrimitive()) -> IF { -> return context.deserialize(json,TranslatableComponent.class,)@!(json.isJsonPrimitive()) && object.has("translate",) } -> return context.deserialize(json,TextComponent.class,)@!(object.has("translate",)) && !(json.isJsonPrimitive())
results[https://github.com/SpigotMC/BungeeCord/blob/80caa2b669e07cebbe00916b84873d2c449c0796/proxy/src/main/java/net/md_5/bungee/chat/ComponentSerializer.java][deserialize] = -> IF { -> return new TextComponent(json.getAsString(),)@json.isJsonPrimitive() } -> object=json.getAsJsonObject()@!(json.isJsonPrimitive()) -> IF { -> return context.deserialize(json,TranslatableComponent.class,)@!(json.isJsonPrimitive()) && object.has("translate",) } -> return context.deserialize(json,TextComponent.class,)@!(object.has("translate",)) && !(json.isJsonPrimitive())
results[https://github.com/DM2E/dm2e-ws/blob/d74d0ee9770a50544ceae50bda5aa20e8ef55039/src/main/java/eu/dm2e/ws/services/file/FileService.java][compare] = -> arg0Prop=arg0.get(this.compareProp,)@ -> arg1Prop=arg1.get(this.compareProp,)@ -> IF { -> return 0@null==arg0Prop&&null==arg1Prop } -> IF { -> return -1@!(null==arg0Prop&&null==arg1Prop) && null!=arg0Prop&&null==arg1Prop } -> IF { -> return +1@!(null==arg0Prop&&null==arg1Prop) && !(null!=arg0Prop&&null==arg1Prop) && null==arg0Prop&&null!=arg1Prop } -> return arg0Prop.getAsString().compareTo(arg1Prop.getAsString(),)@!(null==arg0Prop&&null==arg1Prop) && !(null!=arg0Prop&&null==arg1Prop) && !(null==arg0Prop&&null!=arg1Prop)
