results[https://github.com/0xdata/h2o/blob/0e37bd42207dfc0bbc907e7bf257a6cfb2db4d2f/src/water/api/Cloud.java][elementToString][14] = -> str=element.getAsString()@
results[https://github.com/CloudStack-extras/CloudBridge-archive/blob/e0657e7e1137592b51f61a284b4796698b35d370/src/com/cloud/bridge/util/JsonAccessor.java][getAsString][1] = -> jsonElement=eval(propPath,)@ -> return jsonElement.getAsString()@
results[https://github.com/leandog/brazenhead/blob/50278f455fa3a836d2e61350e9efeb629309addd/driver/src/com/leandog/gametel/json/CommandDeserializer.java][getName][10] = -> nameElement=jsonObject.get("name",)@ -> return (nameElement!=null)?nameElement.getAsString():null@
results[https://github.com/feroult/churndb/blob/adbf4a7646c45db83ed8b103d72e309b8c7d5447/src/main/java/churndb/sourcebot/couchdb/CouchClient.java][get][5] = -> return get(jsonElement.getAsString(),)@
results[https://github.com/alx3apps/ctz-utils/blob/73d72b54aea718e67a5785fe7f0489350a60b9db/src/main/java/ru/concerteza/util/json/LocalDateAdapter.java][deserialize][1] = -> return DTF.parseLocalDate(json.getAsString(),)@
results[https://github.com/BMintern/gson/blob/2163a48396cfce80d1c031ab5b3ccb8fd35eb507/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java][deserialize][3] = -> return new Foo(json.getAsString()+" via "+name,)@
results[https://github.com/MassiveCraft/mcore/blob/86db5a6bdd36afda35a0b2ef12b8d1c112af620f/src/com/massivecraft/mcore/adapter/UUIDAdapter.java][convertJsonElementToUUID][1] = -> return convertStringToUUID(jsonElement.getAsString(),)@
results[https://github.com/dakusui/symfonion/blob/7d85ce77d0a36130476288d86f23bf0681efa892/src/main/java/net/sourceforge/symfonion/core/JsonUtil.java][asStringWithDefault][1] = -> elem=asJson(json,path,)@ -> return (elem==null)?defaultValue:elem.getAsString()@
results[https://github.com/CyanogenMod/android_external_gson/blob/13826ed0d2d492d0434f8441b320ac6b6cbbf044/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java][deserialize][6] = -> return new StringHolder(src.getAsString(),)@
results[https://github.com/BullShark/IRCBlit/blob/94793ed10acf996a4b3f9f1a8538a1b997436d9f/src/main/java/com/gitblit/utils/JsonUtils.java][deserialize][2] = -> return AccessPermission.fromCode(jsonElement.getAsString(),)@
results[https://github.com/MassiveCraft/mcore/blob/86db5a6bdd36afda35a0b2ef12b8d1c112af620f/src/com/massivecraft/mcore/adapter/ObjectIdAdapter.java][convertJsonElementToObjectId][1] = -> return convertStringToObjectId(jsonElement.getAsString(),)@
results[https://github.com/contextfw/contextfw/blob/c8ea1f3d741bc6036f2db9f4a65de91f82a3382e/devel/web/web-application/src/main/java/net/contextfw/web/application/serialize/AttributeJsonSerializer.java][deserialize][1] = -> return deserialize(json.getAsString(),)@
results[https://github.com/alx3apps/ctz-utils/blob/e8cb3e686b187fa810d18974126cc3a7bd7e596d/src/main/java/ru/concerteza/util/json/LocalDateTimeAdapter.java][deserialize][1] = -> return DEFAULT_LDT_FORMAT.parseLocalDateTime(json.getAsString(),)@
results[https://github.com/motech/platform-medical-records/blob/72ab945302cd51cd33e2020c5b7521ebf6961bfb/modules/couchmrs/mrs-couchdb/src/main/java/org/motechproject/couch/mrs/util/CouchJsonUtils.java][deserialize][1] = -> date=DateTime.parse(json.getAsString(),)@
results[https://github.com/MassiveCraft/mcore/blob/d546ed593860a93876c847e9745a661d2ed1fcb2/src/com/massivecraft/mcore4/gson/MongoURIAdapter.java][deserialize][1] = -> return new MongoURI(json.getAsString(),)@
results[https://github.com/btwmodsbiz/server-mods/blob/39b0dc2699085750268c8c8d9041f2b608adfae0/src/btwmod/centralchat/struct/User.java][<init>][6] = -> gateway=json.get("gateway",)@ -> this.gateway=(gateway!=null&&gateway.isJsonPrimitive())?gateway.getAsString():null@
results[https://github.com/GaloisInc/FiveUI/blob/867f5c62c9e21790d305e7f43727c90e1d5628c2/src/batchtools/headless/src/main/java/com/galois/fiveui/HeadlessRunDescription.java][reportError][3] = -> logger.error("HeadlessRunDescription.parse: ran into unexpected jsonElement type: \""+json+"\"",)@ -> logger.error("                              "+json.getAsString(),)@
results[https://github.com/schmittjoh/plovr/blob/d54cd2c8497338053fa3fa0a2517c8a01a66575d/test/org/plovr/GsonTest.java][gettingNullAsString][3] = -> nullPrimitive=new JsonPrimitive((String) null,)@ -> assertEquals("null",nullPrimitive.getAsString(),)@
results[https://github.com/sky2b/DbWebService/blob/db573de9544ae824248e5822bc2b3c7ab06b65f1/src/main/java/com/dbservice/query/PrimitiveValue.java][fromJson][1] = -> IF { -> value=jsonElement.getAsString()@!(jsonElement.isJsonNull()) }
results[https://github.com/cts2/cts2-framework/blob/0e711370e53261b42091735410ae9009809f85fe/cts2-core/src/main/java/edu/mayo/cts2/framework/core/json/JsonConverter.java][deserialize][1] = -> return formatter.parseDateTime(jsonElement.getAsString(),).toDate()@
results[https://github.com/akbertram/activityinfo/blob/14e73b404666e5095e73dc9f3381d7f751ccc1d3/server/src/main/java/org/activityinfo/client/page/report/json/ReportJsonFactory.java][decodeCategories][1] = -> jsonCats=(JsonArray) parser.parse(categories.getAsString(),)@ -> it=jsonCats.iterator()@
results[https://github.com/0xdata/h2o/blob/a3cc974f063be122c77a65871c253394061c570f/src/water/api/Inspect.java][elementToString][1] = -> s=_displayNames.get(elm.getAsString(),)@ -> return (s!=null)?s:super.elementToString(elm,contextName,)@
results[https://github.com/messo/jqwicket/blob/b28a8585b5de58045c46e005b81aba586b5ab602/jqwicket/src/main/java/com/google/code/jqwicket/ui/fullcalendar/AjaxFeedBack.java][getDisplayMode][1] = -> jsonElement=getFeedback().get(VIEW,)@ -> return (jsonElement!=null)?jsonElement.getAsString():null@
results[https://github.com/JetBrains/intellij-plugins/blob/a9706c03fe7cbf06ca19e2adb299105ba3a524ca/src/com/jetbrains/lang/dart/ide/runner/server/DartCommandLineDebugProcess.java][processResponse][1] = -> jsonEventElement=response.getJsonObject().get("event",)@ -> event=(jsonEventElement==null)?null:jsonEventElement.getAsString()@
results[https://github.com/bi2one/Matji_Sandwich/blob/a78dc3950aad9d9659b593af460d17b5a430a316/android/src/com/matji/sandwich/http/parser/MatjiDataParser.java][getString][1] = -> element=object.get(key,)@ -> return (isPrimitive(element,))?element.getAsString():null@
results[https://github.com/0xdata/h2o/blob/990bfbba5fdb316db3381f50746130416480a874/src/main/java/water/api/Cloud.java][elementToString][1] = -> str=element.getAsString()@ -> str2=(str.startsWith("/",))?str.substring(1,):str@!(str.equals(H2O.SELF.toString(),))
results[https://github.com/eishay/jvm-serializers/blob/443023cf929e23b712ab179d445f9f8d2934c3dd/tpc/src/serializers/GsonManualTree.java][readMedia][3] = -> copyright=mediaJsonObject.get("copyright",)@ -> IF { -> media.copyright=copyright.getAsString()@copyright!=null&&!(copyright.isJsonNull()) }
results[https://github.com/commoncrawl/commoncrawl-crawler/blob/fdcf6f99fe9bd1b4d1b5fe66f65debcdf652ecdc/src/org/commoncrawl/util/JSONUtils.java][safeSetStringFromElement][1] = -> IF { -> jsonObj.addProperty(property,stringElement.getAsString(),)@stringElement!=null }
results[https://github.com/collex/rdf-indexer/blob/d3004bcec3889e32c55f281b1d9b6d8f0c6a882c/src/main/java/org/nines/RDFCompare.java][toSolrString][1] = -> IF { -> jsonArray=(JsonArray) obj@obj.isJsonArray() -> return out.toString()@obj.isJsonArray() } -> return obj.getAsString()@!(obj.isJsonArray())
results[https://github.com/motech/care-reporting/blob/ce3ea881ba7ef95097a1469d0f4ca218d49f1d51/care-reporting-preprod-migration/src/main/java/org/motechproject/care/reporting/migration/util/CommcareDataUtil.java][populateProperty][2] = -> jsonElement=jsonObject.get(propertyName,)@ -> propertyValue=(jsonElement.isJsonNull())?null:jsonElement.getAsString()@ -> return populateProperty(element,propertyValue,propertyName,)@
results[https://github.com/fathomdb/cloud/blob/a979d1ef211f9c520921afdada2719115903893c/autonomous/auto-conf-openstack/src/main/java/io/fathom/auto/openstack/metadata/Metadata.java][findTopLevel][3] = -> element=data.get(key,)@ -> IF { -> return null@element==null } -> return element.getAsString()@!(element==null)
results[https://github.com/JetBrains/intellij-plugins/blob/7dfa495dc4dae7b344849237b0b58d404fcc3e78/phoneGap/src/com/github/masahirosuzuka/PhoneGapIntelliJPlugin/commandLine/PhoneGapPluginsList.java][getVersionLatest][2] = -> IF { -> return null@element==null||!(element.isJsonObject()) } -> latest=asObject.get("latest",)@!(element==null||!(element.isJsonObject())) -> return (latest==null)?null:latest.getAsString()@!(element==null||!(element.isJsonObject()))
results[https://github.com/shilad/wikAPIdia/blob/9baf7d279bc7d2a897b0f59e0a652f21679f03f4/wikAPIdia-core/src/main/java/org/wikapidia/core/dao/live/QueryParser.java][getQueryReplyFromJsonElement][1] = -> entryTitle=entryValue.get("title",)@ -> title=(entryTitle!=null)?entryTitle.getAsString():""@ -> isDisambig=title.contains("(disambiguation)",)@ -> return new QueryReply(pageid,title,namespace,isRedirect,isDisambig,)@
results[https://github.com/ieb/sparsemapcontent/blob/ecd8cff19e5e73aba4e908ccd3f4bd40b6d0d54a/extensions/integration/src/main/java/uk/co/tfd/sm/integration/JsonTestUtils.java][checkProperty][1] = -> testProp=json.get(propertyName,)@ -> Assert.assertNotNull(testProp,)@ -> Assert.assertEquals(propertyValue,testProp.getAsString(),)@
results[https://github.com/ipeirotis/Troia-Server/blob/0a72f15ba69acbabd5147df72aec427234b16b8c/core/src/main/java/com/datascience/scheduler/SchedulerFactory.java][getID][1] = -> jo=params.get(arg,)@ -> checkArgument(jo!=null,"Missing parameter: "+arg,)@ -> return t(jo.getAsString(),)@
results[https://github.com/puppetlabs/geppetto/blob/412eb5a8aec4ed34d977a49a90149b57568d492a/org.cloudsmith.geppetto.catalog/src/org/cloudsmith/geppetto/catalog/impl/CatalogEdgeImpl.java][getString][19] = -> json=jsonObj.get(key,)@ -> IF { -> return null@json==null } -> value=json.getAsString()@!(json==null) -> return (value.length()==0)?null:value@!(json==null)
results[https://github.com/eclipse/stardust.ui.web/blob/b04014956ea123d48bfb21e8f0ead85a000d44ce/web-modeler/src/main/java/org/eclipse/stardust/ui/web/modeler/marshaling/GsonUtils.java][extractString][3] = -> member=json.get(memberName,)@ -> return (null!=member&&member.isJsonPrimitive()&&member.getAsJsonPrimitive().isString())?member.getAsString():(String) null@
results[https://github.com/thucydides-webtests/thucydides/blob/8a80df61b4cfb7524dda7fe1489e1aa0c53fadeb/thucydides-core/src/main/java/net/thucydides/core/reports/json/TestOutcomeSerializer.java][readManualTest][1] = -> manualTestAttribute=jsonObject.get(MANUAL,)@ -> IF { -> isManualTest=Boolean.valueOf(manualTestAttribute.getAsString(),)@manualTestAttribute!=null }
results[https://github.com/frostwire/frostwire-desktop/blob/90eacf1ef657a5664fd9b5e2e84d819091f9ea3c/lib/jars-src/google-gson-1.4/src/test/java/com/google/gson/JsonParserTest.java][testParseEmptyString][6] = -> e=parser.parse("\"   \"",)@ -> assertTrue(e.isJsonPrimitive(),)@ -> assertEquals("   ",e.getAsString(),)@
results[https://github.com/bolinfest/plovr/blob/a302f819eb30ec6d5dadbc9925217c16f619f8de/test/org/plovr/GsonTest.java][gettingBooleanAsString][3] = -> booleanPrimitive=new JsonPrimitive(true,)@ -> assertEquals("true",booleanPrimitive.toString(),)@ -> assertEquals("true",booleanPrimitive.getAsString(),)@
results[https://github.com/ybonnel/gson/blob/f6abc6e163ea663e619c083d61a6b94dd60a950c/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java][deserialize][7] = -> TRY {  -> return json.getAsString()@ } CATCH(JsonParseException) {}
results[https://github.com/schmittjoh/plovr/blob/d54cd2c8497338053fa3fa0a2517c8a01a66575d/test/org/plovr/GsonTest.java][gettingStringAsString][3] = -> stringPrimitive=new JsonPrimitive("hello",)@ -> assertEquals("\"hello\"",stringPrimitive.toString(),)@ -> assertEquals("hello",stringPrimitive.getAsString(),)@
results[https://github.com/fracturedatlas/ATHENA/blob/285dca4e3c624dd9fa201a2eda91d23f497d1ee7/athena-web-resources/src/main/java/org/fracturedatlas/athena/web/util/JsonUtil.java][nullSafeGetAsString][2] = -> IF { -> return null@e==null } ELSE { -> return e.getAsString()@!(e==null) }
results[https://github.com/commoncrawl/commoncrawl-crawler/blob/fdcf6f99fe9bd1b4d1b5fe66f65debcdf652ecdc/src/org/commoncrawl/util/JSONUtils.java][safeGetHttpDate][1] = -> element=jsonObj.get(property,)@ -> IF { -> return HttpHeaderInfoExtractor.getTime(element.getAsString(),)@element!=null }
results[https://github.com/bangiamanu/t8rpwgf/blob/b220f616c8b4c56610919c3833b04a4e493bd178/src/java/uk/tripbrush/service/PDFService.java][stringify][1] = -> IF { -> return ob.getAsString()@ob!=null } ELSE { -> return ""@!(ob!=null) }
results[https://github.com/bolinfest/plovr/blob/a302f819eb30ec6d5dadbc9925217c16f619f8de/test/org/plovr/GsonTest.java][gettingNumberAsString][3] = -> numberPrimitive=new JsonPrimitive(42,)@ -> assertEquals("42",numberPrimitive.toString(),)@ -> assertEquals("42",numberPrimitive.getAsString(),)@
results[https://github.com/CMPUT301F12T07/classproject/blob/a43d319aae71812d97309425cf0d0ced88d618b1/CrowdSource/src/com/CMPUT301F12T07/crowdsource/taskmodeldb/JsonParseTool.java][parseTaskList][1] = -> LOOP { -> widElement=jsonObject.get("id",)@ -> wid=widElement.getAsString()@ -> task=new Task(wid,title,dateDue,quantity,qty_filled,type,uid,)@ }
results[https://github.com/0xdata/h2o/blob/a3cc974f063be122c77a65871c253394061c570f/src/water/api/RequestBuilders.java][build][1] = -> TRY { -> key=element.getAsString()@ -> k=URLEncoder.encode(key,"UTF-8",)@ } CATCH(Throwable) { -> throw Throwables.propagate(e,)@ }
results[https://github.com/0xdata/h2o/blob/990bfbba5fdb316db3381f50746130416480a874/src/main/java/water/api/ImportModel.java][deserialize][1] = -> TRY {  -> return Key.make(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/frostwire/frostwire-desktop/blob/90eacf1ef657a5664fd9b5e2e84d819091f9ea3c/lib/jars-src/google-gson-1.4/src/main/java/com/google/gson/DefaultTypeAdapters.java][deserialize][9] = -> TRY {  -> return (T) Enum.valueOf((Class<T>) classOfT,json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/GlobalsDB/Challenges/blob/8dc03a7c7c1f346d50752215f25fcf2b89902534/2/yonatang/war/src/main/java/me/yonatan/globals/c2/action/GsonProducer.java][deserialize][10] = -> TRY {  -> return new DateTime(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/MassiveCraft/Factions/blob/6035b204dcf958ef045a927fd6d14508960cedbd/src/org/mcteam/factions/gson/DefaultTypeAdapters.java][deserialize][4] = -> TRY {  -> return new StringBuilder(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/ipeirotis/Troia-Server/blob/e52bcd6b3fdcba3a1b4809c0ce676566124615a0/troia-server/src/main/java/com/datascience/serialization/json/DataJSON.java][deserialize][2] = -> TRY {  -> return new Worker<T>(element.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/ktoso/janbanery/blob/fbc04561e035661af23bc08f3c93242e893ebed5/janbanery-core/src/main/java/pl/project13/janbanery/config/gson/GsonFactory.java][deserialize][2] = -> TRY {  -> jsonName=json.getAsString()@ -> return Permission.fromJsonName(jsonName,)@ } CATCH(JsonParseException) {}
results[https://github.com/mperdikeas/esavo-reg-II/blob/d637e2ca773ccc9731ed6e835a3e064ad55da9bb/playground/json/01/src/FooMain.java][deserialize][5] = -> TRY {  -> s=json.getAsString()@ -> x=Integer.valueOf(s,)@ } CATCH(JsonParseException) {}
results[https://github.com/ieb/sparsemapcontent/blob/ecd8cff19e5e73aba4e908ccd3f4bd40b6d0d54a/extensions/integration/src/main/java/uk/co/tfd/sm/integration/JsonTestUtils.java][toResponseSet][1] = -> result=Sets.newHashSet()@ -> LOOP { -> je=responseArray.get(i,)@i<responseArray.size() -> result.add(je.getAsString(),)@ }
results[https://github.com/ubee/funf-open-sensing-framework/blob/336e92475a6629a2a64295ea8c7f369e5bd9d4eb/src/edu/mit/media/funf/probe/ProbeDataRequest.java][<init>][2] = -> nameEl=requestJsonObject.get(PROBE_NAME,)@ -> IF { -> throw new RuntimeException("Probe data request json structure must specify a 'probeName'.",)@JsonNull.INSTANCE==nameEl } -> this.probeName=nameEl.getAsString()@!(JsonNull.INSTANCE==nameEl) -> this.probeClass=FactoryUtils.getProbeClass(probeName,)@!(JsonNull.INSTANCE==nameEl)
results[https://github.com/eatnumber1/google-gson/blob/480d9fd65b0368569ca4fe5b981fd836d83456b1/src/main/java/com/google/gson/DefaultTypeAdapters.java][deserialize][9] = -> TRY {  -> return UUID.fromString(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/contextfw/contextfw/blob/a07aa2a087959790fcda17f53448376638a05ac9/devel/web/web-application/src/main/java/net/contextfw/web/application/converter/AttributeJsonSerializer.java][deserialize][1] = -> TRY {  -> return deserialize(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/ipeirotis/Troia-Server/blob/557db120f680a4ccbb4d8acbec6ea43b4415d4a4/core/src/main/java/com/datascience/serialization/json/DataJSON.java][deserialize][1] = -> TRY {  -> return new Worker(element.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/cloudsmith/geppetto/blob/ee484def96f6b96df5cd26476b4dd0bc82768212/com.puppetlabs.geppetto.forge.api/src/main/java/com/puppetlabs/geppetto/forge/client/GsonModule.java][deserialize][2] = -> TRY {  -> return stringToDate(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/3wks/thundr/blob/abbe68285ae9d9c5381a3f46b843b0309a5e57b7/src/main/java/com/threewks/thundr/json/DateTimeZoneTypeConvertor.java][deserialize][1] = -> TRY {  -> return DateTimeZone.forID(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/cloudsmith/geppetto/blob/412eb5a8aec4ed34d977a49a90149b57568d492a/org.cloudsmith.geppetto.forge.api/src/main/java/org/cloudsmith/geppetto/forge/client/GsonModule.java][deserialize][2] = -> TRY {  -> return Version.create(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/CyanogenMod/android_external_gson/blob/3907330cb7c39552521ec110e01aae2529359a10/src/test/java/com/google/gson/functional/CustomSerializerTest.java][testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances][6] = -> LOOP { -> serializerKey=element.getAsJsonObject().get(Base.SERIALIZER_KEY,)@ -> assertEquals(SubSerializer.NAME,serializerKey.getAsString(),)@ }
results[https://github.com/caelum/vraptor4/blob/cf46c58546c722bcaa9a17b8e06d7a580510609a/vraptor-core/src/main/java/br/com/caelum/vraptor/deserialization/gson/CalendarDeserializer.java][deserialize][5] = -> TRY {  -> return DatatypeConverter.parseDate(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/helpscout/helpscout-api-java/blob/d85accb2526a784cb6effbc8b980af06ca54e5a9/src/main/java/net/helpscout/api/adapters/ThreadStateAdapter.java][deserialize][6] = -> TRY {  -> return ThreadState.findByKey(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/ktoso/janbanery/blob/836273bdc92240cd58df460243eaf8646bfa875a/src/main/java/pl/project13/janbanery/config/GsonFactory.java][deserialize][3] = -> TRY {  -> dateString=json.getAsString()@ -> return deserializeIso8601DateTime(dateString,)@ } CATCH(JsonParseException) {}
results[https://github.com/MassiveCraft/Factions/blob/936c28d5a9911d2f0b5a0dbdf292ef54754164e2/src/com/massivecraft/factions/adapters/RelTypeAdapter.java][deserialize][10] = -> TRY {  -> return Rel.parse(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/0xdata/h2o/blob/28add6ef9e83aa2d20ae8104eeab8c5bc16659a3/src/main/java/water/api/RequestBuilders.java][trunc][1] = -> je=obj.get(fld,)@ -> IF { -> return "<br>"@je==null||je instanceof JsonNull } -> s1=je.getAsString()@!(je==null||je instanceof JsonNull) -> s2=(s1.length()>n)?s1.substring(0,n,):s1@!(je==null||je instanceof JsonNull)
results[https://github.com/ybonnel/gson/blob/f6abc6e163ea663e619c083d61a6b94dd60a950c/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java][deserialize][4] = -> TRY {  -> return new StringBuffer(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/helpscout/helpscout-api-java/blob/1d75aac8e8656d8b7dfcff38087209a9c590ae80/src/main/java/net/helpscout/api/adapters/ThreadTypeAdapter.java][deserialize][4] = -> TRY {  -> return ThreadType.findByLabel(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/eclipse/recommenders/blob/1c3febec4f71e08914267a22ef2dfed9142c09da/plugins/org.eclipse.recommenders.utils.gson/src/org/eclipse/recommenders/utils/gson/GsonFieldNameDeserializer.java][deserialize][3] = -> TRY {  -> identifier=json.getAsString()@ -> return VmFieldName.get(identifier,)@ } CATCH(JsonParseException) {}
results[https://github.com/antme/pms/blob/e27d4e6b955ab0cf144bb5e7d6b8a4c7627ad016/service/src/main/java/com/pms/service/util/EcUtil.java][deserialize][2] = -> TRY {  -> return DateUtil.getDateTime(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/TMCee/TMCeeTestRunner/blob/7cc7c595c281a0839027adf66bf9fcd1b7136d4e/src/fi/helsinki/cs/tmc/testrunner/StackTraceSerializer.java][getStringOrNull][2] = -> e=obj.get(property,)@ -> IF { -> return e.getAsString()@e!=null&&!(e.isJsonNull()) } ELSE { -> return null@!(e!=null&&!(e.isJsonNull())) }
results[https://github.com/nterry/jclouds/blob/dcc97a53877398878cf0834475ff91c345c4f843/core/src/main/java/org/jclouds/json/config/GsonModule.java][deserialize][1] = -> TRY {  -> return CryptoStreams.hex(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/fathomdb/cloud/blob/a979d1ef211f9c520921afdada2719115903893c/autonomous/auto-conf-openstack/src/main/java/io/fathom/auto/openstack/metadata/Metadata.java][findMeta][1] = -> IF { -> return null@meta==null||!(meta instanceof JsonObject) } -> element=(JsonObject) meta.get(key,)@!(meta==null||!(meta instanceof JsonObject)) -> IF { -> return null@!(meta==null||!(meta instanceof JsonObject)) && element==null } -> return element.getAsString()@!(meta==null||!(meta instanceof JsonObject)) && !(element==null)
results[https://github.com/ktoso/janbanery/blob/fbc04561e035661af23bc08f3c93242e893ebed5/janbanery-core/src/main/java/pl/project13/janbanery/config/gson/GsonFactory.java][deserialize][2] = -> TRY {  -> dateString=json.getAsString()@ -> dateTime=dateFormatter.parseDateTime(dateString,)@ } CATCH(JsonParseException) {}
results[https://github.com/Zipwhip/zipwhip-api/blob/db09a3c40e693d0f290721166815f606327d9a9a/src/main/java/com/zipwhip/gson/GsonUtil.java][getString][2] = -> IF { -> return null@isNull(element,) } -> IF { -> return element.getAsString()@!(isNull(element,)) && element instanceof JsonPrimitive } -> return element.toString()@!(element instanceof JsonPrimitive) && !(isNull(element,))
results[https://github.com/eclipse/stardust.ui.web/blob/b04014956ea123d48bfb21e8f0ead85a000d44ce/web-modeler/src/main/java/org/eclipse/stardust/ui/web/modeler/marshaling/GsonUtils.java][safeGetAsString][4] = -> IF { -> member=jsonObject.get(memberName,)@jsonObject.has(memberName,) -> IF { -> return member.getAsString()@jsonObject.has(memberName,) && member.isJsonPrimitive() } }
results[https://github.com/ctron/org.openscada.atlantis/blob/c485a0aea3c41a73a11dad87b57d20860d6c8214/org.openscada.ae.server.storage.postgres/src/org/openscada/ae/server/storage/postgres/EventConverter.java][deserialize][1] = -> TRY {  -> return VariantEditor.toVariant(jsonElement.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/eclipse/recommenders/blob/1c3febec4f71e08914267a22ef2dfed9142c09da/plugins/org.eclipse.recommenders.utils.gson/src/org/eclipse/recommenders/utils/gson/GsonFileDeserializer.java][deserialize][1] = -> TRY {  -> path=json.getAsString()@ -> return new File(path,)@ } CATCH(JsonParseException) {}
results[https://github.com/nterry/jclouds/blob/7c2b014f258894035c672bda3814b627ef76da8f/core/src/main/java/org/jclouds/http/functions/config/ParserModule.java][deserialize][3] = -> TRY {  -> return encryptionService.fromHex(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/signed/sandboxes/blob/159356ef7d452a6d55dc0ef1690c2656c28dff5c/sandbox-gson/src/test/java/gson/WrapStringInDto_Test.java][deserialize][1] = -> TRY {  -> return new StringWrapper(json.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/gem/openquake-packages/blob/ccb8352d4113d30aa09bc3dbee5a94be9310dfb3/java-oq/src/org/gem/TectonicRegionTypeDeserializer.java][deserialize][1] = -> TRY {  -> return TectonicRegionType.getTypeForName(arg0.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/thucydides-webtests/thucydides/blob/8a80df61b4cfb7524dda7fe1489e1aa0c53fadeb/thucydides-core/src/main/java/net/thucydides/core/reports/json/TestOutcomeSerializer.java][addQualifierIfPresent][1] = -> qualifierField=outcomeJsonObject.get(QUALIFIER_FIELD,)@ -> IF { -> testOutcome=testOutcome.withQualifier(unescape(qualifierField.getAsString(),),)@qualifierField!=null }
results[https://github.com/teotigraphix/CausticSDK/blob/9d0ebbb0867103256a17b4c44ef0d7513a78d2c2/Caustk/src/com/teotigraphix/caustk/node/CaustkFactory.java][deserialize][2] = -> TRY {  -> typeElement=jsonObject.get("type",)@ -> EffectType.valueOf(typeElement.getAsString(),)@ } CATCH(JsonParseException) {}
results[https://github.com/anathema/anathema/blob/1c1619e614ede0d741a80f1686394fc677e5d396/Character_Equipment_Impl/src/net/sf/anathema/character/equipment/impl/item/model/gson/StatsAdapter.java][deserialize][1] = -> TRY {  -> type=object.get("type",)@ -> typeAsString=type.getAsString()@ -> classToBuild=classesToTypes.get(typeAsString,)@ } CATCH(JsonParseException) {}
results[https://github.com/Su-per-b/LearnHPB-middleware/blob/62c41871d0332670e13d693423e9ec5d9e499470/eclipseWorkspace/FMUwrapper/src/main/java/com/sri/straylight/fmuWrapper/serialization/AdapterBase.java][run][1] = -> TRY {  -> jsonElement=jsonObject_.get(jsonFieldName_,)@ -> fieldValue=jsonElement.getAsString()@ -> javaField_.set(destObject_,fieldValue,)@ } CATCH(IllegalArgumentException,IllegalAccessException) {}
results[https://github.com/animoto/animoto_api_client_java/blob/dd3321ed19a2b010fed95bf3abf6ea57273afdab/src/main/java/com/animoto/api/gson/deserializer/ResolutionDeserializer.java][deserialize][4] = -> TRY {  -> value=json.getAsString()@ -> value=value.toUpperCase()@ -> return Resolution.valueOf(value,)@ } CATCH(JsonParseException) {}
results[https://github.com/Aldeon/Aldeon/blob/4173391b42ffb0c6058a81135765a5b8fb208978/src/main/java/org/aldeon/networking/conversion/ResponseClassMapper.java][getClass][1] = -> IF { -> typeElement=jsonObject.get(TYPE_FIELD,)@!(object instanceof JsonObject) -> IF { -> action=typeElement.getAsString()@typeElement!=null && !(object instanceof JsonObject) -> return classMap.get(action,)@object instanceof JsonObject && typeElement!=null } }
results[https://github.com/SAP/cloud-sfsf-benefits-ext/blob/d9ef2436b8be3d977bdccbedf09b2ce7a78ac958/com.sap.benefits.management/src/com/sap/benefits/management/api/utils/DateTimeAdapter.java][deserialize][2] = -> TRY { -> return dateFormat.parse(jsonElement.getAsString(),)@ } CATCH(ParseException) { -> throw new JsonParseException(e,)@ }
results[https://github.com/SzaszZsigmondAttila/mol-liga/blob/4fe22c0fc4234c1132309db398322aedfe2e9c76/commons/utils/src/main/java/ro/szzsa/molliga/utils/Marshaller.java][typeForName][2] = -> TRY { -> return Class.forName(typeElem.getAsString(),)@ } CATCH(ClassNotFoundException) { -> throw new JsonParseException(e,)@ }
results[https://github.com/jclouds/legacy-jclouds/blob/7c2b014f258894035c672bda3814b627ef76da8f/core/src/main/java/org/jclouds/http/functions/config/ParserModule.java][deserialize][1] = -> TRY {  -> return Bytes.asList(encryptionService.fromHex(json.getAsString(),),)@ } CATCH(JsonParseException) {}
results[https://github.com/CodingBadgers/bFundamentals/blob/6ac985676bc5a33dfb32f71d4938b0cdc80f590d/bFundamentals/src/uk/codingbadgers/bFundamentals/serialization/AchievementSerializer.java][deserialize][1] = -> TRY {  -> return (json.isJsonPrimitive())?getAchievement(json.getAsString(),):null@ } CATCH(JsonParseException) {}
results[https://github.com/alanreid/Thor/blob/1af600f92dad7bf29eb778202f2bec28fc442683/deployments/ROOT.war/WEB-INF/application/modules/securesocial-0.2.4/app/securesocial/provider/providers/LinkedInProvider.java][fillProfile][2] = -> IF { -> throw new AuthenticationException()@me.get(ERROR_CODE,)!=null } -> picture=me.get(PICTURE_URL,)@!(me.get(ERROR_CODE,)!=null) -> IF { -> user.avatarUrl=picture.getAsString()@picture!=null && !(me.get(ERROR_CODE,)!=null) }
results[https://github.com/eclipse/egit-github/blob/e4600b7e1a754d40f965428c2b09ede7f49051a5/org.eclipse.egit.github.core.tests/src/org/eclipse/egit/github/core/tests/DateFormatterTest.java][serializeDeserialize][1] = -> element=formatter.serialize(date,null,null,)@ -> assertNotNull(element,)@ -> value=element.getAsString()@ -> assertNotNull(value,)@ -> assertTrue(value.length()>0,)@ -> out=formatter.deserialize(element,null,null,)@
results[https://github.com/credentials/irma_web_service/blob/82e18da7f7c0d5ac7c96713ddf20d5a8bbe9bbcc/src/org/irmacard/web/restapi/util/ResponseAPDUDeserializer.java][deserialize][1] = -> TRY {  -> return new ResponseAPDU(Hex.hexStringToBytes(json.getAsString(),),)@ } CATCH(JsonParseException) {}
results[https://github.com/zhouxiaoxiaoxujian/gson/blob/82e5a9b996feee72dbcfb7ea941f0444feec2010/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java][deserialize][1] = -> TRY {  -> typeOfId=parameterizedType.getActualTypeArguments()[0]@!(!(typeOfT instanceof ParameterizedType)) -> return new Id(json.getAsString(),typeOfId,)@!(!(typeOfT instanceof ParameterizedType)) } CATCH(JsonParseException) {}
results[https://github.com/motech/care-reporting/blob/2928b5508d7bf0c3efcd521c6494a6f6bda92cb0/commcare-migration/src/main/java/org/motechproject/care/reporting/migration/common/ResponseParser.java][constructPage][1] = -> IF { -> return null@paginationOption.isJsonNull() } -> url=paginationOption.getAsString()@!(paginationOption.isJsonNull()) -> limit=Integer.parseInt(getOptionFromUrl(url,"limit",),)@!(paginationOption.isJsonNull()) -> offset=Integer.parseInt(getOptionFromUrl(url,"offset",),)@!(paginationOption.isJsonNull())
results[https://github.com/0xdata/h2o/blob/a3cc974f063be122c77a65871c253394061c570f/src/water/api/RequestBuilders.java][elementToString][1] = -> str=element.getAsString()@ -> TRY { -> key=URLEncoder.encode(str,"UTF-8",)@ } CATCH(UnsupportedEncodingException) { -> throw new RuntimeException(e,)@ }
