results[https://github.com/Zipwhip/zipwhip-api/blob/db09a3c40e693d0f290721166815f606327d9a9a/src/main/java/com/zipwhip/gson/GsonUtil.java][getString] = -> IF { -> return null@isNull(element,) } -> IF { -> return element.getAsString()@!(isNull(element,)) && element instanceof JsonPrimitive } -> return element.toString()@!(isNull(element,)) && !(element instanceof JsonPrimitive)
results[https://github.com/Zipwhip/zipwhip-api/blob/681e0795f2e10cb90ab04a7afca4f2f70b6bf5b0/src/main/java/com/zipwhip/api/signals/dto/GsonUtil.java][getString] = -> IF { -> return null@isNull(element,) } -> IF { -> return element.getAsString()@!(isNull(element,)) && element instanceof JsonPrimitive } -> return element.toString()@!(isNull(element,)) && !(element instanceof JsonPrimitive)
results[https://github.com/frostwire/frostwire-desktop/blob/90eacf1ef657a5664fd9b5e2e84d819091f9ea3c/lib/jars-src/google-gson-1.4/src/main/java/com/google/gson/DefaultTypeAdapters.java][deserialize] = -> IF { -> throw new JsonParseException("The date should be a string value",)@!(json instanceof JsonPrimitive) } -> TRY { -> format@!(!(json instanceof JsonPrimitive)) -> return format.parse(json.getAsString(),)@!(!(json instanceof JsonPrimitive)) } CATCH { }
results[https://github.com/MassiveCraft/Vampire/blob/9b122e337fe6c17a3cceaeebd12f9738fa204b7f/src/com/bukkit/mcteam/gson/DefaultTypeAdapters.java][deserialize] = -> IF { -> throw new JsonParseException("The date should be a string value",)@!(json instanceof JsonPrimitive) } -> TRY { -> format@!(!(json instanceof JsonPrimitive)) -> return format.parse(json.getAsString(),)@!(!(json instanceof JsonPrimitive)) } CATCH { }
results[https://github.com/eatnumber1/google-gson/blob/480d9fd65b0368569ca4fe5b981fd836d83456b1/src/main/java/com/google/gson/DefaultTypeAdapters.java][deserialize] = -> IF { -> throw new JsonParseException("The date should be a string value",)@!(json instanceof JsonPrimitive) } -> TRY { -> format@!(!(json instanceof JsonPrimitive)) -> date=format.parse(json.getAsString(),)@!(!(json instanceof JsonPrimitive)) } CATCH { }
results[https://github.com/zhouxiaoxiaoxujian/gson/blob/c4c18144becd75c1a3091e11ddc2c11571c9adf1/src/main/java/com/google/gson/typeadapters/DateTypeAdapter.java][deserialize] = -> IF { -> throw new JsonParseException("The date should be a string value",)@!(json instanceof JsonPrimitive) } -> TRY { -> return format.parse(json.getAsString(),)@!(!(json instanceof JsonPrimitive)) } CATCH { }
results[https://github.com/peixere/gotom/blob/4011c772fabd4f79150f9d3fea354c3388e1bed9/core/cn.gotom.sso/src/main/java/cn/gotom/sso/util/GsonTimestampTypeAdapter.java][deserialize] = -> IF { -> throw new JsonParseException("The date should be a string value",)@!(json instanceof JsonPrimitive) } -> TRY { -> date=dateFormat.parse(json.getAsString(),)@!(!(json instanceof JsonPrimitive)) } CATCH { }
results[https://github.com/Governance/gadget-server/blob/f0e74a6d4f3124f037af434143e0fb00c28ab65b/gadget-web/src/main/java/org/savara/gadget/web/server/SQLDateTypeAdapter.java][deserialize] = -> IF { -> throw new JsonParseException("The date should be a string value",)@!(json instanceof JsonPrimitive) } -> TRY { -> return format.parse(json.getAsString(),)@!(!(json instanceof JsonPrimitive)) } CATCH { }
results[https://github.com/MassiveCraft/Vampire/blob/9b122e337fe6c17a3cceaeebd12f9738fa204b7f/src/com/bukkit/mcteam/gson/DefaultTypeAdapters.java][deserialize] = -> IF { -> throw new JsonParseException("The date should be a string value",)@!(json instanceof JsonPrimitive) } -> TRY { -> format@!(!(json instanceof JsonPrimitive)) -> date=format.parse(json.getAsString(),)@!(!(json instanceof JsonPrimitive)) } CATCH { }
results[https://github.com/MassiveCraft/Factions/blob/986461a0982caa2acaadc30fa11bf57c536313c7/src/com/bukkit/mcteam/gson/DefaultTypeAdapters.java][deserialize] = -> IF { -> throw new JsonParseException("The date should be a string value",)@!(json instanceof JsonPrimitive) } -> TRY { -> format@!(!(json instanceof JsonPrimitive)) -> return format.parse(json.getAsString(),)@!(!(json instanceof JsonPrimitive)) } CATCH { }
