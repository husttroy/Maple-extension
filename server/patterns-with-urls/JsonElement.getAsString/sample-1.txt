results[https://github.com/zhouxiaoxiaoxujian/gson/blob/85818ad051494436015b67b25ee89d0bc1536b2f/gson/src/test/java/com/google/gson/JsonObjectTest.java][testAddingStringProperties][6] = -> TRY {  -> jsonObj.addProperty(propertyName,value,)@ -> jsonElement=jsonObj.get(propertyName,)@ -> assertNotNull(jsonElement,)@ -> assertEquals(value,jsonElement.getAsString(),)@ } CATCH(Exception) {}
results[https://github.com/ybonnel/gson/blob/0dc8af452b6a45ff214b75cbf4fcf85f685fb6c7/gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java][testStringLongSerialization][6] = -> TRY {  -> element=LongSerializationPolicy.STRING.serialize(1556L,)@ -> assertTrue(element.isJsonPrimitive(),)@ -> jsonPrimitive=element.getAsJsonPrimitive()@ -> assertEquals("1556",element.getAsString(),)@ } CATCH(Exception) {}
results[https://github.com/BMintern/gson/blob/b352ab721638fa7ded254884fe7b62cee04d7ad5/src/test/java/com/google/gson/JsonObjectTest.java][testAddingCharacterProperties][6] = -> TRY {  -> jsonObj.addProperty(propertyName,value,)@ -> jsonElement=jsonObj.get(propertyName,)@ -> assertNotNull(jsonElement,)@ -> assertEquals(String.valueOf(value,),jsonElement.getAsString(),)@ -> assertEquals(value,jsonElement.getAsCharacter(),)@ } CATCH(Exception) {}
results[https://github.com/Aleks-Ya/hh-java-api/blob/668eae99a19f36240d8ae56961ea6fc6f00b72c5/src/ru/yaal/project/hhapi/parser/deserializer/SalaryDeserializer.java][deserialize][2] = -> TRY { -> currencyElement=object.get("currency",)@ -> IF { -> currencyId=currencyElement.getAsString()@currencyElement.isJsonPrimitive() -> currency=Currency.CURRENCIES.getById(currencyId,)@ } } CATCH(Exception) { -> LOG.error(e.getMessage(),e,)@ -> throw new JsonParseException(e,)@ }
results[https://github.com/ezterry/TTRSS_android_ezterry/blob/a1cb776a785a6c06817142cb49a607543d515b4d/src/name/devnull/ttrss/FeedsFragment.java][onPostExecute][2] = -> IF { -> TRY { -> iconsUrl=result.getAsJsonObject().get("icons_dir",)@result!=null -> IF { -> iconsStr=iconsUrl.getAsString()@iconsUrl!=null -> IF { -> baseUrl=m_prefs.getString("ttrss_url","",)+"/"+iconsStr@!(iconsStr.contains("://",)) } } } CATCH(Exception) { -> Log.d(TAG,"Error receiving icons configuration",)@ -> e.printStackTrace()@ } }
results[https://github.com/gothfox/Tiny-Tiny-RSS-for-Honeycomb/blob/f0a29f9bcba46c09a750f19b715a730fcc74eb02/src/org/fox/ttrss/FeedsFragment.java][onPostExecute][1] = -> IF { -> TRY { -> iconsUrl=result.getAsJsonObject().get("icons_dir",)@result!=null -> IF { -> iconsStr=iconsUrl.getAsString()@iconsUrl!=null -> IF { -> baseUrl=m_prefs.getString("ttrss_url","",).trim()+"/"+iconsStr@!(iconsStr.contains("://",)) } } } CATCH(Exception) { -> Log.d(TAG,"Error receiving icons configuration",)@ -> e.printStackTrace()@ } }
results[https://github.com/impetus-opensource/Kundera/blob/123a84661596222974eeaa79b30de0d44491277a/src/kundera-couchdb/src/main/java/com/impetus/client/couchdb/CouchDBClient.java][getColumnsById][1] = -> foreignKeys=new ArrayList<E>()@ -> TRY { -> LOOP { -> value=element.getAsJsonObject().get("value",).getAsJsonObject().get(inverseJoinColumnName,)@ -> IF { -> foreignKeys.add((E) PropertyAccessorHelper.fromSourceToTargetClass(columnJavaType,String.class,value.getAsString(),),)@value!=null } } } CATCH(Exception) { -> log.error("Error while fetching column by id {}, Caused by {}.",pKeyColumnValue,e,)@ -> throw new KunderaException(e,)@ } FINALLY { -> closeContent(response,)@ }
results[https://github.com/impetus-opensource/Kundera/blob/123a84661596222974eeaa79b30de0d44491277a/src/kundera-couchdb/src/main/java/com/impetus/client/couchdb/CouchDBClient.java][deleteByColumn][1] = -> TRY { -> uri=new URI(CouchDBConstants.PROTOCOL,null,httpHost.getHostName(),httpHost.getPort(),CouchDBConstants.URL_SAPRATOR+schemaName.toLowerCase()+CouchDBConstants.URL_SAPRATOR+CouchDBConstants.DESIGN+tableName+CouchDBConstants.VIEW+columnName,q,null,)@ -> response=httpClient.execute(get,)@ -> content=response.getEntity().getContent()@ -> closeContent(response,)@ -> LOOP { -> jsonObject=element.getAsJsonObject().get("value",).getAsJsonObject()@ -> pkey=jsonObject.get("_id",)@ -> onDelete(schemaName,pkey.getAsString(),response,jsonObject,)@ } } CATCH(Exception) { -> log.error("Error while deleting row by column where column name is "+columnName+" and column value is {}, Caused by {}.",columnValue,e,)@ -> throw new KunderaException(e,)@ } FINALLY { -> closeContent(response,)@ }
results[https://github.com/impetus-opensource/Kundera/blob/123a84661596222974eeaa79b30de0d44491277a/src/kundera-couchdb/src/main/java/com/impetus/client/couchdb/CouchDBClient.java][findIdsByColumn][1] = -> foreignKeys=new ArrayList()@ -> m=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,entityClazz,)@ -> TRY { -> IF { -> return foreignKeys.toArray()@ } -> LOOP { -> value=element.getAsJsonObject().get("value",).getAsJsonObject().get(pKeyName,)@ -> IF { -> foreignKeys.add(PropertyAccessorHelper.fromSourceToTargetClass(m.getIdAttribute().getBindableJavaType(),String.class,value.getAsString(),),)@value!=null } } } CATCH(Exception) { -> log.error("Error while fetching ids for column where column name is"+columnName+" and column value is {} , Caused by {}.",columnValue,e,)@ -> throw new KunderaException(e,)@ } FINALLY { -> closeContent(response,)@ } -> return foreignKeys.toArray()@
results[https://github.com/0xdata/h2o/blob/990bfbba5fdb316db3381f50746130416480a874/src/main/java/water/persist/PersistHdfs.java][addFolder][1] = -> TRY { -> IF { -> return @fs==null } -> LOOP { } ELSE { -> IF { -> IF { -> throw new RuntimeException("Missing version",)@!(fs==null) && v==null && pfs.getName().endsWith(Extensions.JSON,) && fs.listStatus(p,) } -> type=json.get(Constants.TYPE,)@!(fs==null) && !(fs.listStatus(p,)) && !(v==null) && !(pfs.getName().endsWith(Extensions.JSON,)) -> IF { -> throw new RuntimeException("Missing type",)@!(fs==null) && type==null && !(v==null) && pfs.getName().endsWith(Extensions.JSON,) && fs.listStatus(p,) } -> c=Class.forName(type.getAsString(),)@!(fs==null) && !(fs.listStatus(p,)) && !(v==null) && !(pfs.getName().endsWith(Extensions.JSON,)) && !(type==null) -> model=(OldModel) c.newInstance()@!(fs==null) && !(fs.listStatus(p,)) && !(v==null) && !(pfs.getName().endsWith(Extensions.JSON,)) && !(type==null) } } } CATCH(Exception) { -> Log.err(e,)@ -> o=new JsonObject()@ -> o.addProperty(Constants.FILE,p.toString(),)@ -> o.addProperty(Constants.ERROR,e.getMessage(),)@ -> failed.add(o,)@ }
results[https://github.com/ybonnel/gson/blob/ec7307e10dbcfcd33f79f274f168798478031b81/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java][testProperSerialization][2] = -> TRY {  -> expected=dateSerializer.serialize(now,Date.class,null,)@ -> actual=wrappedJsonSerializer.serialize(now,Date.class,null,)@ -> assertEquals(expected.getAsString(),actual.getAsString(),)@ } CATCH(Exception) {}
results[https://github.com/JacenLakiir/Vooga/blob/47ea954f9b574f4f7078f8a300a4fa3ebb700e89/src/core/keyconfiguration/KeyAdapter.java][deserialize][2] = -> TRY {  -> TRY { -> keyTypeElement=keyObject.get(keyElementName,)@ -> keyInstanceClass=keyRegistry.get(keyTypeElement.getAsString(),)@ -> key=gson.fromJson(json,keyInstanceClass,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ } } CATCH(JsonParseException) {}
results[https://github.com/Expensify/WindowsPhoneTestFramework/blob/6dd2c5b258cf9d8402208d9e07719e7170df11f8/Client/Android.AutomationClient/src/com/expensify/testframework/utils/CommandDeserializer.java][deserialize][1] = -> TRY {  -> TRY { -> commandTypeElement=commandObject.get(commandElementName,)@ -> commandInstanceClass=commandRegistry.get(commandTypeElement.getAsString(),)@ -> command=gson.fromJson(json,commandInstanceClass,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ } } CATCH(JsonParseException) {}
results[https://github.com/Th0ra/Naamakahvi/blob/f8135d606a76aff4fe23c8116d19a1dfb0febf03/Naamakahvi-parent/client/src/main/java/naamakahvi/naamakahviclient/Client.java][identifyImage][1] = -> TRY {  -> TRY { -> username=jsonResponse.getAsJsonObject().get("username",)@ -> return (username.isJsonNull())?null:username.getAsString()@ } CATCH(Exception) { -> throw new AuthenticationException(ex.toString(),)@ } } CATCH(ClientException) {}
results[https://github.com/IKANOW/Infinit.e/blob/e4687613a6245c6c3eec82b0ba26f15ff6edd2a7/core/infinit.e.data_model/src/com/ikanow/infinit/e/data_model/api/BaseApiPojo.java][deserialize][1] = -> TRY {  -> TRY { -> d=_format2.parse(json.getAsString(),)@ } CATCH(Exception) { -> TRY { -> d=_format.parse(json.getAsString(),)@ } } } CATCH(JsonParseException) {}
results[https://github.com/cubing/tnoodle/blob/463e118abd92537e11333590b41119c91113dff7/webscrambles/src/net/gnehzr/tnoodle/server/webscrambles/ScrambleViewHandler.java][deserialize][1] = -> TRY {  -> TRY { -> scramblerName=json.getAsString()@ -> lazyScrambler=scramblers.get(scramblerName,)@ -> IF { -> throw new JsonParseException(scramblerName+" not found in: "+scramblers.keySet(),)@lazyScrambler==null } } CATCH(Exception) { -> throw new JsonParseException(e,)@ } } CATCH(JsonParseException) {}
results[https://github.com/IKANOW/Infinit.e/blob/e4687613a6245c6c3eec82b0ba26f15ff6edd2a7/core/infinit.e.data_model/src/com/ikanow/infinit/e/data_model/api/BaseApiPojo.java][deserialize][2] = -> TRY {  -> IF { -> return new ObjectId(json.getAsString(),)@json.isJsonPrimitive() } ELSE { -> TRY { -> return new ObjectId(json.getAsJsonObject().get("$oid",).getAsString(),)@!(json.isJsonPrimitive()) } CATCH(Exception) { -> return null@!(json.isJsonPrimitive()) } } } CATCH(JsonParseException) {}
results[https://github.com/IKANOW/Infinit.e/blob/a33540980ff8d3065c33e0ebf85b7582dfc365b2/core/infinit.e.data_model/src/com/ikanow/infinit/e/data_model/store/config/source/SourcePojoSubstitutionDbMap.java][deserialize][1] = -> TRY {  -> ownerIdJson=json.getAsJsonObject().get(SourcePojo.ownerId_,)@ -> IF { -> TRY { -> ownerIdStr=ownerIdJson.getAsString()@null!=ownerIdJson -> ownerId=new ObjectId(ownerIdStr,)@!(null!=ownerIdJson) } CATCH(Exception) { -> TRY { -> ownerIdStr=ownerIdJson.getAsJsonObject().get("$oid",).getAsString()@null!=ownerIdJson } } } } CATCH(JsonParseException) {}
results[https://github.com/MassiveCraft/Factions/blob/f2b24003bf351c049943e384c60360fb95bc00c9/src/com/massivecraft/factions/adapters/TerritoryAccessAdapter.java][deserialize][3] = -> TRY {  -> TRY { -> IF { -> factionID=json.getAsString()@json.isJsonPrimitive() -> return new TerritoryAccess(factionID,)@json.isJsonPrimitive() } -> obj=json.getAsJsonObject()@!(json.isJsonPrimitive()) -> IF { -> return null@obj==null && !(json.isJsonPrimitive()) } -> factionID=obj.get(ID,).getAsString()@!(json.isJsonPrimitive()) && !(obj==null) -> access=new TerritoryAccess(factionID,)@!(json.isJsonPrimitive()) && !(obj==null) } CATCH(Exception) { -> ex.printStackTrace()@ -> Factions.get().log(Level.WARNING,"Error encountered while deserializing TerritoryAccess data.",)@ } } CATCH(JsonParseException) {}
results[https://github.com/nterry/jclouds/blob/9e94fc6fc99bf90b4ebce071e5f0c06bafec4702/core/src/main/java/org/jclouds/json/internal/EnumTypeAdapterThatReturnsFromValue.java][deserialize][1] = -> TRY {  -> TRY { -> return (T) Enum.valueOf((Class<T>) classOfT,json.getAsString(),)@ } CATCH(IllegalArgumentException) { -> converter=classToConvert.get(classOfT,)@ -> IF { -> TRY { -> return (T) converter.invoke(null,json.getAsString(),)@converter!=null } CATCH(Exception) { -> throw e@converter!=null } } ELSE { -> throw e@!(converter!=null) } } } CATCH(JsonParseException) {}
results[https://github.com/IKANOW/Infinit.e/blob/e4687613a6245c6c3eec82b0ba26f15ff6edd2a7/core/infinit.e.data_model/src/com/ikanow/infinit/e/data_model/store/BaseDbPojo.java][deserialize][1] = -> TRY {  -> IF { -> TRY { -> d=_format2.parse(json.getAsString(),)@json.isJsonPrimitive() } CATCH(Exception) { -> TRY { -> d=_format.parse(json.getAsString(),)@json.isJsonPrimitive() } } } ELSE { -> TRY { -> d=_format.parse(json.getAsJsonObject().get("$date",).getAsString(),)@!(json.isJsonPrimitive()) } } } CATCH(JsonParseException) {}
results[https://github.com/dakusui/symfonion/blob/7d85ce77d0a36130476288d86f23bf0681efa892/src/main/java/net/sourceforge/symfonion/misc/Song.java][main][1] = -> TRY {  -> LOOP { -> cur=json.get(i,)@i<json.size() -> System.out.println(cur,)@ -> IF { -> notes=cur.getAsString()@cur.isJsonPrimitive() } ELSE { -> IF { -> arr=cur.getAsJsonArray()@!(cur.isJsonPrimitive()) && cur.isJsonArray() -> IF { -> notes=arr.get(0,).getAsString()@ } } ELSE { -> obj=cur.getAsJsonObject()@!(cur.isJsonPrimitive()) && !(cur.isJsonArray()) -> notes=JsonUtil.asString(obj,"$notes",)@ } } -> stroke=new Stroke(notes,length,gate,)@ } } CATCH(Exception) {}
results[https://github.com/commoncrawl/commoncrawl-crawler/blob/47b446d9342425cb7a4aa55ad62edc5bd794efb4/src/org/commoncrawl/mapred/ec2/postprocess/linkCollector/LinkDataResharder.java][emitLinksFromHTMLContent][2] = -> TRY {  -> TRY { -> IF { -> return @contentObject==null } ELSE { } ELSE { -> LOOP { -> href=linkObject.get("href",)@!(contentObject==null) -> IF { -> fp=URLUtils.getURLFPV2FromURL(href.getAsString(),)@!(contentObject==null) && href!=null } ELSE { -> IF { -> key=LinkKey.generateLinkKey(fp,LinkKey.Type.KEY_TYPE_HTML_LINK,md5Hash,)@!(contentObject==null) && !(hashSet.contains(fp.getUrlHash(),)) && !(fp==null) -> hashSet.add(fp.getUrlHash(),)@!(contentObject==null) && !(hashSet.contains(fp.getUrlHash(),)) && !(fp==null) } } } } } CATCH(Exception) { -> LOG.error(CCStringUtils.stringifyException(e,),)@ -> reporter.incrCounter(Counters.FAILED_TO_GET_LINKS_FROM_HTML,1,)@ } } CATCH(IOException) {}
results[https://github.com/messo/jqwicket/blob/f49ba5ea6c305fb35247397d12b7224098d506a2/jqwicket/src/main/java/com/google/code/jqwicket/ui/fullcalendar/FullCalendar.java][deserialize][1] = -> TRY {  -> parser=new SimpleDateFormat()@ -> LOOP { -> TRY { -> setupParser(parser,i,)@i<DATE_FORMATS.length -> dt=parser.parse(json.getAsString(),)@ } CATCH(Exception) { -> LOG.debug("Date parsing error",e1,)@ } } -> TRY { -> dt=fromJavascriptTimestamp(json.getAsLong(),)@ } CATCH(Exception) { -> throw new ClassCastException("Date Parsing options exhausted",)@ } -> return new java.sql.Date(dt.getTime(),)@ } CATCH(JsonParseException) {}
results[https://github.com/photon-infotech/commons/blob/419511c4151c6f8cb9a54e056a52ac58e69c55d6/src/main/java/com/photon/phresco/impl/HtmlApplicationProcessor.java][getConfiguration][1] = -> TRY {  -> TRY { -> properties=new Properties()@ -> LOOP { -> LOOP { -> IF { -> LOOP { -> IF { -> LOOP { -> key1=valueEntry.getKey()@ -> value1=valueEntry.getValue()@ -> properties.setProperty(key1,value1.getAsString(),)@ } } } -> configuration.setProperties(properties,)@ } } } } CATCH(Exception) { -> throw new PhrescoException(e,)@ } FINALLY { -> TRY { -> IF { -> reader.close()@reader!=null } } FINALLY { -> throw new PhrescoException(e,)@ } } } CATCH(PhrescoException) {}
results[https://github.com/impetus-opensource/Kundera/blob/123a84661596222974eeaa79b30de0d44491277a/src/kundera-couchdb/src/main/java/com/impetus/client/couchdb/CouchDBObjectMapper.java][getEntityFromJson][1] = -> TRY { -> entity=entityClass.newInstance()@ -> rowKey=jsonObj.get((AbstractAttribute) m.getIdAttribute().getJPAColumnName(),)@ -> IF { -> return null@rowKey==null } -> metaModel=(MetamodelImpl) kunderaMetadata.getApplicationMetadata().getMetamodel(m.getPersistenceUnit(),)@!(rowKey==null) -> idClass=m.getIdAttribute().getJavaType()@!(rowKey==null) -> IF { -> javaType=m.getIdAttribute().getBindableJavaType()@!(rowKey==null) && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType(),) -> PropertyAccessorHelper.setId(entity,m,getObjectFromJson(rowKey.getAsJsonObject(),javaType,metaModel.embeddable(javaType,).getAttributes(),),)@!(rowKey==null) && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType(),) } ELSE { -> PropertyAccessorHelper.setId(entity,m,PropertyAccessorHelper.fromSourceToTargetClass(idClass,String.class,rowKey.getAsString(),),)@!(metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType(),)) && !(rowKey==null) } -> LOOP { -> IF { -> IF { -> onViaEmbeddable(entityType,column,m,entity,metaModel.embeddable(javaType,),jsonObj,)@metaModel.isEmbeddable(javaType,) && !(column.equals(m.getIdAttribute(),))&&!((AbstractAttribute) column.getJPAColumnName().equals(discriminatorColumn,))&&value!=null&&!(value.equals(JsonNull.INSTANCE,)) && !(rowKey==null) } ELSE { -> IF { -> setFieldValue(entity,column,value,)@!(column.equals(m.getIdAttribute(),))&&!((AbstractAttribute) column.getJPAColumnName().equals(discriminatorColumn,))&&value!=null&&!(value.equals(JsonNull.INSTANCE,)) && !(rowKey==null) } ELSE { -> IF { -> IF { -> colValue=jsonObj.get((AbstractAttribute) column.getJPAColumnName(),)@!(rowKey==null) -> IF { -> colFieldName=m.getFieldName(fieldName,)@!(column.equals(m.getIdAttribute(),))&&!((AbstractAttribute) column.getJPAColumnName().equals(discriminatorColumn,))&&value!=null&&!(value.equals(JsonNull.INSTANCE,)) && !(rowKey==null) && relations.contains(fieldName,)&&!(fieldName.equals((AbstractAttribute) m.getIdAttribute().getJPAColumnName(),)) -> relationMetadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,attribute.getJavaType(),)@!(rowKey==null) -> colVal=PropertyAccessorHelper.fromSourceToTargetClass(relationMetadata.getIdAttribute().getJavaType(),String.class,colValue.getAsString(),)@colValue!=null && !(rowKey==null) -> relationValue.put(fieldName,colVal,)@!(rowKey==null) && relations.contains(fieldName,)&&!(fieldName.equals((AbstractAttribute) m.getIdAttribute().getJPAColumnName(),)) } } } } } } } -> IF { -> e=new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m,),relationValue,)@relationValue!=null&&!(relationValue.isEmpty()) && !(rowKey==null) -> return e@relationValue!=null&&!(relationValue.isEmpty()) && !(rowKey==null) } ELSE { -> return entity@!(rowKey==null) && !(relationValue!=null&&!(relationValue.isEmpty())) } } CATCH(Exception) { -> log.error("Error while extracting entity object from json, caused by {}.",e,)@ -> throw new KunderaException(e,)@ }
results[https://github.com/commoncrawl/commoncrawl-crawler/blob/8977fa826bb6cc218c49b72a533bb16007cb3d99/src/org/commoncrawl/mapred/ec2/parser/ParserMapper.java][map][1] = -> TRY {  -> IF { -> return @sourceURL.getLength()==0 } -> TRY { -> parseOutput=new ParseOutput()@!(sourceURL.getLength()==0) -> parseOutput.setDestSegmentId(_segmentId,)@!(sourceURL.getLength()==0) -> metadata=parseOutput.getCrawlMetadata()@!(sourceURL.getLength()==0) -> IF { -> return @canonicalURL==null && !(sourceURL.getLength()==0) } -> IF { -> return @!(canonicalURL==null) && !(sourceURL.getLength()==0) && originalURL.getPath().endsWith("/robots.txt",) } } ELSE { -> IF { -> IF { -> parseOutput.setDetectedCharset(metadata.getCharsetDetected(),)@!(canonicalURL==null) && metadata.isFieldDirty(CrawlMetadata.Field_CHARSETDETECTED,) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) } } -> parseOutput.setMetadata(jsonObj.toString(),)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) -> mimeType=jsonObj.get("mime_type",)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) -> IF { -> parseOutput.setNormalizedMimeType(mimeType.getAsString(),)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && mimeType!=null && !(originalURL.getPath().endsWith("/robots.txt",)) } -> md5=jsonObj.get("md5",)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) -> IF { -> hash=new MD5Hash(md5.getAsString(),)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && md5!=null && !(originalURL.getPath().endsWith("/robots.txt",)) -> bytes=hash.getDigest()@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) -> parseOutput.setMd5Hash(new FlexBuffer(bytes,0,bytes.length,),)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) } -> IF { -> parseOutput.setSimHash(simHash.getAsLong(),)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) && simHash!=null } -> parseOutput.setHostIPAddress(IPAddressUtils.IntegerToIPAddressString(value.getServerIP(),),)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) -> parseOutput.setFetchTime(value.getLastAttemptTime(),)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) -> IF { -> IF { -> parseOutput.setTextContent(contentOut.e0,)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) } -> IF { -> parseOutput.getHeadersAsTextBytes().set(contentOut.e1.e0,)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) -> parseOutput.setFieldDirty(ParseOutput.Field_HEADERS,)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) -> IF { -> parseOutput.setRawContent(contentOut.e1.e1,)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) } } } -> output.collect(new Text(finalURL.toString(),),parseOutput,)@!(canonicalURL==null) && !(sourceURL.getLength()==0) && !(value.getFlags()&CrawlURL.Flags.IsRedirected!=0) && !(originalURL.getPath().endsWith("/robots.txt",)) } CATCH(Exception) { -> LOG.error("Exception Processing URL:"+sourceURL.toString()+"\n"+CCStringUtils.stringifyException(e,),)@!(sourceURL.getLength()==0) -> IF { -> reporter.incrCounter(Counters.GOT_UNHANDLED_IO_EXCEPTION,1,)@!(sourceURL.getLength()==0) } ELSE { -> reporter.incrCounter(Counters.GOT_UNHANDLED_RUNTIME_EXCEPTION,1,)@!(sourceURL.getLength()==0) } } CATCH(OutOfMemoryError) { -> LOG.fatal("Got Out of Memory Error Processing URL:"+sourceURL.toString()+"\n"+CCStringUtils.stringifyException(e,),)@!(sourceURL.getLength()==0) -> reporter.incrCounter(Counters.GOT_OUT_OF_MEMORY_ERROR,1,)@!(sourceURL.getLength()==0) } } CATCH(IOException) {}
