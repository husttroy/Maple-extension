results[https://github.com/apache/derby/blob/6c9dac8af848beceff050430ae2d0c0ef2f3fc49/java/testing/org/apache/derbyTesting/functionTests/tests/store/backupRestore1.java][main] = -> TRY { -> rfs=new RandomAccessFile("extinout/mybackup/wombat/service.properties","r",)@ } -> TRY { -> IF { -> rfs.close()@rfs!=null } }
results[https://github.com/ulisses/msc-thesis/blob/42c865c8eb7c8772a23d28725bfd0d77799b17c7/tests/korat/korat/src/korat/utils/cv/CVWriterDelta.java][close] = -> TRY {  -> TRY { -> f=new RandomAccessFile(fileName,"rw",)@ -> f.writeLong(numCVs,)@ } FINALLY { -> IF { -> f.close()@f!=null } } } CATCH {}
results[https://github.com/oxhead/decoupled-hadoop/blob/5a9843d8e404cb193af9d5ab2bcb4cd79e3b67a9/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestBlockReaderLocal.java][setup] = -> TRY {  -> TRY { -> bf=new RandomAccessFile(blockFile,"rw",)@ -> bf.write( new byte[],)@ } FINALLY { -> IF { -> bf.close()@bf!=null } } } CATCH {}
results[https://github.com/ulisses/msc-thesis/blob/42c865c8eb7c8772a23d28725bfd0d77799b17c7/tests/korat/korat/src/korat/utils/cv/CVWriter.java][close] = -> TRY {  -> TRY { -> f=new RandomAccessFile(fileName,"rw",)@ -> f.writeLong(numCVs,)@ } FINALLY { -> IF { -> f.close()@f!=null } } } CATCH {}
results[https://github.com/DominicWatson/open-bluedragon/blob/7a0bc66077007b1125edcf6de803ac15b6f284f8/src/org/farng/mp3/MP3File.java][seekMP3Frame] = -> TRY {  -> TRY { -> rfile=new RandomAccessFile(mp3file,"r",)@ -> found=seekMP3Frame(rfile,)@ } FINALLY { -> IF { -> rfile.close()@rfile!=null } } } CATCH {}
results[https://github.com/apache/hadoop-common/blob/f773d717756853c05a62755f7e57948e4c8f6a9c/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestBlockReaderLocal.java][setup] = -> TRY {  -> TRY { -> bf=new RandomAccessFile(blockFile,"rw",)@ -> bf.write( new byte[],)@ } FINALLY { -> IF { -> bf.close()@bf!=null } } } CATCH {}
results[https://github.com/zjshen/hadoop-common/blob/5a9843d8e404cb193af9d5ab2bcb4cd79e3b67a9/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestBlockReaderLocal.java][setup] = -> TRY {  -> TRY { -> bf=new RandomAccessFile(blockFile,"rw",)@ -> bf.write( new byte[],)@ } FINALLY { -> IF { -> bf.close()@bf!=null } } } CATCH {}
results[https://github.com/lboynton/XMPP-Client/blob/be55f1964e4fcee93503588cd96af4c99ee7f67c/lib/mp3tag/src/org/farng/mp3/MP3File.java][seekMP3Frame] = -> TRY {  -> TRY { -> rfile=new RandomAccessFile(mp3file,"r",)@ -> found=seekMP3Frame(rfile,)@ } FINALLY { -> IF { -> rfile.close()@rfile!=null } } } CATCH {}
results[https://github.com/anteoc/hadoop-fork/blob/4e2eeba443dffb7381deeee369b6d192d0cfcb93/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestBlockReaderLocal.java][setup] = -> TRY {  -> TRY { -> bf=new RandomAccessFile(blockFile,"rw",)@ -> bf.write( new byte[],)@ } FINALLY { -> IF { -> bf.close()@bf!=null } } } CATCH {}
results[https://github.com/DawnScience/scisoft-core/blob/952fdf0de308306288ff3879c746afaca42c6dca/uk.ac.diamond.scisoft.analysis/src/uk/ac/diamond/scisoft/analysis/io/ADSCImageLoader.java][loadMetaData] = -> TRY {  -> TRY { -> raf=new RandomAccessFile(fileName,"r",)@ -> processingMetadata(raf,)@ } FINALLY { -> IF { -> raf.close()@raf!=null } } } CATCH {}
