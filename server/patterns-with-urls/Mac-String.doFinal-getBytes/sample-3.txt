results[https://github.com/javaswift/joss/blob/36c1ae1ff10a2bce1c76d2e69a0c329cc393df0a/src/main/java/org/javaswift/joss/util/HashSignature.java][getHmacMD5][1] = -> TRY {  -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(keySpec,)@ -> hashBytes=mac.doFinal(input.getBytes(),)@ -> return Hex.encodeHexString(hashBytes,)@ } CATCH(Exception) {}
results[https://github.com/openmichigan/OERca/blob/f853f2184a79b601ee5cf603fb1768c11cb41c32/src/java/org/sakaiproject/tool/ocw/OCWTool.java][sign][1] = -> TRY {  -> sig=Mac.getInstance("HmacSHA1",)@ -> sig.init(salt,)@ -> return byteArray2Hex(sig.doFinal(data.getBytes(),),)@ } CATCH(Exception) {}
results[https://github.com/RamesesDev/osiris2/blob/dcc688b9e1713b5414715744d53d90b6242d2e60/common/rameses-common/src/com/rameses/util/Encoder.java][encode][5] = -> TRY { -> mac=Mac.getInstance("HmacMD5",)@ -> mac.init(skey,)@ -> hash=mac.doFinal(v.getBytes(),)@ -> return toHexString(hash,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/carnero/cgeo-original/blob/ad7cb876ef663c3dd06f400fff6c70c80a0a124c/src/carnero/cgeo/original/libs/Base.java][hashHmac][4] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(secretKeySpec,)@ -> macBytes=mac.doFinal(text.getBytes(),)@ } CATCH(Exception) { -> Log.e(Settings.tag,"cgBase.hashHmac: "+e.toString(),)@ }
results[https://github.com/forcedotcom/aura/blob/9edf63a6b2308b47638f5f3c1a0dd486617ccc95/aura/src/test/java/org/auraframework/test/SauceUtil.java][authToken][1] = -> TRY {  -> mac=Mac.getInstance(secretKey.getAlgorithm(),)@ -> mac.init(secretKey,)@ -> result=mac.doFinal(jobId.getBytes(),)@ -> return toHexString(result,)@ } CATCH(Exception) {}
results[https://github.com/FAP-Team/Fap-Module/blob/b5ac8b60bd0d216c434f978ec6a3a84f7c93015f/fap/app/controllers/fap/WSPortafirma.java][encodeHmac][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(value.getBytes(),)@ -> return Base64.encodeBase64URLSafeString(rawHmac,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/CommercialWebDevelopment/pyramid/blob/0dd55d499395d5359b7d37785e2eb46e60990203/src/main/java/com/financial/pyramid/service/impl/PayUServiceImpl.java][hmacMD5][4] = -> TRY { -> mac=Mac.getInstance("HmacMD5",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(value.getBytes(),)@ -> hexBytes=new Hex().encode(rawHmac,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/ramesesinc/incubation/blob/77a12926f44242ee631d40a653839fee22802959/rameses-common2/src/com/rameses/util/Encoder.java][encode][5] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(skey,)@ -> hash=mac.doFinal(v.getBytes(),)@ -> return toHexString(hash,)@ } CATCH(Exception) { -> throw new RuntimeException(e.getMessage(),e,)@ }
results[https://github.com/projectrsc/ProjectRSC/blob/be9e2e1854a0e4b93816e52712c9fe37ff7dfc39/ProjectRSC/Development/Server/src/org/darkquest/ls/util/DataConversions.java][hmac][2] = -> TRY { -> mac=Mac.getInstance("Hmac"+hashType,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(value.getBytes(),)@ -> return new BigInteger(1,rawHmac,).toString(16,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/revetkn/restfb/blob/c7a321c0b3fb5d9082d3935985bcfc5a22086c70/source/library/com/restfb/DefaultFacebookClient.java][obtainAppSecretProof][1] = -> verifyParameterPresence("accessToken",accessToken,)@ -> TRY { -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(signingKey,)@ -> raw=mac.doFinal(accessToken.getBytes(),)@ -> hex=encodeHex(raw,)@ } CATCH(Exception) { -> throw new IllegalStateException("Creation of appsecret_proof has failed",e,)@ }
results[https://github.com/RamesesDev/osiris2/blob/dcc688b9e1713b5414715744d53d90b6242d2e60/common/rameses-common/test/research/KeySpecTest.java][testHello][4] = -> TRY {  -> mac=Mac.getInstance("HmacMD5",)@ -> mac.init(skey,)@ -> bytes=mac.doFinal(pwd.getBytes(),)@ -> System.out.println(Encoder.MD5.toHexString(bytes,),)@ -> System.out.println(Encoder.MD5.encode(pwd,key,),)@ } CATCH(Exception) {}
results[https://github.com/spring-projects/spring-social-facebook/blob/e98c81ef2d0bd91d4c76b38e6af72379de4aebf4/spring-social-facebook-web/src/main/java/org/springframework/social/facebook/web/RealTimeUpdateController.java][verifySignature][1] = -> TRY {  -> IF { -> return false@!(signature.startsWith("sha1=",)) } -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@!(!(signature.startsWith("sha1=",))) -> mac.init(signingKey,)@!(!(signature.startsWith("sha1=",))) -> rawHmac=mac.doFinal(payload.getBytes(),)@!(!(signature.startsWith("sha1=",))) -> actual=new String(Hex.encode(rawHmac,),)@!(!(signature.startsWith("sha1=",))) } CATCH(Exception) {}
results[https://github.com/CloudStack-extras/CloudBridge-archive/blob/e0657e7e1137592b51f61a284b4796698b35d370/src/com/cloud/bridge/util/S3SoapAuth.java][calculateRFC2104HMAC][1] = -> TRY { -> hmacSha1=Mac.getInstance("HmacSHA1",)@ -> hmacSha1.init(key,)@ -> rawHmac=hmacSha1.doFinal(signIt.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(Exception) { -> logger.error("Failed to generate keyed HMAC on soap request: "+e.getMessage(),)@ }
results[https://github.com/dscho/Xpra/blob/0cdda8a9119ed1094ddfdb2b2aea2bd117f1e1a4/java/src/xpra/AbstractClient.java][hmac_password][2] = -> TRY { -> mac=Mac.getInstance("HMACMD5",)@ -> mac.init(secret,)@ -> digest=mac.doFinal(salt.getBytes(),)@ -> this.log("hmac_password("+salt+")=byte["+digest.length+"]",)@ -> enc_pass=hexlify_raw(digest,)@ -> this.log("hmac_password("+salt+")="+enc_pass,)@ } CATCH(Exception) { -> log("hmac_password("+salt+") failed: "+e.getMessage(),)@ }
results[https://github.com/Jasig/cas/blob/3d3e6b51362b42603c6b7f130a3e94fb2bc75c8c/cas-server-3.4.2/cas-server-support-openid/src/main/java/org/jasig/cas/support/openid/authentication/principal/OpenIdService.java][generateHash][3] = -> TRY { -> sha1=Mac.getInstance("HmacSHA1",)@ -> sha1.init(this.sharedSecret,)@ -> return Base64.encodeBase64String(sha1.doFinal(value.getBytes(),),)@ } CATCH(Exception) { -> LOG.error(e.getMessage(),e,)@ -> return Base64.encodeBase64String(ENCODER.encode(value,).getBytes(),)@ }
results[https://github.com/maxpower47/DeliciousDroid/blob/5326d8dbc70a3212b48456364ec9d84dafa6a95b/src/com/android/droidlicious/authenticator/OauthUtilities.java][signRequest][2] = -> sb=new StringBuilder()@ -> sb.append("GET",)@ -> sb.append("&"+URLEncoder.encode(url,),)@ -> LOOP { -> IF { -> sb.append("&",)@ } ELSE { -> sb.append("%26",)@ } -> sb.append(URLEncoder.encode(key,)+"%3D",)@ -> sb.append(URLEncoder.encode(params.get(key,),),)@params.keySet() } -> Log.d("base string",sb.toString(),)@ -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(sha1key,)@ -> sigBytes=mac.doFinal(sb.toString().getBytes(),)@ -> signature=Base64.encodeBytes(sigBytes,)@ } CATCH(Exception) { -> Log.e("Oauth Sign Request","Hash Error",)@ }
results[https://github.com/seratch/signedrequest4j/blob/8b3ed44c23071ac43668065fbed4c0e8ed2b9117/src/main/java/com/github/seratch/signedrequest4j/SignedRequestImpl.java][getSignature][2] = -> baseString=getSignatureBaseString(url,method,oAuthNonce,oAuthTimestamp,)@ -> IF { -> TRY { -> mac=Mac.getInstance(algorithm,)@signatureMethod==SignatureMethod.HMAC_SHA1 -> mac.init(keySpec,)@signatureMethod==SignatureMethod.HMAC_SHA1 -> rawValue=mac.doFinal(baseString.getBytes(),)@signatureMethod==SignatureMethod.HMAC_SHA1 -> return Base64.encode(rawValue,)@signatureMethod==SignatureMethod.HMAC_SHA1 } CATCH(NoSuchAlgorithmException) { -> throw new SignedRequestClientException("Invalid Alogrithm : "+e.getLocalizedMessage(),)@signatureMethod==SignatureMethod.HMAC_SHA1 } CATCH(InvalidKeyException) { -> throw new SignedRequestClientException("Invalid key : "+e.getLocalizedMessage(),)@signatureMethod==SignatureMethod.HMAC_SHA1 } } ELSE { -> IF { -> IF { -> throw new SignedRequestClientException("RSA Private Key value is required.",)@signatureMethod==SignatureMethod.HMAC_SHA1 && signatureMethod==SignatureMethod.RSA_SHA1 && rsaPrivateKeyValue==null||rsaPrivateKeyValue.length()==0 } -> TRY { -> signer.update(baseString.getBytes(),)@!(rsaPrivateKeyValue==null||rsaPrivateKeyValue.length()==0) && signatureMethod==SignatureMethod.HMAC_SHA1 && signatureMethod==SignatureMethod.RSA_SHA1 && PEMReader.PRIVATE_PKCS1_MARKER.equals(reader.getBeginMarker(),) } CATCH(Exception) { -> throw new SignedRequestClientException("Cannot make a signature(RSA)",e,)@!(rsaPrivateKeyValue==null||rsaPrivateKeyValue.length()==0) && signatureMethod==SignatureMethod.HMAC_SHA1 && signatureMethod==SignatureMethod.RSA_SHA1 } } }
results[https://github.com/maxpower47/PinDroid/blob/3d52b06efd7aafc3431a3a350312f2e78fa618f6/src/com/deliciousdroid/authenticator/OauthUtilities.java][signRequest][1] = -> sb=new StringBuilder()@ -> sb.append("GET",)@ -> sb.append("&"+URLEncoder.encode(url,),)@ -> LOOP { -> IF { -> sb.append("&",)@ } ELSE { -> sb.append("%26",)@ } -> sb.append(URLEncoder.encode(key,)+"%3D",)@ -> sb.append(URLEncoder.encode(params.get(key,),).replace("+","%2B",).replace("%7C","%257C",).replace("%7B","%257B",).replace("%7D","%257D",).replace("%26","%2526",).replace("%2C","%252C",),)@params.keySet() } -> Log.d("base string",sb.toString().replace("%23","%2523",),)@ -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(sha1key,)@ -> sigBytes=mac.doFinal(sb.toString().replace("%23","%2523",).getBytes(),)@ -> signature=Base64.encodeBytes(sigBytes,)@ } CATCH(Exception) { -> Log.e("Oauth Sign Request","Hash Error",)@ }
results[https://github.com/schibsted/sdk-android/blob/aac3d7a5294d3f2e83bc9377cafbca0ee9ca1f38/SPiDSDK/src/com/schibsted/android/sdk/utils/SPiDUtils.java][getHmacSHA256][1] = -> TRY {  -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(new SecretKeySpec(key.getBytes(),"HmacSHA256",),)@ -> bs=mac.doFinal(string.getBytes(),)@ -> return byteArrayToHexString(bs,)@ } CATCH(Exception) {}
results[https://github.com/jintrone/TurkSnet/blob/860936c4b2dbeb20a1c498dd8036d85b225c220e/src/main/java/edu/mit/cci/turkit/MTurkSOAP.java][getSignature][2] = -> TRY {  -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(new SecretKeySpec(secretKey.getBytes(),HMAC_SHA1_ALGORITHM,),)@ -> return Base64.encodeBytes(mac.doFinal(service+operation+timestamp.getBytes(),),)@ } CATCH(Exception) {}
results[https://github.com/square/pollexor/blob/b38fdbc6879394b3339197f299093a99ddefe690/src/main/java/com/squareup/thumbor/Utilities.java][hmacSha1][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(new SecretKeySpec(key.getBytes(),"HmacSHA1",),)@ -> return mac.doFinal(message.toString().getBytes(),)@ } CATCH(Exception) { -> throw new UnableToBuildException(e,)@ }
results[https://github.com/square/pollexor/blob/cf8f2785ae3499d525dbdf7d23c58edb3cc7df3a/src/main/java/com/squareup/pollexor/Utilities.java][hmacSha1][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(new SecretKeySpec(key.getBytes(),"HmacSHA1",),)@ -> return mac.doFinal(message.toString().getBytes(),)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/copperflake/SAT/blob/05bee53ed64e5cb7d3991d14832987fcad05d270/src/sat/external/twitter/Twitter.java][main][2] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(secret,)@ -> binarySignature=mac.doFinal(signatureBaseString.getBytes(),)@ } CATCH(Exception) { -> e.printStackTrace()@ } } CATCH(IOException) {}
results[https://github.com/OTAUpdateCenter/ota-updater-2.0/blob/82ddc7f0137407a5b73c9bc16bfba5c6e25e3dad/src/com/otaupdater/utils/Utils.java][hmac][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(new SecretKeySpec(key.getBytes(),mac.getAlgorithm(),),)@ -> return byteArrToStr(mac.doFinal(str.getBytes(),),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/greese/dasein-cloud-cloudstack/blob/b806784162e2d87cd7b7d45610dd3263435ff141/src/main/java/org/dasein/cloud/cloudstack/CloudstackMethod.java][calculateHmac][2] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> return mac.doFinal(data.getBytes(),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(SignatureException) {}
results[https://github.com/dustinlucien/project-platypus/blob/c666a21fb20ba03faa86cad20b411b88baec1ae2/src/java/com/platypus/util/SignatureUtil.java][generateHMACMD5][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(MD5_ALGORITHM,)@ -> mac.init(signingKey,)@ -> raw=mac.doFinal(data.getBytes(),)@ -> result=Base64.encodeBytes(raw,)@ } CATCH(Exception) { -> throw new SignatureException("Could not generate MD5 Signature",)@ } } CATCH(SignatureException) {}
results[https://github.com/vincentjanv/groepI/blob/643bbc2aa06b98b4698ad8f2158d5d431a0a49cd/src/main/java/be/kdg/groepi/utils/VuforiaSignatureUtil.java][calculateRFC2104HMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,false,),)@ } CATCH(Exception) { -> e.printStackTrace()@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/oxhead/decoupled-hadoop/blob/fda683bf06f52e3c0999fec65d994f9f74fb3c50/hadoop-mapreduce/src/contrib/dynamic-scheduler/src/java/org/apache/hadoop/mapred/PriorityAuthorization.java][hmac][36] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e,e,)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/wso2/commons/blob/6adfc623c63fd98791a12e57612156db7d00b67e/qa/automation/3.2.2/system-test-framework/scenario/org.wso2.stratos.test.scenario/src/test/java/org/wso2/startos/system/test/stratosUtils/msUtils/MessageBoxSubClient.java][calculateRFC2104HMAC][4] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=Base64.encode(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/daisy-consortium/pipeline-framework/blob/9373cbeedebc9b1c94ac75b4e4dee4fd4698ea5e/webservice/src/main/java/org/daisy/pipeline/webservice/Authenticator.java][calculateRFC2104HMAC][2] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingSecret,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=Base64.encodeBase64String(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/TGAC/miso-lims/blob/155f3fa782e5f1358a7ff3edb821272d573b6f05/integration-tools/src/main/java/uk/ac/bbsrc/tgac/miso/integration/util/SignatureHelper.java][calculateHMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=Base64.encodeBase64URLSafeString(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/kencochrane/raven-java/blob/6365228db7d0eb5bf3e760c88a860311fc833983/src/main/java/net/kencochrane/sentry/RavenUtils.java][calculateHMAC][3] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=hexEncode(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/thesmith/eventhorizon/blob/2230dce8dc3b5a4f9c8ceefd7b341e08ad51d3ed/src/main/java/thesmith/eventhorizon/service/impl/UserServiceImpl.java][calculateRFC2104HMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> return Base64.encode(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(SignatureException) {}
results[https://github.com/rajrajamani/Marketo/blob/014809ff5a6ce70a4d2817c8294f9e6b77b8bb16/2waySMS/app/com/marketo/mktows/client/Signature.java][calculateHMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(secretKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> hexChars=Hex.encodeHex(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Error generating HMAC signature: "+e.getMessage(),e,)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/CloudStack-extras/CloudBridge-archive/blob/93dec4aab545705109e08d6d0c11ab227a6b8958/src/com/cloud/stack/CloudStackCommand.java][calculateRFC2104HMAC][2] = -> TRY {  -> TRY { -> hmacSha1=Mac.getInstance("HmacSHA1",)@ -> hmacSha1.init(key,)@ -> rawHmac=hmacSha1.doFinal(signIt.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate keyed HMAC on soap request: "+e.getMessage(),)@ } } CATCH(SignatureException) {}
results[https://github.com/TGAC/miso-lims/blob/8d1cdc14f0caaa83f63a562f588b75619a841e44/core/src/main/java/uk/ac/bbsrc/tgac/miso/core/security/PasswordCodecService.java][encryptHMACSHA1][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(plaintext.getBytes(),)@ -> result=new Base64().encodeToString(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/ybrs/hazelcastforked/blob/6d494fa5ef514816a415adb7e2e13314d67bbf87/hazelcast-cloud/src/main/java/com/hazelcast/aws/security/RFC2104HMAC.java][calculateRFC2104HMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(SIGNATURE_METHOD,)@ -> mac.init(signingKey,)@ -> rawSignature=mac.doFinal(data.getBytes(),)@ -> result=new String(encode(rawSignature,),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(SignatureException) {}
results[https://github.com/sosilent/euca/blob/54fd3c97a69a5054705bc777a5b6f1403a72ba1e/clc/modules/walrus/src/main/java/com/eucalyptus/auth/login/WalrusLoginModule.java][checkSignature][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(Hmac.HmacSHA1.toString(),)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(subject.getBytes(),)@ -> return new String(Base64.encode(rawHmac,),).replaceAll("=","",)@ } CATCH(Exception) { -> LOG.error(e,e,)@ -> throw new AuthenticationException("Failed to compute signature",)@ } } CATCH(AuthenticationException) {}
results[https://github.com/social-computing/jmi-server/blob/e6c7d53e7179b375608656891fcf9816c6791aee/jmi-server-connector-utils/src/main/java/com/socialcomputing/wps/server/planDictionnary/connectors/utils/OAuthHelper.java][getOAuthSignature][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> secret=new SecretKeySpec(key.getBytes(),mac.getAlgorithm(),)@ -> mac.init(secret,)@ -> digest=mac.doFinal(data.getBytes(),)@ -> return enc.encode(digest,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/piascikj/fincayra/blob/65cd440336e5f35b20ba5d0ba32dfb4cfd5093c3/src/main/java/org/innobuilt/fincayra/fps/SignatureUtils.java][sign][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(signatureMethod,)@ -> mac.init(new SecretKeySpec(key.getBytes(),signatureMethod,),)@ -> signature=new String(Base64.encodeBase64(mac.doFinal(data.getBytes(UTF_8_Encoding,),),),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate signature: "+e.getMessage(),e,)@ } } CATCH(SignatureException) {}
results[https://github.com/CloudStack-extras/CloudBridge-archive/blob/e0657e7e1137592b51f61a284b4796698b35d370/src/com/cloud/bridge/util/EC2RestAuth.java][calculateRFC2104HMAC][2] = -> TRY {  -> TRY { -> IF { -> hmacShaAlg=Mac.getInstance("HmacSHA1",)@ } ELSE { -> hmacShaAlg=Mac.getInstance("HmacSHA256",)@ } -> hmacShaAlg.init(key,)@ -> rawHmac=hmacShaAlg.doFinal(signIt.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate keyed HMAC on REST request: "+e.getMessage(),)@ } } CATCH(SignatureException) {}
results[https://github.com/apache/abdera/blob/cce3f0f613bd2c38d878a5f61f5aadea2eede184/extensions/oauth/src/main/java/org/apache/abdera/ext/oauth/OAuthScheme.java][sign][1] = -> TRY {  -> IF { -> TRY { -> mac=Mac.getInstance(kg.getAlgorithm(),)@method.equalsIgnoreCase("HMAC-MD5",)||method.equalsIgnoreCase("HMAC-SHA1",) -> mac.init(kg.generateKey(),)@method.equalsIgnoreCase("HMAC-MD5",)||method.equalsIgnoreCase("HMAC-SHA1",) -> result=mac.doFinal(baseString.getBytes(),)@method.equalsIgnoreCase("HMAC-MD5",)||method.equalsIgnoreCase("HMAC-SHA1",) -> return new String(Base64.encodeBase64(result,),)@method.equalsIgnoreCase("HMAC-MD5",)||method.equalsIgnoreCase("HMAC-SHA1",) } CATCH(Exception) { -> throw new AuthenticationException(e.getMessage(),e,)@method.equalsIgnoreCase("HMAC-MD5",)||method.equalsIgnoreCase("HMAC-SHA1",) } } ELSE { -> IF { -> return new String(Base64.encodeBase64(DigestUtils.md5(baseString,),),)@!(method.equalsIgnoreCase("HMAC-MD5",)||method.equalsIgnoreCase("HMAC-SHA1",)) && method.equalsIgnoreCase("md5",) } ELSE { -> IF { -> return new String(Base64.encodeBase64(DigestUtils.sha(baseString,),),)@!(method.equalsIgnoreCase("md5",)) && method.equalsIgnoreCase("sha1",) && !(method.equalsIgnoreCase("HMAC-MD5",)||method.equalsIgnoreCase("HMAC-SHA1",)) } ELSE { -> IF { -> IF { -> throw new AuthenticationException("a cert is mandatory to use SHA1 with RSA",)@method.equalsIgnoreCase("RSA-SHA1",) && !(method.equalsIgnoreCase("md5",)) && cert==null && !(method.equalsIgnoreCase("HMAC-MD5",)||method.equalsIgnoreCase("HMAC-SHA1",)) && !(method.equalsIgnoreCase("sha1",)) } -> TRY { -> result=cipher.doFinal(baseString.getBytes(),)@method.equalsIgnoreCase("RSA-SHA1",) && !(cert==null) && method.equalsIgnoreCase("sha1",) && method.equalsIgnoreCase("md5",) && method.equalsIgnoreCase("HMAC-MD5",)||method.equalsIgnoreCase("HMAC-SHA1",) -> return new String(Base64.encodeBase64(result,),)@!(cert==null) && method.equalsIgnoreCase("RSA-SHA1",) && !(method.equalsIgnoreCase("md5",)) && !(method.equalsIgnoreCase("HMAC-MD5",)||method.equalsIgnoreCase("HMAC-SHA1",)) && !(method.equalsIgnoreCase("sha1",)) } CATCH(Exception) { -> throw new AuthenticationException(e.getMessage(),e,)@!(cert==null) && method.equalsIgnoreCase("RSA-SHA1",) && !(method.equalsIgnoreCase("md5",)) && !(method.equalsIgnoreCase("HMAC-MD5",)||method.equalsIgnoreCase("HMAC-SHA1",)) && !(method.equalsIgnoreCase("sha1",)) } } } } } } CATCH(AuthenticationException) {}
