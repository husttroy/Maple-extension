results[https://github.com/uditrugman/openjdk8-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/sun/security/ssl/com/sun/net/ssl/internal/ssl/InputRecord/ProxyTunnelServer.java][<init>][15] = -> TRY {  -> output=sockOut.getOutputStream()@ } CATCH(Exception) {}
results[https://github.com/kankoli/blox/blob/4ebc29f766d8be2c5faf47d9f08b2d5caf5d89f8/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSSocket.java][getOutputStream][4] = -> TRY { -> return socket.getOutputStream()@ } CATCH(Exception) { -> throw new GdxRuntimeException("Error getting output stream from socket.",e,)@ }
results[https://github.com/uvalbbu/dalvik_test/blob/0772546ae9e326e559c0bdd17063eb589b6542ac/luni/src/test/java/tests/api/java/util/ScannerTest.java][setUp][20] = -> TRY {  -> serverSocket=server.accept()@ -> os=serverSocket.getOutputStream()@ } CATCH(Exception) {}
results[https://github.com/epronk/fitnesse/blob/e27c17eef220e6bba556cc2b63d62d018ad36831/src/fitnesse/FitNesseExpediter.java][<init>][3] = -> TRY {  -> input=s.getInputStream()@ -> output=s.getOutputStream()@ } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/sun/security/ssl/com/sun/net/ssl/internal/ssl/InputRecord/ProxyTunnelServer.java][respondForConnect][3] = -> TRY {  -> out=clientSocket.getOutputStream()@ -> pout=new PrintWriter(out,)@ } CATCH(Exception) {}
results[https://github.com/marstein/GosuJacoco/blob/bffa41b4eec5328cd34eaf8d9faa308d64a73ef3/org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/controller/MockSocketConnectionTest.java][testWaitForContents][1] = -> TRY {  -> out=b.getOutputStream()@ -> out.write(123,)@ } CATCH(Exception) {}
results[https://github.com/marstein/GosuJacoco/blob/bffa41b4eec5328cd34eaf8d9faa308d64a73ef3/org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/controller/MockSocketConnectionTest.java][testGetOutputStreamOnClosedSocket][1] = -> TRY {  -> a.close()@ -> a.getOutputStream()@ } CATCH(Exception) {}
results[https://github.com/lushl9301/IDoNotWantToLearnJava/blob/d3fb5e2b263b0e896babed5573ab29dbf41dc603/CE2006/webcam/GrabberShow.java][send][1] = -> TRY {  -> ImageIO.write(buf,"JPG",socket.getOutputStream(),)@ } CATCH(Exception) {}
results[https://github.com/0xdata/h2o/blob/57283f70ca450815de1a9e855ad280328c6d9ef9/hadoop/src/main/java/water/hadoop/AbstractMessage.java][writeBytes][1] = -> TRY {  -> os=s.getOutputStream()@ -> os.write(b,)@ } CATCH(Exception) {}
results[https://github.com/ZorgGemak/OpenhealthManager/blob/d7f38230733f88014a918a6e60ed74806dec76b6/src/ieee_11073/part_20601/phd/channel/tcp/TCPChannel.java][<init>][1] = -> TRY {  -> super(s.getInputStream(),s.getOutputStream(),)@ } CATCH(Exception) {}
results[https://github.com/reppie/xchange/blob/58c588c3a92013b6d8263d8c5e72848c42b34023/source/src/StorageServer.java][handle][1] = -> TRY {  -> dis=s.getInputStream()@ -> dos=s.getOutputStream()@ -> out=new PrintWriter(dos,true,)@ } CATCH(Exception) {}
results[https://github.com/tstellar/cabs/blob/8455718b58f37deca34f0df7a66b4303ef317696/RemoteEngine.java][<init>][1] = -> TRY { -> this.out=socket.getOutputStream()@ -> this.in=socket.getInputStream()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/codehaus/jetty-project/blob/fc456fb2d8b1e05d4fbc824287177bbd7eeea326/jetty-server/src/test/java/org/mortbay/jetty/UnreadInputTest.java][setUp][8] = -> TRY {  -> _socket=new Socket((String) null,_port,)@ -> _outputStream=_socket.getOutputStream()@ -> _inputStream=_socket.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/ahmetaktay/darkchat/blob/68bafffc53e079122ef81d10440f049e6186b754/Message.java][streamOut][2] = -> TRY {  -> out=new DataOutputStream(new BufferedOutputStream(socketOut.getOutputStream(),),)@ } CATCH(Exception) {}
results[https://github.com/htwg/UCE/blob/888ec93d053d0851dcca16f1ea62b5ff836a3ed2/mediator/src/main/java/de/fhkn/in/uce/mediator/connectionhandling/DefaultRegisterHandling.java][sendSuccessResponse][3] = -> TRY {  -> response=toRespond.buildSuccessResponse()@ -> response.writeTo(controlConnection.getOutputStream(),)@ } CATCH(Exception) {}
results[https://github.com/elka-projekt/cs-voltdb/blob/8b01731a091d92a069ecc5174a813523d6abdb50/examples/voltcache/src/voltcache/api/MemcachedTextProtocolService.java][<init>][1] = -> TRY {  -> this.in=socket.getInputStream()@ -> this.out=new BufferedOutputStream(socket.getOutputStream(),65535,)@ } CATCH(Exception) {}
results[https://github.com/jonosterman/cube/blob/d39554e2b9da5ff5b81385f978989fbb1c53b9f5/cube-client-wm/src/test/java/ch/admin/vbs/cube/client/wm/demo/swm/MockXrandrUI.java][reconnect][2] = -> TRY { -> client=new Socket("localhost",9122,)@ -> outClient=client.getOutputStream()@ } CATCH(Exception) { -> LOG.debug("Failed to reconnect",)@ }
results[https://github.com/rafalkrupinski/jetty/blob/727cf815a250f9a2305f3b377f8f0450b9820bd9/jetty-client/src/test/java/org/eclipse/jetty/client/ssl/SslBytesTest.java][flush][4] = -> TRY {  -> output=socket.getOutputStream()@ -> output.write(bytes,)@ -> output.flush()@ } CATCH(Exception) {}
results[https://github.com/apache/openejb/blob/6f717b45a01436468f9c2192d7b5b69ded5b140a/openejb/arquillian-tomee/arquillian-tomee-remote/src/main/java/org/apache/openejb/arquillian/remote/RemoteTomEEContainer.java][connect][6] = -> TRY {  -> socket=new Socket("localhost",port,)@ -> out=socket.getOutputStream()@ -> out.close()@ } CATCH(Exception) {}
results[https://github.com/fnppl/openSDX/blob/25a2e158f7710a5cabc3086ea1a77784f7d429c3/src/org/fnppl/opensdx/securesocket/OSDXSocketServerThread.java][<init>][1] = -> TRY { -> socketOut=new BufferedOutputStream(socket.getOutputStream(),)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/gabrovski/knowevo/blob/04857f7d235cbaf9be121a36d9174e00abf95672/java/knowevo/src/knowevo/springbox/vizster/VizsterDBStreamBuilder.java][<init>][4] = -> TRY { -> os=sd.getOutputStream()@ -> dos=new DataOutputStream(os,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/elek/identityconnectors/blob/d878ca5f64a4edafa278d3d9a1ab2414c0a74fb2/projects/framework/framework-internal/src/main/java/org/identityconnectors/framework/impl/api/remote/RemoteFrameworkConnection.java][init][3] = -> TRY {  -> inputStream=_socket.getInputStream()@ -> outputStream=_socket.getOutputStream()@ -> _encoder=factory.newBinarySerializer(outputStream,)@ } CATCH(Exception) {}
results[https://github.com/miorel/prmf/blob/c5b5f28a612563947c4ab50fd26e6146fc12147d/trunk/mafiabot/src/com/googlecode/prmf/corleone/connection/IOThread.java][<init>][4] = -> TRY {  -> inputStream=soc.getInputStream()@ -> printStream=new PrintStream(soc.getOutputStream(),)@ } CATCH(Exception) {}
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/HttpCore-4.2/httpcore/src/test/java/org/apache/http/impl/io/TestSocketOutputBuffer.java][setUp][1] = -> TRY {  -> when(socket.getOutputStream(),).thenReturn(os,)@ } CATCH(Exception) {}
results[https://github.com/weishengshui/posnet2-server/blob/4a8b1b71c049f3b44dcf6da346c76873aa7730df/server/src/test/java/com/chinarewards/qqgbvpn/main/jmx/PosnetConnectTest.java][login][1] = -> TRY {  -> oldPosLogin(s.getOutputStream(),s.getInputStream(),challenge,)@ } CATCH(Exception) {}
results[https://github.com/m13/DisTetris/blob/64776c23e40cdf820cb1d6b2e9c65e5e21a1bea7/src/games/distetris/domain/TCPConnection.java][out][1] = -> TRY {  -> out=new PrintWriter(socket.getOutputStream(),true,)@ -> out.println(content,)@ } CATCH(Exception) {}
results[https://github.com/iwein/spring-integration/blob/4090905770bae7dd4621443b46c7766624aa5a10/spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/connection/TcpNetConnection.java][send][1] = -> TRY {  -> object=mapper.fromMessage(message,)@ -> this.outputConverter.convert(object,this.socket.getOutputStream(),)@ } CATCH(Exception) {}
results[https://github.com/propra12-orga/gruppe29/blob/0a35b1ea5438742177e13e8412159f5ed5177282/src/server/BMServer.java][writeToClient][2] = -> TRY {  -> out=new DataOutputStream(client.getOutputStream(),)@ -> out.writeInt(message,)@ } CATCH(Exception) {}
results[https://github.com/apache/activemq/blob/79127ae4409c5137ceb3b037751800917d59b4ea/activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java][keepAlive][2] = -> TRY {  -> outputStream=stompSocket.getOutputStream()@ -> outputStream.write('\n',)@ -> outputStream.flush()@ } CATCH(Exception) {}
results[https://github.com/weishengshui/posnet2-server/blob/4a8b1b71c049f3b44dcf6da346c76873aa7730df/server/src/test/java/com/chinarewards/qqgbvpn/main/jmx/PosnetConnectTest.java][init][1] = -> TRY {  -> oldPosInit(s.getOutputStream(),s.getInputStream(),challenge,)@ } CATCH(Exception) {}
results[https://github.com/marstein/GosuJacoco/blob/bffa41b4eec5328cd34eaf8d9faa308d64a73ef3/org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/controller/MockSocketConnectionTest.java][testWriteOnClosedSocket][1] = -> TRY {  -> out=a.getOutputStream()@ -> a.close()@ -> out.write(123,)@ } CATCH(Exception) {}
results[https://github.com/lzz313/tdc/blob/b253aab99f9754770d1cf0fcea54d254a9fe44a7/src/main/java/com/udpwork/ssdb/Link.java][send][1] = -> TRY {  -> os=sock.getOutputStream()@ -> os.write(buf.buf,buf.data,buf.size,)@ -> os.flush()@ } CATCH(Exception) {}
results[https://github.com/weishengshui/posserver/blob/9cf4181f7efab1b60637b7dc4b1b111217f93020/main/src/test/java/com/chinarewards/qqadidas/main/weixinsignin/WeixinSignInProtocol.java][setUp][1] = -> TRY {  -> socket=new Socket("localhost",port,)@ -> is=socket.getInputStream()@ -> os=socket.getOutputStream()@ } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/9da4913d0479bedb0c9940a47cf16ee774c123fb/test/java/net/Socket/ShutdownInput.java][test][1] = -> TRY {  -> os=s1.getOutputStream()@ -> os.write("This is a message".getBytes("US-ASCII",),)@ } CATCH(Exception) {}
results[https://github.com/svn2github/plantuml/blob/75941c4edc205e7fa0ff44f4221c3019736c86e9/trunk/src/net/sourceforge/plantuml/telnet/AcceptTelnetClient.java][<init>][38] = -> TRY {  -> br=new BufferedReader(new InputStreamReader(clientSocket.getInputStream(),),)@ -> os=clientSocket.getOutputStream()@ } CATCH(Exception) {}
results[https://github.com/htwg/UCE/blob/d54d8353680a696b244920b22292476176e791a5/mediator/src/main/java/de/fhkn/in/uce/mediator/connectionhandling/DefaultNatRequestHandling.java][handleMessage][1] = -> TRY {  -> response=message.buildSuccessResponse()@ -> response.addAttribute(userNat,)@ -> response.writeTo(controlConnection.getOutputStream(),)@ } CATCH(Exception) {}
results[https://github.com/sarahtattersall/PIPE/blob/4af3e96f2b7a63840485bc0423241e298ea832fe/pipe-model/src/main/java/pipe/server/JobStatusUpdater.java][<init>][4] = -> TRY { -> this.clientWriter=new PrintWriter(new OutputStreamWriter(clientSocket.getOutputStream(),),true,)@ } CATCH(Exception) { -> writeToLog("Error opening socket to client: "+exp,)@ }
results[https://github.com/DealerDotCom/grinder/blob/02b4fe6f9ab0ed3a00ce0041302d94bf0658f4eb/grinder-core/src/test/java/net/grinder/console/communication/TestConsoleCommunicationImplementation.java][sendMessage][9] = -> TRY {  -> objectStream=new ObjectOutputStream(socket.getOutputStream(),)@ -> objectStream.writeObject(message,)@ -> objectStream.flush()@ } CATCH(Exception) {}
results[https://github.com/apache/openejb/blob/0eb9e7d12518206132c6aea242cc04fb672450ed/openejb2/modules/openejb-core/src/java/org/openejb/server/admin/Stop.java][stop][1] = -> TRY { -> socket=new Socket(host,port,)@ -> out=socket.getOutputStream()@ -> out.write(STOP_REQUEST_Stop,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/dCache/dcache/blob/9a1973b81e0a7554d689cbefde9fc3f0146e1939/modules/dcache/src/main/java/diskCacheV111/clients/vsp/VspClient.java][dataConnectionArrived][4] = -> TRY {  -> _dataIn=new DataInputStream(s.getInputStream(),)@ -> _dataOut=new DataOutputStream(s.getOutputStream(),)@ } CATCH(Exception) {}
results[https://github.com/AlFranzis/Playground/blob/65b74b2394964f9f7ab22afe2d4c27e4ef4c5fc4/al.franzis.vertx.proxy/src/al/franzis/vertx/proxy/ProxyServer.java][<init>][1] = -> TRY {  -> this.output=socket.getOutputStream()@ -> this.br=new BufferedReader(new InputStreamReader(socket.getInputStream(),),)@ } CATCH(Exception) {}
results[https://github.com/sdoerner/MenschAergerDichNicht/blob/6193cb17939f923ea8c16b5d03aa48600cdad12b/src/aufgabe6/net/ServerKommunikationsThread.java][<init>][1] = -> TRY { -> is=this.socket.getInputStream()@ -> os=this.socket.getOutputStream()@ -> oos=new ObjectOutputStream(os,)@ } CATCH(Exception) { -> System.err.println("Konnte auf dem Server einen Kommunikationsthread nicht starten",)@ }
results[https://github.com/xwiki-contrib/retired/blob/4806730b62c64f03d9f9e705bf774196db6d97f1/anyedit/src/network/ServerThread.java][run][1] = -> TRY { -> is=client.getInputStream()@ -> os=client.getOutputStream()@ -> oos=new ObjectOutputStream(os,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/val100/webchick-server/blob/06af02e226f997b57ee53ae664751276bcda7d2e/webchick-server-main/src/test/java/com/agrologic/app/FakeMessageSystemTest.java][setUp][1] = -> TRY {  -> socket=new Socket("192.168.1.101",5500,)@ -> socket.setTcpNoDelay(true,)@ -> inputStream=socket.getInputStream()@ -> outputStream=socket.getOutputStream()@ } CATCH(Exception) {}
results[https://github.com/stianwe/DebtList/blob/ad64334949d4d34893d52526f4afe8bd8f1bf651/DebtListServer/src/network/UpdateSender.java][<init>][3] = -> TRY { -> socket=new Socket(host,port,)@ -> writer=new PrintWriter(socket.getOutputStream(),true,)@ } CATCH(Exception) { -> System.out.println("Connection failed: "+e,)@ }
results[https://github.com/empeeoh/BACnet4J/blob/faadf43d8451569093f557fc1bdb80883630db04/src_test/com/serotonin/bacnet4j/rs485/HubServer.java][<init>][1] = -> TRY {  -> id=socket.getRemoteSocketAddress().toString()@ -> in=socket.getInputStream()@ -> out=socket.getOutputStream()@ } CATCH(Exception) {}
results[https://github.com/thejosh223/pudgewars/blob/4734ad1091dcf22484363a36bd07ed6801077c9a/src/pudgewars/network/MyConnection.java][<init>][1] = -> TRY { -> inputStream=this.socket.getInputStream()@ -> outputStream=socket.getOutputStream()@ -> outputStreamWriter=new OutputStreamWriter(outputStream,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/mdb92nc/STAR-Vote/blob/885819dcb0daea7baa05b307e6f46e8691600838/auditorium/test/LinkTest.java][run][1] = -> TRY { -> toLink=serversocket.accept()@ -> _stream=toLink.getOutputStream()@ } CATCH(Exception) { -> e.printStackTrace()@ -> fail()@ }
results[https://github.com/dustin/snippets/blob/90920c93ba167d48aa059da8c09f9ec1ce31b5af/java/net/netinfo/net/spy/netinfo/Port.java][connect][2] = -> TRY {  -> s=new Socket(host,port,)@ -> in=s.getInputStream()@ -> out=s.getOutputStream()@ -> prout=new PrintWriter(out,)@ } CATCH(Exception) {}
results[https://github.com/dworkin/reddwarf/blob/b9f6ca48a8edcea0ebcf9718650301792f30c659/sgs-server/src/test/java/com/sun/sgs/test/impl/service/data/store/cache/TestRequestQueueServer.java][testRequestReadThrowsOtherException][2] = -> TRY {  -> out=new DataOutputStream(clientSocket.getOutputStream(),)@ -> out.writeShort(0,)@ -> out.flush()@ } CATCH(Exception) {}
results[https://github.com/joseignaciosg/TPProtos2cuat2012/blob/c36be7813bcc0d18153faf29bb301db6ec131e69/src/main/java/service/AbstractSockectService.java][onConnectionEstabished][1] = -> TRY {  -> out=new DataOutputStream(socket.getOutputStream(),)@ -> logger.info("Connection with client extablished. Inet Address: "+socket.getInetAddress(),)@ } CATCH(Exception) {}
results[https://github.com/tstellar/cabs/blob/237f42dd2344479eb2c8d3d86e4aa1fcc43f999a/src/engine/RemoteEngine.java][setSendSocket][1] = -> TRY { -> this.out=sendSocket.getOutputStream()@ -> this.addr=sendSocket.getInetAddress()@ -> this.port=sendSocket.getPort()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/openpnp/openpnp/blob/f9e830a9b3aa3ffc5061389f82bcb40a5d1085d0/gui/src/main/java/org/openpnp/machine/reference/driver/LinuxCNC.java][connect][1] = -> TRY {  -> socket=new Socket()@ -> socket.connect(sa,CONNECT_TIMOUT*1000,)@ -> input=socket.getInputStream()@ -> output=socket.getOutputStream()@ } CATCH(Exception) {}
results[https://github.com/multitris/multitris/blob/de86e22aa7d4ba49f75f9ecf3ba17a694ddaab28/snakeserver/GUIServer.java][<init>][1] = -> TRY { -> guis=ss.accept()@ -> out=new OutputStreamWriter(guis.getOutputStream(),)@ } CATCH(Exception) { -> SnakeServer.sendError("Error in GUI-Server:"+e,)@ }
results[https://github.com/kjgarwin/RPCS-Dispatcher/blob/19514bbb0f23e71fe3140d209e5a22942ff8a2bc/src/cmu/edu/pinquu/network/DispatcherSocket.java][<init>][1] = -> TRY {  -> this.incoming=new InputStreamReader(this._connection.getInputStream(),)@ -> this.outgoing=new PrintWriter(this._connection.getOutputStream(),)@ } CATCH(Exception) {}
results[https://github.com/OWASP/WebGoat/blob/826b9e73bc0c6a44b99284a779eb1469fc67ed88/webgoat/main/project/JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java][sendMessage][4] = -> TRY { -> osw=new OutputStreamWriter(s.getOutputStream(),)@ -> osw.write(message,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/epronk/fitnesse/blob/e27c17eef220e6bba556cc2b63d62d018ad36831/src/fitnesse/components/FitClient.java][acceptSocket][1] = -> TRY {  -> fitInput=fitSocket.getOutputStream()@ -> FitProtocol.writeData("",fitInput,)@ -> fitOutput=new StreamReader(fitSocket.getInputStream(),)@ } CATCH(Exception) {}
results[https://github.com/thomasbecker/jetty-spdy/blob/76788d730f0581ca18ee033d787c8c832e9b18ca/jetty-server/src/test/java/org/eclipse/jetty/server/HttpServerTestBase.java][testUnreadInput][2] = -> TRY {  -> client=newSocket(HOST,_connector.getLocalPort(),)@ -> out=client.getOutputStream()@ -> resps=readResponse(client,)@ } CATCH(Exception) {}
results[https://github.com/always-on/always/blob/f4bca9fbcb0fa82bdd490922d19e7fcda026aa37/plugins/scriptbuilder-plugin/java/DialogueRuntime/ECAClient.java][<init>][1] = -> TRY {  -> IF { -> return @socket==null } -> outs=socket.getOutputStream()@!(socket==null) -> ins=socket.getInputStream()@!(socket==null) } CATCH(Exception) {}
results[https://github.com/jsanda/rhq-plugins/blob/1fe5c4cfb21610f16680f5a30c3766cb3a8fab84/platform/src/main/java/org/rhq/plugins/platform/content/yum/Request.java][reply][1] = -> TRY {  -> ostr=socket.getOutputStream()@ -> content.writeHeader(ostr,)@ -> content.writeContent(ostr,)@ -> ostr.close()@ } CATCH(Exception) {}
results[https://github.com/chronatog/Lab2RMI/blob/b64df7bb3a7fe30671a7a1e7ca14ca4306a85df3/Verteilte Systeme - Lab2 - RMI/src/auctionServer/ServerThread.java][answerClient][2] = -> TRY { -> out=new PrintWriter(socket.getOutputStream(),true,)@ -> out.println(message,)@ } CATCH(Exception) { -> System.out.println("Error answering client!",)@ }
results[https://github.com/rlgomes/dtf/blob/b5379f9427efa791e0fe1186ef4174913d7321c0/external/TCPReflector/src/Connection.java][connectToDest][1] = -> TRY { -> destSocket=new Socket(destHost,destPort,)@ -> destIn=destSocket.getInputStream()@ -> destOut=destSocket.getOutputStream()@ } CATCH(Exception) { -> cm.connectionError(this,"connect error: "+destHost+"/"+destPort+" "+e,)@ }
results[https://github.com/OpenRadStack/mirth/blob/0e0679caa63d8104b21e29aedc6c374acfab7d0d/server/src/com/mirth/mirth/connectors/tcp/TcpMessageDispatcher.java][write][2] = -> TRY {  -> bos=new BufferedOutputStream(socket.getOutputStream(),)@ -> protocol.write(bos,buffer,)@ -> bos.flush()@ } CATCH(Exception) {}
results[https://github.com/dCache/dcache/blob/e41a0546ed1f03125e200bb005d37311794519b5/modules/dcap/security_plugins/javatunnel/SelfTest.java][run][3] = -> TRY { -> s=new TunnelSocket(_host,_port,new GssTunnel("tigran@DESY.DE","ftp/dcache0.desy.de@DESY.DE",),)@ -> out=s.getOutputStream()@ -> in=s.getInputStream()@ -> os=new PrintStream(out,)@ } CATCH(Exception) { -> System.out.println(e,)@ }
results[https://github.com/lushl9301/IDoNotWantToLearnJava/blob/d3fb5e2b263b0e896babed5573ab29dbf41dc603/CE2006/webcam/Client.java][send][1] = -> TRY {  -> socket=new Socket("localhost",port,)@ -> ImageIO.write(buf,"JPG",socket.getOutputStream(),)@ -> socket.close()@ } CATCH(Exception) {}
results[https://github.com/bladesilent/Harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/luni/src/test/api/windows/org/apache/harmony/luni/tests/java/net/WinSocketTest.java][test_getOutputStream][2] = -> TRY {  -> socket=new Socket("127.0.0.1",0,false,)@ -> o=socket.getOutputStream()@ -> o.write(1,)@ -> socket.close()@ } CATCH(Exception) {}
results[https://github.com/daumproject/daum-library/blob/6c4e98c657a139e063067b408c5f826e625de820/javase/org.daum.library.javase.p2pSock/src/main/java/org/daum/library/fakeDemo/WorkerRunnable.java][run][2] = -> TRY { -> input=clientSocket.getInputStream()@ -> output=clientSocket.getOutputStream()@ -> output.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/leocrawford/javelin/blob/8585a605a7aa1fc0189fa431a24fd540936dcac2/src/main/java/com/crypticbit/diff/demo/swing/contacts/Main.java][actionPerformed][1] = -> TRY { -> socket=new Socket("127.0.0.1",8000,)@ -> exported.callback(socket.getOutputStream(),)@ } CATCH(Exception) { -> ee.printStackTrace()@ }
results[https://github.com/unidevel/android/blob/6429d3139f76f08bf17fe8529e0a9f3718b0c800/MiBoxLauncher/src/com/unidevel/mibox/launcher/client/MiBoxRemoter.java][sendKeyCode][1] = -> TRY { -> socketOut=this.socket.getOutputStream()@ -> out=new DataOutputStream(socketOut,)@ } CATCH(Exception) { -> Log.e("sendKeyCode",ex.getMessage(),ex,)@ }
results[https://github.com/joristork/robots/blob/332826fb23a0f24ffe9d7b3b6a146d8f9d21689a/jobotsim26/JobotSim26/src/javaBot/clients/UVMJobotManagerClient.java][run][1] = -> TRY { -> connection=new Socket(joBotAddress,serialPort,)@ -> out=connection.getOutputStream()@ -> write=new PrintWriter(out,)@ } CATCH(Exception) { -> System.out.println("Failed to connect",)@ }
results[https://github.com/frankdressel/mrdata/blob/90ecdb937fe05b6605881e4610de51158cc01222/generated/mrdata.resource.mrdata/src-gen/mrdata/resource/mrdata/debug/AbstractMrdataDebuggable.java][startEventSocket][1] = -> TRY { -> accept=server.accept()@ -> outputStream=new java.io.PrintStream(accept.getOutputStream(),)@ } CATCH(Exception) { -> mrdata.resource.mrdata.mopp.MrdataPlugin.logError("Can't create socket connection while launching.",e,)@ }
results[https://github.com/passacaglia/LearnJava/blob/75b3bed2da0d6b0cf91bf100dacd8b1ff7ab1bf7/sxt/Socket/TCPClient.java][main][1] = -> TRY {  -> s=new Socket("127.0.0.1",6666,)@ -> os=s.getOutputStream()@ -> dos=new DataOutputStream(os,)@ -> s.close()@ } CATCH(Exception) {}
results[https://github.com/empeeoh/BACnet4J/blob/faadf43d8451569093f557fc1bdb80883630db04/src_test/com/serotonin/bacnet4j/rs485/MstpTest.java][master][1] = -> TRY {  -> socket=new Socket("localhost",50505,)@ -> new MasterNode(socket.getInputStream(),socket.getOutputStream(),station,retryCount,).initialize()@ } CATCH(Exception) {}
results[https://github.com/rafalkrupinski/jetty/blob/727cf815a250f9a2305f3b377f8f0450b9820bd9/jetty-server/src/test/java/org/eclipse/jetty/server/HttpServerTestBase.java][testUnreadInput][1] = -> TRY {  -> client=newSocket(_serverURI.getHost(),_serverURI.getPort(),)@ -> out=client.getOutputStream()@ -> resps=readResponse(client,)@ } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/ba6e9e97c84948700e301eb25dc16e8a36b52524/test/sun/security/ssl/sun/net/www/protocol/https/HttpsURLConnection/ProxyTunnelServer.java][respondForConnect][1] = -> TRY {  -> out=clientSocket.getOutputStream()@ -> pout=new PrintWriter(out,)@ -> IF { -> out.close()@ } } CATCH(Exception) {}
results[https://github.com/eclipse/xtend/blob/f57612a60e4738b165e55f25f2015bf32ad550fb/plugins/org.apache.log4j/source-bundle/org/apache/log4j/varia/ExternallyRolledFileAppender.java][<init>][2] = -> TRY { -> dis=new DataInputStream(socket.getInputStream(),)@ -> dos=new DataOutputStream(socket.getOutputStream(),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/InsomniaAOSP/platform_libcore/blob/4d9d276d01aee9255fec5eaae93827d3af306d34/luni/src/test/java/libcore/java/net/SocketTest.java][call][10] = -> TRY {  -> socket=serverSocket.accept()@ -> out=socket.getOutputStream()@ -> out.write(sendBytes,)@ -> in=socket.getInputStream()@ -> socket.close()@ } CATCH(Exception) {}
results[https://github.com/greg-pe/platform_libcore/blob/0b26c7b2263a591b135e230231a331e3c0f123b8/luni/src/test/java/tests/api/java/net/SocketTest.java][test_shutdownInput][9] = -> TRY {  -> servSock=serverSocket.accept()@ -> theOutput=servSock.getOutputStream()@ -> theOutput.write(sendString.getBytes(),)@ -> theOutput.flush()@ } CATCH(Exception) {}
results[https://github.com/anhtrung93/Wifi-Locator/blob/9450cbf1234bc5d4f5a50b4abadd442e1bab277b/Wifi/src/com/example/DataBase.java][<init>][1] = -> TRY {  -> clientSocket=new Socket(serverAddress,serverPort,)@ -> objectOutputStream=new ObjectOutputStream(clientSocket.getOutputStream(),)@ -> objectInputStream=new ObjectInputStream(clientSocket.getInputStream(),)@ } CATCH(Exception) {}
results[https://github.com/rhusar/HornetQ-oldmigration/blob/7388e7fc57cc668abdb326dfb1e712f2d1831c88/tests/src/org/hornetq/tests/integration/management/ManagementWithStompTest.java][sendFrame][3] = -> TRY {  -> outputStream=stompSocket.getOutputStream()@ -> LOOP { -> outputStream.write(bytes[i],)@i<bytes.length } -> outputStream.flush()@ } CATCH(Exception) {}
results[https://github.com/jmcc0nn3ll/jetty-project/blob/3ac4d8e23cdaf02a29c81f5c6703d3dbf7a28a6c/modules/extra/jetty-ajp/src/test/java/org/mortbay/jetty/ajp/Ajp13ConnectionTest.java][testSSLPacketWithStringKeySize][6] = -> TRY {  -> os=_client.getOutputStream()@ -> os.write(TypeUtil.fromHexString(packet,),)@ -> os.flush()@ -> readResponse(_client,)@ } CATCH(Exception) {}
results[https://github.com/mattstock/android-tinyg/blob/e4624fb675ce5631fc73876048d2f62d782e6bbe/src/org/csgeeks/TinyG/Net/TinyGNetwork.java][doInBackground][1] = -> TRY { -> socket=new Socket(tgfx_hostname,tgfx_port,)@ -> os=socket.getOutputStream()@ -> is=socket.getInputStream()@ } CATCH(Exception) { -> Log.e(TAG,"Socket: "+e.getMessage(),)@ }
results[https://github.com/apache/activemq/blob/7dfb0a2a3c86528d3b7bfeef1fe2df38339b450b/activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java][initializeStreams][1] = -> TRY {  -> buffIn=new TcpBufferedInputStream(socket.getInputStream(),ioBufferSize,)@ -> outputStream=new TcpBufferedOutputStream(socket.getOutputStream(),ioBufferSize,)@ -> this.dataOut=new DataOutputStream(outputStream,)@ } CATCH(Exception) {}
results[https://github.com/bigbrother82/android-test/blob/5dde0c4d9b62929a24d22fac60a5fe7ea86bf612/libcore/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/ServerSocketChannelTest.java][test_accept_socket_write_NonBlock][4] = -> TRY {  -> clientSocket=serverChannel.accept().socket()@ -> out=clientSocket.getOutputStream()@ -> out.write(writeContent,)@ -> clientSocket.close()@ } CATCH(Exception) {}
results[https://github.com/paulrosania/subethasmtp/blob/631e51b2c44eaf4f0303ec68cbbbd575f8c37f87/src/org/subethamail/smtp/test/TimeoutTest.java][testTimeout][1] = -> TRY {  -> sock=new Socket(InetAddress.getLocalHost(),PORT,)@ -> out=sock.getOutputStream()@ -> writer=new PrintWriter(new OutputStreamWriter(out,),)@ } CATCH(Exception) {}
results[https://github.com/elight/the_grinder/blob/66bd72e6919b7cd1ed9b9a4292d9c87f3defcc75/source/src/test/java/net/grinder/communication/TestClientReceiver.java][testShutdown][2] = -> TRY {  -> acceptedSocket=socketAcceptor.getAcceptedSocket()@ -> assertConnection(acceptedSocket.getInputStream(),ConnectionType.AGENT,address,)@ -> socketOutput=acceptedSocket.getOutputStream()@ -> objectStream1=new ObjectOutputStream(socketOutput,)@ } CATCH(Exception) {}
results[https://github.com/duckweed/fitnesse-verify-only/blob/2fa803c584b66926d5b201d2e016207f0e441986/src/fitnesse/slim/SlimClient.java][connect][1] = -> TRY {  -> reader=new StreamReader(client.getInputStream(),)@ -> writer=new BufferedWriter(new OutputStreamWriter(client.getOutputStream(),"UTF-8",),)@ } CATCH(Exception) {}
results[https://github.com/fnppl/openSDX/blob/7d8d43a32ec5b3ec03d673406784ebdc28dfc2d5/src/org/fnppl/opensdx/http/HTTPClientPutRequest.java][send][1] = -> TRY {  -> IF { -> throw new RuntimeException("not connected",)@!(socket.isConnected()) } -> out=socket.getOutputStream()@!(!(socket.isConnected())) -> bout=new BufferedOutputStream(out,)@!(!(socket.isConnected())) } CATCH(Exception) {}
results[https://github.com/weishengshui/posnet2-server/blob/4a8b1b71c049f3b44dcf6da346c76873aa7730df/server/src/test/java/com/chinarewards/qqgbvpn/main/jmx/PosnetConnectTest.java][testConnect_Init][1] = -> TRY {  -> s1=newConnection()@ -> init(s1,)@ -> s1.getOutputStream().close()@ -> s1.close()@ } CATCH(Exception) {}
results[https://github.com/nimbus154/ftp471/blob/36780834ca53bd2b653968e9a6ec22ba082e48fa/ftp-server/src/test/java/cpsc471/ftp/server/control/ControlWorkerTest.java][setUp][1] = -> TRY {  -> socket=mock(Socket.class,)@ -> outputStream=new ByteArrayOutputStream()@ -> when(socket.getOutputStream(),).thenReturn(outputStream,)@ } CATCH(Exception) {}
results[https://github.com/ducki2p/i2p/blob/5782c42d257e4f67b578ba306ac6af36ee013ad7/apps/sam/java/test/net/i2p/sam/TestSwarm.java][connect][1] = -> TRY { -> _samSocket=new Socket(_samHost,Integer.parseInt(_samPort,),)@ -> _samOut=_samSocket.getOutputStream()@ -> _samIn=_samSocket.getInputStream()@ } CATCH(Exception) { -> _log.error("Unable to connect to SAM at "+_samHost+":"+_samPort,e,)@ }
results[https://github.com/darrinwillis/distributedSystems/blob/c4d16109b6722e48880a817ec45fb8cef923d507/lab2/src/Communicate.java][run][1] = -> TRY { -> soc=serverSock.accept()@ -> inStream=soc.getInputStream()@ -> outStream=soc.getOutputStream()@ -> pd.out=new ObjectOutputStream(outStream,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/zeph/grinder/blob/01ad696ad75411031e001d49db3bfd666c4cf383/source/tests-src/net/grinder/communication/TestClientSender.java][testBlockingSend][2] = -> TRY {  -> acceptedSocket=socketAcceptor.getAcceptedSocket()@ -> socketInput=acceptedSocket.getInputStream()@ -> socketOutput=acceptedSocket.getOutputStream()@ -> receiver1=new ReceiveOneMessageAndReply(socketInput,socketOutput,)@ -> receiver2=new ReceiveOneMessageAndReply(socketInput,socketOutput,)@ } CATCH(Exception) {}
results[https://github.com/empeeoh/BACnet4J/blob/faadf43d8451569093f557fc1bdb80883630db04/src_test/com/serotonin/bacnet4j/rs485/MstpTest.java][slave][1] = -> TRY {  -> socket=new Socket("localhost",50505,)@ -> new SlaveNode(socket.getInputStream(),socket.getOutputStream(),station,).initialize()@ } CATCH(Exception) {}
results[https://github.com/multi-perspectives/cluster/blob/3f3a35f25e468076f0e3ff0e5ecdddfca93c798b/Plugins/org.feature.multi.perspective.mapping.viewmapping.resource.mtext/src/gen/java/org/feature/multi/perspective/mapping/viewmapping/resource/mtext/debug/AbstractMtextDebuggable.java][startEventSocket][1] = -> TRY { -> accept=server.accept()@ -> outputStream=new java.io.PrintStream(accept.getOutputStream(),)@ } CATCH(Exception) { -> new org.feature.multi.perspective.mapping.viewmapping.resource.mtext.util.MtextRuntimeUtil().logError("Can't create socket connection while launching.",e,)@ }
results[https://github.com/diverse-project/k3/blob/3d85630ca19449775f6e2625827ce4e46e482fe2/k3-sample/lego/robot.resource.robot/src-gen/robot/resource/robot/debug/AbstractRobotDebuggable.java][startEventSocket][2] = -> TRY { -> accept=server.accept()@ -> outputStream=new java.io.PrintStream(accept.getOutputStream(),)@ } CATCH(Exception) { -> new robot.resource.robot.util.RobotRuntimeUtil().logError("Can't create socket connection while launching.",e,)@ }
results[https://github.com/joshuadavis/yajul/blob/9bec737a68e871bef0886ca7ba51135c38ab92aa/core/src/test/java/org/yajul/net/SocketServerTest.java][testNetcat][1] = -> TRY {  -> socket=new Socket(InetAddress.getLocalHost(),port,)@ -> clientOut=socket.getOutputStream()@ -> ps=new PrintStream(clientOut,)@ -> socket.close()@ } CATCH(Exception) {}
results[https://github.com/shalynnho/pokemonfactory/blob/588186e627a3255279cc346e903c70742964487b/eclipse_files/src/Networking/ServerWriter.java][<init>][1] = -> TRY { -> oos=new ObjectOutputStream(socket.getOutputStream(),)@ } CATCH(Exception) { -> System.out.println("ServerWriter: Stream init fail",)@ -> e.printStackTrace()@ -> System.exit(1,)@ }
results[https://github.com/cgreenhalgh/opensharingtoolkit-kiosk/blob/25739c9d08cecb771f97d58244ce14d6a64af139/src/org/opensharingtoolkit/httpserver/HttpClientHandler.java][sendError][1] = -> TRY { -> bos=new BufferedOutputStream(s.getOutputStream(),)@ -> osw=new OutputStreamWriter(bos,"US-ASCII",)@ } CATCH(Exception) { -> Log.d(TAG,"Error sending error: "+e.getMessage(),)@ }
results[https://github.com/Zucka/girafAdmin/blob/8757997ee9deb9cc582294f9a9eaf2754d104d70/other/savanah/Serverside/savannah/src/dk/aau/cs/giraf/savannah/test/TestingPurposeClient.java][client_xml][1] = -> TRY { -> socket=new Socket("127.0.0.1",50000,)@ -> out_xml=new PrintWriter(socket.getOutputStream(),true,)@ -> out_xml.println(msg,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
