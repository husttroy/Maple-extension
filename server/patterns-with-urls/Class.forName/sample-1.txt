results[https://github.com/mybatis/mybatis-3/blob/9745e2b6ced726dac339e6919004cf43ab47f408/src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleCrossIncludeTest.java][getSqlSessionFactoryJavaConfig][1501] = -> TRY {  -> Class.forName("org.hsqldb.jdbcDriver",)@ } CATCH(Exception) {}
results[https://github.com/dimitarp/basex-all/blob/7b2c7fc5c912e2dde52cccce7a7e245141f49478/src/main/java/org/basex/build/HTMLParser.java][getHTMLReader][170] = -> TRY {  -> return (XMLReader) Class.forName("org.ccil.cowan.tagsoup.Parser",).newInstance()@ } CATCH(Exception) {}
results[https://github.com/eea/eea.eunis/blob/027e417c38a84aad3f8a5793fa47b3628a711272/src/main/java/ro/finsiel/eunis/search/AdvancedSearch.java][DeleteBranch][192] = -> TRY { -> Class.forName(SQL_DRV,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/niklasf/jumpnevolve/blob/479099cd41d8f33fc423e56a3dd80a137568c9a6/lib/slick/src/org/newdawn/slick/SavedState.java][isWebstartAvailable][6] = -> TRY { -> Class.forName("javax.jnlp.ServiceManager",)@ } CATCH(Exception) { -> Log.info("Using Local File System",)@ }
results[https://github.com/gpothier/stiq/blob/4dba67a6458ec8bf93fa550b40d463e4d1d7ef80/core/src/test/tod/tools/recording/Record.java][findConstructor][37] = -> TRY {  -> theClass=Class.forName(itsMethodName,)@ -> return theClass.getConstructor(theArgClasses,)@ } CATCH(Exception) {}
results[https://github.com/IanDarwin/darwinsys-api/blob/77f3ee948ca5755750d16174b9e7eeb02916db90/src/com/darwinsys/testing/CheckAccessors.java][process][1] = -> TRY {  -> c=Class.forName(className,)@ -> process(c,)@ } CATCH(Exception) {}
results[https://github.com/pacerom/libcore/blob/8f7341440cf447efc91739bdc4ad24ce4957e83b/luni/src/test/java/libcore/java/nio/BufferTest.java][testHasArrayOnJniDirectByteBuffer][13] = -> TRY {  -> c=Class.forName("java.nio.DirectByteBuffer",)@ -> ctor=c.getDeclaredConstructor(long.class,int.class,)@ } CATCH(Exception) {}
results[https://github.com/specify/specify/blob/f3059c2edc655551faf9249ceac2cef26125f360/src/edu/ku/brc/specify/ui/forms/DataObjFieldFormatMgr.java][<init>][34] = -> TRY { -> classObj=Class.forName(className,)@ } CATCH(Exception) { -> throw new RuntimeException(ex,)@ }
results[https://github.com/mdaniel/svn-caucho-com-resin/blob/a6893ab9caeb25b407a1da57bd9b8651c34c08b4/modules/jamp_prototype_early/src/com/caucho/amp/AmpProxyCreator.java][createProxy][2] = -> TRY {  -> return createProxy(Class.forName(interface_,),encoding,protocol,toURL,fromURL,)@ } CATCH(Exception) {}
results[https://github.com/mattibickel/csql/blob/c479ca6ca83c730b54449f526601ed43a4674b5b/test/soakTest/jdbcDelete.java][main][26] = -> TRY { -> Class.forName("csql.jdbc.JdbcSqlDriver",)@ } CATCH(Exception) { -> System.out.println("Exception: "+e,)@ }
results[https://github.com/geoserver/geoserver-history/blob/163824aee4c5a0cd6ecfd7fb0add8ac5b8312896/src/community/geosearch/src/main/java/org/geoserver/geosearch/LayerSiteMapRestlet.java][<clinit>][18] = -> TRY { -> Class.forName("org.h2.Driver",)@ } CATCH(Exception) { -> throw new RuntimeException("Could not initialize the class constants",e,)@ }
results[https://github.com/ltackmann/java-samples/blob/2a3a08b121c96fa6871074aec1ec824854df5e6c/sandbox/src/main/java/compiler/JavaCompilerTest.java][main][23] = -> TRY {  -> clazz=Class.forName("C",)@ -> m=clazz.getMethod("main", new Class[],)@ } CATCH(Exception) {}
results[https://github.com/fsteeg/hollala/blob/9b380d0a83d4be0d0594c90c86b679599b081667/com.quui.chat.engine/lib/log4j/src/java/org/apache/log4j/jdbc/JDBCAppender.java][setDriver][6] = -> TRY { -> Class.forName(driverClass,)@ } CATCH(Exception) { -> errorHandler.error("Failed to load driver",e,ErrorCode.GENERIC_FAILURE,)@ }
results[https://github.com/bonitasoft/bonita-engine/blob/4a0f1ca47177c5e103ca43e79e271ba83a26fb61/services/bonita-transaction/bonita-transaction-impl/src/main/java/org/bonitasoft/engine/transaction/Narayana5TransactionManagerAccessor.java][<init>][3] = -> TRY {  -> jtaPropertyManagerClass=Class.forName("com.arjuna.ats.jta.common.jtaPropertyManager",)@ -> getJTAEnvironmentBeanMethod=jtaPropertyManagerClass.getMethod("getJTAEnvironmentBean",)@ } CATCH(Exception) {}
results[https://github.com/francisliu/hbase_namespace/blob/464b1fecf23b7b514a22f3d5428e2243349a92a4/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ShutdownHookManager.java][<clinit>][5] = -> TRY { -> shutdownHookManagerClass=Class.forName("org.apache.hadoop.util.ShutdownHookManager",)@ } CATCH(Exception) { -> instance=new ShutdownHookManagerV1()@ }
results[https://github.com/apache/chainsaw/blob/32c3ba55e54a69b1726390986289defe96fd153d/src/java/org/apache/log4j/chainsaw/ApplicationPreferenceModelPanel.java][setupComponents][1] = -> TRY { -> gtkLF=Class.forName("com.sun.java.swing.plaf.gtk.GTKLookAndFeel",)@ } CATCH(Exception) { -> logger.debug("Can't find new GTK L&F, might be Windows, or <JDK1.4.2",)@ }
results[https://github.com/uDig/udig-platform/blob/349340250a93a231ae44ba69b78c7b895ff84bd5/plugins/org.locationtech.udig.tools.jgrass/src/org/locationtech/udig/tools/jgrass/geopaparazzi/ImportGeopaparazziFolderWizard.java][addPages][1] = -> TRY { -> Class.forName("org.sqlite.JDBC",)@ } CATCH(Exception) { -> ExceptionDetailsDialog.openError(null,message,IStatus.ERROR,JGrassToolsPlugin.PLUGIN_ID,e,)@ }
results[https://github.com/mandylu/android/blob/f3a49352c8f89f5e2f92b23565bc12b5265bc4a2/com.quanleimu.test/src/com/quanleimu/activity/test/BXImageViewElement.java][getDrawableId][2] = -> TRY {  -> innerClass=Class.forName(className,)@ -> fields=innerClass.getFields()@ } CATCH(Exception) {}
results[https://github.com/ga-m3dv/ga-worldwind-suite/blob/2f61b45197b4c5c199e882d943cb8f4d7e4ae784/WorldWindRad/src/util/DefaultLauncher.java][macFileManagerOpen][14] = -> TRY {  -> fileMgr=Class.forName("com.apple.eio.FileManager",)@ -> openURL=fileMgr.getDeclaredMethod("openURL", new Class[],)@ } CATCH(Exception) {}
results[https://github.com/CleverCloud/Quercus/blob/d3696da7106d3855d0ef863581d2f8f45a7dac34/modules/quercus/src/com/caucho/quercus/lib/db/OracleOciCollection.java][<clinit>][2] = -> TRY { -> classOracleARRAY=Class.forName("oracle.sql.ARRAY",)@ } CATCH(Exception) { -> L.l("Unable to load ARRAY class oracle.sql.ARRAY.",)@ }
results[https://github.com/killbill/killbill/blob/de9e630759a56c17a4ceb53f11cad2607c1055a0/account/src/test/java/org/killbill/billing/account/api/user/TestEventJson.java][testDefaultAccountChangeEvent][2] = -> TRY {  -> claz=Class.forName("org.killbill.billing.account.api.user.DefaultAccountChangeEvent",)@ -> obj=mapper.readValue(json,claz,)@ } CATCH(Exception) {}
results[https://github.com/esialb/org.funcish/blob/92261d04dfe9f037e7cb3e52404206fb005c505e/funcish-core/src/main/java/org/funcish/core/util/Mappings.java][map0][1] = -> TRY {  -> return Class.forName(key,).asSubclass(v,)@ } CATCH(Exception) {}
results[https://github.com/iamthechad/frame2/blob/4fbb7f9c498ed1eeb61d710d212dcfd8b2b6fc97/Frame2/framework/test/src/org/megatome/frame2/front/TestMissingFileUpload.java][testPrerequisites][3] = -> TRY { -> Class.forName("org.apache.commons.fileupload.DiskFileUpload",)@ } CATCH(Exception) { -> fail("Unexpected Exception",)@ }
results[https://github.com/adempiere/adempiere/blob/dd9ac2ccd676218f41535dd4b275ffb2fd27a38e/looks/src/org/adempiere/plaf/AdempierePLAF.java][<clinit>][1] = -> TRY { -> Class.forName("com.jgoodies.looks.plastic.Plastic3DLookAndFeel",)@ } CATCH(Exception) { -> log.severe("Plastic look and feel not found",)@ }
results[https://github.com/SomethingExplosive/android_libcore/blob/5aced732888f8737c9c30ddf6e2e16ee911c4a54/luni/src/test/java/sun/misc/UnsafeTest.java][getUnsafe][6] = -> TRY {  -> unsafeClass=Class.forName("sun.misc.Unsafe",)@ -> f=unsafeClass.getDeclaredField("theUnsafe",)@ } CATCH(Exception) {}
results[https://github.com/eclipse/org.aspectj/blob/185d841fb8b93ff3a91dc032d9ee1ad8c0b8a60f/tests/bugs161/pr235829/Main.java][main][1] = -> TRY {  -> c=Class.forName("a.b.Adapter$1",)@ -> ts=c.getGenericInterfaces()@ } CATCH(Exception) {}
results[https://github.com/AtoAraki/Java_Training/blob/3d7260df8be0c8c1ed085cd0d3c3de9c7c730ce9/Araki/JPL/ch16/ex16_03/ClassContentsTest.java][testSearchType][2] = -> TRY {  -> startClass=Class.forName("ch16.ex16_03.X",)@ -> ClassContents.searchType(startClass,)@ } CATCH(Exception) {}
results[https://github.com/dzensystem/prim/blob/e1cfe7dbf520a56ba2a41bd6072645e8da4b2ae5/src/java/project/Application.java][createConnection][3] = -> TRY {  -> Class.forName(getDbDriver(),)@ } CATCH(Exception) {}
results[https://github.com/Euphemiasan/Project_FrameData/blob/feb40240aed7c5ee4e675e0fdadcd634e3034e75/lib/hsqldb-2.2.8/hsqldb/src/org/hsqldb/server/HsqlSocketFactory.java][newFactory][4] = -> TRY {  -> clazz=Class.forName(implClass,)@ -> ctor=clazz.getDeclaredConstructor(ctorParm,)@ } CATCH(Exception) {}
results[https://github.com/hibernate/hibernate-metamodelgen/blob/a224e3fb1ea066b61bf20e64151ede21c4b07f81/generator/src/test/java/test/XmlMappingTest.java][testXmlConfiguredEmbeddedClassGenerated][2] = -> TRY {  -> assertNotNull(Class.forName("model.xmlmapped.Address_",),)@ } CATCH(Exception) {}
results[https://github.com/apache/directory-studio/blob/c9d5274977c0fbcd0e7fdda11a3490ecd5eefeaf/ldapstudio-browser-core/src/main/java/org/apache/directory/ldapstudio/browser/core/internal/model/ModificationLogger.java][getFieldFromClass][4] = -> TRY {  -> clazz=Class.forName(className,)@ -> fields=clazz.getDeclaredFields()@ } CATCH(Exception) {}
results[https://github.com/teiid/teiid/blob/5399d7d3b06a6d66a4ee31d8076bdb4e8f743fd5/federate-test-integration/src/test/java/com/metamatrix/server/integration/TestXQueryServices.java][testXQueryCall][9] = -> TRY {  -> Class.forName(EmbeddedDriver.class.getName(),)@ } CATCH(Exception) {}
results[https://github.com/spring-projects/spring-data-neo4j/blob/df09eedcd471fffa564c017d81f97b41c4e5565e/spring-data-neo4j/src/main/java/org/springframework/data/neo4j/support/GraphDatabaseFactory.java][createRestGraphDatabase][2] = -> TRY {  -> restGraphDatabaseClass=Class.forName("org.neo4j.rest.graphdb.RestGraphDatabase",)@ -> constructor=restGraphDatabaseClass.getConstructor(URI.class,String.class,String.class,)@ } CATCH(Exception) {}
results[https://github.com/dworkin/reddwarf/blob/026a0ddf6bda33bbfffb8bd9514da02a8f141090/sgs-server/src/test/java/com/sun/sgs/test/impl/service/nodemap/EvilProxy.java][<init>][2] = -> TRY {  -> serverClass=Class.forName("com.sun.sgs.impl.service.nodemap.NodeMappingServer",)@ -> methods=serverClass.getDeclaredMethods()@ } CATCH(Exception) {}
results[https://github.com/radargun/radargun/blob/e7d19effdf6523adafdaaf3abdf1ffc47e71da2f/framework/src/main/java/org/radargun/utils/Utils.java][dumpHeap][1] = -> TRY {  -> clazz=Class.forName(HOTSPOT_BEAN_CLASS,)@ -> m=clazz.getMethod(HOTSPOT_BEAN_DUMP_METHOD,String.class,boolean.class,)@ } CATCH(Exception) {}
results[https://github.com/eclipse/mwe/blob/4354dc47823f4f77b7d690a66a21bf78b999f0b8/tests/org.eclipse.emf.mwe2.language.tests/src/org/eclipse/emf/mwe2/language/tests/model/ActualTypeComputationTest.java][testInferredLiteralTypes][1] = -> TRY {  -> checkPropertyType("a = java.util.Arrays.ArrayList {}",Class.forName("java.util.Arrays$ArrayList",),)@ } CATCH(Exception) {}
results[https://github.com/maxcom/lor-jamwiki/blob/d1ae12b561567a00b757cb96fca3c24f3713465b/src/java/org/jmwiki/persistency/db/DatabaseConnection.java][setUpConnectionPool][3] = -> TRY {  -> Class.forName(Environment.getValue(Environment.PROP_DB_DRIVER,),)@ } CATCH(Exception) {}
results[https://github.com/iBot/HAW_SS13_AI/blob/645024421e2bd723a7fd411aa734886db0b375b8/code/HES/lib/hibernate-release-4.0.1.Final/project/hibernate-core/src/test/java/org/hibernate/metamodel/binding/SimpleValueBindingTests.java][initialize][2] = -> TRY { -> return Class.forName(name,)@ } CATCH(Exception) { -> throw new ClassLoadingException("Could not load class : "+name,e,)@ }
results[https://github.com/corny/jwebsocket/blob/960cb2ba1649617c4806e2117f654a50d1a1abf4/shared/J2SE/jWebSocketServer/org/jwebsocket/eventmodel/event/WebSocketEventDefinition.java][getEventClass][1] = -> TRY {  -> return Class.forName(getNs(),)@ } CATCH(Exception) {}
results[https://github.com/kia/FitGoodies/blob/da4ae09cca23c71f6b49e7e23d5efeeea3e070fd/fitgoodies/src/main/java/de/cologneintelligence/fitgoodies/adapters/SetupFixture.java][load][1] = -> TRY {  -> clazz=(Class<? extends AbstractTypeAdapter<?>>) Class.forName(className,)@ -> helper.register(clazz,)@ } CATCH(Exception) {}
results[https://github.com/HelioScan/HelioScan/blob/4d04d3484cba085f149e02387e0bedf624c1ede0/tools/HelioImageJ/source/Jimi_Reader.java][run][2] = -> TRY { -> Class.forName("com.sun.jimi.core.Jimi",)@ } CATCH(Exception) { -> IJ.showMessage("Jimi Reader","This plugin requires jimi.jar, available from\n"+"\"http://rsb.info.nih.gov/ij/plugins/jimi.html\".",)@ }
results[https://github.com/openjdk-mirror/jdk7u-hotspot/blob/0c9a29ae6be9aa269b8b04b845a64d86fe2ca6c4/test/compiler/6603011/Test.java][main][4] = -> TRY {  -> cl=Class.forName("Test",)@ -> apploader=(URLClassLoader) cl.getClassLoader()@ } CATCH(Exception) {}
results[https://github.com/dusken/pegadi/blob/a98b04a14472174089d706f51764710857203d9f/server/src/redsys/server/user/UserServerImpl.java][main][1] = -> TRY { -> Class.forName("org.gjt.mm.mysql.Driver",)@ } CATCH(Exception) { -> Log.e(e,)@ }
results[https://github.com/thobe/neo4j-advanced/blob/8f586b424819aa1f6d8deb6b655114716b4f9bb0/src/main/java/org/neo4j/management/impl/BeanProxy.java][<init>][5] = -> TRY {  -> JMX=Class.forName("javax.management.JMX",)@ -> this.newMXBeanProxy=JMX.getMethod("newMXBeanProxy",MBeanServerConnection.class,ObjectName.class,Class.class,)@ } CATCH(Exception) {}
results[https://github.com/anotheria/moskito/blob/4b7db67f4f3789ab5a34702765dee745b493c1e3/moskito-central/java/net/java/dev/moskito/central/storages/LocalProxyStorage.java][<init>][1] = -> TRY {  -> MetaFactory.addFactoryClass(StatStorage.class,Extension.REMOTE,(Class<ServiceFactory<StatStorage>>) Class.forName("net.java.dev.moskito.central.generated.RemoteStatStorageFactory",),)@ } CATCH(Exception) {}
results[https://github.com/francisliu/hbase_namespace/blob/3d9ca37e8c6b36715dd5178d834f5dd074620a0b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/MapreduceTestingShim.java][<clinit>][3] = -> TRY { -> c=Class.forName("org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl",)@ } CATCH(Exception) { -> instance=new MapreduceV1Shim()@ }
results[https://github.com/Jan-Philipp/PSE/blob/b1def88e83defc62e377bd44c038b67d893f6138/PSE2 - Banking/src/DBConnectionManagement/MySQLConnectionPoolDataSource.java][getConnection][1] = -> TRY { -> Class.forName("com.mysql.jdbc.Driver",)@ } CATCH(Exception) { -> logger.fatal("Verbindung zur Datenbank "+Datenbank+" gescheitert"+e,)@ }
results[https://github.com/daball/Cooking-to-Goal/blob/4058cc811d602a62bf99ea691edd3123ffc6797a/lib/db-derby-10.7.1.1-bin/demo/programs/vtis/java/org/apache/derbyDemo/vtis/core/XmlVTI.java][registerXMLRowVTIs][3] = -> TRY {  -> theClass=Class.forName(className,)@ -> methods=theClass.getMethods()@ } CATCH(Exception) {}
results[https://github.com/oferfrid/PrecisExciteTCP/blob/a3e5277b3fc52d4c88201aebfac6069d8f02638b/mmstudio/src/org/micromanager/MMStudioMainFrame.java][run][1] = -> TRY { -> pipelineClass_=Class.forName("org.micromanager.AcqEngine",)@ } CATCH(Exception) { -> ReportingUtils.logError(ex,)@ }
results[https://github.com/uditrugman/openjdk8-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/javax/management/descriptor/MBeanInfoInteropTest.java][test][3] = -> TRY {  -> c=Class.forName(className,)@ -> f=c.getField("BYTES",)@ } CATCH(Exception) {}
results[https://github.com/geoserver/geoserver-history/blob/74f2652cf6f478ab96aa4e01a66c06a8d14d3d66/src/wms/src/main/java/org/vfny/geoserver/wms/responses/map/kml/ReflectiveRegionatingStrategyFactory.java][getStrategyClass][3] = -> TRY { -> myStrategyClass=Class.forName(myClassName,)@!(myStrategyClass!=null) } CATCH(Exception) { -> LOGGER.log(Level.SEVERE,"Failed to find class "+myClassName+" for ReflectiveRegionatingStrategy.",e,)@!(myStrategyClass!=null) }
results[https://github.com/sainthxd/cassandra-jdbc/blob/2fc09b56384ec5a016221336611621719d0584e5/src/test/java/org/apache/cassandra/cql/jdbc/CollectionsTest.java][extras][1] = -> TRY {  -> crse=Class.forName("org.apache.cassandra.cql.jdbc.CassandraResultSetExtras",)@ -> return (CassandraResultSetExtras) result.unwrap(crse,)@ } CATCH(Exception) {}
results[https://github.com/spring-projects/spring-integration/blob/be87cfc365833caee50cfec810854786dab70756/spring-integration-jmx/src/test/java/org/springframework/integration_/mbeanexporterhelper/Int2307Tests.java][testInt2307_DefaultMBeanExporter][1] = -> TRY {  -> clazz=Class.forName("org.springframework.integration.jmx.config.MBeanExporterHelper",)@ -> mBeanExporterHelper=context.getBean(clazz,)@ } CATCH(Exception) {}
results[https://github.com/shutterstock/tungsten-replicator/blob/00a0e5ae946783c6643d2c2441aaba0ff4aac6b5/replicator/test/java/com/continuent/tungsten/replicator/database/TestDatabase.java][setUpBeforeClass][1] = -> TRY {  -> driver=tp.getString("database.driver","org.apache.derby.jdbc.EmbeddedDriver",true,)@ -> Class.forName(driver,)@ } CATCH(Exception) {}
results[https://github.com/lossyrob/caliper/blob/f2591f1cd7eb24d1ef5970568079d2f7a804be8b/caliper/src/main/java/com/google/caliper/worker/WorkerMain.java][construct][2] = -> TRY {  -> return construct(Class.forName(className,),)@ } CATCH(Exception) {}
results[https://github.com/spring-projects/spring-xd/blob/b96ac943a998803041ba30d8c67329a37990e72a/spring-xd-test-fixtures/src/main/java/org/springframework/xd/test/fixtures/JdbcSink.java][initDatasource][1] = -> TRY {  -> classz=(Class<? extends Driver>) Class.forName(driver,)@ -> dataSource.setDriverClass(classz,)@ } CATCH(Exception) {}
results[https://github.com/halset/openmap/blob/0efd6c0f4b0f8080c996ab408d6315f09d8cdee1/src/openmap/com/bbn/openmap/dataAccess/mapTile/TileMillMapTileFactory.java][load][2] = -> TRY { -> Class.forName(testClass,)@ } CATCH(Exception) { -> logger.warning("can't locate sqlite JDBC components",)@ }
results[https://github.com/CyanogenMod/android_external_nist-sip/blob/f35a2ce023b55701ae9ffde56082faa91647e624/java/gov/nist/core/GenericObject.java][getClassFromName][2] = -> TRY { -> return Class.forName(className,)@ } CATCH(Exception) { -> InternalErrorHandler.handleException(ex,)@ }
results[https://github.com/JosephCottam/Stencil/blob/0dd1db0d0bd9c2de7214040e2e88e8c4baa0da1b/Core/stencil/operator/module/util/SyntheticModule.java][<init>][1] = -> TRY {  -> clazz=Class.forName(md.getTargetClass(),)@ } CATCH(Exception) {}
results[https://github.com/athos/reading-clojure/blob/6aed462896af74c4a6e692147dcf8fab6b5b6cbd/src/jvm/clojure/runtime/Reflector.java][getStaticField][1] = -> TRY {  -> c=Class.forName(className,)@ -> f=getField(c,name,true,)@ } CATCH(Exception) {}
results[https://github.com/SmartOnCloud/daofusion/blob/3f314983cd31fdb40e5b246ccb099f63d5cac9e9/daofusion-test/src/test/java/com/anasoft/os/daofusion/test/util/InMemoryDatabaseManager.java][init][9] = -> TRY {  -> Class.forName(beanSetupProperties.getProperty(KEY_JDBC_DRIVER_CLASS,),)@ } CATCH(Exception) {}
results[https://github.com/ebean-orm/avaje-ebeanorm/blob/7aae897def16ec72ab474bbd433ad988c25752cf/src/main/java/com/avaje/ebeaninternal/server/type/ScalarTypeClass.java][parse][1] = -> TRY { -> return Class.forName(value,)@ } CATCH(Exception) { -> throw new PersistenceException(msg,e,)@ }
results[https://github.com/DISID/gvnix/blob/31efa822ee65cb4ea017d395c9f6c830977d2f21/roo/model/src/test/java/org/springframework/roo/model/JdkJavaTypeTest.java][assertValidJdkType][1] = -> TRY {  -> Class.forName(javaType.getFullyQualifiedTypeName(),)@ } CATCH(Exception) {}
results[https://github.com/KhArtNJava/ftspc/blob/9ac0991347b6e8d0cdff85bddd5c90726d4206dc/Lector_old/src/name/khartn/ftspc/indexer/indexers/Sphinx/SphinxTimerForFilesChecking.java][run][4] = -> TRY { -> Class.forName(driver,)@ } CATCH(Exception) { -> Vars.logger.fatal("Error: ",ex,)@ }
results[https://github.com/GDI-Vlaanderen/geonetwork/blob/a372a10777e578e23a805786a6bfc20aa46eb3d3/jeeves/src/main/java/jeeves/monitor/MonitorManager.java][loadClass][1] = -> TRY { -> return (Class<T>) Class.forName(className,)@ } CATCH(Exception) { -> logReflectionError(e,className,type,)@ }
results[https://github.com/blueantelope/-Antelope.CI/blob/c4d120d0838f5b60428fd142138e81fd19d707e2/com.antelope.ci.bus/com.antelope.ci.bus.framework/src/test/java/com/antelope/ci/bus/framework/test/TestNewBundle.java][test][1] = -> TRY {  -> clazz=Class.forName("org.apache.felix.framework.BundleImpl",)@ -> bundle=TestUtils.newInstance(clazz,args,)@ } CATCH(Exception) {}
results[https://github.com/rhusar/HornetQ-oldmigration/blob/909bb2b0426358c31b2df0046d4a9f0ca2685fc7/src/main/org/jboss/messaging/core/tools/ToErase.java][look][2] = -> TRY {  -> c=Class.forName(className,)@ -> System.out.println(c,)@ } CATCH(Exception) {}
results[https://github.com/resteasy/Resteasy/blob/779b6568c29ca0ff64633b98cdd479e1f72ba9ab/jaxrs/arquillian/resteasy-cdi-ejb-test/src/test/java/org/jboss/resteasy/test/cdi/injection/reverse/ReverseInjectionTest.java][doTestSFSB][1] = -> TRY {  -> viewName=Class.forName("org.jboss.resteasy.cdi.injection.reverse."+className+"Interface",)@ -> lookup="ejb:/resteasy-reverse-injection-test/"+className+"!"+viewName.getName()+"?stateful"@ } CATCH(Exception) {}
results[https://github.com/RS485/LogisticsPipes-Dev/blob/db954355b2b42b2125ec92a4d9b9a24a0063615f/common/logisticspipes/proxy/recipeproviders/ImmibisCraftingTableMk2.java][load][1] = -> TRY { -> tileAutoCraftingMk2=Class.forName("mods.immibis.tubestuff.TileAutoCraftingMk2",)@ } CATCH(Exception) { -> LogisticsPipes.log.fine("Necessary classes from Tubestuff were not found",)@ }
results[https://github.com/s4/s4/blob/5dbbaec7069cf68e51109e98c4df400e840cc825/s4-core/src/test/java/io/s4/ft/S4App.java][main][1] = -> TRY {  -> testClass=Class.forName(args[0],)@ -> app=new S4App(testClass,s4CoreConfFile,)@ } CATCH(Exception) {}
results[https://github.com/srivathsapv/schedulepro/blob/d0adcd717d5f8bf769281b4247c1fc3cc27f9a4b/src/schedulepro/Utilfunctions.java][executeUpdate][4] = -> TRY { -> Class.forName("com.mysql.jdbc.Driver",)@ } CATCH(Exception) { -> JOptionPane.showMessageDialog(null,e,)@ }
results[https://github.com/goodow/j2objc/blob/412a08708667c3b49269201558fafeb03dbee4f0/jre_emul/Tests/java/lang/ClassTest.java][testGetDeclaredConstructor][2] = -> TRY {  -> foo=Class.forName("java.lang.ClassTest",)@ -> c=foo.getConstructor()@ } CATCH(Exception) {}
results[https://github.com/myGrid/scufl2/blob/5bbbdf2b327951e1a9a4ed5366b8afec16828570/scufl2-rdfxml/src/main/java/uk/org/taverna/scufl2/rdfxml/RDFXMLSerializer.java][setPrefixMapper][2] = -> TRY { -> Class.forName("com.sun.xml.bind.marshaller.NamespacePrefixMapper",)@ } CATCH(Exception) { -> logger.log(Level.FINE,"Can't find NamespacePrefixMapper",e,)@ }
results[https://github.com/damonkohler/sl4a/blob/73a20e80eecb05668dbfa565dea5565d2cd5f9d5/android/Utils/src/com/googlecode/android_scripting/FileUtils.java][chmod][3] = -> TRY {  -> fileUtils=Class.forName("android.os.FileUtils",)@ -> setPermissions=fileUtils.getMethod("setPermissions",String.class,int.class,int.class,int.class,)@ } CATCH(Exception) {}
results[https://github.com/jcai/corner2/blob/5ecd31cb5c6d1801749b3699c30373c6dee6152d/src/main/java/corner/orm/spring/EntityBeanFinderFactoryBean.java][getClass][1] = -> TRY {  -> className=className(res,)@ -> return Class.forName(className,)@ } CATCH(Exception) {}
results[https://github.com/dworkin/reddwarf/blob/2a1818d7959296be29062e254ea7a7931569db30/sgs-server/src/test/java/com/sun/sgs/test/impl/service/nodemap/affinity/TestGraphListener.java][testNoteConflictDetected][1] = -> TRY {  -> builderClass=Class.forName(builderName,)@!(builderName==null) -> meth=UtilReflection.getMethod(builderClass,"noteConflictDetected",Object.class,long.class,boolean.class,)@!(builderName==null) } CATCH(Exception) {}
results[https://github.com/ansell/semanticwebpipes/blob/f222211ab3f92a12db32482323a706e8105dd3d8/src/org/deri/pipes/store/DatabasePipeManager.java][getConnection][1] = -> TRY { -> Class.forName("com.mysql.jdbc.Driver",)@ } CATCH(Exception) { -> logger.info("could not get connection",e,)@ }
results[https://github.com/ravihuang/ATE4D/blob/57e41d800767fd43937b939faf3ee2b9536691ca/src/ate/util/DbUtils.java][connect][2] = -> TRY {  -> Class.forName(getDriver(),)@ } CATCH(Exception) {}
results[https://github.com/lorainelab/TableView/blob/38ae113426ccc244b45313dc41a04e6b186aab39/src/edu/umn/genomics/table/cluster/cluto/ClutoMatrixView.java][<init>][1] = -> TRY { -> Class.forName("javax.swing.JSpinner",)@ } CATCH(Exception) { -> ExceptionHandler.popupException(""+ex,)@ }
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/Tomcat-7/java/org/apache/catalina/loader/WebappLoader.java][createClassLoader][1] = -> TRY {  -> clazz=Class.forName(loaderClass,)@ -> constr=clazz.getConstructor(argTypes,)@ } CATCH(Exception) {}
results[https://github.com/mdaniel/svn-caucho-com-resin/blob/8a2afb59e87525bf79b2218e3d84e1ddcbeef905/modules/jamp_prototype_early_/base/core/src/com/caucho/amp/AmpProxyCreator.java][createProxy][1] = -> TRY {  -> return createProxy(Class.forName(interface_,),toURL,fromURL,)@ } CATCH(Exception) {}
results[https://github.com/bmatthews68/inmemdb-maven-plugin/blob/c5b13830c333230c4e9fcdff716a380fa3173ba6/inmemdb-maven-plugin/src/test/java/com/btmatthews/maven/plugins/inmemdb/test/AbstractTestRunMojo.java][setUp][1] = -> TRY {  -> Class.forName(getDriverClassName(),)@ } CATCH(Exception) {}
results[https://github.com/zauberlabs/gnip4j/blob/88b9c36638623f6333fe7703b9aee39132329b36/core/src/main/java/com/zaubersoftware/gnip4j/api/support/jmx/JMXProvider.java][<clinit>][1] = -> TRY { -> Class.forName("java.lang.management.ManagementFactory",)@ } CATCH(Exception) { -> provider=new NullJMXProvider()@ }
results[https://github.com/apache/river/blob/e150abdd925f848d0d43a0b92438ed29c8dea61e/integrationtests/source/vob/qa/src/com/sun/jini/test/impl/outrigger/matching/MatchTestBase.java][writeBunch][1] = -> TRY {  -> writeBunch(Class.forName("net.jini.core.entry.Entry",),)@ } CATCH(Exception) {}
results[https://github.com/rolisv/odata4j-fork/blob/0c032dd2593307275da99ccf60178648f4acc503/odata4j-fit/src/test/java/org/odata4j/test/integration/producer/jpa/airline/AirlineJPAProducerBaseTest.java][execute][5] = -> TRY { -> Class.forName("org.hsqldb.jdbcDriver",)@ } CATCH(Exception) { -> this.logger.error("ERROR: failed to load HSQLDB JDBC driver.",ex,)@ }
results[https://github.com/lihaoyi/Metascala/blob/e5138c048bcd1b4e1bdf1c754a859e3332ba23e8/src/test/java/sm/natives/classes/ClassObject.java][forName][2] = -> TRY {  -> x=Class.forName(s,)@ -> return x.getCanonicalName()@ } CATCH(Exception) {}
results[https://github.com/gwt-test-utils/gwt-test-utils/blob/c9dc8184c92855633d7be80c7471972984bc0345/gwt-test-utils/src/main/java/com/googlecode/gwt/test/internal/handlers/ResizeLayoutPanelImplCreateHandler.java][create][2] = -> TRY {  -> clazz=Class.forName("com.google.gwt.user.client.ui.ResizeLayoutPanel$ImplStandard",)@ -> return GwtReflectionUtils.instantiateClass(clazz,)@ } CATCH(Exception) {}
results[https://github.com/fucking007/src/blob/3483a4d1b6f8a84e2420d87c4c44742e3e999fc5/sigepsa/RealizacionPagosVarios.java][btnDescripcionPagoActionPerformed][1] = -> TRY { -> Class.forName("com.mysql.jdbc.Driver",)@ } CATCH(Exception) { -> Mensaje("Error en los Datos",)@ }
results[https://github.com/panbasten/BA/blob/4d5f54286d2769f5ae3f6c004e6ac2647827a903/ba/fly-core/src/main/java/com/flywet/platform/bi/core/utils/ReflectionUtils.java][newInstance][1] = -> TRY {  -> newoneClass=Class.forName(className,)@ -> return newInstance(newoneClass,args,)@ } CATCH(Exception) {}
results[https://github.com/ynd/swtbot/blob/28b77019e3c7a849fd582978097d823adc888740/org.eclipse.swtbot.swt.recorder.ui/src/org/eclipse/swtbot/swt/recorder/ui/Main.java][start][1] = -> TRY {  -> mainClass=Class.forName(mainClassName(),)@ } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/e1aba9977f1fe50270805fb19ef76065abcc73c8/test/jdk/lambda/vm/DefaultMethodsTest.java][testStrictfpDefault][1] = -> TRY { -> java.lang.Class.forName("vm.StrictfpDefault",)@ } CATCH(Exception) { -> fail("Could not load class",e,)@ }
results[https://github.com/apache/cayenne/blob/09447b57c34cccdeaa65e056aa182d9d3067a918/cayenne-core/src/main/java/org/apache/cayenne/event/JavaGroupsBridgeFactory.java][createEventBridge][1] = -> TRY { -> Class.forName("org.jgroups.Channel",)@ } CATCH(Exception) { -> return createNoopBridge()@ }
results[https://github.com/napramirez/igno/blob/8f8f087c69195b98a0115c5f7732f739c8e670da/igno-server/igno-server-core/src/main/java/com/napramirez/igno/server/dbcp/bonecp/QBoneCPDataSource.java][initService][1] = -> TRY {  -> Class.forName(cfg.get(PROPERTY_JDBC_DRIVER_CLASS,),)@ } CATCH(Exception) {}
results[https://github.com/intalio/tempo/blob/a949c9361fc41373e07e2edc3e1b8cf13114deb5/tms-common/src/main/java/org/intalio/tempo/workflow/task/xml/TaskTypeMapper.java][getTaskClassFromStringName][1] = -> TRY { -> return (Class<? extends Task>) Class.forName("org.intalio.tempo.workflow.task."+klass,)@ } CATCH(Exception) { -> return TaskTypeMapper.getTypeClassByName(klass,)@ }
results[https://github.com/barchart/barchart-udt/blob/e0df2ea887793d2d4654613095221a21f20a780f/barchart-udt-reference-jdk6/src/main/java/sun/net/www/protocol/http/NegotiateAuthentication.java][getSupported][1] = -> TRY {  -> clazz=Class.forName("sun.net.www.protocol.http.NegotiatorImpl",)@ -> c=clazz.getConstructor(String.class,String.class,)@ } CATCH(Exception) {}
results[https://github.com/droolsjbpm/jbpm-form-modeler/blob/6b6ecbc86eaf1a2b702957c07cc2902c9f9c9c30/jbpm-form-modeler-core/jbpm-form-modeler-service/jbpm-form-modeler-service-core/src/main/java/org/jbpm/formModeler/core/model/PojoDataHolder.java][createInstance][1] = -> TRY {  -> return createInstance(Class.forName(className,),)@ } CATCH(Exception) {}
results[https://github.com/apache/hive/blob/79ad310d472b017efd86d96c0cffdcdcfc4c1552/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/TestJdbcWithMiniKdc.java][beforeTest][1] = -> TRY {  -> Class.forName(MiniHS2.getJdbcDriverName(),)@ } CATCH(Exception) {}
results[https://github.com/apache/jackrabbit-oak/blob/854e5185245c4338cba3bc765295bb95b42cc6f8/oak-core/src/main/java/org/apache/jackrabbit/mk/simple/NodeMapInDb.java][<init>][1] = -> TRY { -> Class.forName("org.h2.Driver",)@ } CATCH(Exception) { -> throw ExceptionFactory.convert(e,)@ }
results[https://github.com/cojen/Cojen/blob/db7e031939bcda655799a67c3647d15af7c82cae/Cojen/src/test/cojen/test/TestBeanPropertyAccessor.java][main][1] = -> TRY {  -> bpa=BeanPropertyAccessor.forClass(Class.forName(args[0],),)@ } CATCH(Exception) {}
results[https://github.com/ketan/SWTBot/blob/ff4b95f23e808ddddf8af8a6c8f05d1a0b2ddb31/org.eclipse.swtbot.swt.finder/src/org/eclipse/swtbot/swt/finder/keyboard/KeyboardFactory.java][<init>][1] = -> TRY {  -> <init>(Class.forName(strategyClass,),)@ } CATCH(Exception) {}
