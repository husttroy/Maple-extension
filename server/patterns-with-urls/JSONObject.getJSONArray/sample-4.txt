results[https://github.com/jerrycable/Tasquid/blob/e34e7d71e11a606b245fe33167ebf52bce1180e3/tests/src/com/todoroo/astrid/producteev/ProducteevSyncTest.java][getRemoteNotesArray][3] = -> TRY { -> result=remoteTask.getJSONArray("notes",)@ } CATCH(Exception) { -> fail("Remote task object did not contain notes field",)@ }
results[https://github.com/jrecursive/mecha/blob/a68398e165c672aa50086571a7ed1b0b81c611f8/src/java/mecha/vm/MVM.java][getNth][2] = -> TRY {  -> return (T) obj.getJSONArray(field,).get(n,)@ } CATCH(Exception) {}
results[https://github.com/tijuca/icedove/blob/3af730cd4d20abf8b988d77b4a9b36e42d4c622e/mozilla/mobile/android/base/Prompt.java][getSafeArray][1] = -> TRY { -> return json.getJSONArray(key,)@ } CATCH(Exception) { -> return new JSONArray()@ }
results[https://github.com/parmalazs/schonherz/blob/6a43d83bf39647930311d31ccee7125a4cb37434/FlottaKezelo/src/com/schonherz/classes/JsonFromUrl.java][getRootJsonObject][1] = -> TRY {  -> mainJson=new org.json.JSONObject(jsonString,)@ -> jsonArray=mainJson.getJSONArray("rows",)@ } CATCH(Exception) {}
results[https://github.com/malinovskiy-alex/ifp-shopping/blob/0be4e5aeea64fb82fc8b53aaa6e81e471e0a99d9/shoppingprocess/src/test/java/com/connecture/shopping/process/service/data/converter/ConsumerDataConverterUtilTest.java][testDetermineSelectedProductLines][1] = -> TRY {  -> membersObject=new JSONObject(memberJSON,)@ -> memberArray=membersObject.getJSONArray("members",)@ -> productLines=ConsumerDataConverterUtil.determineSelectedProductLines(memberArray,)@ } CATCH(Exception) {}
results[https://github.com/NCIP/psc/blob/f8544f68a13c472091a228a1b436b20b3e025bce/web/src/test/java/edu/northwestern/bioinformatics/studycalendar/restlets/representations/MultipleAssignmentScheduleJsonRepresentationTest.java][testScheduledActivityStateHistoryEndsWithCurrent][8] = -> TRY {  -> actual=outputAsObject()@ -> history=actual.getJSONArray("state_history",)@ -> first=(JSONObject) history.get(1,)@ } CATCH(Exception) {}
results[https://github.com/jrecursive/mecha/blob/a68398e165c672aa50086571a7ed1b0b81c611f8/src/java/mecha/vm/bifs/StreamModule.java][onDataMessage][2] = -> TRY {  -> msgVec=msg.getJSONArray(dataField,).asList()@ -> Collections.sort(msgVec,comparatorFun,)@ } CATCH(Exception) {}
results[https://github.com/malinovskiy-alex/ifp-shopping/blob/0be4e5aeea64fb82fc8b53aaa6e81e471e0a99d9/shoppingprocess/src/test/java/com/connecture/shopping/process/service/data/converter/ConsumerDataConverterUtilTest.java][testBuildShoppingMembers][1] = -> TRY {  -> membersObject=new JSONObject(memberJSON,)@ -> memberArray=membersObject.getJSONArray("members",)@ -> members=ConsumerDataConverterUtil.buildShoppingMembers(memberArray,)@ } CATCH(Exception) {}
results[https://github.com/svn2github/primefaces-showcase/blob/413c0fd630226d5d79d7e2d49817165c04e5667d/src/main/java/org/primefaces/examples/mobile/TranslateView.java][translate][1] = -> TRY {  -> json=new JSONObject(response,)@ -> jsonArray=json.getJSONArray("text",)@ -> result=jsonArray.getString(0,)@ } CATCH(Exception) {}
results[https://github.com/CTSIatUCSF/shindigorng/blob/3ced2289390b8f1a1e2fb85260d4dafd3ffb9265/java/gadgets/src/test/java/org/apache/shindig/gadgets/http/JsonRpcHandlerTest.java][testMultipleGadgets][8] = -> TRY {  -> response=jsonRpcHandler.process(input,)@ -> outGadgets=response.getJSONArray("gadgets",)@ -> gadget=outGadgets.getJSONObject(0,)@ } CATCH(Exception) {}
results[https://github.com/sismics/docs/blob/870a44da0d520befbc41e007a63fa468487742f5/docs-web/src/test/java/com/sismics/docs/rest/TestDocumentResource.java][searchDocuments][1] = -> TRY {  -> json=response.getEntity(JSONObject.class,)@ -> return json.getJSONArray("documents",).length()@ } CATCH(Exception) {}
results[https://github.com/svn2github/SpagoBI-V4x/blob/9ff27a69e1f78db17d1d66ba1112bc9b59f009a5/SpagoBIQbeEngine/src/it/eng/spagobi/engines/qbe/analysisstateloaders/worksheet/Version0WorksheetStateLoader.java][convertFilters][1] = -> TRY {  -> filtersObj=aSheet.getJSONObject("filters",)@ -> filters=filtersObj.getJSONArray("filters",)@ -> convertAttributes(filters,)@ } CATCH(Exception) {}
results[https://github.com/haha1903/document/blob/53112f162f8f0fb2aed9064aba86f3af6f836871/document-web/src/test/java/com/glodon/paas/document/api/ProjectRestAPITest.java][testGetRoles][1] = -> TRY {  -> result=this.callGet(url,null,JSONObject.class,)@ -> assertNotNull(result.getJSONArray(KEY_ITEMS,),)@ } CATCH(Exception) {}
results[https://github.com/collectionspace/application/blob/d513f21684222aaaa6c6958c434a0b32e6606168/tomcat-main/src/test/java/org/collectionspace/chain/csp/webui/main/TestUIAuthZ.java][createUsers][1] = -> TRY {  -> result=new JSONObject(out.getContent(),)@ -> items=result.getJSONArray("items",)@ } CATCH(Exception) {}
results[https://github.com/terraframe/Runway-SDK/blob/4e1a50a6e89369a0ea61403f3dc6ca0aef06f5a8/runwaysdk-test/src/main/java/com/runwaysdk/facade/JSONInvokeMethodTest.java][testInvokeEmptyMethod][1] = -> TRY {  -> returnObject=new JSONObject(returnJSON,)@ -> jsonArray=returnObject.getJSONArray(JSONReturnObject.RETURN_VALUE,)@ -> jsonObject=jsonArray.getJSONObject(DTOConversionUtilInfo.JSON_CALLED_OBJECT,)@ } CATCH(Exception) {}
results[https://github.com/JackDanny/projetDCLL_MoodleXML_Json/blob/8fd32dd6097d73413d504e9d520c3bf96fefbda3/projet/src/main/java/jsonttoxml/xmlWriter/XmlWriterImpl.java][t][1] = -> TRY { -> tbis=o2.getJSONObject("quiz",)@ -> t2=tbis.getJSONArray("question",)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/nicholasdelrio/VLC/blob/63c62be566ca15d66f7149e5160731b9bcc44484/vlc-visko-interface/src/main/java/edu/utep/cybershare/vlc/visko/HTMLQueryBatch.java][extractResultURL][3] = -> TRY { -> resultsArray=aVisKoResult.getJSONArray("results",)@ -> resultURL=resultsArray.getJSONObject(0,).getString("outputURL",)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/unpush/apache-incubator-shindig/blob/30fe8250399e92adf0f180d22d4a292ac3802660/java/gadgets/src/test/java/org/apache/shindig/gadgets/FeedProcessorTest.java][parseAtomMultiple][4] = -> TRY {  -> feed=processor.process(URL_ATOM,DATA_ATOM,true,2,)@ -> entryArray=feed.getJSONArray("Entry",)@ -> assertEquals(2,entryArray.length(),)@ } CATCH(Exception) {}
results[https://github.com/jortizcs/sfs_applications/blob/d6cae4bcf348210fc8b6e02d9e34750f250064e3/BuildingNetworkAccess/src/sfs/lib/SFSConnector.java][getChildren][1] = -> TRY { -> resp=new JSONObject(CurlOps.get("http://"+host+":"+port+path,),)@ -> return resp.getJSONArray("children",)@ } CATCH(Exception) { -> Log.e("SFSCPnnector.ConnApp::error","",e,)@ }
results[https://github.com/iPlantCollaborativeOpenSource/metadactyl/blob/957ad799b6b42d38d1d5994f5a201fab85ae7ad7/src/test/java/org/iplantc/workflow/template/notification/TestNotificationMarshaller.java][testMarshallNotificationSet][1] = -> TRY {  -> jset=(JSONObject) JSONSerializer.toJSON(json_set,)@ -> array=jset.getJSONArray("wizardNotifications",)@ -> assertEquals(1,array.size(),)@ } CATCH(Exception) {}
results[https://github.com/jri/deepamehta/blob/6a99ea1612ade511d20263337969f30188b3e7b2/deepamehta-core/src/main/java/de/deepamehta/core/model/TypeModel.java][parseLabelConfig][2] = -> TRY {  -> IF { -> return JSONHelper.toList(typeModel.getJSONArray("label_config",),)@typeModel.has("label_config",) } } CATCH(Exception) {}
results[https://github.com/Sage-Bionetworks/workflow/blob/818d6d4c04f355aac585a0c4268798636880d5b4/tools/tcgaWorkflow/src/test/java/org/sagebionetworks/workflow/curation/TcgaWorkflowITCase.java][testDoCreateClinicalMetadata][2] = -> TRY {  -> annotations=allAnnotations.getJSONObject("stringAnnotations",)@ -> assertEquals("tsv",annotations.getJSONArray("format",).get(0,),)@ } CATCH(Exception) {}
results[https://github.com/NUBIC/psc-mirror/blob/2bbcc97f72b769040027e3047e4868fcbf1d2546/web/src/test/java/edu/northwestern/bioinformatics/studycalendar/restlets/representations/MultipleAssignmentScheduleJsonRepresentationTest.java][testScheduledActivityStateHistoryContainsAllStates][4] = -> TRY {  -> actual=outputAsObject()@ -> history=actual.getJSONArray("state_history",)@ -> assertEquals(2,history.length(),)@ } CATCH(Exception) {}
results[https://github.com/NCIP/psc/blob/fef79655deaa9e91226728031af5a243b44f5e98/web/src/test/java/edu/northwestern/bioinformatics/studycalendar/restlets/representations/ReportRepresentationTest.java][testRowsKey][2] = -> TRY {  -> actual=writeAndParseObject(new ReportRepresentation(filters,allRows,),)@ -> assertNotNull("Missing key rows",actual.getJSONArray("rows",),)@ } CATCH(Exception) {}
results[https://github.com/socialize/socialize-sdk-android/blob/6f3086f962f6e41a9f810365f76caf7fc292b2fa/test/src/com/socialize/test/integration/services/a/ActionUtilsTest.java][testGetActionsByUser][6] = -> TRY {  -> json=TestUtils.getJSON(getContext(),"comments.json",)@ -> jsonArray=json.getJSONArray("items",)@ -> jsonObject=(JSONObject) jsonArray.get(0,)@ } CATCH(Exception) {}
results[https://github.com/NCIP/psc/blob/fef79655deaa9e91226728031af5a243b44f5e98/web/src/test/java/edu/northwestern/bioinformatics/studycalendar/restlets/representations/ReportRepresentationTest.java][testRowsFirstValues][4] = -> TRY {  -> actual=writeAndParseObject(new ReportRepresentation(filters,allRows,),)@ -> rows=actual.getJSONArray("rows",)@ -> first=(JSONObject) rows.get(0,)@ } CATCH(Exception) {}
results[https://github.com/stephenfox/iceweasel-dev/blob/cdd8a076d28a6dc919f519243825a8f747f75d6b/mobile/android/base/ProfileMigrator.java][handleMessage][1] = -> TRY { -> IF { -> jsonPrefs=message.getJSONArray("preferences",)@ } } CATCH(Exception) { -> Log.e(LOGTAG,"Exception handling message \""+event+"\":",e,)@ }
results[https://github.com/b3log/b3log-latke/blob/4a7628feef5a25e7eede14706e1211e5096f90f2/latke-repository-mysql/src/test/java/org/b3log/latke/repository/jdbc/JdbcRepositoryTestCase.java][queryPageTest][1] = -> TRY {  -> ret=jdbcRepository.get(query,)@ -> assertEquals(eCount,ret.getJSONArray(Keys.RESULTS,).length(),)@ } CATCH(Exception) {}
results[https://github.com/b3log/b3log-solo/blob/f465958d047a450f57e8700345a7d8f235e40986/core/src/main/java/org/b3log/solo/service/PluginMgmtService.java][refresh][1] = -> TRY {  -> result=pluginRepository.get(new Query(),)@ -> pluginArray=result.getJSONArray(Keys.RESULTS,)@ -> persistedPlugins=CollectionUtils.jsonArrayToList(pluginArray,)@ } CATCH(Exception) {}
results[https://github.com/GWBasic/ObjectCloud/blob/be03c16b620f78f7d77d0598017c4068e8108a00/JavascriptProcess/JavascriptProcess/src/com/objectcloud/javascriptprocess/ScopeWrapper.java][callFunctionInScope][1] = -> TRY {  -> functionName=data.getString("FunctionName",)@ -> function=(Function) scope.get(functionName,scope,)@ -> callFunction("RespondCallFunctionInScope",context,threadID,function,data.getJSONArray("Arguments",),)@ } CATCH(Exception) {}
results[https://github.com/collectionspace/application/blob/addf108261fb0dc9d2c5b38d181041e186ce89ac/tomcat-main/src/test/java/org/collectionspace/chain/csp/persistence/file/TestGeneral.java][testReports][1] = -> TRY {  -> list=new JSONObject(out3.getContent(),)@ -> reportcsid=list.getJSONArray("reportlist",).getString(0,)@ } CATCH(Exception) {}
results[https://github.com/haha1903/document/blob/53112f162f8f0fb2aed9064aba86f3af6f836871/document-web/src/test/java/com/glodon/paas/document/api/ProjectRestAPITest.java][testGetProjects][1] = -> TRY {  -> projects=this.callGet(url,null,JSONObject.class,)@ -> assertNotNull(projects,)@ -> assertNotNull(projects.getJSONArray(KEY_ITEMS,),)@ } CATCH(Exception) {}
results[https://github.com/skyscreamer/yoga/blob/0313327041e3d9703c7ebf0f50f058bc2fb43bf4/yoga-demos/yoga-demo-shared/src/main/java/org/skyscreamer/yoga/demo/test/UserControllerTest.java][testRecommendedAlbums][1] = -> TRY {  -> data=getJSONObject("/user/1",params,)@ -> recommended=data.getJSONArray("recommendedAlbums",)@ -> Assert.assertNotNull(recommended,)@ } CATCH(Exception) {}
results[https://github.com/GWBasic/ObjectCloud/blob/be03c16b620f78f7d77d0598017c4068e8108a00/JavascriptProcess/JavascriptProcess/src/com/objectcloud/javascriptprocess/ScopeWrapper.java][callCallback][1] = -> TRY {  -> callbackID=data.get("CallbackId",)@ -> function=callbacks.get(callbackID,)@ -> callFunction("RespondCallCallback",context,threadID,function,data.getJSONArray("Arguments",),)@ } CATCH(Exception) {}
results[https://github.com/AndiDog/thesis-code/blob/308afa9f5632814d7ada24e63f2a37233ba319a8/Sample application/Android/src/de/andidog/mobiprint/DownloadStoresTask.java][doInBackground][1] = -> TRY { -> res=new JSONObject(builder.toString(),)@!(response.getStatusLine().getStatusCode()<200||response.getStatusLine().getStatusCode()>=300) -> return res.getJSONArray("stores",)@!(response.getStatusLine().getStatusCode()<200||response.getStatusLine().getStatusCode()>=300) } CATCH(Exception) { -> error="Failed to retrieve stores information: "+e.toString()@ }
results[https://github.com/b3log/b3log-solo/blob/5163832f9b0f48fdb5a165dc37ba690d31c7a952/core/src/test/java/org/b3log/solo/service/UserQueryServiceTestCase.java][getUsers][1] = -> TRY {  -> result=userQueryService.getUsers(paginationRequest,)@ -> users=result.getJSONArray(User.USERS,)@ -> Assert.assertEquals(users.length(),1,)@ } CATCH(Exception) {}
results[https://github.com/xunroudabing/DaBing/blob/e42c31187373f8e319430ffd5654267b9a5502f8/WeiXinEmoj/src/com/dabing/emoj/activity/DownloadGridViewActivity.java][<init>][1] = -> TRY { -> object=new JSONObject(json,)@ -> mArray=object.getJSONArray("data",)@ } CATCH(Exception) { -> Log.e(TAG,e.toString(),)@ }
results[https://github.com/svn2github/SpagoBI-V4x/blob/9ff27a69e1f78db17d1d66ba1112bc9b59f009a5/SpagoBIQbeEngine/src/it/eng/spagobi/engines/worksheet/serializer/json/WorkSheetJSONDeserializer.java][deserializeOptions][1] = -> TRY {  -> optionsJSON=workSheetDefinitionJSON.getJSONArray(WorkSheetSerializationUtils.FIELDS_OPTIONS,)@ -> LOOP { -> aField=optionsJSON.getJSONObject(i,)@i<optionsJSON.length() } } CATCH(Exception) {}
results[https://github.com/hampelratte/VCH/blob/08ca03a1d9a00e790ffae33ac088358334df262a/VCHR/src/de/berlios/vch/android/SearchActivity.java][doTheWork][1] = -> TRY {  -> result=new JSONObject(responseBody,)@ -> providers=result.getJSONArray("pages",)@ -> LOOP { -> provider=providers.getJSONObject(i,)@i<providers.length() } } CATCH(Exception) {}
results[https://github.com/geoserver/geoserver-history/blob/dcb33fd3a8b4f9e6ed3e3cf477e2863970968a6f/geoserver/wfs/src/test/java/org/geoserver/wfs/response/GeoJSONTest.java][testPost][20] = -> TRY {  -> rootObject=JSONObject.fromObject(out,)@ -> assertEquals(rootObject.get("type",),"FeatureCollection",)@ -> featureCol=rootObject.getJSONArray("features",)@ -> aFeature=featureCol.getJSONObject(0,)@ } CATCH(Exception) {}
results[https://github.com/azufr/plugins/blob/aa820e0f8174e09af700f3aea0a213d3fd0d8afe/webs/resources-importer-web/docroot/WEB-INF/src/com/liferay/resourcesimporter/util/FileSystemImporter.java][setupAssets][2] = -> TRY {  -> jsonObject=getJSONObject(fileName,)@ -> IF { -> assetsJSONArray=jsonObject.getJSONArray("assets",)@jsonObject!=null -> setupAssets(assetsJSONArray,)@ } } CATCH(Exception) {}
results[https://github.com/evgeniyarbatov/dev-practice/blob/06f63c1223243e41d30dce65486a24ee4c394341/java/researchFeed/src/com/evgeniy/arbatov/feed/NatureAPI.java][searchNature][1] = -> TRY { -> feed=json.getJSONObject("feed",)@ -> entries=feed.getJSONArray("entry",)@ -> paperObj=entries.getJSONObject(0,)@ } CATCH(Exception) { -> System.err.println("Could not encode the search term "+e.getMessage(),)@ }
results[https://github.com/b3log/b3log-solo/blob/5163832f9b0f48fdb5a165dc37ba690d31c7a952/core/src/test/java/org/b3log/solo/service/PageQueryServiceTestCase.java][getPages][1] = -> TRY {  -> result=pageQueryService.getPages(paginationRequest,)@ -> Assert.assertNotNull(result,)@ -> Assert.assertEquals(result.getJSONArray(Page.PAGES,).length(),1,)@ } CATCH(Exception) {}
results[https://github.com/OpenRefine/OpenRefine/blob/ac46653aa3c8a5d3a3252a0972778cd91f90668e/src/main/java/com/metaweb/gridlock/browsing/Engine.java][initializeFromJSON][5] = -> TRY {  -> a=o.getJSONArray("facets",)@ -> length=a.length()@ -> LOOP { -> fo=a.getJSONObject(i,)@i<length } } CATCH(Exception) {}
results[https://github.com/skaegi/orion.server/blob/0565bb44db57d8c421b6d2fbda5613777742374e/tests/org.eclipse.orion.server.tests/src/org/eclipse/orion/server/tests/servlets/git/GitCloneTest.java][testCloneOverSshWithNoKnownHosts][6] = -> TRY {  -> workspace=new JSONObject(response.getText(),)@ -> assertEquals(0,workspace.getJSONArray(ProtocolConstants.KEY_CHILDREN,).length(),)@ } CATCH(Exception) {}
results[https://github.com/joshsh/extendo/blob/5e8c5811b51a1d1b205ee4d80ac86acaddc14a74/extendo-brain/src/test/java/net/fortytwo/myotherbrain/notes/NoteQueriesTest.java][testEncoding][3] = -> TRY {  -> json=writer.toJSON(after,)@ -> j=json.getJSONArray("children",).getJSONObject(0,)@ -> assertEquals("cheval \u00e0 phynances",j.getString("value",),)@ } CATCH(Exception) {}
results[https://github.com/arhughes/droidchatty/blob/7df68c6f4456a9fcc0b0942843d0e27cd9c630da/src/cc/hughes/droidchatty/ShackApi.java][search][1] = -> TRY {  -> result=getJson(url,)@ -> comments=result.getJSONArray("comments",)@ -> LOOP { -> comment=comments.getJSONObject(i,)@i<comments.length() } } CATCH(Exception) {}
results[https://github.com/unpush/apache-incubator-shindig/blob/b6a0510bdf1608b9262759034f88394101c2972e/java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/JsonRpcHandlerTest.java][testMultipleGadgets][2] = -> TRY {  -> response=jsonRpcHandler.process(input,)@ -> outGadgets=response.getJSONArray("gadgets",)@ -> LOOP { -> gadget=outGadgets.getJSONObject(i,)@i<j } } CATCH(Exception) {}
results[https://github.com/djmailhot/CSE461projects/blob/123420f69a921f8141574b45613a42060b3ac8ca/SNet/src/edu/uw/cs/cse461/SNet/SNetController.java][fetchUpdatesCallee][1] = -> TRY {  -> community=args.getJSONObject("community",)@ -> needphotos=args.getJSONArray("needphotos",)@ -> LOOP { -> currenthash=needphotos.getInt(i,)@i<needphotos.length() } } CATCH(Exception) {}
results[https://github.com/helloworld1/AnyMemo/blob/a710fc9d7d6dbc1041a60b58a607e94781c800b7/src/org/liberty/android/fantastischmemo/DownloaderSS.java][downloadDatabase][1] = -> TRY {  -> jsonObject=new JSONObject(jsonString,)@ -> jsonDataArray=jsonObject.getJSONArray("data",)@ -> LOOP { -> jsonItemArray=jsonDataArray.getJSONArray(i,)@i<jsonDataArray.length() } } CATCH(Exception) {}
results[https://github.com/forcedotcom/SalesforceMobileSDK-Android/blob/aeb022c9a1082ef038801fedaea2dd92a48585d4/libs/test/SalesforceSDKTest/src/com/salesforce/androidsdk/rest/RestClientTest.java][testDescribeGlobal][4] = -> TRY {  -> jsonResponse=response.asJSONObject()@ -> checkKeys(jsonResponse,"encoding","maxBatchSize","sobjects",)@ -> checkKeys(jsonResponse.getJSONArray("sobjects",).getJSONObject(0,),"name","label","custom","keyPrefix",)@ } CATCH(Exception) {}
results[https://github.com/eventjuggler/eventjuggler/blob/62e1b90a0dbd667e64a027c7204eec40d86c87c9/services/src/main/java/org/eventjuggler/services/MeetupThief.java][main][2] = -> TRY {  -> o=get(openEventsUrl,)@ -> eventsJson=o.getJSONArray("results",)@ -> LOOP { -> eventJson=eventsJson.getJSONObject(i,)@i<eventsJson.length() } } CATCH(Exception) {}
results[https://github.com/mollyproject/mollyandroid/blob/7636c5b70088af05f9a76b02cbcbc79c3226a309/src/org/mollyproject/android/view/apps/weblearn/signup/WebLearnSignupPageTask.java][updateView][1] = -> TRY { -> sites=jsonContent.getJSONArray("sites",)@ -> LOOP { -> site=sites.getJSONArray(i,)@i<sites.length() } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/socialize/socialize-sdk-android/blob/6f3086f962f6e41a9f810365f76caf7fc292b2fa/test/src/com/socialize/test/integration/services/a/EntityUtilsTest.java][testGetEntitiesByKey][4] = -> TRY {  -> json=TestUtils.getJSON(getContext(),"entities.json",)@ -> jsonArray=json.getJSONArray("items",)@ -> jsonObject0=(JSONObject) jsonArray.get(0,)@ -> jsonObject1=(JSONObject) jsonArray.get(1,)@ } CATCH(Exception) {}
results[https://github.com/terraframe/Runway-SDK/blob/4e1a50a6e89369a0ea61403f3dc6ca0aef06f5a8/runwaysdk-test/src/main/java/com/runwaysdk/facade/JSONInvokeMethodTest.java][testInvokeArrayMethod][1] = -> TRY {  -> returnObject=new JSONObject(returnJSON,)@ -> jsonArray=returnObject.getJSONArray(JSONReturnObject.RETURN_VALUE,)@ -> output=(BusinessDTO) JSONUtil.getComponentDTOFromJSON("",locale,jsonArray.getJSONObject(DTOConversionUtilInfo.JSON_RETURN_OBJECT,).toString(),)@ } CATCH(Exception) {}
results[https://github.com/NCIP/psc/blob/19e392ca2b2c56aafead87842fb0a992d0d19f4f/web/src/test/java/edu/northwestern/bioinformatics/studycalendar/restlets/representations/ReportJsonRepresentationTest.java][testAllRowsIncluded][4] = -> TRY {  -> actual=writeAndParseObject(actual(),)@ -> rows=actual.getJSONArray("rows",)@ -> assertEquals("Wrong number of rows",2,rows.length(),)@ } CATCH(Exception) {}
results[https://github.com/jortizcs/sfs_applications/blob/862ed1a4b3019815644e9fa9240351a8cbd22699/ConnAccessSampler/src/sfs/lib/Util.java][getIncidentPaths][4] = -> TRY { -> obj=new JSONObject(respStr,)@ -> IF { -> return obj.getJSONArray("paths",)@obj!=null&&obj.has("paths",) } } CATCH(Exception) { -> Log.d("UTIL","Problem getting incident paths",)@ }
results[https://github.com/mmoutenot/SandFox/blob/bf2a8389a920b29af3bf3cff307651df175e5671/mobile/android/base/ProfileMigrator.java][handleMessage][1] = -> TRY { -> IF { -> jsonPrefs=message.getJSONArray("preferences",)@ -> parsePrefs(jsonPrefs,)@ } } CATCH(Exception) { -> Log.e(LOGTAG,"Exception handling message \""+event+"\":",e,)@ }
results[https://github.com/tuvd08/other/blob/6727d28cf3560b16eea5452be87bde1bb5dc7a88/java-tools/io-project/src/main/java/org/thaonguyen/other/GxBuilder.java][init][1] = -> TRY {  -> jsonParser=new JSONObject(content,)@ -> jsonArray=jsonParser.getJSONArray("datas",)@ -> LOOP { -> item_js=(JSONObject) jsonArray.get(i,)@i<jsonArray.length() } } CATCH(Exception) {}
results[https://github.com/PonySDK/PonySDK/blob/b35a6b6e8b32217ec70ef9d67f58b288001b5208/ponysdk/src-core/main/java/com/ponysdk/core/servlet/AbstractApplicationManager.java][printClientErrorMessage][1] = -> TRY { -> errors=data.getJSONArray(APPLICATION.ERRORS,)@ -> LOOP { -> jsoObject=errors.getJSONObject(i,)@i<errors.length() } } CATCH(Exception) { -> log.error("Failed to display errors",e,)@ }
results[https://github.com/mollyproject/mollyandroid/blob/d8605a763ce6b1b6f101a519345ec327c700fac4/src/org/mollyproject/android/view/apps/transport/par/ParkAndRideTask.java][updateView][4] = -> TRY { -> pars=jsonContent.getJSONArray("park_and_rides",)@ -> LOOP { -> par=pars.getJSONObject(i,)@i<pars.length() } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/malinovskiy-alex/ifp-shopping/blob/afcb9192d41ba5d8840b40dc63d36a2e4ab8db51/shoppingui/src/main/java/com/connecture/shopping/ui/RequestHubAction.java][handleRequests][1] = -> TRY {  -> requests=envelope.getJSONArray("requests",)@ -> context=envelope.getString("context",)@ -> LOOP { -> componentRequestJSON=requests.getJSONObject(i,)@i<requests.length() } } CATCH(Exception) {}
results[https://github.com/00stefan00/ITACT_GetConnected/blob/d22116247dfd878c8b469e50634dde60a22b178c/src/com/app/getconnected/activities/TransportDetailsActivity.java][onCreate][1] = -> TRY { -> jObject=new JSONObject(json,)@ -> legs=jObject.getJSONArray("legs",)@ } CATCH(Exception) { -> e.printStackTrace()@ -> Toast.makeText(this,R.string.wrongMessage,Toast.LENGTH_LONG,).show()@ }
results[https://github.com/NCIP/psc/blob/fef79655deaa9e91226728031af5a243b44f5e98/web/src/test/java/edu/northwestern/bioinformatics/studycalendar/restlets/representations/ReportRepresentationTest.java][testRowsValueLength][2] = -> TRY {  -> actual=writeAndParseObject(new ReportRepresentation(filters,allRows,),)@ -> rows=actual.getJSONArray("rows",)@ -> assertTrue("Rows values are not = 2 ",rows.length()==2,)@ } CATCH(Exception) {}
results[https://github.com/svn2github/SpagoBI-V4x/blob/9ff27a69e1f78db17d1d66ba1112bc9b59f009a5/SpagoBIQbeEngine/src/it/eng/spagobi/engines/worksheet/serializer/json/decorator/FiltersOrderTypeJSONDecorator.java][doDecoration][1] = -> TRY { -> sheets=json.getJSONArray(WorkSheetSerializationUtils.SHEETS,)@ -> LOOP { -> sheet=sheets.getJSONObject(i,)@i<sheets.length() } } CATCH(Exception) { -> throw new RuntimeException("Error while decorating JSON Object",e,)@ }
results[https://github.com/stephenfox/iceweasel-dev/blob/cdd8a076d28a6dc919f519243825a8f747f75d6b/mobile/android/base/AwesomeBar.java][handleMessage][2] = -> TRY { -> IF { -> mAwesomeTabs.setSearchEngines(message.getJSONArray("searchEngines",),)@ } } CATCH(Exception) { -> Log.i(LOGTAG,"handleMessage throws "+e+" for message: "+event,)@ }
results[https://github.com/RedHatQE/rhsm-qe/blob/9bdffeb0b10fa486e4ec34702e220850e3067af7/src/rhsm/cli/tests/FactsTests.java][BypassRulesDueToTypeAndCapabilities_Test][1] = -> TRY {  -> jsonConsumer=(JSONObject) new JSONObject(CandlepinTasks.getResourceUsingRESTfulAPI(sm_clientUsername,sm_clientPassword,sm_serverUrl,"/consumers/"+consumerId,),)@ -> jsonCapabilities=jsonConsumer.getJSONArray("capabilities",)@ -> Assert.assertTrue(jsonCapabilities.length()==0,"By default, a freshly registered consumer of type=candlepin has no capabilities.",)@ } CATCH(Exception) {}
results[https://github.com/craftercms/studio3/blob/ecc9595bad7c685d701adf1192ef2fd6cbe5bd7a/studio/src/test/java/org/craftercms/studio3/test/web/suppport/message/ValidationExceptionFormatterTest.java][testGenerateDetailMessageIsAnArray][4] = -> TRY {  -> messageFormatter=new ValidationExceptionFormatter()@ -> ex=new ValidationException("Validation Error",OBJECT_ERROR_LIST,)@ -> new JSONObject(messageFormatter.getFormattedMessage(ex,),).getJSONArray(AbstractExceptionMessageFormatter.JSON_DETAIL_MESSAGE_KEY,)@ } CATCH(Exception) {}
results[https://github.com/ripple/ripple-lib-java/blob/cbb4db8a43f5398afd6575f33d7652cd4197ba08/ripple-client/src/main/java/com/ripple/client/transactions/AccountTransactionsRequester.java][called][1] = -> TRY { -> transactions=result.getJSONArray("transactions",)@ -> newMarker=result.opt("marker",)@ -> ledger_index_max=result.optInt("ledger_index_max",)@ -> ledger_index_min=result.optInt("ledger_index_min",)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/b3log/b3log-solo/blob/5163832f9b0f48fdb5a165dc37ba690d31c7a952/core/src/test/java/org/b3log/solo/service/LinkQueryServiceTestCase.java][getLinks][1] = -> TRY {  -> result=linkQueryService.getLinks(paginationRequest,)@ -> Assert.assertNotNull(result,)@ -> Assert.assertEquals(result.getJSONArray(Link.LINKS,).length(),1,)@ } CATCH(Exception) {}
results[https://github.com/dotmuncher/dotmuncher/blob/7988a8ed1c5f05c9294710f7d752065f19217207/android/src/com/dotmuncher/android/controler/DMEventControler.java][submit_and_get_events][2] = -> TRY { -> json=new JSONObject(result,)@ -> json_events_array=json.getJSONArray("events",)@ -> min_i=json.getInt("min_i",)@ -> max_i=json.getInt("max_i",)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/00stefan00/ITACT_GetConnected/blob/d22116247dfd878c8b469e50634dde60a22b178c/src/com/app/getconnected/activities/TransportResultActivity.java][onCreate][1] = -> TRY { -> jObject=new JSONObject(json,).getJSONObject("plan",)@ -> setLocations(jObject,)@ -> itineraries=jObject.getJSONArray("itineraries",)@ } CATCH(Exception) { -> itineraries=new JSONArray()@ }
results[https://github.com/carlosbrando/shindig/blob/61affe80dd47b60d8acaf8eb0b7f0bfc526ccaf9/java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/HttpRequestHandlerTest.java][testFetchFeedWithParameters][2] = -> TRY {  -> feed=(JSONObject) httpApiResponse.getContent()@ -> feeds=feed.getJSONArray("Entry",)@ -> assertEquals("numEntries not parsed correctly.",2,feeds.length(),)@ -> entry=feeds.getJSONObject(1,)@ } CATCH(Exception) {}
results[https://github.com/dbstar/dbstar/blob/74120eaa088b8ba2107926f49a20fede128ccc73/DbstarLauncher/src/com/dbstar/guodian/parse/PaymentRecordsDataHandler.java][paraseYearDetail][1] = -> map=new HashMap<String, PaymentRecord.Record>()@ -> TRY { -> jsonObject=new JSONObject(jsonData,)@ -> map=paraseMap(jsonObject.getJSONArray(JsonTag.TAGPaymentListOfYear,),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/b3log/b3log-latke/blob/76871c0b5746b330d12935995d814826f245a788/latke-client/src/main/java/org/b3log/latke/client/LatkeClient.java][getRepositoryNames][1] = -> TRY {  -> result=new JSONObject(content,)@ -> repositoryNames=result.getJSONArray("repositoryNames",)@ -> LOOP { -> repositoryName=repositoryNames.getString(i,)@i<repositoryNames.length() } } CATCH(Exception) {}
results[https://github.com/listersin/listersin/blob/7f1500e37ad6b78b9ba8edc28c25e91a1e84961f/src/main/java/apicall/GetMyMessages.java][call][1] = -> TRY {  -> IF { -> tmpids=jso.getJSONObject("MessageIDs",)@ -> tmpids.getJSONArray("MessageID",).setExpandElements(true,)@ } } CATCH(Exception) {}
results[https://github.com/hampelratte/VCH/blob/9d0411b59d906457f5c2487067fe3d505ddeffe3/vch-parser-arte/src/main/java/de/berlios/vch/parser/arte/ArteParser.java][getRoot][1] = -> TRY {  -> pagination=json.getJSONObject("paginatedCollectionWrapper",)@ -> videos=pagination.getJSONArray("collection",)@ -> LOOP { -> video=videos.getJSONObject(i,)@i<videos.length() } } CATCH(Exception) {}
results[https://github.com/svn2github/SpagoBI-V4x/blob/a34de8f42fad07d1574691f8fc9ac18de002b3fa/SpagoBIQbeEngine/src/it/eng/spagobi/engines/worksheet/services/export/ExportWorksheetAction.java][exportToPDF][1] = -> TRY {  -> sheetsNumber=worksheetJSON.getInt(SHEETS_NUM,)@ -> exportedSheets=worksheetJSON.getJSONArray(EXPORTED_SHEETS,)@ -> LOOP { -> sheetJ=exportedSheets.getJSONObject(i,)@i<sheetsNumber } } CATCH(Exception) {}
results[https://github.com/Tapad/tapestry-android-sdk/blob/aace44ef269af004ddd44deac832a32c7ae75d9b/tapestry/src/com/tapad/tapestry/TapestryResponse.java][getList][1] = -> TRY { -> IF { -> return jsonArrayToStringList(json.getJSONArray(name,),)@json.has(name,) } } CATCH(Exception) { -> Logging.e("Could not parse "+name+" in "+json,e,)@ }
results[https://github.com/NUBIC/psc-mirror/blob/16a22be7e08ea69eed6fa9468301781220d856b4/web/src/test/java/edu/northwestern/bioinformatics/studycalendar/restlets/representations/OsgiBundleRepresentationTest.java][testBundleInfoDoesNotIncludeMetatypeIfNotPresent][2] = -> TRY {  -> bundle6=representSingle(bundleWithServices,)@ -> firstService=bundle6.getJSONArray("services",).getJSONObject(0,)@ -> assertFalse(firstService.has("metatype",),)@ } CATCH(Exception) {}
results[https://github.com/b3log/b3log-solo/blob/f465958d047a450f57e8700345a7d8f235e40986/core/src/main/java/org/b3log/solo/processor/SitemapProcessor.java][addArticles][1] = -> TRY {  -> articleResult=articleRepository.get(query,)@ -> articles=articleResult.getJSONArray(Keys.RESULTS,)@ -> LOOP { -> article=articles.getJSONObject(i,)@i<articles.length() } } CATCH(Exception) {}
results[https://github.com/OrangeTeam/FamilyLink/blob/ecf780853ff2d4d8318ba209d0c4fc73b23028b0/app/src/org/orange/familylink/util/ConvertUtil.java][call][1] = -> TRY {  -> jsonObject=new JSONObject(sb.toString(),)@ -> return jsonObject.getJSONArray("results",).getJSONObject(0,).getString("formatted_address",)@ } CATCH(Exception) {}
results[https://github.com/alberapps/tiempobus/blob/7445b0f686c476e51d1f488dd8fff71cc62fe3f7/TiempoBus/src/alberapps/java/weather/yahooweather/ProcesarYahooWeather.java][parsea][1] = -> TRY { -> item=channel.getJSONObject("item",)@ -> condition=item.getJSONObject("condition",)@ -> forecast=item.getJSONArray("forecast",)@ -> weather=forecast.getJSONObject(0,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/mmoutenot/SandFox/blob/bf2a8389a920b29af3bf3cff307651df175e5671/mobile/android/base/GeckoPreferences.java][handleMessage][2] = -> TRY { -> IF { -> jsonPrefs=message.getJSONArray("preferences",)@ -> refresh(jsonPrefs,)@ } } CATCH(Exception) { -> Log.e(LOGTAG,"Exception handling message \""+event+"\":",e,)@ }
results[https://github.com/JPMoresmau/eclipsefp/blob/2185848dd73c34409afd5c440e7617aabfabffef/net.sf.eclipsefp.haskell.browser/src/net/sf/eclipsefp/haskell/browser/items/HoogleResultDeclaration.java][<init>][2] = -> TRY {  -> results=o.getJSONArray("results",)@ -> first_result=results.getJSONArray(0,)@ -> LOOP { -> result=results.getJSONArray(i,)@i<results.length() } } CATCH(Exception) {}
results[https://github.com/b3log/b3log-solo/blob/5163832f9b0f48fdb5a165dc37ba690d31c7a952/core/src/test/java/org/b3log/solo/service/CommentQueryServiceTestCase.java][getComments][1] = -> TRY {  -> result=commentQueryService.getComments(paginationRequest,)@ -> Assert.assertNotNull(result,)@ -> Assert.assertEquals(result.getJSONArray(Comment.COMMENTS,).length(),1,)@ } CATCH(Exception) {}
results[https://github.com/svn2github/SpagoBI-V4x/blob/9ff27a69e1f78db17d1d66ba1112bc9b59f009a5/SpagoBIQbeEngine/src/it/eng/spagobi/engines/worksheet/serializer/json/decorator/FiltersOrderTypeJSONDecorator.java][addFiltersOrderType][1] = -> TRY {  -> filtersJSON=sheetJSON.getJSONObject(WorkSheetSerializationUtils.FILTERS,)@ -> arrayJSON=filtersJSON.getJSONArray(WorkSheetSerializationUtils.FILTERS,)@ -> LOOP { -> aFilter=arrayJSON.getJSONObject(i,)@i<arrayJSON.length() } } CATCH(Exception) {}
results[https://github.com/NCIP/psc/blob/f8544f68a13c472091a228a1b436b20b3e025bce/web/src/test/java/edu/northwestern/bioinformatics/studycalendar/restlets/representations/OsgiBundleRepresentationTest.java][testBundleInfoIncludesCorrectTypeForDoubleMetaTypeAttributes][1] = -> TRY {  -> actualMetatype=getMetatypeResult(new PscMockAttributeDefinition(AttributeDefinition.DOUBLE,"foo",),)@ -> assertEquals("double",actualMetatype.getJSONArray("attributes",).getJSONObject(0,).get("type",),)@ } CATCH(Exception) {}
results[https://github.com/oyslin/AndroidBicyle/blob/de703e2d6d1015a3f4a7fde32283586d533446de/src/com/dreamcatcher/bicycle/util/Utils.java][setToDataset][1] = -> TRY { -> jsonObject=new JSONObject(jsonStr,)@ -> jsonArray=jsonObject.getJSONArray(Constants.BicycleJsonTag.STATION,)@ -> LOOP { -> jsonItem=jsonArray.getJSONObject(i,)@i<total } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/geoserver/geoserver-history/blob/43765ceab9a1b01f5bdcdbd041a9e2352144e21c/src/community/sfs/src/test/java/org/geoserver/sfs/GetFeatureTest.java][testGetAll][1] = -> TRY {  -> features=(JSONObject) json(response,)@ -> assertEquals("FeatureCollection",features.getString("type",),)@ -> assertEquals(5,features.getJSONArray("features",).size(),)@ } CATCH(Exception) {}
results[https://github.com/jdunck/google-refine/blob/cdb84e47da4cab78ec516f98ef9b8eb39f3fe518/src/main/java/com/metaweb/gridworks/operations/FacetBasedEditOperation.java][reconstruct][2] = -> TRY {  -> engineConfig=obj.getJSONObject("engineConfig",)@ -> return new FacetBasedEditOperation(engineConfig,obj.getString("columnName",),obj.getString("expression",),reconstructEdits(obj.getJSONArray("edits",),),)@ } CATCH(Exception) {}
results[https://github.com/drevicko/MeandreComponentFoundry/blob/61f4bd27088d894d9f4a4fd6256a9f290c638edb/src-tools/org/seasr/meandre/components/tools/tuples/GoogleBooksSearchToTuple.java][jsonToTuples][1] = -> TRY {  -> res=json.getJSONObject("responseData",)@ -> results=res.getJSONArray("results",)@ -> size=results.length()@ -> LOOP { -> fields=results.getJSONObject(i,)@i<size } } CATCH(Exception) {}
results[https://github.com/skaegi/orion.server/blob/0565bb44db57d8c421b6d2fbda5613777742374e/tests/org.eclipse.orion.server.tests/src/org/eclipse/orion/server/tests/servlets/git/GitRemoteTest.java][testGetUnknownRemote][1] = -> TRY {  -> remotes=new JSONObject(response.getText(),)@ -> remotesArray=remotes.getJSONArray(ProtocolConstants.KEY_CHILDREN,)@ -> assertEquals(1,remotesArray.length(),)@ -> remote=remotesArray.getJSONObject(0,)@ } CATCH(Exception) {}
results[https://github.com/unpush/apache-incubator-shindig/blob/45c09da1e5cf58b176a359fe7d02c35fb541b881/java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/MakeRequestHandlerTest.java][testFetchFeedWithParameters][1] = -> TRY {  -> feed=new JSONObject(results.getString("body",),)@ -> feeds=feed.getJSONArray("Entry",)@ -> assertEquals("numEntries not parsed correctly.",2,feeds.length(),)@ -> entry=feeds.getJSONObject(1,)@ } CATCH(Exception) {}
results[https://github.com/flotpk/geoserver/blob/fc40183f8733eb910ad19f8acf3b90953b20741a/src/wfs/src/test/java/org/geoserver/wfs/response/GeoJSONTest.java][testMixedCollection][1] = -> TRY {  -> rootObject=JSONObject.fromObject(out,)@ -> assertEquals(rootObject.get("type",),"FeatureCollection",)@ -> featureCol=rootObject.getJSONArray("features",)@ -> aFeature=featureCol.getJSONObject(1,)@ -> aFeature=featureCol.getJSONObject(6,)@ } CATCH(Exception) {}
results[https://github.com/jdeolive/suite-old/blob/ccf252f7c19cb2167b444065a719f5a4692d89a7/geoserver/importer/src/test/java/org/opengeo/data/importer/rest/ItemResourceTest.java][testGetAllItems][1] = -> TRY {  -> json=(JSONObject) getAsJSON("/rest/imports/0/tasks/0/items",)@ -> items=json.getJSONArray("items",)@ -> assertEquals(2,items.size(),)@ -> item=items.getJSONObject(0,)@ -> item=items.getJSONObject(1,)@ } CATCH(Exception) {}
results[https://github.com/Tapad/tapestry-android-sdk/blob/8fa07ba8b1218132da9fe9df07727754dc0d0892/tapestry/src/main/java/com/tapad/tapestry/TapestryResponse.java][getList][1] = -> TRY { -> IF { -> return jsonArrayToStringList(json.getJSONArray(name,),)@json.has(name,) } } CATCH(Exception) { -> Logging.error(getClass(),"Could not parse "+name+" in "+json,e,)@ }
results[https://github.com/mollyproject/mollyandroid/blob/5c4b9a7a727f060fa45b067638ff73031cc943d8/src/org/mollyproject/android/view/apps/transport/BusTask.java][updateView][1] = -> TRY { -> stops=jsonContent.getJSONArray("entities",)@ -> LOOP { -> stopLayout=parseBusEntity(stops.getJSONObject(i,),page,busLayout,layoutInflater,)@i<stops.length() } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/b3log/b3log-solo/blob/f465958d047a450f57e8700345a7d8f235e40986/core/src/main/java/org/b3log/solo/processor/SitemapProcessor.java][addNavigations][1] = -> TRY {  -> result=pageRepository.get(new Query(),)@ -> pages=result.getJSONArray(Keys.RESULTS,)@ -> LOOP { -> page=pages.getJSONObject(i,)@i<pages.length() } } CATCH(Exception) {}
results[https://github.com/iliasbartolini/AgileDayConferenceApp/blob/5dd912f564d33157b06f3c232312879db02aba09/AgileDayConferenceApp/src/it/agileday/data/TweetsRepository.java][getNextPage][1] = -> json=HttpRestUtil.httpGetJsonObject(String.format("%s%s",URL,nextPageQueryString,),)@ -> nextPageQueryString=json.optString("next_page",null,)@ -> TRY { -> return fromJson(json.getJSONArray("results",),)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
