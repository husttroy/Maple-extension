results[https://github.com/geosolutions-it/geoserver-enterprise/blob/be2a1d28eaa783c4fc03356ca82a14dba34f7d2d/src/wms/src/test/java/org/geoserver/wms/describelayer/DescribeLayerJsonTest.java][checkJSONDescribeLayer][1] = -> rootObject=JSONObject.fromObject(body,)@ -> layerDescs=rootObject.getJSONArray("layerDescriptions",)@ -> layerDesc=layerDescs.getJSONObject(0,)@
results[https://github.com/baliga-lab/gaggle2/blob/5a371bff7d4ad8a44059bf6ad03eb318a6d3179f/java/gaggle-core/src/main/java/org/systemsbiology/gaggle/core/datatypes/JSONReader.java][extractAndSetNodes][2] = -> jsonNodes=jsonNetwork.getJSONArray(KEY_NODES,)@ -> LOOP { -> jsonNode=jsonNodes.getJSONObject(i,)@i<jsonNodes.size() }
results[https://github.com/nagarajug/NagaRepos/blob/49332663200f056d2c07968b5767840c655f0083/src/jp/co/rakuten/android/basket/http/CartItemHttpRequest.java][setNote][31] = -> TRY { -> jsonObject=new JSONObject(result,)@ -> actionResultObject=jsonObject.getJSONArray("actionResults",)@ -> actionResponseObject=actionResultObject.getJSONObject(0,)@ }
results[https://github.com/lmco/eurekastreams/blob/ee0dc2d2130c2c4a1481584b25a8693965ffa354/server/src/main/java/org/eurekastreams/server/service/actions/strategies/activity/datasources/MultiUserPersistenceRequestTransformer.java][transform][2] = -> entities=request.getJSONArray(reqKey,)@ -> LOOP { -> req=entities.getJSONObject(i,)@i<entities.size() -> throw new IllegalArgumentException("Unhandled type.",)@i<entities.size() }
results[https://github.com/geosolutions-it/geoserver-enterprise/blob/be2a1d28eaa783c4fc03356ca82a14dba34f7d2d/src/wms/src/test/java/org/geoserver/wms/WMSServiceExceptionTest.java][testJson][2] = -> jsonException=JSONObject.fromObject(content,)@ -> assertEquals(jsonException.getString("version",),"1.3.0",)@ -> exceptions=jsonException.getJSONArray("exceptions",)@ -> exception=exceptions.getJSONObject(0,)@
results[https://github.com/y4nn/MobWebApp_ComemStar/blob/2e5ba938649edac3bffa0749fc4cae4d1cd1408e/MobWebAndroid/src/ch/comem/android/CoursAdapter.java][getChildView][3] = -> TRY { -> jCours=jListeCours.getJSONObject(arg0,)@ -> jaListSeries=jCours.getJSONArray("serieDTO",)@ -> jSerie=jaListSeries.getJSONObject(arg1,)@ }
results[https://github.com/benbai123/JSP_Servlet_Practice/blob/55158c13a6068627244889452d5f271abe4b3f49/Practice/JAVA/Net/src/test/GeocodeService.java][getAddressByLatLng][1] = -> jobj=JSONObject.fromObject(sb.toString(),)@ -> return jobj.getJSONArray("results",).getJSONObject(0,).getString("formatted_address",)@
results[https://github.com/jboreiko/brainStormProject/blob/49c61cb6d7a7b1a52a183413b6323ad8baa82fbd/code/brainStorm/src/suggest/ResultParser.java][wikiParse][1] = -> IF { -> return "No Wikipedia Results Found"@substring.equals("-1",) } -> pageidObj=pagesObj.getJSONObject(substring,)@!(substring.equals("-1",)) -> revisionArr=pageidObj.getJSONArray("revisions",)@!(substring.equals("-1",)) -> revisionObj=revisionArr.getJSONObject(0,)@!(substring.equals("-1",))
results[https://github.com/chrismarx/cmestemp22/blob/1f504c4c0a640e06899d222594fd8355c127911e/server/src/main/java/org/eurekastreams/server/service/actions/strategies/activity/datasources/RecipientPersistenceRequestTransformer.java][transform][2] = -> recipients=request.getJSONArray("recipient",)@ -> LOOP { -> req=recipients.getJSONObject(i,)@i<recipients.size() -> throw new RuntimeException("Unhandled type.",)@i<recipients.size() }
results[https://github.com/europeana/contrib/blob/15934811e1930e93405735facf6b5c3989f9efdd/ntua/mint/src/main/java/gr/ntua/ivml/mint/mapping/MappingManager.java][clearXPathFunction][2] = -> target=this.elementCache.get(id,)@ -> mappings=target.getJSONArray("mappings",)@ -> IF { -> mapping=mappings.getJSONObject(index,)@index>-1 }
results[https://github.com/oferfrid/PrecisExciteTCP/blob/8cb4be2376bb22ffe8f88eb64cd064d99849d3b6/mmstudio/src/org/micromanager/acquisition/MultipageTiffWriter.java][getIJDescriptionString][1] = -> TRY { -> contrast=displayAndComments_.getJSONArray("Channels",).getJSONObject(0,)@ -> min=contrast.getInt("Min",)@ -> max=contrast.getInt("Max",)@ }
results[https://github.com/SINTEF-9012/oryx-neffics/blob/71c33ba0f09ed696eae0b355f8ef9d00d545da64/poem-jvm/src/java/org/b3mn/poem/jbpm/JsonToJpdl.java][<init>][19] = -> TRY { -> processElements=process.getJSONArray("childShapes",)@ -> LOOP { -> currentElement=processElements.getJSONObject(i,)@i<processElements.length() } }
results[https://github.com/aalmiray/Json-lib/blob/e6b1c5b7d5882ea1c2a7dd837169b8c061f093ca/src/test/java/net/sf/json/TestJSONObject.java][testElement_Collection2][1] = -> jsonObject=new JSONObject()@ -> jsonObject.element("list",list,)@ -> actual=jsonObject.getJSONArray("list",).getJSONObject(0,)@ -> Assertions.assertTrue(!(actual.has("class",)),)@
results[https://github.com/iPlantCollaborativeOpenSource/metadactyl/blob/a2efc24201eee2b5d0c690eb415cf94db9f9b54b/src/test/java/org/iplantc/workflow/experiment/FapiJobRequestFormatterTest.java][testJobWithOneEmptyStep][1] = -> submission=createFormatter(experiment,).formatJobRequest()@ -> steps=submission.getJSONArray("steps",)@ -> assertEquals(1,steps.size(),)@ -> step=steps.getJSONObject(0,)@
results[https://github.com/schmidde/JenkinsBlame/blob/82822b414299fd07c700d5cf6b0eedb95c8a9fbf/test/de/fhb/sq/JenkinsJsonParserStub.java][getLastBuildNr][1] = -> TRY { -> json=new JSONObject(jsonString,)@ -> nr=json.getJSONArray("builds",).getJSONObject(0,).getInt("number",)@ }
results[https://github.com/00stefan00/ITACT_GetConnected/blob/fdfce9d09cb20e810d2853b474b97990333bd6db/src/com/example/getconnected/network/GeoLocation.java][setLocation][5] = -> TRY {  -> results=json.getJSONArray("results",)@ -> resultsObject=results.getJSONObject(0,)@ } CATCH(JSONException) {}
results[https://github.com/rodericj/TopDish/blob/92166044c839dbe81a3c95a5387aacea0c0bfdac/server/old/java/tags/0624/src/com/topdish/util/GeoUtils.java][reverseLatLonGoogle][2] = -> TRY { -> json=new JSONObject(respStr,)@ -> results=json.getJSONArray("results",)@ -> formattedAddress=results.getJSONObject(0,).getString("formatted_address",)@ }
results[https://github.com/europeana/contrib/blob/8f1d23cd4b9d6d8923bd9fc0d03b45a7d2977fac/ntua/mint2/src/main/java/gr/ntua/ivml/mint/mapping/old/JSONMappingHandler.java][getGroupHandlers][2] = -> IF { -> groups=this.object.getJSONArray(TEMPLATE_GROUPS,)@this.object.has(TEMPLATE_GROUPS,) -> LOOP { -> group=groups.getJSONObject(i,)@i<groups.size() } }
results[https://github.com/PonySDK/PonySDK/blob/2fd026a5f5fa89ed4dfb0b694944849bf7f01f56/ponysdk/src-core/main/java/com/ponysdk/core/AbstractApplicationManager.java][printClientErrorMessage][1] = -> TRY { -> errors=data.getJSONArray(APPLICATION.ERRORS,)@ -> LOOP { -> jsoObject=errors.getJSONObject(i,)@i<errors.length() } } CATCH(Throwable) { -> log.error("Failed to display errors",e,)@ }
results[https://github.com/droolsjbpm/jbpm-designer/blob/c0b0bd3733657e8dcf2246d833d6361d2747b7d5/server/src/de/hpi/bpmn2_0/factory/TaskFactory.java][setActivityResources][26] = -> TRY { -> resources=new JSONObject(resourcesProperty,)@ -> items=resources.getJSONArray("items",)@ -> LOOP { -> resource=items.getJSONObject(i,)@i<items.length() } }
results[https://github.com/chrismarx/cmestemp22/blob/b65b619318bc1eccf78cd7818243865b840318c6/server/src/main/java/org/eurekastreams/server/service/actions/strategies/activity/datasources/AuthoredByPersistenceRequestTransformer.java][transform][2] = -> authors=request.getJSONArray("authoredBy",)@ -> IF { -> return ""@authors==null||authors.size()==0 } -> LOOP { -> author=authors.getJSONObject(i,)@i<authors.size() && !(authors==null||authors.size()==0) -> throw new IllegalArgumentException("Unhandled type.",)@i<authors.size() && !(authors==null||authors.size()==0) }
results[https://github.com/SINTEF-9012/oryx-neffics/blob/126d1b40d2b4f03211727299d21ad42c675cad1f/editor/server/src/de/hpi/jbpm/JsonToJpdl.java][getOutgoings][14] = -> TRY { -> outs=node.getJSONArray("outgoing",)@ -> LOOP { -> id=outs.getJSONObject(i,).getString("resourceId",)@i<outs.length() } }
results[https://github.com/apurtell/hadoop/blob/743d1f520a171905e77366ad2d14a7a97dd7e646/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/webapp/TestAMWebServicesJobs.java][testJobsSlash][33] = -> TRY {  -> jobs=json.getJSONObject("jobs",)@ -> arr=jobs.getJSONArray("job",)@ -> info=arr.getJSONObject(0,)@ } CATCH(JSONException,Exception) {}
results[https://github.com/amnotbot/amnotbot/blob/4c50fccbc5036854f2a0ab653d6df2103a6c7ff1/src/org/knix/amnotbot/command/GoogleResult.java][<init>][4] = -> TRY {  -> data=answer.getJSONObject("responseData",)@ -> this.result=data.getJSONArray("results",).getJSONObject(0,)@ } CATCH(JSONException) {}
results[https://github.com/lmco/eurekastreams/blob/6524192f0541e6543946d46e9a98435049e8413b/server/src/main/java/org/eurekastreams/server/service/actions/strategies/activity/datasources/AppSourcePersistenceRequestTransformer.java][transform][2] = -> apps=request.getJSONArray("fromApp",)@ -> LOOP { -> app=apps.getJSONObject(i,)@i<apps.size() -> IF { -> throw new IllegalArgumentException("Invalid app id.",)@i<apps.size() && !(APP_ID_REGEX.matcher(appId,).matches()) } }
results[https://github.com/vstorm83/platform/blob/da0c9857c48d0df294ce3dd6da9ac521e6fcd786/eXoGadget/server/java/gadgets/src/test/java/org/apache/shindig/gadgets/http/JsonRpcHandlerTest.java][testMultipleGadgets][8] = -> TRY {  -> response=jsonRpcHandler.process(input,)@ -> outGadgets=response.getJSONArray("gadgets",)@ -> gadget=outGadgets.getJSONObject(0,)@ } CATCH(Exception) {}
results[https://github.com/nagarajug/NagaRepos/blob/49332663200f056d2c07968b5767840c655f0083/src/jp/co/rakuten/android/basket/http/CartItemHttpRequest.java][getCart][2] = -> TRY { -> jsonObject=new JSONObject(result,)@ -> actionResultObject=jsonObject.getJSONArray("actionResults",)@ -> actionResponseObject=actionResultObject.getJSONObject(0,)@ -> IF { -> return model@actionFinalObject.has("cartModel",) } }
results[https://github.com/terraframe/Runway-SDK/blob/4e1a50a6e89369a0ea61403f3dc6ca0aef06f5a8/runwaysdk-test/src/main/java/com/runwaysdk/facade/JSONInvokeMethodTest.java][testInvokeEmptyMethod][1] = -> TRY {  -> returnObject=new JSONObject(returnJSON,)@ -> jsonArray=returnObject.getJSONArray(JSONReturnObject.RETURN_VALUE,)@ -> jsonObject=jsonArray.getJSONObject(DTOConversionUtilInfo.JSON_CALLED_OBJECT,)@ } CATCH(Exception) {}
results[https://github.com/europeana/contrib/blob/8f1d23cd4b9d6d8923bd9fc0d03b45a7d2977fac/ntua/mint2/src/main/java/gr/ntua/ivml/mint/mapping/old/JSONMappingHandler.java][setConstantValueMapping][3] = -> mappings=target.getJSONArray("mappings",)@ -> IF { -> mapping=mappings.getJSONObject(index,)@index>-1 } ELSE { -> mappings.add(mapping,)@ }
results[https://github.com/vadimbobrov/hdup/blob/8464c65ac9520eab2cd110a6efd826d6897f7a4b/src/main/java/com/os/exchange/TimeSeriesData.java][fromJSON][2] = -> TRY { -> ja=jo.getJSONArray("data",)@ -> size=ja.length()@ -> LOOP { -> item=ja.getJSONObject(i,)@i<size } }
results[https://github.com/eskatos/qipki/blob/fd8e28550e6a59f971afabcd6874928cae963c06/server/src/test/java/org/codeartisans/qipki/QiPKIServerTest.java][testCA][2] = -> TRY {  -> caList=new JSONObject(jsonCaList,)@ -> items=caList.getJSONArray("items",)@ -> firstCa=items.getJSONObject(0,)@ } CATCH(InterruptedException,IOException,JSONException) {}
results[https://github.com/domogik/domodroid/blob/ce8915a242d9c730beb005a6f7c979f55a016a93/src/database/JSONParser.java][StateValueINT][1] = -> TRY {  -> itemArray=json.getJSONArray("stats",)@ -> temp=itemArray.getJSONObject(0,).getInt("value",)@ } CATCH(JSONException) {}
results[https://github.com/filip-jovanovic/chase_game/blob/43a97de673aad9eb14d7a5b2b6599f753f0dac77/src/edu/elfak/chasegame/HTTPHelper.java][getGameList][1] = -> json=getJSONFromUrl(SERVER_URL+GAME_LIST_URL,)@ -> TRY { -> jsonGames=json.getJSONArray(TAG_GAMES,)@ -> LOOP { -> c=jsonGames.getJSONObject(i,)@i<jsonGames.length() } }
results[https://github.com/JPMoresmau/eclipsefp/blob/2185848dd73c34409afd5c440e7617aabfabffef/net.sf.eclipsefp.haskell.browser/src/net/sf/eclipsefp/haskell/browser/items/HoogleResultPackage.java][<init>][1] = -> TRY {  -> results=o.getJSONArray("results",)@ -> this.pkg=new HaskellPackage(results.getJSONObject(0,),)@ } CATCH(JSONException) {}
results[https://github.com/schmidde/JenkinsBlame/blob/2485facb1924a2fa74aaf92827be38b90cb5b10c/src/de/fhb/sq/JenkinsJsonParser.java][getLastBuildNr][1] = -> TRY { -> json=jdc.callJson(getGeneralURL()+tree,)@ -> nr=json.getJSONArray("builds",).getJSONObject(0,).getInt("number",)@ }
results[https://github.com/alberapps/tiempobus/blob/dce7b12a8948a4c2a630ff9052ee0cba0b063b28/TiempoBus/src/alberapps/java/weather/openweathermap/WeatherDataParser.java][getMaxTemperatureForDay][1] = -> TRY {  -> object=new JSONObject(weatherJsonStr,)@ -> list=object.getJSONArray("list",)@ -> day=list.getJSONObject(dayIndex,)@ } CATCH(JSONException) {}
results[https://github.com/melchor629/Musicote-Melchor629/blob/94ad7c6548b00ea3573b7c4593c2d4eb500cad13/src/com/melchor629/musicote/scrobbler/Album.java][getAlbumUrl][1] = -> TRY { -> image=album.getJSONArray("image",)@ -> images=image.getJSONObject(id,)@ } CATCH(NullPointerException) { -> Log.e(TAG,"Last.FM no ha encontrado el álbum",)@ }
results[https://github.com/Luftzig/Chores/blob/3418ea20ed7b93c08878c69aa43675ad157ff065/ChoresOutsideServer/src/il/ac/huji/chores/server/parse/ParseRestClientImpl.java][getRoommateCoins][1] = -> TRY {  -> jsonResult=new JSONObject(result,)@ -> jsonArr=jsonResult.getJSONArray("results",)@ -> coinsJson=jsonArr.getJSONObject(0,)@ } CATCH(ClientProtocolException,IOException) {}
results[https://github.com/attdevsupport/ATT_APIPlatform_SampleApps/blob/8318178874182f14e0277894bf34abcac65d8f2e/RESTFul/IMMN/Java/app1/src/main/java/com/att/api/immn/service/DeltaResponse.java][valueOf][1] = -> jdeltaResponse=jobj.getJSONObject("deltaResponse",)@ -> state=jdeltaResponse.getString("state",)@ -> jdelta=jdeltaResponse.getJSONArray("delta",)@ -> LOOP { -> delta[i]=Delta.valueOf(jdelta.getJSONObject(i,),)@i<jdelta.length() }
results[https://github.com/shamansir/vimeoid/blob/622f88a5ead674e3b04c44fee445648bbef91500/apk/src/org/vimeoid/dto/advanced/Video.java][collectFromJson][1] = -> TRY {  -> return extractFromJson(jsonObj.getJSONArray(FieldsKeys.SINGLE_KEY,).getJSONObject(0,),)@ } CATCH(JSONException) {}
results[https://github.com/svn2github/SpagoBI-V4x/blob/9ff27a69e1f78db17d1d66ba1112bc9b59f009a5/SpagoBIQbeEngine/src/it/eng/spagobi/engines/worksheet/WorksheetEngineAnalysisState.java][getCatalogue][2] = -> catalogueJSON=(JSONObject) getProperty(QbeEngineStaticVariables.CATALOGUE,)@ -> TRY { -> queriesJSON=catalogueJSON.getJSONArray("queries",)@ -> LOOP { -> queryJSON=queriesJSON.getJSONObject(i,)@i<queriesJSON.length() } } CATCH(Throwable) { -> throw new SpagoBIEngineRuntimeException("Impossible to deserialize catalogue",e,)@ }
results[https://github.com/apache/sling/blob/916a08a7d789ac4aebf137d89453aeade1e63586/launchpad/integration-tests/src/main/java/org/apache/sling/launchpad/webapp/integrationtest/servlets/post/PostServletImportTest.java][testImportAutoCheckoutNodes][1] = -> TRY {  -> responseJSON=new JSONObject(responseBodyAsString,)@ -> changes=responseJSON.getJSONArray("changes",)@ -> checkoutChange=changes.getJSONObject(0,)@ } CATCH(IOException,JSONException) {}
results[https://github.com/iPlantCollaborativeOpenSource/metadactyl/blob/13b622321875478892dc6022a4fe08969d9d7fca/src/test/java/org/iplantc/workflow/integration/DeployedComponentExporterTest.java][testExportWithResults][1] = -> result=exporter.export("{\"id\":\"id1\"}",)@ -> assertTrue(result.containsKey("components",),)@ -> matches=result.getJSONArray("components",)@ -> assertEquals(1,matches.size(),)@ -> match=matches.getJSONObject(0,)@
results[https://github.com/momoplan/Android/blob/b85f02d4695dd7e0d427b84ecd6d3a8d7a9dff4f/Ruyicai_168/v3.5.4/v3.5.4/src/com/ruyicai/activity/join/JoinDetailActivity.java][setValuecanyulist][201] = -> TRY { -> array=json.getJSONArray("result",)@ -> allpage=Integer.parseInt(json.getString("totalPage",),)@ -> LOOP { -> obj=array.getJSONObject(i,)@i<array.length() } }
results[https://github.com/momoplan/lotserver/blob/aaff306c56356f2a83794dc767da7e63cb4c40e4/src/main/java/com/ruyicai/lotserver/util/parse/BetCodeJcParseUtil.java][getParseBetCodeArray][13] = -> IF { -> list=tlotsValueObject.getJSONArray("list",)@tlotsValueObject!=null -> IF { -> LOOP { -> tlotObject=list.getJSONObject(i,)@i<list.size() && list!=null&&list.size()>0 } } }
results[https://github.com/MIT-Mobile/MIT-Mobile-for-Android/blob/e94a3ddfb4c26fb515fb5b091f2dd992220e182d/src/edu/mit/mitmobile2/tour/TourModel.java][populateContent][37] = -> TRY {  -> contentArray=json.getJSONArray("content",)@ -> LOOP { -> contentNodeJson=contentArray.getJSONObject(i,)@i<contentArray.length() } } CATCH(JSONException) {}
results[https://github.com/nicholasdelrio/VLC/blob/9c068cf872397938c0d80c060ff43e5bb19cbba1/vlc-visko-interface/src/main/java/edu/utep/cybershare/vlc/visko/batch/HTMLQueryBatch.java][extractProvenanceDataURL][3] = -> TRY { -> resultsArray=aVisKoResult.getJSONArray("results",)@ -> provenanceURL=resultsArray.getJSONObject(0,).getString("provenance",)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/funambol-mirror/funambol-client-sdk/blob/8269026f0931f2605b2bec9699c74129552a9ecd/e_ui/client/src/main/java/com/funambol/client/test/contact/ContactsRobot.java][findContactIdOnServer][12] = -> TRY {  -> resp=sapiHandler.query("contact","get",null,null,null,)@ -> IF { -> contacts=resp.getJSONArray("contacts",)@resp.has("contacts",) -> LOOP { -> c=contacts.getJSONObject(i,)@!(resp.has("contacts",)) && i<contacts.length() -> IF { -> return id@i<contacts.length() && firstName.equals(fName,)&&lastName.equals(lName,) && resp.has("contacts",) } } } } CATCH(Throwable) {}
results[https://github.com/shutoff/car-alarm/blob/192802aee2e7f226016a32f4de2478923b6a1f6a/src/main/java/ru/shutoff/caralarm/FetchService.java][background][3] = -> TRY {  -> IF { -> return @res==null } -> arr=res.getJSONArray("voltageList",)@!(res==null) -> value=arr.getJSONObject(0,)@!(res==null) && !(arr.length()==0) } CATCH(JSONException) {}
results[https://github.com/serious198706/DFCarCheckerProject/blob/a601b30435e7f2d917e33233ad7d0999c5f0680c/DFCarChecker/src/main/java/com/df/dfcarchecker/CarReport/CarReportInteriorActivity.java][updateUi][1] = -> TRY { -> interior=photos.getJSONObject("interior",)@ -> fault=interior.getJSONArray("fault",)@ -> LOOP { -> jsonObject=fault.getJSONObject(i,)@i<fault.length() } -> sketch=interior.getJSONObject("sketch",)@ }
results[https://github.com/svn2github/SpagoBI-V4x/blob/0d28a622abd1067a365fc687165574df5c214dc6/QbeCore/src/runtime/it/eng/qbe/dataset/QbeDataSet.java][getCatalogue][1] = -> TRY { -> catalogueJSON=new JSONObject(json,).getJSONObject("catalogue",)@ -> queriesJSON=catalogueJSON.getJSONArray("queries",)@ -> LOOP { -> queryJSON=queriesJSON.getJSONObject(i,)@i<queriesJSON.length() } } CATCH(Throwable) { -> throw new SpagoBIEngineRuntimeException("Impossible to deserialize catalogue",e,)@ }
results[https://github.com/gdelente/OpenBike/blob/2d415b984e7c12bac249ee0b749585ab1a7cb70d/src/fr/openbike/android/io/RemoteNetworksHandler.java][parse][1] = -> TRY {  -> jsonNetworks=json.getJSONArray("networks",)@ -> LOOP { -> jsonNetwork=jsonNetworks.getJSONObject(i,)@i<jsonNetworks.length() } } CATCH(JSONException,IOException) {}
results[https://github.com/NUBIC/psc-mirror/blob/fd6d1fd3836b3d4ea45fd3266568d90cadbc5169/web/src/test/java/edu/northwestern/bioinformatics/studycalendar/restlets/representations/ReportJsonRepresentationTest.java][writeAndGetRow][4] = -> TRY {  -> report=writeAndParseObject(actual(),)@ -> return report.getJSONArray("rows",).getJSONObject(rowIndex,)@ } CATCH(IOException,JSONException) {}
results[https://github.com/ninetwozero/BF3-Battlelog/blob/363c8f21ea74ed349c8cea9de33cdc5e7eda84cd/src/com/ninetwozero/battlelog/factory/FeedItemDataFactory.java][generateFromCompletingAssignment][1] = -> TRY {  -> statsItem=currItem.getJSONArray(STAT_ITEMS,).getJSONObject(0,)@ -> tempInfo=DataBank.getAssignmentTitle(statsItem.getString(NAME_SID,),)@ } CATCH(JSONException) {}
results[https://github.com/webdetails/cpf/blob/eca16d10421ca63b82a3cbc311eecebecbdd53da/test-src/pt/webdetails/cpf/tests/PersistenceTest.java][testInstanceUpdate][2] = -> TRY {  -> result=pe.query("select from testClass where @rid = :id",params,)@ -> Assert.assertEquals(result.getJSONArray("object",).getJSONObject(0,).getString("test",),"B",)@ } CATCH(JSONException) {}
results[https://github.com/Darkrulerz/Wall-J/blob/166164902b4e2b01ce1f099d37f3f3bb99daaf1d/src/content/controller/WallAPI.java][getJohnDoes][2] = -> content=json.getJSONObject("data",)@ -> responseType=content.getInt("responseType",)@ -> responseBody=content.getJSONArray("responseBody",)@ -> IF { -> return johnDoes@!(checkResponse(responseType,responseBody.toString(),)) } -> LOOP { -> obj=responseBody.getJSONObject(i,)@i<responseBody.length() && !(!(checkResponse(responseType,responseBody.toString(),))) }
results[https://github.com/attdevsupport/ATT_APIPlatform_SampleApps/blob/62d7f82f45b3afeadae30ea1144bef5ce01a1381/RESTFul/MMS/Java/app1/src/main/java/com/att/api/mms/model/MMSStatus.java][valueOf][2] = -> deliveryInfoList=jobj.getJSONObject("DeliveryInfoList",)@ -> resourceUrl=deliveryInfoList.getString("ResourceUrl",)@ -> infos=deliveryInfoList.getJSONArray("DeliveryInfo",)@ -> length=infos.length()@ -> LOOP { -> infoList[i]=MMSDeliveryInfo.valueOf(infos.getJSONObject(i,),)@i<length }
results[https://github.com/aalmiray/Json-lib/blob/e6b1c5b7d5882ea1c2a7dd837169b8c061f093ca/src/test/java/net/sf/json/TestJSONObject.java][testElement_Collection2_exclusions_ignoreDefault][2] = -> jsonObject=new JSONObject()@ -> jsonObject.element("list",list,jsonConfig,)@ -> actual=jsonObject.getJSONArray("list",).getJSONObject(0,)@ -> Assertions.assertTrue(actual.has("class",),)@ -> Assertions.assertTrue(!(actual.has("pexcluded",)),)@
results[https://github.com/neokongwai/abc/blob/8f479e7fb56754ae1d6a473b4bb0f7008c00b996/src/watsons/wine/FoodCuisineList.java][get_top_img_url][2] = -> json=jParser.getJSONFromUrl(top_image_api_url,)@ -> TRY { -> top_image_url=json.getJSONArray(TAG_CONTENT,)@ -> c=top_image_url.getJSONObject(0,)@ } CATCH(JSONException) { -> e.printStackTrace()@ }
results[https://github.com/svn2github/SpagoBI-V4x/blob/9ff27a69e1f78db17d1d66ba1112bc9b59f009a5/SpagoBIQbeEngine/src/it/eng/spagobi/engines/worksheet/serializer/json/WorkSheetJSONDeserializer.java][deserializeTable][1] = -> TRY {  -> fields=content.getJSONArray(WorkSheetSerializationUtils.VISIBLE_SELECT_FIELDS,)@ -> LOOP { -> aField=fields.getJSONObject(i,)@i<fields.length() } } CATCH(JSONException,SerializationException) {}
results[https://github.com/behrica/jira-rest-java-client/blob/23db6db685018309b32c4740f7c9d4178ee3f4ac/atlassian-jira-rest-java-client/src/test/java/com/atlassian/jira/rest/client/internal/json/CommentJsonParserTest.java][testParseAnonymous][1] = -> TRY {  -> json=ResourceUtil.getJsonObjectFromResource("/json/comment/valid-anonymous.json",)@ -> commentJson=json.getJSONArray("value",).getJSONObject(0,)@ -> comment=parser.parse(commentJson,)@ } CATCH(JSONException) {}
results[https://github.com/domogik/domodroid/blob/ce8915a242d9c730beb005a6f7c979f55a016a93/src/database/JSONParser.java][StateValueSTRING][1] = -> TRY {  -> itemArray=json.getJSONArray("stats",)@ -> temp=itemArray.getJSONObject(0,).getString("value",).toString()@ } CATCH(JSONException) {}
results[https://github.com/svn2github/SpagoBI-V4x/blob/9ff27a69e1f78db17d1d66ba1112bc9b59f009a5/SpagoBIQbeEngine/src/it/eng/spagobi/engines/worksheet/serializer/json/WorkSheetJSONDeserializer.java][deserializeOptions][1] = -> TRY {  -> optionsJSON=workSheetDefinitionJSON.getJSONArray(WorkSheetSerializationUtils.FIELDS_OPTIONS,)@ -> LOOP { -> aField=optionsJSON.getJSONObject(i,)@i<optionsJSON.length() } } CATCH(Exception) {}
results[https://github.com/onecoders/ViewPageIndicator/blob/ffb743d644c915b651b9683148ead0a0d685234e/JSONParsing/src/learn2crack/jsonparsing/MainActivity.java][onPostExecute][1] = -> TRY { -> user=result.getJSONArray(TAG_USER,)@ -> c=user.getJSONObject(0,)@ } CATCH(JSONException) { -> e.printStackTrace()@ } -> super.onPostExecute(result,)@
results[https://github.com/simonAllier/diversify-statements/blob/d3d7c678f1896148e510eed457e41310a016db53/src/main/java/fr/inria/diversify/transformation/TransformationParser.java][getTransformation][1] = -> TRY {  -> IF { -> return jsonObject.getJSONArray("transformation",).getJSONObject(0,)@jsonObject.has("transformation",) } } CATCH(JSONException) {}
results[https://github.com/JDrit/AndroidWebnews/blob/deb05028a850cb4955b7270eba3051997bd0278f/src/edu/rit/csh/androidwebnews/HttpsConnector.java][getSearchFromString][1] = -> TRY { -> jObj=new JSONObject(jsonString,)@ -> jArray=jObj.getJSONArray("posts_older",)@ -> LOOP { -> newObj=jArray.getJSONObject(i,).getJSONObject("post",)@i<jArray.length() } }
results[https://github.com/momoplan/lotserver/blob/e4830b3884e8f3c17c10279ce075169bb1ef9a8b/src/main/java/com/ruyicai/lotserver/service/AsyncService.java][isCacheTlotsByOrderId][2] = -> IF { -> return false@valueObject==null } -> list=valueObject.getJSONArray("list",)@!(valueObject==null) -> IF { -> return false@!(valueObject==null) && list==null||list.size()<=0 } -> LOOP { -> tlotObject=list.getJSONObject(i,)@!(list==null||list.size()<=0) && !(valueObject==null) && i<list.size() }
results[https://github.com/ese-unibe-ch/ese2013-team6/blob/8a209c7c6529ef8183daabeb102eed69b5b1f94f/src/MensaUniBe/src/com/ese2013/mub/map/util/DirectionsJSONParser.java][parse][1] = -> TRY { -> jRoutes=jObject.getJSONArray("routes",)@ -> jLegs=jRoutes.getJSONObject(0,).getJSONArray("legs",)@ } CATCH(JSONException) { -> e.printStackTrace()@ }
results[https://github.com/kaspervandenberg/aida/blob/095db6b98f83e8677d144c8572a4f60e42df85da/Search/taverna-plugin/src/main/java/org/vle/aid/taverna/search/AIDSearchResultModel.java][<init>][1] = -> TRY { -> hits=searchResult.getInt("hits",)@ -> query=searchResult.getString("query",)@ -> items=searchResult.getJSONArray("items",)@ -> LOOP { -> item=items.getJSONObject(i,)@i<items.length() } }
results[https://github.com/NewMediaCenter/MobileWeb/blob/45362599d654ae5379111c2779755689743095d9/sakai/impl/src/main/java/org/kuali/mobility/sakai/service/SakaiSessionServiceImpl.java][findSakaiSessionId][1] = -> TRY { -> jsonObj=(JSONObject) JSONSerializer.toJSON(json,)@ -> itemArray=jsonObj.getJSONArray("session_collection",)@ -> LOOP { -> id=itemArray.getJSONObject(i,).getString("id",)@i<itemArray.size() } }
results[https://github.com/arhughes/droidchatty/blob/7df68c6f4456a9fcc0b0942843d0e27cd9c630da/src/cc/hughes/droidchatty/ShackApi.java][processThreads][1] = -> TRY {  -> comments=json.getJSONArray("comments",)@ -> LOOP { -> comment=comments.getJSONObject(i,)@i<comments.length() } } CATCH(ClientProtocolException,IOException,JSONException) {}
results[https://github.com/fNordeingang/fNordApp/blob/79d6033ae11bcb13f2bcd15eb7e7f058ff084e25/src/org/fNordeingang/util/ServiceClient.java][getCurrentCart][1] = -> TRY { -> o=getJSON(Service.CART,).getJSONObject("cart",)@ -> oar=o.getJSONArray("articles",)@ -> LOOP { -> artJSON=oar.getJSONObject(i,)@i<oar.length() } } CATCH(Throwable) { -> th.printStackTrace()@ }
results[https://github.com/mduduzik/flowframe/blob/ceabb60046e133d8b3efc084b1a59dceb6229f79/editors/oryx/frontend/src/main/java/de/hpi/bpmn2_0/factory/AssociationFactory.java][setDataAssociationAttributes][2] = -> IF { -> TRY { -> assignmentJson=new JSONObject(assignment,)@assignment!=null&&!(assignment.isEmpty()) -> items=assignmentJson.getJSONArray("items",)@ -> LOOP { -> assignmentObject=items.getJSONObject(i,)@i<items.length() } } }
results[https://github.com/Watchlist-App/Watchlist-app-android/blob/71757f0aec17890aeabdb30477d82b3299af2106/WatchList/WatchList/src/main/java/com/watchlist/themoviedb/ComingSoon.java][parseJSONObject][12] = -> TRY { -> jsonArray=jsonObject.getJSONArray(API_RESULTS_TITLE,)@ -> LOOP { -> myJSONObject=jsonArray.getJSONObject(i,)@i<jsonArray.length() } } CATCH(JSONException) { -> exception.printStackTrace()@ }
results[https://github.com/squaremo/rabbitmq-streams/blob/240cb9c6c18ee10e99066609a2bcfab43452dfad/harness/java/plugin/src/main/java/com/rabbitmq/streams/harness/Server.java][terminalConfigs][1] = -> TRY {  -> wholeConfig=this.terminalsDatabase.getDocument(terminalId,)@ -> servers=wholeConfig.getJSONArray("servers",)@ -> LOOP { -> config=servers.getJSONObject(i,)@i<servers.size() } } CATCH(IOException) {}
results[https://github.com/tsurdilo/elissa/blob/2add9f2c829e1215228145dea071578cea27d638/editor/server/src/de/hpi/epc/json/EPCDiagramJsonImporter.java][loadEpcIntoDiagram][4] = -> TRY {  -> shapeArray=jsonObj.getJSONArray("childShapes",)@ -> LOOP { -> child=shapeArray.getJSONObject(i,)@i<shapeArray.length() } -> jsonProperties=this.jsonObj.getJSONObject("properties",)@ } CATCH(JSONException) {}
results[https://github.com/MIT-Mobile/MIT-Mobile-for-Android/blob/e94a3ddfb4c26fb515fb5b091f2dd992220e182d/src/edu/mit/mitmobile2/tour/TourModel.java][populatePath][1] = -> TRY {  -> jsonPath=json.getJSONArray("path",)@ -> LOOP { -> geoPoint=parseLatLon(jsonPath.getJSONObject(i,),)@i<jsonPath.length() } } CATCH(JSONException) {}
results[https://github.com/bazaarvoice/bv-android-sdk/blob/b3c06733e3164b7f71cc37c5596c07319d53dac1/Sample Apps/ProductWidgetExample/src/com/example/productwidgetexample/ReviewsActivity.java][displayReviews][1] = -> TRY {  -> results=json.getJSONArray("Results",)@ -> LOOP { -> newReview=new BazaarReview(results.getJSONObject(i,),)@i<results.length() } } CATCH(JSONException) {}
results[https://github.com/anteoc/hadoop-fork/blob/0a47f75227e2060e2730b39f8b80aef36c392c1c/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/webapp/TestHsWebServicesJobsQuery.java][testJobsQueryUser][6] = -> TRY {  -> jobs=json.getJSONObject("jobs",)@ -> arr=jobs.getJSONArray("job",)@ -> assertEquals("incorrect number of elements",3,arr.length(),)@ -> info=arr.getJSONObject(0,)@ } CATCH(JSONException,Exception) {}
results[https://github.com/florent-andre/LinkedHeritage/blob/b30a3a22b06a662c33b3af1050d6a98867f2d531/skosifier/src/main/java/eu/lh/skosifier/CSVMappeur.java][<init>][6] = -> TRY {  -> jo=new JSONObject(json,)@ -> mapping=jo.getJSONArray("mapping",)@ -> LOOP { -> colMapping=mapping.getJSONObject(i,)@i<mapping.length() } } CATCH(JSONException) {}
results[https://github.com/shinobushiva/jagkuma/blob/92ffa741ede72d1abdad03cb2d0351185cc062f8/src/jag/kumamoto/apps/StampRally/Data/StampPin.java][decodeJSONObject][7] = -> TRY {  -> jsonPins=obj.getJSONArray(JsonNamePins,)@ -> count=jsonPins.length()@ -> LOOP { -> jsonPin=jsonPins.getJSONObject(i,)@i<count } } CATCH(JSONException) {}
results[https://github.com/yuyang226/FlickrjApi4Android/blob/d803adadf6583264152d9a113ddc74387e694d07/src/main/java/com/gmail/yuyang226/flickr/commons/CommonsInterface.java][parseInstitution][3] = -> TRY {  -> urlsElement=mElement.getJSONObject("urls",)@ -> urlNodes=urlsElement.getJSONArray("url",)@ -> LOOP { -> urlElement=urlNodes.getJSONObject(i,)@i<urlNodes.length() } } CATCH(JSONException) {}
results[https://github.com/alaurenz/metrobike/blob/6cf641f0d2f9cf7893065ba6eb52f24f9569b830/MetroBike/test/src/com/HuskySoft/metrobike/backend/test/RouteTest.java][setUp][1] = -> TRY {  -> myJSON=new JSONObject(dummyBicycleJSON,)@ -> routesArray=myJSON.getJSONArray(WebRequestJSONKeys.ROUTES.getLowerCase(),)@ -> route=Route.buildRouteFromJSON(routesArray.getJSONObject(0,),)@ } CATCH(JSONException) {}
results[https://github.com/codebutler/farebot/blob/0d168b2fae5a524d32460738ccdec73019f9e647/src/com/codebutler/farebot/keys/ClassicCardKeys.java][fromJSON][2] = -> TRY {  -> keysJson=json.getJSONArray(KEYS,)@ -> LOOP { -> sectorKeys[i]=ClassicSectorKey.fromJSON(keysJson.getJSONObject(i,),)@i<keysJson.length() } } CATCH(JSONException) {}
results[https://github.com/socialpercon/anki/blob/2d6462b4a8b061d45249aa127cf434dc17d66165/src/com/ichi2/libanki/Models.java][_updateTemplOrds][1] = -> TRY { -> ja=m.getJSONArray("tmpls",)@ -> LOOP { -> f=ja.getJSONObject(i,)@i<ja.length() } } CATCH(JSONException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/cocoafish/cocoafish-android-sdk/blob/34d2ec84bdf44d6fc6060afbb1c324fdfbd67a83/cocoafish/src/com/cocoafish/sdk/CCResponse.java][<init>][2] = -> TRY {  -> TRY { -> responseData=jObject.getJSONObject("response",)@ -> responseArray=responseData.getJSONArray("responses",)@ -> IF { -> LOOP { -> tmpResponse=new CCResponse(responseArray.getJSONObject(i,),)@responseArray.length()>0 && i<responseArray.length() } } } } CATCH(CocoafishError) {}
results[https://github.com/svn2github/openam-trunk/blob/3d559addbb0bb093cb7fd3138ed03d99b9ebb847/openam-forgerock-rest/src/main/java/org/forgerock/openam/forgerockrest/authn/RestAuthNameCallbackHandler.java][convertFromJson][1] = -> TRY {  -> type=jsonCallback.getString("type",)@ -> input=jsonCallback.getJSONArray("input",)@!(!(CALLBACK_NAME.equalsIgnoreCase(type,))) -> LOOP { -> inputField=input.getJSONObject(i,)@i<input.length() && !(!(CALLBACK_NAME.equalsIgnoreCase(type,))) } } CATCH(JSONException) {}
results[https://github.com/geoserver/geoserver-history/blob/dcb33fd3a8b4f9e6ed3e3cf477e2863970968a6f/geoserver/wfs/src/test/java/org/geoserver/wfs/response/GeoJSONTest.java][testGet][5] = -> TRY {  -> rootObject=JSONObject.fromObject(out,)@ -> assertEquals(rootObject.get("type",),"FeatureCollection",)@ -> featureCol=rootObject.getJSONArray("features",)@ -> aFeature=featureCol.getJSONObject(0,)@ } CATCH(Exception) {}
results[https://github.com/lbjay/gridworks/blob/dfb614fd57df8f3d3025d951f34f799319ef0db2/src/main/java/com/metaweb/gridlock/browsing/Engine.java][initializeFromJSON][2] = -> TRY {  -> a=o.getJSONArray("facets",)@ -> length=a.length()@ -> LOOP { -> fo=a.getJSONObject(i,)@i<length } } CATCH(Exception) {}
results[https://github.com/darthsuicune/CreuRoja/blob/a76ed2eec8f17ae6b43611597bc7d19ec6a955a7/CreuRoja/src/main/java/org/creuroja/android/app/utils/LocationsProvider.java][getLocationList][1] = -> TRY {  -> locations=object.getJSONArray(Location.sLocations,)@ -> LOOP { -> location=new Location(locations.getJSONObject(i,),)@i<locations.length() } } CATCH(JSONException) {}
results[https://github.com/craftercms/studio/blob/22f5cd1aaa04dd152ad26145919892297995a650/alfresco-svcs/src/main/java/org/craftercms/cstudio/alfresco/script/SearchServiceScript.java][getFilters][1] = -> filterArray=jsonObject.getJSONArray(CStudioSearchConstants.SEARCH_JSON_FILTERS,)@ -> IF { -> filters=new FastList<FilterTO>(filterArray.size(),)@filterArray!=null&&filterArray.size()>0 -> len=filterArray.size()@filterArray!=null&&filterArray.size()>0 -> LOOP { -> filterObj=filterArray.getJSONObject(i,)@filterArray!=null&&filterArray.size()>0 && i<len } -> return filters@filterArray!=null&&filterArray.size()>0 }
results[https://github.com/collectionspace/application/blob/7f842ddeed1e17dd33872285f45b8522a6cc74de/cspi-webui/src/main/java/org/collectionspace/chain/csp/webui/record/RecordCreateUpdate.java][getPermID][1] = -> TRY {  -> data=searcher.getJSON(storage,permrestrictions,"items",permbase,)@ -> items=data.getJSONArray("items",)@ -> LOOP { -> item=items.getJSONObject(i,)@i<items.length() } } CATCH(JSONException,UIException,ExistException,UnimplementedException,UnderlyingStorageException) {}
results[https://github.com/aaujon/Inventirap/blob/26c61073996ba98868b4a4f655ffb6e3e4d00c6f/src/Inventirap-android/src/fr/upsilon/inventirap/DisplayResultActivity.java][onCreate][1] = -> TRY { -> jsonArray=json.getJSONArray("materials",)@ -> json=jsonArray.getJSONObject(0,)@ -> material=json.getJSONObject("Materiel",)@ } CATCH(JSONException) { -> finish()@ } -> length=json.length()@
results[https://github.com/congnt/exogtn/blob/a5d5ff93b32bf3d1df5ba6d19b872e67be9cfafb/webui/portal/src/main/java/org/exoplatform/portal/webui/application/UIGadget.java][getMetadata][1] = -> TRY { -> IF { -> metadata_=new JSONObject(strMetadata,)@metadata_==null } -> obj=metadata_.getJSONArray(METADATA_GADGETS,).getJSONObject(0,)@ -> obj.put("secureToken",token,)@ -> return metadata_.toString()@ }
results[https://github.com/erichkleung/trydish/blob/c8734454d97f64a4c4ff480452823e91bdc2c6c3/src/com/trydish/find/ViewDish.java][doInBackground][1] = -> TRY { -> IF { -> result=new JSONObject(responseString,)@response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> jArray=result.getJSONArray("id",)@response.getStatusLine().getStatusCode()==HttpStatus.SC_OK -> latAndLong=jArray.getJSONObject(0,)@response.getStatusLine().getStatusCode()==HttpStatus.SC_OK } ELSE { -> return null@!(response.getStatusLine().getStatusCode()==HttpStatus.SC_OK) } }
results[https://github.com/forcedotcom/SalesforceMobileSDK-Android/blob/8af4e4b4b9d0436f2a9a93ea10c3e50f5ff85323/native/SalesforceSDKTest/src/com/salesforce/androidsdk/rest/RestClientTest.java][testDescribeGlobal][1] = -> TRY {  -> jsonResponse=response.asJSONObject()@ -> checkKeys(jsonResponse,"encoding","maxBatchSize","sobjects",)@ -> checkKeys(jsonResponse.getJSONArray("sobjects",).getJSONObject(0,),"name","label","custom","keyPrefix",)@ } CATCH(Exception) {}
results[https://github.com/OrangeTeam/FamilyLink/blob/ecf780853ff2d4d8318ba209d0c4fc73b23028b0/app/src/org/orange/familylink/util/ConvertUtil.java][call][1] = -> TRY {  -> jsonObject=new JSONObject(sb.toString(),)@ -> return jsonObject.getJSONArray("results",).getJSONObject(0,).getString("formatted_address",)@ } CATCH(Exception) {}
results[https://github.com/droolsjbpm/jbpm-designer/blob/bb8b533468bf99be8806ef509e5c0ab10a74ef2e/editor/server/src/de/unihannover/se/infocup2008/bpmn/dao/JSONDiagramDao.java][walkChilds][1] = -> TRY {  -> shapes=node.getJSONArray("childShapes",)@ -> LOOP { -> walkShape(shapes.getJSONObject(i,),dia,parent,)@i<shapes.length() } } CATCH(JSONException) {}
results[https://github.com/NCIP/psc/blob/f8544f68a13c472091a228a1b436b20b3e025bce/web/src/test/java/edu/northwestern/bioinformatics/studycalendar/restlets/representations/OsgiBundleRepresentationTest.java][testBundleInfoDoesNotIncludeMetatypeIfNotPresent][1] = -> TRY {  -> bundle6=representSingle(bundleWithServices,)@ -> firstService=bundle6.getJSONArray("services",).getJSONObject(0,)@ -> assertFalse(firstService.has("metatype",),)@ } CATCH(Exception) {}
results[https://github.com/royb3/Energy_Vampires/blob/6c53804f09cbf6f329009dc70c4a70e7eb87dfdb/Mobile/EnergyVampire/src/com/patchingzone/energyvampire/JsonParser.java][Parse][1] = -> TRY { -> jsonObject=new JSONObject(Message,)@ -> jsonArray=jsonObject.getJSONArray("args",)@ -> jsonObject2=jsonArray.getJSONObject(0,)@ } CATCH(JSONException) { -> Log.d("error","Message not parsed "+Jex,)@ -> return Jex.toString()@ }
