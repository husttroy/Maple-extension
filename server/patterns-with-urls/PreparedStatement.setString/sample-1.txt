results[https://github.com/adrianfish/clog/blob/2b8460ecb6a359b5e297cf6af37601f31f4ad700/impl/src/java/org/sakaiproject/clog/impl/sql/SQLGenerator.java][getDeleteAutosavedCopyStatement][5] = -> TRY {  -> st=connection.prepareStatement("DELETE FROM "+TABLE_AUTOSAVED_POST+" WHERE "+POST_ID+" = ?",)@ -> st.setString(1,postId,)@ } CATCH(Exception) {}
results[https://github.com/dustin/snippets/blob/b74fc6d14b0c138d996f40dfc909d90f5b44798d/java/java/servlet/dsservlet/net/spy/dsservlet/DSBean.java][listUnseen][12] = -> TRY {  -> pst=db.prepareStatement("select * from show_distribution\n"+"  where submitted_to=? and completed is null order by submitted",)@ -> pst.setString(1,username,)@ -> rs=pst.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/cubing/tnoodle/blob/0f98ba7d463830760a6e76edd683d729035d9350/server/Test.java][main][3] = -> TRY {  -> ps=conn.prepareStatement("INSERT INTO Test (name) VALUES(?)",)@ -> ps.setString(1,"Jeremy Fleischman",)@ -> ps.executeUpdate()@ } CATCH(Exception) {}
results[https://github.com/KLIM8D/ucn-2semproject-dm79-group2/blob/0fde661e8923e76717db65d4942d70ff61fa12a6/src/db/DBClient.java][getClientByName][5] = -> TRY {  -> query=con.prepareStatement("SELECT * FROM Clients WHERE name = ?",)@ -> query.setString(1,name,)@ -> clientResult=_da.callCommandGetRow(query,con,)@ } CATCH(Exception) {}
results[https://github.com/forcedotcom/phoenix/blob/95ca8be3d01eef84f3e2105b51b8593b3dcd5bef/test/unit/java/src/phoenix/compile/QueryMetaDataTest.java][testTwoDateSubstractExpressionMetaData][9] = -> TRY {  -> statement=conn.prepareStatement(query,)@ -> statement.setString(1,DS4,)@ -> pmd=statement.getParameterMetaData()@ } CATCH(Exception) {}
results[https://github.com/forcedotcom/phoenix/blob/21ed44a07c9626e34730bfaf3c4f69e2bde9a95f/src/test/java/com/salesforce/phoenix/end2end/ReverseFunctionTest.java][initTable][2] = -> TRY {  -> stmt=conn.prepareStatement(dml,)@ -> stmt.setString(1,s,)@ -> stmt.execute()@ } CATCH(Exception) {}
results[https://github.com/blindsidenetworks/bigbluebutton-sakai/blob/aceba896b0b638bb638eb15cb6825847587e833f/bbb-tool/impl/src/java/org/sakaiproject/bbb/impl/sql/DefaultSqlGenerator.java][getMarkMeetingAsDeletedStatements][1] = -> TRY {  -> meetingST=connection.prepareStatement("UPDATE BBB_MEETING SET DELETED = 1 WHERE MEETING_ID = ?",)@ -> meetingST.setString(1,meetingId,)@ -> statements.add(meetingST,)@ } CATCH(Exception) {}
results[https://github.com/cbredlow/projectAwesome/blob/be676e690a51a853ec92dcfd90dc5b8cea95addd/ProjectAwesome/src/projectawesome/LoginHandler.java][handleLogin][5] = -> TRY { -> ps=conn.prepareStatement(pass,)@ -> ps.setString(1,userName,)@ -> rs=ps.executeQuery()@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/Emigrate91/ChiDaBa/blob/9838c896f2818d0b95a16e57dc1dce57022734ec/src/DB/DB.java][getEreignissHoeheList][4] = -> TRY {  -> pstmt=con.prepareStatement("SELECT * FROM tbl_hoehenmessungen WHERE tbl_ereignisse_fk like (?);",)@ -> pstmt.setString(1,String.valueOf(EreignissID,),)@ -> rslt=pstmt.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/anycook/anycook-core/blob/ea242be756df597c012c944f2b9309587649fc93/src/de/anycook/db/mysql/DBGetGericht.java][getSchmeckt][3] = -> TRY { -> pStatement=connection.prepareStatement("SELECT name, COUNT(users_id) AS counter FROM gerichte LEFT JOIN schmeckt ON name = gerichte_name WHERE name = ? GROUP BY name",)@ -> pStatement.setString(1,gericht,)@ -> data=pStatement.executeQuery()@ } CATCH(Exception) { -> logger.error("execute MySQL-query failed at getSchmecktfromGericht",e,)@ }
results[https://github.com/jsanda/cassandra-jdbc/blob/cf3094a01981e68388e93f79ea097451d9712116/src/test/java/org/apache/cassandra/cql/jdbc/PooledTest.java][preparedStatementClose][4] = -> TRY {  -> statement=connection.prepareStatement("SELECT someInt FROM pooled_test WHERE somekey = ?",)@ -> statement.setString(1,"world",)@ -> resultSet=statement.executeQuery()@ -> assert statement.isClosed()@ } CATCH(Exception) {}
results[https://github.com/feliperuppel/NewItens/blob/6a9d5800dc1da46800267a9261c8bd487acdd2a8/src/br/com/newitens/dao/NiInterestsAreaDAO.java][search][17] = -> TRY {  -> name=(name==null)?"":name@ -> ps=conn.prepareStatement(sql,)@ -> ps.setString(1,"%"+name+"%",)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/VirginiaFIRST/frc2013score/blob/95d747ef9666a24b752e86c59d1fc65d8659df05/src/FRC_Score_Sys/SqlDB.java][FetchOption][1] = -> TRY { -> s=c.prepareStatement(q,)@ -> s.setString(1,Name,)@ -> rs=s.executeQuery()@ } CATCH(Exception) { -> Except.ExceptionHandler("FetchOption",e,false,false,)@ }
results[https://github.com/teiid/teiid/blob/56562e29a50414799fa946b1fd535bdbf705544a/test-integration/common/src/test/java/org/teiid/transport/TestODBCSocketTransport.java][testMultibatchSelectPrepared][2] = -> TRY {  -> s=conn.prepareStatement("select * from tables t1, tables t2 where t1.name > ?",)@ -> s.setFetchSize(100,)@ -> s.setString(1,"a",)@ -> rs=s.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/jsanda/cassandra-jdbc/blob/cf3094a01981e68388e93f79ea097451d9712116/src/test/java/org/apache/cassandra/cql/jdbc/JdbcRegressionTest.java][testIssue33][2] = -> TRY {  -> statement=con.prepareStatement("update t33 set c=? where k=123",)@ -> statement.setString(1,"mark",)@ -> statement.executeUpdate()@ -> result=statement.executeQuery("SELECT * FROM t33;",)@ } CATCH(Exception) {}
results[https://github.com/codefollower/Lealone/blob/e9b4163c924c0d057fef8538456bc7b9378ef044/lealone-test/src/test/java/com/codefollower/lealone/test/jdbc/ddl/CreateViewTest.java][run0][3] = -> TRY {  -> ps=conn.prepareStatement(sql,)@ -> ps.setInt(1,2,)@ -> ps.setString(2,"b2",)@ -> rs=ps.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/jkingdon/mayfly/blob/5a6a03852cf25ebdd4e72335a1596eed0b1d6ee4/test/net/sourceforge/mayfly/acceptance/StatementTest.java][testSetToNull][1] = -> TRY {  -> prepared=connection.prepareStatement("insert into foo (a) values (?)",)@ -> prepared.setString(1,null,)@ -> prepared.executeUpdate()@ -> prepared.close()@ } CATCH(Exception) {}
results[https://github.com/sainthxd/cassandra-jdbc/blob/2fc09b56384ec5a016221336611621719d0584e5/src/test/java/org/apache/cassandra/cql/jdbc/JdbcRegressionTest.java][testIssue65][1] = -> TRY {  -> pstatement=con.prepareStatement(update,)@ -> pstatement.setObject(1,mySet,Types.OTHER,)@ -> pstatement.setString(2,"key1",)@ -> pstatement.executeUpdate()@ } CATCH(Exception) {}
results[https://github.com/vnc-biz/vnc-zcs-crm/blob/3a49f11ce2f63c9eaec6878edc3618d2d0e53701/src/lib_vnc_crm/src/biz/vnc/helpers/OpportunityHelper.java][listHistory][2] = -> TRY { -> preparedStatement=DBUtility.connection.prepareStatement(query,)@ -> preparedStatement.setString(1,leadId,)@ } CATCH(Exception) { -> ZLog.err("VNC CRM for Zimbra","Error in addHistory Lead Helper Class",e,)@ } -> rs=dbu.select(preparedStatement,)@
results[https://github.com/PerfModDash/esnet-perfsonar/blob/d0ce9c8021077321a29a765c963b63e126027f4b/maddash/maddash-server/src/main/java/net/es/maddash/utils/DimensionUtil.java][getParams][1] = -> TRY { -> stmt=conn.prepareStatement("SELECT keyName, value FROM dimensions WHERE configIdent=?",)@ -> stmt.setString(1,configIdent,)@ -> results=stmt.executeQuery()@ } CATCH(Exception) { -> log.warn("Unable to get hos parameters for "+configIdent,)@ }
results[https://github.com/aureliano/mater-dei/blob/6f2aa02b8f6ffd905d374aa483236669d90f2fd0/src/main/java/br/materdei/bdd/database/helper/PostgresHelper.java][tableExists][1] = -> TRY {  -> ps=conn.prepareStatement(query,)@ -> ps.setString(1,table,)@ -> return ps.executeQuery().next()@ } CATCH(Exception) {}
results[https://github.com/adrianfish/clog/blob/2b8460ecb6a359b5e297cf6af37601f31f4ad700/impl/src/java/org/sakaiproject/clog/impl/sql/SQLGenerator.java][getRestoreStatementsForPost][2] = -> TRY {  -> st=connection.prepareStatement("UPDATE "+TABLE_POST+" SET "+VISIBILITY+" = '"+Visibilities.PRIVATE+"' WHERE "+POST_ID+" = ?",)@ -> st.setString(1,post.getId(),)@ -> statements.add(st,)@ } CATCH(Exception) {}
results[https://github.com/Gruppe8DTU/Rejsekortet/blob/18701aa7cc524938a52e912bac2f8e176046010b/src/persistance/SQL_Connect.java][setRights][1] = -> TRY {  -> preparedStatement=connection.prepareStatement(executeQuery,)@ -> preparedStatement.setInt(1,right,)@ -> preparedStatement.setString(2,user,)@ -> preparedStatement.execute()@ } CATCH(Exception) {}
results[https://github.com/gh0stbust3rs/OnlineShop/blob/2a885ac9fff072f96c84561de084525d56e386cf/src/java/pkgOnlineShop/Database.java][deleteCategory][2] = -> TRY {  -> pstm=con.prepareStatement(sql,)@ -> pstm.setString(1,name,)@ -> pstm.execute()@ -> pstm.close()@ } CATCH(Exception) {}
results[https://github.com/apache/derby/blob/030bfacb0277eb2704a083c0db627181137fcda5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_9.java][testJarStorage][1] = -> TRY {  -> backupdir=SupportFilesSetup.getReadWriteFileName("d6505-backup",)@ -> backupStmt=prepareStatement("call syscs_util.syscs_backup_database(?)",)@ -> backupStmt.setString(1,backupdir,)@ -> backupStmt.execute()@ } CATCH(Exception) {}
results[https://github.com/apache/derby/blob/911d88c46edfdcd38c2f52d0f6a7ed514b1d704d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java][testXMLParse][1] = -> TRY {  -> pSt=prepareStatement("insert into paramInsert values XMLPARSE(document "+"cast (? as CLOB) preserve whitespace)",)@ -> pSt.setString(1,"<ay>caramba</ay>",)@ -> assertUpdateCount(pSt,1,)@ -> pSt.close()@ } CATCH(Exception) {}
results[https://github.com/apache/derby/blob/e33b8d871ece038784769f3e95d16bc1b259eb09/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java][getConglomerateID][1] = -> TRY {  -> ps=conn.prepareStatement("select c.conglomeratenumber\n"+"from sys.sysconglomerates c, sys.systables t\n"+"where t.tablename = ? and t.tableid = c.tableid",)@ -> ps.setString(1,tableName,)@ -> result=getScalarLong(ps,)@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/jkingdon/mayfly/blob/5a6a03852cf25ebdd4e72335a1596eed0b1d6ee4/test/net/sourceforge/mayfly/acceptance/StatementTest.java][testStringJdbcParameter][2] = -> TRY {  -> prepared=connection.prepareStatement("insert into foo (s) values (?)",)@ -> prepared.setString(1,"can't",)@ -> assertEquals(1,prepared.executeUpdate(),)@ -> prepared.close()@ } CATCH(Exception) {}
results[https://github.com/tranchis/Mapcelona/blob/110f9d0308fc5dd72b86b12bd72a22e116e44de0/JavaParser/src/virtuoso/jena/driver/VirtPrefixMapping.java][removeNsPrefix][1] = -> super.removeNsPrefix(prefix,)@ -> TRY { -> ps=conn.prepareStatement(query,)@ -> ps.setString(1,prefix,)@ -> ps.execute()@ } CATCH(Exception) { -> throw new JenaException(e,)@ }
results[https://github.com/der/ukl-registry-poc/blob/99938cdad40e77423c96f0f3f4a122382434464f/src/main/java/com/epimorphics/registry/security/DBUserStore.java][userlist][2] = -> TRY { -> s=conn.prepareStatement("SELECT ID, NAME FROM USERS WHERE "+query+" ORDER BY NAME",)@ -> s.setString(1,arg,)@ -> rs=s.executeQuery()@ } CATCH(Exception) { -> log.error("Failed to access security database",e,)@ -> throw new EpiException(e,)@ }
results[https://github.com/skavanagh/EC2Box/blob/8931dd0561238598e297a4d86dffc5360c96071d/src/main/java/com/ec2box/manage/db/AWSCredDB.java][getAWSCred][4] = -> TRY { -> stmt=con.prepareStatement("select * from aws_credentials where access_key like ?",)@ -> stmt.setString(1,accessKey,)@ -> rs=stmt.executeQuery()@ -> DBUtils.closeStmt(stmt,)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/Hidendra/LWC/blob/2b6653b024968174a8d1149a35a0ed9f71ae39fd/src/com/griefcraft/sql/MemDB.java][unregisterPlayer][8] = -> TRY { -> statement=connection.prepareStatement("DELETE FROM `sessions` WHERE `player` = ?",)@ -> statement.setString(1,player,)@ -> statement.executeUpdate()@ -> statement.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/apache/derby/blob/8f1a708d1a756aa39e3d5bddaa5712ecc196fe17/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java][testSmallClobFields][2] = -> TRY {  -> ps=prepareStatement("insert into testClob (smallClob) values(?)",)@ -> LOOP { -> ps.setString(1,val,)@ -> ps.executeUpdate()@ } } CATCH(Exception) {}
results[https://github.com/VirginiaFIRST/frc2013score/blob/95d747ef9666a24b752e86c59d1fc65d8659df05/src/FRC_Score_Sys/SqlDB.java][FetchMatchList][1] = -> System.out.println("Match List Fetch Requested for type "+type,)@ -> TRY { -> s=c.prepareStatement("SELECT id,Saved,RScore,BScore FROM MATCHES WHERE id LIKE ?",)@ -> s.setString(1,type+"%",)@ -> rs=s.executeQuery()@ } CATCH(Exception) { -> Except.ExceptionHandler("FetchMatchList",e,false,true,"Match list can not be loaded.",)@ }
results[https://github.com/Hidendra/LWC/blob/2b6653b024968174a8d1149a35a0ed9f71ae39fd/src/com/griefcraft/sql/MemDB.java][getLockPassword][7] = -> TRY { -> statement=connection.prepareStatement("SELECT `password` FROM `locks` WHERE `player` = ?",)@ -> statement.setString(1,player,)@ -> set=statement.executeQuery()@ -> statement.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/biblex2013/biblex/blob/6bd71135676504f1cf07835b11556fafc5405af3/biblex/src/main/java/fi/helsinki/biblex/storage/SQLiteStorage.java][get][1] = -> TRY { -> st=conn.prepareStatement("SELECT id,name,style FROM Entries WHERE name = ?;",)@ -> st.setString(1,name,)@ -> rs=st.executeQuery()@ } CATCH(Exception) { -> System.err.println("Error in SQLiteStorage.get(string): "+e.toString(),)@ }
results[https://github.com/tacitknowledge/autopatch/blob/2a9496dc2674a8f47a689fedda50114b288e0239/src/integration-test/java/com/tacitknowledge/util/migration/MigrationUnlockTest.java][lockPatchTable][1] = -> TRY {  -> conn=DriverManager.getConnection("jdbc:hsqldb:mem:"+database,"sa","",)@ -> stmt=conn.prepareStatement("UPDATE patches SET patch_in_progress = 'T' WHERE patch_level in ( SELECT MAX(patch_level) FROM patches WHERE system_name = ?)",)@ -> stmt.setString(1,database,)@ -> rowCount=stmt.executeUpdate()@ -> SqlUtil.close(conn,stmt,null,)@ } CATCH(Exception) {}
results[https://github.com/hbcit2010software/hbcitsports/blob/6a020dae2b089971adbbc5f392c4a90cebc47602/src/cn/edu/hbcit/smms/dao/createprogramdao/SelectItems.java][selectItemsById][1] = -> TRY { -> ps=conn.prepareStatement("SELECT t_group.groupname,t_finalitem.finalitemname,t_finalitem.id "+"FROM t_finalitem "+"JOIN t_group2item ON t_finalitem.gp2itid = t_group2item.id "+"JOIN t_group2sports ON t_group2item.gp2spid = t_group2sports.id "+"JOIN t_group ON t_group2sports.groupid = t_group.id "+"JOIN t_item ON t_group2item.itemid = t_item.id "+"WHERE t_group2sports.sportsid = ? AND t_item.itemtype = ? and t_finalitem.finalitemtype != 2",)@ -> ps.setInt(1,sportsid,)@ -> ps.setString(2,itemtype,)@ -> rs=ps.executeQuery()@ } CATCH(Exception) { -> ee.printStackTrace()@ }
results[https://github.com/mseiwert/RoM/blob/9e578d286479766ec2e2dbc8bccc0ab3267f0328/playground/src/DataLayer/DataLayer.java][isAdmin][3] = -> TRY { -> pstmt=this.getConnection().prepareStatement(SqlStatements.SQL_IS_ADMIN,)@ -> pstmt.setString(1,u_name,)@ -> this.rs=pstmt.executeQuery()@ } CATCH(Exception) { -> System.out.println(s,)@ }
results[https://github.com/der/ukl-registry-poc/blob/99938cdad40e77423c96f0f3f4a122382434464f/src/main/java/com/epimorphics/registry/security/DBUserStore.java][doUnregister][1] = -> TRY { -> s=conn.prepareStatement("DELETE FROM USERS WHERE ID=?",)@ -> s.setString(1,id,)@ -> s.executeUpdate()@ } CATCH(Exception) { -> log.error("Failed to access security database",e,)@ -> throw new EpiException(e,)@ }
results[https://github.com/Azrielg13/innovative/blob/584526680c3e8b205d906bd336b5f9ca996529c4/qee/src/com/digitald4/pm/User.java][refresh][8] = -> TRY {  -> ps=con.prepareStatement(SELECT+" FROM "+TABLE+" "+WHERE,)@ -> ps.setString(1,KEY,)@ -> ps.setInt(2,id,)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/Zabell92/ProjectBelman/blob/a125c5037fee870632f3c315b485f676187e5ec1/src/DAL/EmployeeDBM.java][getByName][2] = -> TRY {  -> ps=con.prepareStatement(sql,)@ -> ps.setString(1,Name,)@ -> rs=ps.executeQuery()@ -> IF { -> return ID@rs.next() } } CATCH(Exception) {}
results[https://github.com/codefollower/H2-Research/blob/55534e45e48b9b7161a29afc814317a8b4961416/my-test/my/test/jdbc/JdbcConnectionTest.java][main][5] = -> TRY {  -> ps=conn.prepareStatement("insert into t values(?,?)",)@ -> ps.setInt(2,20,)@ -> ps.setString(1,"aaa",)@ -> ps.executeUpdate()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/Emigrate91/ChiDaBa/blob/9838c896f2818d0b95a16e57dc1dce57022734ec/src/DB/DB.java][getDuengerID][3] = -> TRY {  -> pstmt=con.prepareStatement(sql,)@ -> pstmt.setString(1,d,)@ -> rslt=pstmt.executeQuery()@ } ELSE { -> return null@!(rslt.next()) } CATCH(Exception) {}
results[https://github.com/forcedotcom/phoenix/blob/a11b7daaded5bb83fbbbfde751233fe0dee571e5/phoenix-core/src/test/java/com/salesforce/phoenix/end2end/KeyOnlyTest.java][testKeyOnly][3] = -> TRY {  -> stmt=conn7.prepareStatement("upsert into "+"KEYONLY VALUES (?, ?, ?)",)@ -> stmt.setInt(1,5,)@ -> stmt.setInt(2,6,)@ -> stmt.setString(3,"foo",)@ -> stmt.execute()@ } CATCH(Exception) {}
results[https://github.com/pister/wint/blob/a61d8784ac45662b397a34bbc4079db77a879856/wint-tools/src/main/java/wint/tools/similar/store/sql/SqlContentTermStore.java][getContentTerms][1] = -> TRY { -> pstmt=conn.prepareStatement(sql,)@ -> pstmt.setString(1,groupId,)@ -> rs=pstmt.executeQuery()@ -> return new SqlResultCloseableIterator(serializeService,rs,pstmt,conn,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/G53/eXceedVote/blob/cbc5ad61e79813a902a707f1bc4038d14e7065a3/src/g53/exceedvote/persistence/jdbc/VoterDaoJdbc.java][modifyQuestion][1] = -> TRY { -> pstmt=con.prepareStatement(queryin,)@ -> pstmt.setString(1,changeQuestion,)@ -> pstmt.setInt(2,id,)@ -> pstmt.executeUpdate()@ } CATCH(Exception) { -> record("Can't insert user record",)@ }
results[https://github.com/ekirkilevics/TestSSQL/blob/3ae3bdc2ab1e956e41508410a431533e57f29bce/sql12/test/src/net/sourceforge/squirrel_sql/fw/dialects/DialectLiveTestRunner.java][runPreparedQuery][5] = -> TRY {  -> stmt=con.prepareStatement(sql,)@ -> System.out.println("Running SQL ("+dialect.getDisplayName()+"): "+sql+" with bind variable : "+value,)@ -> stmt.setString(1,value,)@ -> return stmt.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/NCIP/lexevs/blob/9f630d706a6fd62ab01ab2bfdb9f8bbae2a7743a/lgConverter/src/edu/mayo/informatics/lexgrid/convert/directConversions/SQLLiteToLdap.java][loadCodingSchemeSupportedAttributes][2] = -> TRY {  -> log.debug("loadCodingSchemeSupportedAttributes called - name:"+name+" codingSchemeName:"+codingSchemeName,)@ -> getCodingSchemeSupportedAttributesModifications=sqlConnection_.prepareStatement("SELECT * FROM codingSchemeSupportedAttributes"+" WHERE codingSchemeName = ? ORDER BY supportedAttributeTag",)@ -> getCodingSchemeSupportedAttributesModifications.setString(1,codingSchemeName,)@ -> results=getCodingSchemeSupportedAttributesModifications.executeQuery()@ -> getCodingSchemeSupportedAttributesModifications.close()@ } CATCH(Exception) {}
results[https://github.com/lusabo/sharecar/blob/bb21b66a43cd15967ee23608dfc398020d938dab/src/main/java/persistence/UserDAO.java][loadByUsername][2] = -> TRY {  -> pstmt=connection.prepareStatement(sql.toString(),)@ -> pstmt.setString(1,username,)@ -> rs=pstmt.executeQuery()@ -> pstmt.close()@ } CATCH(Exception) {}
results[https://github.com/apache/derby/blob/fc86bf8c622a12bfe7e1c984fb3ce21dcd4ff8e4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java][connectionWorkhorse][1] = -> TRY {  -> ps=conn.prepareStatement("select * from sys.systables where tablename = ?",)@ -> ps.setString(1,"foo",)@ -> parameterMetaData=ps.getParameterMetaData()@ -> rs=ps.executeQuery()@ -> vetObject(ps,unsupportedList,notUnderstoodList,)@ } CATCH(Exception) {}
results[https://github.com/robbietjuh/bs-bungee/blob/90325c1e157fd4e11a905db110c94079f1c5b6b9/src/main/java/net/robbytu/banjoserver/bungee/logger/UserLogCommand.java][execute][1] = -> TRY { -> statement=conn.prepareStatement("SELECT DISTINCT(ip), login_time FROM bs_logins WHERE username LIKE ? ORDER BY id DESC",)@!(!(Permissions.hasPermission(sender.getName(),"bs.bungee.userlog",))) -> statement.setString(1,args[0],)@!(!(Permissions.hasPermission(sender.getName(),"bs.bungee.userlog",))) -> result=statement.executeQuery()@!(!(Permissions.hasPermission(sender.getName(),"bs.bungee.userlog",))) -> sender.sendMessage(ChatColor.YELLOW+args[0]+" is ingelogd geweest met de volgende IP adressen:",)@!(!(Permissions.hasPermission(sender.getName(),"bs.bungee.userlog",))) } CATCH(Exception) { -> sender.sendMessage(ChatColor.RED+"Informatie kon niet worden opgehaald. Databasefout.",)@!(!(Permissions.hasPermission(sender.getName(),"bs.bungee.userlog",))) }
results[https://github.com/thomasattic/castor/blob/0c1463687be937e709aac4a61727b2970d3f1f25/cpactf/src/test/java/org/castor/cpa/test/test89/TestLazyEmployeeExpiration.java][updateAddrUsingJDBC][1] = -> TRY {  -> updateAddressStatement=_db.getJdbcConnection().prepareStatement("update test89_pks_address set street=? where id=?",)@ -> updateAddressStatement.setString(1,newStreet,)@ -> updateAddressStatement.setInt(2,addressId,)@ -> rc=updateAddressStatement.executeUpdate()@ } CATCH(Exception) {}
results[https://github.com/apache/derby/blob/9d44c9e98c81913375328e14e14ce5a1d2f15160/java/testing/org/apache/derbyTesting/system/oe/direct/Standard.java][delivery][1] = -> TRY {  -> dlSetRequestState=prepareStatement("UPDATE DELIVERY_REQUEST SET DR_STATE = ? "+"WHERE DR_ID = ?",)@ -> dlSetRequestState.setString(1,"I",)@ -> dlSetRequestState.setInt(2,request,)@ -> dlSetRequestState.executeUpdate()@ -> reset(dlSetRequestState,)@ } CATCH(Exception) {}
results[https://github.com/tranchis/Mapcelona/blob/110f9d0308fc5dd72b86b12bd72a22e116e44de0/JavaParser/src/virtuoso/jena/driver/VirtDataSource.java][containsNamedModel][1] = -> TRY { -> ps=getConnection().prepareStatement(query,)@ -> ps.setString(1,name,)@ -> rs=ps.executeQuery()@ } CATCH(Exception) { -> throw new JenaException(e,)@ }
results[https://github.com/G53/eXceedVote/blob/cbc5ad61e79813a902a707f1bc4038d14e7065a3/src/g53/exceedvote/persistence/jdbc/VoterDaoJdbc.java][addQuestion][1] = -> question=q.getQuestion()@ -> TRY { -> pstmt=con.prepareStatement(queryin,)@ -> pstmt.setString(1,question,)@ -> pstmt.executeUpdate()@ } CATCH(Exception) { -> record("Can't insert user record",)@ }
results[https://github.com/marhkb/DBPrakWebshob/blob/e4b0bbf33403d3765695efc9062552637bdadf4c/webshop/src/main/java/de/behrfriedapp/webshop/server/data/DefaultServerDataAccess.java][getAllProducts][1] = -> TRY { -> stmt=this.conn.prepareStatement("SELECT P_ID, BEZEICHNUNG, PREIS, BILD, BILD_FORMAT, BEWERTUNG, ANZAHL_BEWERTUNGEN "+"FROM PRODUKT "+"WHERE REGEXP_LIKE (BEZEICHNUNG, ?, 'i')",)@ -> stmt.setString(1,searchedProduct,)@ -> result=this.getShortProductInfos(stmt,)@ } CATCH(Exception) { -> this.logger.error(e.getMessage(),e,)@ }
results[https://github.com/mseiwert/RoM/blob/9e578d286479766ec2e2dbc8bccc0ab3267f0328/playground/src/DataLayer/DataLayer.java][setAdmin][2] = -> TRY { -> pstmt=this.getConnection().prepareStatement(SqlStatements.SQL_SET_ADMIN,)@ -> pstmt.setString(1,u_name,)@ -> pstmt.executeUpdate()@ } CATCH(Exception) { -> System.out.println(s,)@ }
results[https://github.com/VirginiaFIRST/frc2013score/blob/b749bbcf50b501e82b1c71aa7bdc491587ab8f55/src/main/java/FRC_Score_Sys/SqlDB.java][FetchOption][1] = -> TRY { -> s=c.prepareStatement(q,)@ -> s.setString(1,Name,)@ -> rs=s.executeQuery()@ } CATCH(Exception) { -> logger.error("Fetch option threw error "+e.getMessage(),)@ }
results[https://github.com/LeCheng09/LeChengCMS/blob/dc28a91a6576ce33681e838dfa98bea3d492f3e2/src/com/lecheng/cms/dao/LoginDao.java][selectId][1] = -> TRY { -> ps=conn.prepareStatement(sql,)@ -> ps.setString(1,name,)@ -> rs=ps.executeQuery()@ } CATCH(Exception) { -> System.out.println(e.getMessage(),)@ }
results[https://github.com/castrinho8/ATM_network_simulator/blob/d7231173d0270b31731b92b89db702d0a527f8b5/lib/mysql-connector-java/src/testsuite/regression/StatementRegressionTest.java][testCsc4194InsertCheckText][15] = -> TRY {  -> expected=new String(kabuInShiftJIS,encoding,)@ -> testStmt=c.prepareStatement("INSERT INTO "+tableName+" VALUES (?)",)@ -> testStmt.setString(1,expected,)@ -> testStmt.executeUpdate()@ -> assertEquals(expected,this.rs.getString(1,),)@ } CATCH(Exception) {}
results[https://github.com/yukoff/concourse-connect/blob/2ac3fe97b16f7fee7d23cc4e1fc8230d07ff1a0e/src/main/java/com/concursive/connect/web/webdav/WebdavManager.java][validateUser][1] = -> TRY {  -> username=(String) params.get("username",)@ -> pst=db.prepareStatement("SELECT user_id, webdav_password "+"FROM users "+"WHERE username = ? "+"AND enabled = ? ",)@ -> pst.setString(1,username,)@ -> pst.setBoolean(2,true,)@ -> rs=pst.executeQuery()@ -> pst.close()@ } CATCH(Exception) {}
results[https://github.com/LeCheng09/LeChengCMS/blob/971a8e2bee4d5490ce69c29ffb8c41e36ebb31b3/src/com/lecheng/cms/dao/LmDao.java][InsertLm][1] = -> TRY { -> ps=conn.prepareStatement(sql,)@ -> ps.setString(1,name,)@ -> ren=ps.executeUpdate()@ -> db.closeConn(null,ps,conn,)@ } CATCH(Exception) { -> System.out.println(e.getMessage(),)@ }
results[https://github.com/forcedotcom/phoenix/blob/a11b7daaded5bb83fbbbfde751233fe0dee571e5/phoenix-core/src/test/java/com/salesforce/phoenix/end2end/VariableLengthPKTest.java][testRegexpSubstrFunction2][8] = -> TRY {  -> stmt=conn.prepareStatement(dml,)@ -> LOOP { -> stmt.setInt(1,i+1,)@i<values.length -> stmt.setString(2,values[i],)@i<values.length -> stmt.execute()@ } } CATCH(Exception) {}
results[https://github.com/killme2008/Metamorphosis/blob/91e022ba65d9ecadb509ac4c7141e5677c52de07/metamorphosis-example/src/main/java/com/taobao/metamorphosis/example/XATransactionProducer.java][execute][1] = -> TRY {  -> pstmt=conn.prepareStatement("insert into orders(uid,address) values(?,?)",)@ -> pstmt.setInt(1,uid,)@ -> pstmt.setString(2,null,)@ -> IF { -> return null@pstmt.executeUpdate()<=0 } -> pstmt.close()@!(pstmt.executeUpdate()<=0) } CATCH(Exception) {}
results[https://github.com/adrianfish/clog/blob/878c4cfb678d923084b373d892694922aad125cd/impl/src/java/org/sakaiproject/blog/impl/sql/SQLGenerator.java][getRecycleStatementsForPost][1] = -> TRY {  -> st=connection.prepareStatement("UPDATE "+TABLE_POST+" SET "+VISIBILITY+" = '"+Visibilities.RECYCLED+"' WHERE "+POST_ID+" = ?",)@ -> st.setString(1,post.getId(),)@ -> statements.add(st,)@ -> statements.addAll(getAuthorTableStatements(post,false,connection,),)@ } CATCH(Exception) {}
results[https://github.com/srinath4ever/JavaTest/blob/828c876cf569b0783791a9bc3d8e55bc5238e10c/JavaTest/src/com/jdbc/practise/eg11.java][main][4] = -> TRY { -> ps=con.prepareStatement("insert into sam values ( ? ,? ) ",)@ -> ps.setString(1,name,)@ -> ps.setInt(2,no,)@ -> ps.executeUpdate()@ -> ps.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/robbietjuh/bs-bungee/blob/90325c1e157fd4e11a905db110c94079f1c5b6b9/src/main/java/net/robbytu/banjoserver/bungee/logger/IPLogCommand.java][execute][1] = -> TRY { -> statement=conn.prepareStatement("SELECT DISTINCT(username), login_time FROM bs_logins WHERE ip = ? ORDER BY id DESC",)@!(!(Permissions.hasPermission(sender.getName(),"bs.bungee.iplog",))) -> statement.setString(1,'/'+args[0],)@!(!(Permissions.hasPermission(sender.getName(),"bs.bungee.iplog",))) -> result=statement.executeQuery()@!(!(Permissions.hasPermission(sender.getName(),"bs.bungee.iplog",))) -> sender.sendMessage(ChatColor.YELLOW+"Volgende users zijn ingelogd geweest op "+args[0],)@!(!(Permissions.hasPermission(sender.getName(),"bs.bungee.iplog",))) } CATCH(Exception) { -> ignored.printStackTrace()@!(!(Permissions.hasPermission(sender.getName(),"bs.bungee.iplog",))) -> sender.sendMessage(ChatColor.RED+"Informatie kon niet worden opgehaald. Databasefout.",)@!(!(Permissions.hasPermission(sender.getName(),"bs.bungee.iplog",))) }
results[https://github.com/boundlessgeo/geotools-2.7.x/blob/97dca30e4c611e742429aede2b20551e931c57d8/modules/unsupported/jdbc-ng/jdbc-ingres/src/test/java/org/geotools/data/ingres/IngresLobTestSetup.java][createLobTable][2] = -> TRY {  -> ps=con.prepareStatement("INSERT INTO \"testlob\" (\"fid\",\"blob_field\",\"clob_field\")  VALUES (?,?,?)",)@ -> ps.setInt(1,1,)@ -> ps.setBytes(2, new byte[],)@ -> ps.setString(3,"small clob",)@ -> ps.execute()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/feiyan35488/nor-bak/blob/a6c377058b86182185e65549a75dda873a58c1c7/test/org/nutz/dao/test/normal/InsertTest.java][invoke][3] = -> TRY {  -> ps=conn.prepareStatement("INSERT INTO t_pet(name) VALUES(?)",)@ -> LOOP { -> ps.setString(1,"XXXXX"+i,)@i<100 -> ps.addBatch()@ } -> ps.execute()@ } CATCH(Exception) {}
results[https://github.com/nigel0913/se/blob/6747f3d874707386a6b76d1a95df8074a35422db/src/business/connectdb/db/RContainer.java][delContainer][1] = -> TRY { -> ps=conn.prepareStatement(sql,)@ -> ps.setString(1,container.getConid(),)@ -> row=ps.executeUpdate()@ -> ps.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/mrdon/jforum-cvs/blob/533d46b0a22c6abe2d18ab6086fe66bde115b0ac/src/net/jforum/drivers/mysql/UserModel.java][isUsernameRegistered][9] = -> TRY {  -> p=JForum.getConnection().prepareStatement(SystemGlobals.getSql("UserModel.isUsernameRegistered",),)@ -> p.setString(1,username,)@ -> rs=p.executeQuery()@ -> p.close()@ } CATCH(Exception) {}
results[https://github.com/stefanoantonel/Informatica/blob/d958ef6dce03db44ce7716a540d2ac3f3de0961d/Proyecto23/InformaticaIndustrial/src/modelo/AgregaRelacion.java][InsertarRelacion][2] = -> TRY { -> stm=con.prepareStatement(sb.toString(),)@ -> stm.setString(1,un,)@ -> rs=stm.executeQuery()@ } CATCH(Exception) { -> e.printStackTrace()@ -> System.out.println("error insertar",)@ }
results[https://github.com/HGitMaster/geotools-osgi/blob/1a6a436c076bf733c6bd0565a05c8ec6f70c1c2d/modules/plugin/jdbc/jdbc-teradata/src/test/java/org/geotools/data/teradata/TeradataLobTestSetup.java][createLobTable][15] = -> TRY {  -> ps=con.prepareStatement("INSERT INTO \"testlob\" (\"blob_field\",\"clob_field\",\"raw_field\")  VALUES (?,?,?)",)@ -> ps.setBytes(1, new byte[],)@ -> ps.setString(2,"small clob",)@ -> ps.setBytes(3, new byte[],)@ -> ps.execute()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/ejustech/iron/blob/f536139d88b58cea4adc684c0512779e62067271/src/com/ejustech/iron/dao/MUserDao.java][GetCountsByUserID][1] = -> TRY { -> ps=Conn().prepareStatement(ConstantSql.GET_COUNTS_BY_USER_ID,)@ -> ps.setString(1,userID,)@ -> rs=ps.executeQuery()@ } CATCH(Exception) { -> e.printStackTrace()@ } -> Close(ps,)@
results[https://github.com/BaseballCardTracker/bbct/blob/fb94cc518f83dbfec36569c841532f6fb783cab9/common/test/bbct/common/data/BaseballCardJDBCIONominalTest.java][testUpdateCard][3] = -> TRY {  -> brand=card.getBrand()@ -> ps=this.conn.prepareStatement(query,)@ -> ps.setString(1,brand,)@ -> ps.setInt(2,year,)@ -> ps.setInt(3,number,)@ -> rs=ps.executeQuery(query,)@ } CATCH(Exception) {}
results[https://github.com/forcedotcom/phoenix/blob/befae06420a252f5bb16000fa7d49de50b730308/src/test/java/com/salesforce/phoenix/end2end/QueryExecTest.java][testUnfoundSingleColumnCaseStatement][2] = -> TRY {  -> tenantId=getOrganizationId()@ -> initATableValues(tenantId,getDefaultSplits(tenantId,),null,ts,)@ -> upsertStmt="upsert into "+"ATABLE("+"    ENTITY_ID, "+"    ORGANIZATION_ID, "+"    A_INTEGER) "+"VALUES ('"+ROW5+"','"+tenantId+"', null)"@ -> statement=conn.prepareStatement(query,)@ -> statement.setString(1,tenantId,)@ -> rs=statement.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/apache/cayenne/blob/99d82eaaa30cd8b5cf7e96fa91bd6b45331e79c5/cayenne/performance/org/objectstyle/cayenne/perform/SimpleTest.java][testJDBC][1] = -> TRY {  -> st=con.prepareStatement("INSERT INTO ARTIST (ARTIST_ID, ARTIST_NAME) VALUES (?, ?)",)@ -> LOOP { -> st.setInt(1,i,)@i<=objCount -> st.setString(2,"name_"+i,)@i<=objCount -> st.executeUpdate()@ } } CATCH(Exception) {}
results[https://github.com/hbcit2010software/hbcitsports/blob/437c5fade56f63f743c3f4221eae8f8a84c98b43/src/cn/edu/hbcit/smms/dao/gameapplydao/SelGameApplyDAO.java][infoDelete][1] = -> TRY { -> pStatement=conn.prepareStatement(sql,)@ -> pStatement.setInt(1,sp2dpid,)@ -> pStatement.setString(2,playernum,)@ -> flag=pStatement.executeUpdate()@ -> pStatement.close()@ } CATCH(Exception) { -> e.getStackTrace()@ }
results[https://github.com/Emigrate91/ChiDaBa/blob/9838c896f2818d0b95a16e57dc1dce57022734ec/src/DB/DB.java][getDuengerName][2] = -> TRY {  -> pstmt=con.prepareStatement(sql,)@ -> pstmt.setString(1,String.valueOf(ID,),)@ -> rslt=pstmt.executeQuery()@ } ELSE { -> return null@!(rslt.next()) } CATCH(Exception) {}
results[https://github.com/suzannamw/CS130/blob/9bc65a313214bba6cf3482600d6ad778f0c7ea91/src/edu/ucla/loni/server/Database.java][selectGroupByName][1] = -> TRY {  -> stmt=con.prepareStatement("SELECT agentId, directoryId, name "+"FROM agents "+"WHERE directoryId = ? AND name = ? AND isGroup = 1",)@ -> stmt.setInt(1,dirId,)@ -> stmt.setString(2,name,)@ -> rs=stmt.executeQuery()@ } ELSE { -> return null@!(groups!=null&&groups.length==1) } CATCH(Exception) {}
results[https://github.com/skavanagh/EC2Box/blob/8931dd0561238598e297a4d86dffc5360c96071d/src/main/java/com/ec2box/manage/db/UserDB.java][isUnique][2] = -> TRY { -> stmt=con.prepareStatement("select * from users where enabled=true and lower(username) like lower(?) and id != ?",)@ -> stmt.setString(1,username,)@ -> stmt.setLong(2,userId,)@ -> rs=stmt.executeQuery()@ -> DBUtils.closeStmt(stmt,)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/cnnic/restfulwhois/blob/daa5bbaa5b4fb3ed3668373bd2e594949c9e3233/source/whois/src/main/java/com/cnnic/whois/util/PermissionCache.java][getKeyMap][2] = -> TRY { -> stmt=connection.prepareStatement(WhoisUtil.SELECT_PERMISSION,)@ -> stmt.setString(1,tableName,)@ -> results=stmt.executeQuery()@ } CATCH(Exception) { -> e.printStackTrace()@ -> throw new IllegalStateException(e.getMessage(),)@ }
results[https://github.com/magictowers/bluefinder/blob/c3649924be0caaf1d3b236849820709ba0305870/BlueFinderRS/test/knn/clean/BlueFinderRecommenderTest.java][testGetEvaluation3][1] = -> TRY { -> stmt=conn.prepareStatement("SELECT * FROM sc3333 WHERE resource = ?",)@ -> stmt.setString(1,subject+" , "+object+" 21156",)@ -> expectedDbResults=stmt.executeQuery()@ -> actualResult=this.bfEvaluation.getEvaluation(object,subject,)@ } CATCH(Exception) { -> e.printStackTrace()@ -> fail("Check stack trace.",)@ }
results[https://github.com/stefanoantonel/Informatica/blob/0781df43c1c29d5060a08238a5a36e2b3a0ddc3f/src/txt/LecturaDAO.java][getAlmacenDestino][1] = -> TRY { -> stm=con.prepareStatement(sb.toString(),)@ -> stm.setString(1,alm,)@ -> rs=stm.executeQuery()@ } CATCH(Exception) { -> e.printStackTrace()@ -> JOptionPane.showMessageDialog(null,"error insert archivos leidos. ",)@ }
results[https://github.com/stefanoantonel/Informatica/blob/3fc2d3fafd18f6d273ec58b4796ff6fd39a2cae2/src/modelo/AgregaRelacion.java][ObtenerArituculoID][2] = -> TRY { -> stm=con.prepareStatement(sb.toString(),)@ -> stm.setString(1,a,)@ -> rs=stm.executeQuery()@ } CATCH(Exception) { -> System.out.println("error buscar id con descripcion",)@ -> e.printStackTrace()@ }
results[https://github.com/Emigrate91/ChiDaBa/blob/9838c896f2818d0b95a16e57dc1dce57022734ec/src/DB/DB.java][deletePflanze][2] = -> TRY { -> pstmt=con.prepareStatement(sql,)@ -> pstmt.setString(1,String.valueOf(PlantID,),)@ -> pstmt.executeUpdate()@ } CATCH(Exception) { -> System.err.println(ex.getMessage(),)@ }
results[https://github.com/NCIP/lexevs/blob/9f630d706a6fd62ab01ab2bfdb9f8bbae2a7743a/lgConverter/src/edu/mayo/informatics/lexgrid/convert/directConversions/SQLLiteToLdap.java][loadConceptAssociations][2] = -> TRY {  -> log.debug("loadConceptAssociations called - ldapName:"+ldapName+" sourceCodingSchemeName:"+sourceCodingSchemeName,)@ -> getAssociations=sqlConnection_.prepareStatement(gsm_.modifySQL("SELECT * FROM  conceptAssociation"+" WHERE sourceCodingSchemeName = ? AND (addEntry = {true} OR updateEntry = {true} OR deleteEntry = {true})",),)@ -> getAssociations.setString(1,sourceCodingSchemeName,)@ -> results=getAssociations.executeQuery()@ -> getAssociations.close()@ } CATCH(Exception) {}
results[https://github.com/LeCheng09/LeChengCMS/blob/971a8e2bee4d5490ce69c29ffb8c41e36ebb31b3/src/com/lecheng/cms/dao/QianTaiLm.java][selectlm04][1] = -> TRY { -> ps=conn.prepareStatement(sql,)@ -> ps.setString(1,lmname,)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(Exception) { -> System.out.println(e.getMessage(),)@ }
results[https://github.com/mrdon/jforum-plugins/blob/b75e4f50f71b4290820a9fb84b9fa842853ce087/src/net/jforum/drivers/mysql/CategoryModel.java][addNew][2] = -> TRY {  -> p=JForum.getConnection().prepareStatement(SystemGlobals.getSql("CategoryModel.addNew",),)@ -> p.setString(1,category.getName(),)@ -> p.executeUpdate()@ } CATCH(Exception) {}
results[https://github.com/tivv/davepgjdbc/blob/79f4685ed1a352b3fbd19252abd5cb30e9b9806a/org/postgresql/test/jdbc2/ServerPreparedStmtTest.java][testTypeChange][1] = -> TRY {  -> pstmt=con.prepareStatement("SELECT CAST (? AS TEXT)",)@ -> (PGStatement) pstmt.setUseServerPrepare(true,)@ -> pstmt.setInt(1,1,)@ -> rs=pstmt.executeQuery()@ -> pstmt.setString(1,"test string",)@ -> rs=pstmt.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/codefollower/H2-Research/blob/2efda0eb90f9f0163dabacddca5456201e54407f/test/my/test/JDBCTest.java][testBlob][1] = -> TRY {  -> ps=conn.prepareStatement("insert into my_lob(name, b, c) values(?,?,?)",)@ -> ps.setString(1,"abc",)@ -> ps.setBlob(2,b,)@ -> ps.setClob(3,c,)@ -> ps.executeUpdate()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/patrickvane/school_5/blob/86d22db1dc0500c1ccce0b85885f9291e83bad30/1. Applicatie/_1_/objects/object_LocalDatabase.java][deleteTaak][1] = -> TRY { -> deleteTaak=connect.prepareStatement("DELETE FROM deelproject_taak WHERE taak_id = ?",)@ -> deleteTaak.setString(1,taak.getId(),)@ -> deleteTaak.executeUpdate()@ } CATCH(Exception) { -> System.out.println("deleteTaak	"+e.getMessage(),)@ }
results[https://github.com/ydirickson/Java-Study/blob/22fd10aab139eb64b265c364b17d3d3b6723eb86/k19/k12-jsf-jpa/src/main/java/br/com/k19/k12/jdbc/InsereLivro.java][main][1] = -> TRY { -> titulo=entrada.nextLine()@ -> comando=conexao.prepareStatement(sql,)@ -> comando.setString(1,titulo,)@ -> comando.setDouble(2,preco,)@ -> comando.execute()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/taroyabuki/webbook2/blob/eb978cb611f8fccfdf5023b6de805acea6174a2c/src/09/Model.java][execute][1] = -> TRY { -> stmt=conn.prepareStatement("SELECT * FROM zip WHERE code LIKE ? ORDER BY code",)@ -> stmt.setString(1,q+"%",)@ -> stmt.setMaxRows(20,)@ -> rs=stmt.executeQuery()@ -> stmt.close()@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/lusabo/sharecar/blob/bb21b66a43cd15967ee23608dfc398020d938dab/src/main/java/persistence/RouteDAO.java][find][1] = -> TRY {  -> pstmt=connection.prepareStatement(sql.toString(),)@ -> pstmt.setString(1,user.getName(),)@ -> rs=pstmt.executeQuery()@ -> pstmt.close()@ } CATCH(Exception) {}
results[https://github.com/der/ukl-registry-poc/blob/99938cdad40e77423c96f0f3f4a122382434464f/src/main/java/com/epimorphics/registry/security/DBUserStore.java][doRemoveCredentials][1] = -> TRY { -> s=conn.prepareStatement("UPDATE USERS SET PASSWORD=? WHERE ID=?",)@ -> s.setString(2,id,)@ -> s.setNull(1,Types.VARCHAR,)@ -> s.executeUpdate()@ } CATCH(Exception) { -> log.error("Failed to access security database",e,)@ -> throw new EpiException(e,)@ }
results[https://github.com/nigel0913/se/blob/6747f3d874707386a6b76d1a95df8074a35422db/src/business/connectdb/db/RCargo.java][delCargo][1] = -> TRY { -> ps=conn.prepareStatement(sql,)@ -> ps.setString(1,cargo.getCname(),)@ -> row=ps.executeUpdate()@ -> ps.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/auxgroup-sanxing/Sesame/blob/061175727614cfcbd9cd7ce5b0536d981b54aa64/sesame-transport/src/main/java/com/sanxing/sesame/transport/impl/FtpAcceptor.java][insertBatch][1] = -> TRY {  -> sm=conn.prepareStatement(sql,)@ -> sm.setString(1,fileName,)@ -> sm.setInt(2,1,)@ -> sm.setInt(3,3,)@ -> sm.execute()@ -> sm.close()@ } CATCH(Exception) {}
results[https://github.com/sortdc/SortDC/blob/d7ab9e5bcbf9ee3e017656509c2f94f1baac0d2d/src/org/sortdc/sortdc/database/DatabaseMysql.java][findTokenByParam][1] = -> TRY {  -> statement=this.connection.prepareStatement("SELECT id, name FROM tokens WHERE "+param+" = ? LIMIT 1",)@ -> statement.setString(1,value,)@ -> data=statement.executeQuery()@ } ELSE { -> throw new ObjectNotFoundException(ObjectNotFoundException.Type.TOKEN,)@!(data.next()) } CATCH(Exception) {}
