results[https://github.com/NowBaseline/nebula/blob/24d8c1c854da502804ddc7cc7932bf4289724473/nebula-engine/src/main/java/nebula/data/db/serializer/BasicTypeAdapter.java][writeTo][6] = -> TRY {  -> res.setString(index,(String) v,)@ } CATCH(Exception) {}
results[https://github.com/adrianfish/clog/blob/2b8460ecb6a359b5e297cf6af37601f31f4ad700/impl/src/java/org/sakaiproject/clog/impl/sql/SQLGenerator.java][getDeleteAutosavedCopyStatement][5] = -> TRY {  -> st=connection.prepareStatement("DELETE FROM "+TABLE_AUTOSAVED_POST+" WHERE "+POST_ID+" = ?",)@ -> st.setString(1,postId,)@ } CATCH(Exception) {}
results[https://github.com/patrickvane/school_7/blob/19848ccb679e0709189ad726635c527739e9ab15/01a. My Common Objects/My_Database_Connection_Pool/MyConnection.java][doesTableExist][7] = -> TRY {  -> statementDoesTableExist.setString(1,table,)@ -> result=openResultSet(statementDoesTableExist,)@ } CATCH(Exception) {}
results[https://github.com/nBdde/l2jserver/blob/57967c7939f82a6eccd3fc6bcef5ada3d4dea214/L2J_Server/java/com/l2jserver/loginserver/mail/BaseMail.java][getUserMail][3] = -> TRY { -> statement.setString(1,username,)@ } CATCH(Exception) { -> _log.warning("Cannot select user mail: Exception",)@ }
results[https://github.com/kimchy/compass/blob/fc151a168682e373b81f06535011855a8927fd01/src/main/src/org/apache/lucene/store/jdbc/index/FetchOnOpenJdbcIndexInput.java][fillPrepareStatement][1] = -> TRY {  -> ps.setFetchSize(1,)@ -> ps.setString(1,name,)@ } CATCH(Exception) {}
results[https://github.com/harvimt/Group9_CS300_Project/blob/ad0dd3fb3168030e0ca26dbef0d1c3e6a7e9d5d0/src/pdx/edu/cs300_group9/Provider.java][getProviders][1] = -> TRY {  -> search_stmt.setString(1,partial_provider_name,)@ -> rs=search_stmt.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/iBot/HAW_SS13_AI/blob/645024421e2bd723a7fd411aa734886db0b375b8/code/HES/lib/hibernate-release-4.0.1.Final/project/hibernate-core/src/test/java/org/hibernate/test/jdbc/proxies/BatchingTest.java][testNonBatchingUsage][7] = -> TRY {  -> insert=insertBatch.getBatchStatement(insertSql,false,)@ -> insert.setLong(1,1,)@ -> insert.setString(2,"name",)@ } CATCH(Exception) {}
results[https://github.com/harvimt/Group9_CS300_Project/blob/ec8a0ea4ceef902090db883246e08a77a1a84bbc/src/entity/Provider.java][getProviders][2] = -> TRY {  -> partial_provider_name=partial_provider_name.replaceAll("[?_!]","!$0",)@ -> search_stmt.setString(1,partial_provider_name,)@ -> rs=search_stmt.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/dustin/snippets/blob/b74fc6d14b0c138d996f40dfc909d90f5b44798d/java/java/servlet/dsservlet/net/spy/dsservlet/DSBean.java][listUnseen][12] = -> TRY {  -> pst=db.prepareStatement("select * from show_distribution\n"+"  where submitted_to=? and completed is null order by submitted",)@ -> pst.setString(1,username,)@ -> rs=pst.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/cubing/tnoodle/blob/0f98ba7d463830760a6e76edd683d729035d9350/server/Test.java][main][3] = -> TRY {  -> ps=conn.prepareStatement("INSERT INTO Test (name) VALUES(?)",)@ -> ps.setString(1,"Jeremy Fleischman",)@ -> ps.executeUpdate()@ } CATCH(Exception) {}
results[https://github.com/nBdde/l2jserver/blob/57967c7939f82a6eccd3fc6bcef5ada3d4dea214/L2J_Server/java/com/l2jserver/gameserver/network/serverpackets/CharSelectionInfo.java][loadCharacterSelectInfo][3] = -> TRY { -> statement.setString(1,loginName,)@ } CATCH(Exception) { -> _log.log(Level.WARNING,"Could not restore char info: "+e.getMessage(),e,)@ }
results[https://github.com/gec/BinaryNotes/blob/e5c93ae8bdbd62884506e9dbd362b50be9e5054f/BinaryNotesMQ/java/src/org/bn/mq/impl/SQLQueueStorage.java][persistenceUnsubscribe][1] = -> TRY {  -> this.persistenceUnsubscribeCmd.setString(1,consumer.getId(),)@ -> this.persistenceUnsubscribeCmd.execute()@ } CATCH(Exception) {}
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/f74936abf5dbe21f267aceeb2eba83bee0122374/me/MnC/MnC_SERVER_MOD/UserManager.java][getUserId][4] = -> TRY { -> stat.setString(1,name.toLowerCase(),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/Minestar/ContaoTwo/blob/6dc5bb8e07c58041fd90be85ea842e0c6ef26d0f/src/main/java/de/minestar/contao2/manager/DatabaseManager.java][getContaoID][3] = -> TRY { -> selectContaoId.setString(1,"%"+username+"%",)@ -> result=selectContaoId.executeQuery()@ } CATCH(Exception) { -> ConsoleUtils.printException(e,Core.NAME,"Can't get ContaoID from tl_member! Username="+username,)@ }
results[https://github.com/Minestar/ContaoTwo/blob/6dc5bb8e07c58041fd90be85ea842e0c6ef26d0f/src/main/java/de/minestar/contao2/manager/DatabaseManager.java][setFreeWeekUsed][5] = -> TRY { -> setFreeWeekUsed.setString(1,playerName,)@ -> setFreeWeekUsed.executeUpdate()@ } CATCH(Exception) { -> ConsoleUtils.printException(e,Core.NAME,"Can't update hasUsedFreeWeek! PlayerName="+playerName,)@ }
results[https://github.com/KLIM8D/ucn-2semproject-dm79-group2/blob/0fde661e8923e76717db65d4942d70ff61fa12a6/src/db/DBClient.java][getClientByName][5] = -> TRY {  -> query=con.prepareStatement("SELECT * FROM Clients WHERE name = ?",)@ -> query.setString(1,name,)@ -> clientResult=_da.callCommandGetRow(query,con,)@ } CATCH(Exception) {}
results[https://github.com/Ziktofel/L2J-Server-Ziktofel/blob/7d28e22b42b29e9fefbeea724976b6d8d9c1938b/java/com/l2jserver/gameserver/security/SecondaryPasswordAuth.java][loadPassword][3] = -> TRY { -> statement.setString(1,_activeClient.getAccountName(),)@ } CATCH(Exception) { -> _log.log(Level.SEVERE,"Error while reading password.",e,)@ }
results[https://github.com/Minestar/MineStarWarp/blob/dbafcfb70ecce5a1c15a343251816c3f481bf248/src/com/minestar/MineStarWarp/dataManager/DatabaseManager.java][deleteWarp][2] = -> TRY { -> deleteWarp.setString(1,name,)@ -> deleteWarp.executeUpdate()@ } CATCH(Exception) { -> Main.log.printError("Error removing warp from database!",e,)@ }
results[https://github.com/apache/derby/blob/3c7d0d9d57f080f8f1df0b3b251bbe98f5d85ad1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java][countTableDependencies][1] = -> TRY {  -> ps=chattyPrepare(conn,"select count(*) from sys.sysdepends d, sys.systables t where d.dependentid = t.tableid and t.tablename = ?",)@ -> ps.setString(1,tableName,)@ -> return getScalarInteger(ps,)@ } CATCH(Exception) {}
results[https://github.com/LucidDB/luciddb/blob/d322a8b657b243a85e965487dcf95bbcbd36550c/farrago/src/net/sf/farrago/test/FarragoTestUDR.java][generateUnicodeStringUdx][1] = -> TRY {  -> resultInserter.setString(1,generateUnicodeString(),)@ -> resultInserter.executeUpdate()@ } CATCH(Exception) {}
results[https://github.com/forcedotcom/phoenix/blob/95ca8be3d01eef84f3e2105b51b8593b3dcd5bef/test/unit/java/src/phoenix/compile/QueryMetaDataTest.java][testTwoDateSubstractExpressionMetaData][9] = -> TRY {  -> statement=conn.prepareStatement(query,)@ -> statement.setString(1,DS4,)@ -> pmd=statement.getParameterMetaData()@ } CATCH(Exception) {}
results[https://github.com/forcedotcom/phoenix/blob/21ed44a07c9626e34730bfaf3c4f69e2bde9a95f/src/test/java/com/salesforce/phoenix/end2end/ReverseFunctionTest.java][initTable][2] = -> TRY {  -> stmt=conn.prepareStatement(dml,)@ -> stmt.setString(1,s,)@ -> stmt.execute()@ } CATCH(Exception) {}
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/22325bf0c7f76a99bb8c5335124134ec2a506026/me/MnC/MnC_SERVER_MOD/PlacesManager.java][portalExists][3] = -> TRY { -> stat.setString(1,portalName,)@ -> result=stat.executeQuery()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/Containing/Containing-Core/blob/b720e31bbaceef3fb0dda04e21b45b69351a08df/src/Vehicles/GenerateDepartureVehicles.java][getWidthHeight][1] = -> TRY {  -> stm=Database.createPreparedStatement(query,)@ -> stm.setString(1,kindSchip,)@ -> getBoats=Database.executeQuery(stm,)@ } CATCH(Exception) {}
results[https://github.com/blindsidenetworks/bigbluebutton-sakai/blob/aceba896b0b638bb638eb15cb6825847587e833f/bbb-tool/impl/src/java/org/sakaiproject/bbb/impl/sql/DefaultSqlGenerator.java][getMarkMeetingAsDeletedStatements][1] = -> TRY {  -> meetingST=connection.prepareStatement("UPDATE BBB_MEETING SET DELETED = 1 WHERE MEETING_ID = ?",)@ -> meetingST.setString(1,meetingId,)@ -> statements.add(meetingST,)@ } CATCH(Exception) {}
results[https://github.com/apache/aries/blob/628add49463cd394c77ffa1b7c9e4b04d4f8f333/daytrader-sample/modules/daytrader-persist-jdbc/src/main/java/org/apache/geronimo/samples/daytrader/persist/jdbc/TradeJDBCDirect.java][getAccountProfileData][32] = -> TRY {  -> stmt=getStatement(conn,getAccountProfileSQL,)@ -> stmt.setString(1,userID,)@ -> rs=stmt.executeQuery()@ -> stmt.close()@ } CATCH(Exception) {}
results[https://github.com/apache/derby/blob/431cbeb5320ced59a4b24b4bfbaffd7b56d396d9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java][routineExists][9] = -> TRY {  -> ps=chattyPrepare(conn,"select count (*) from sys.sysaliases where alias = ?",)@ -> ps.setString(1,functionName,)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/exoplatform/core/blob/d7290c9b063c537b854cd0491cae2542ddaf19d0/component/exo.core.component.database/src/main/java/org/exoplatform/services/database/table/IDGenerator.java][mapUpdate][3] = -> TRY {  -> pstm.setString(1,bean.getName(),)@ -> pstm.setLong(2,bean.getCurrentBlockId(),)@ } CATCH(Exception) {}
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/22325bf0c7f76a99bb8c5335124134ec2a506026/me/MnC/MnC_SERVER_MOD/PlacesManager.java][removeTeleport][3] = -> TRY { -> stat.setString(1,portName.toLowerCase(),)@ -> success=stat.executeUpdate()>0@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/cbredlow/projectAwesome/blob/be676e690a51a853ec92dcfd90dc5b8cea95addd/ProjectAwesome/src/projectawesome/LoginHandler.java][handleLogin][5] = -> TRY { -> ps=conn.prepareStatement(pass,)@ -> ps.setString(1,userName,)@ -> rs=ps.executeQuery()@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/24ba1ff867c71e227645dcd9484c43117532a1d2/me/Guga/Guga_SERVER_MOD/Extensions/Residences/ResidenceHandler.java][getResidenceOwner][28] = -> TRY { -> stat.setString(1,string.toLowerCase(),)@ -> result=stat.executeQuery()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/svn2github/H2-Mirror/blob/215771a28861c5e8a85582dd94b1c1b04e1bd83d/h2/src/test/org/h2/samples/CachedPreparedStatements.java][run][7] = -> TRY {  -> prep=prepare("insert into test values(?, ?)",)@ -> prep.setInt(1,1,)@ -> prep.setString(2,"Hello",)@ -> prep.execute()@ } CATCH(Exception) {}
results[https://github.com/Hidendra/LWC/blob/22716a7ef79b63073a7bacb772cc760bf6228bea/src/main/com/griefcraft/sql/MemDB.java][unregisterPlayer][4] = -> TRY { -> statement=prepare("DELETE FROM `sessions` WHERE `player` = ?",)@ -> statement.setString(1,player,)@ -> statement.executeUpdate()@ } CATCH(Exception) { -> printException(e,)@ }
results[https://github.com/Emigrate91/ChiDaBa/blob/9838c896f2818d0b95a16e57dc1dce57022734ec/src/DB/DB.java][getEreignissHoeheList][4] = -> TRY {  -> pstmt=con.prepareStatement("SELECT * FROM tbl_hoehenmessungen WHERE tbl_ereignisse_fk like (?);",)@ -> pstmt.setString(1,String.valueOf(EreignissID,),)@ -> rslt=pstmt.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/anycook/anycook-core/blob/ea242be756df597c012c944f2b9309587649fc93/src/de/anycook/db/mysql/DBGetGericht.java][getSchmeckt][3] = -> TRY { -> pStatement=connection.prepareStatement("SELECT name, COUNT(users_id) AS counter FROM gerichte LEFT JOIN schmeckt ON name = gerichte_name WHERE name = ? GROUP BY name",)@ -> pStatement.setString(1,gericht,)@ -> data=pStatement.executeQuery()@ } CATCH(Exception) { -> logger.error("execute MySQL-query failed at getSchmecktfromGericht",e,)@ }
results[https://github.com/Hidendra/LWC/blob/22716a7ef79b63073a7bacb772cc760bf6228bea/src/main/com/griefcraft/sql/MemDB.java][getActions][3] = -> TRY { -> statement=prepare("SELECT `action` FROM `actions` WHERE `player` = ?",)@ -> statement.setString(1,player,)@ -> set=statement.executeQuery()@ } CATCH(Exception) { -> printException(e,)@ }
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/22325bf0c7f76a99bb8c5335124134ec2a506026/me/MnC/MnC_SERVER_MOD/PlacesManager.java][isOwner][1] = -> TRY { -> stat.setInt(1,id,)@ -> stat.setString(2,portName,)@ -> res=stat.executeQuery()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/jsanda/cassandra-jdbc/blob/cf3094a01981e68388e93f79ea097451d9712116/src/test/java/org/apache/cassandra/cql/jdbc/PooledTest.java][preparedStatementClose][4] = -> TRY {  -> statement=connection.prepareStatement("SELECT someInt FROM pooled_test WHERE somekey = ?",)@ -> statement.setString(1,"world",)@ -> resultSet=statement.executeQuery()@ -> assert statement.isClosed()@ } CATCH(Exception) {}
results[https://github.com/Minestar/ContaoTwo/blob/6dc5bb8e07c58041fd90be85ea842e0c6ef26d0f/src/main/java/de/minestar/contao2/manager/DatabaseManager.java][isProbeMember][3] = -> TRY { -> isProbeMember.setString(1,playerName,)@ -> return !(isProbeMember.executeQuery().next())@ } CATCH(Exception) { -> ConsoleUtils.printException(e,Core.NAME,"Can't check whether player is probe member! PlayerName="+playerName,)@ }
results[https://github.com/feliperuppel/NewItens/blob/6a9d5800dc1da46800267a9261c8bd487acdd2a8/src/br/com/newitens/dao/NiInterestsAreaDAO.java][search][17] = -> TRY {  -> name=(name==null)?"":name@ -> ps=conn.prepareStatement(sql,)@ -> ps.setString(1,"%"+name+"%",)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/VirginiaFIRST/frc2013score/blob/95d747ef9666a24b752e86c59d1fc65d8659df05/src/FRC_Score_Sys/SqlDB.java][FetchOption][1] = -> TRY { -> s=c.prepareStatement(q,)@ -> s.setString(1,Name,)@ -> rs=s.executeQuery()@ } CATCH(Exception) { -> Except.ExceptionHandler("FetchOption",e,false,false,)@ }
results[https://github.com/Minestar/ContaoTwo/blob/6dc5bb8e07c58041fd90be85ea842e0c6ef26d0f/src/main/java/de/minestar/contao2/manager/DatabaseManager.java][addProbeTime][1] = -> TRY { -> addProbeDate.setInt(1,days,)@ -> addProbeDate.setString(2,playerName,)@ -> return addProbeDate.executeUpdate()==1@ } CATCH(Exception) { -> ConsoleUtils.printException(e,Core.NAME,"Can't update probeEndDate in mc_pay! PlayerName="+playerName+",Days="+days,)@ }
results[https://github.com/teiid/teiid/blob/56562e29a50414799fa946b1fd535bdbf705544a/test-integration/common/src/test/java/org/teiid/transport/TestODBCSocketTransport.java][testMultibatchSelectPrepared][2] = -> TRY {  -> s=conn.prepareStatement("select * from tables t1, tables t2 where t1.name > ?",)@ -> s.setFetchSize(100,)@ -> s.setString(1,"a",)@ -> rs=s.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/jsanda/cassandra-jdbc/blob/cf3094a01981e68388e93f79ea097451d9712116/src/test/java/org/apache/cassandra/cql/jdbc/JdbcRegressionTest.java][testIssue33][2] = -> TRY {  -> statement=con.prepareStatement("update t33 set c=? where k=123",)@ -> statement.setString(1,"mark",)@ -> statement.executeUpdate()@ -> result=statement.executeQuery("SELECT * FROM t33;",)@ } CATCH(Exception) {}
results[https://github.com/codefollower/Lealone/blob/e9b4163c924c0d057fef8538456bc7b9378ef044/lealone-test/src/test/java/com/codefollower/lealone/test/jdbc/ddl/CreateViewTest.java][run0][3] = -> TRY {  -> ps=conn.prepareStatement(sql,)@ -> ps.setInt(1,2,)@ -> ps.setString(2,"b2",)@ -> rs=ps.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/tryggvil/cloudstack-old/blob/a0ebc332419ba728f0f54b54141900293b9caaf3/core/src/com/cloud/network/dao/FirewallRulesDaoImpl.java][deleteIPForwardingByPublicIpAddress][1] = -> TRY { -> pstmt=txn.prepareAutoCloseStatement(DELETE_IP_FORWARDING_BY_IPADDRESS_SQL,)@ -> pstmt.setString(1,ipAddress,)@ -> pstmt.executeUpdate()@ } CATCH(Exception) { -> s_logger.warn(e,)@ }
results[https://github.com/L2J/L2J_Server_BETA/blob/d76f94edc44f24f55229950bacd3a6a19e8b413d/java/com/l2jserver/gameserver/model/quest/Quest.java][deleteAllGlobalQuestVars][3] = -> TRY { -> statement.setString(1,getName(),)@ -> statement.executeUpdate()@ } CATCH(Exception) { -> _log.log(Level.WARNING,"could not delete global quest variables:",e,)@ }
results[https://github.com/jkingdon/mayfly/blob/5a6a03852cf25ebdd4e72335a1596eed0b1d6ee4/test/net/sourceforge/mayfly/acceptance/StatementTest.java][testSetToNull][1] = -> TRY {  -> prepared=connection.prepareStatement("insert into foo (a) values (?)",)@ -> prepared.setString(1,null,)@ -> prepared.executeUpdate()@ -> prepared.close()@ } CATCH(Exception) {}
results[https://github.com/maiklos/squirrel-sql/blob/4c0ee92900632d9365e92123f919f18ce811004c/sql12/app/src/test/java/net/sourceforge/squirrel_sql/client/session/mainpanel/objecttree/expanders/AbstractSequenceParentExtractorTest.java][testBindParameters][2] = -> TRY {  -> mockPreparedStatement.setString(EasyMock.anyInt(),isA(String.class,),)@ -> classUnderTest.bindParameters(mockPreparedStatement,mockDatabaseObjectInfo,mockObjFilterMatcher,)@ } CATCH(Exception) {}
results[https://github.com/Minestar/ContaoTwo/blob/6dc5bb8e07c58041fd90be85ea842e0c6ef26d0f/src/main/java/de/minestar/contao2/manager/DatabaseManager.java][setExpDateInMCTable][1] = -> TRY { -> updateExpireDate.setString(1,date,)@ -> updateExpireDate.setInt(2,contaoID,)@ -> updateExpireDate.executeUpdate()@ } CATCH(Exception) { -> ConsoleUtils.printException(e,Core.NAME,"Can't update expire date! Date="+date+",ContaoID="+contaoID,)@ }
results[https://github.com/tryggvil/cloudstack-old/blob/50459fd30ff0212c9a554f12ed7645586270cbe7/core/src/com/cloud/user/dao/AccountDaoImpl.java][findUserAccountByApiKey][1] = -> TRY { -> pstmt=txn.prepareAutoCloseStatement(sql,)@ -> pstmt.setString(1,apiKey,)@ -> rs=pstmt.executeQuery()@ } CATCH(Exception) { -> s_logger.warn("Exception finding user/acct by api key: "+apiKey,e,)@ }
results[https://github.com/sainthxd/cassandra-jdbc/blob/2fc09b56384ec5a016221336611621719d0584e5/src/test/java/org/apache/cassandra/cql/jdbc/JdbcRegressionTest.java][testIssue65][1] = -> TRY {  -> pstatement=con.prepareStatement(update,)@ -> pstatement.setObject(1,mySet,Types.OTHER,)@ -> pstatement.setString(2,"key1",)@ -> pstatement.executeUpdate()@ } CATCH(Exception) {}
results[https://github.com/sainthxd/cassandra-jdbc/blob/2fc09b56384ec5a016221336611621719d0584e5/src/test/java/org/apache/cassandra/cql/jdbc/JdbcRegressionTest.java][testIssue59][1] = -> TRY {  -> statement=con.prepareStatement("update t59 set c=? where k=123",ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY,)@ -> statement.setString(1,"hello",)@ -> statement.executeUpdate()@ -> result=statement.executeQuery("SELECT * FROM t59;",)@ } CATCH(Exception) {}
results[https://github.com/vnc-biz/vnc-zcs-crm/blob/3a49f11ce2f63c9eaec6878edc3618d2d0e53701/src/lib_vnc_crm/src/biz/vnc/helpers/OpportunityHelper.java][listHistory][2] = -> TRY { -> preparedStatement=DBUtility.connection.prepareStatement(query,)@ -> preparedStatement.setString(1,leadId,)@ } CATCH(Exception) { -> ZLog.err("VNC CRM for Zimbra","Error in addHistory Lead Helper Class",e,)@ } -> rs=dbu.select(preparedStatement,)@
results[https://github.com/Minestar/MineStarWarp/blob/a8a5633d4f4b9e6794c0c8f9cb6d3d1ddd671377/src/com/minestar/MineStarWarp/data/DatabaseManager.java][changeGuestList][2] = -> TRY { -> changeGuestList.setString(1,name,)@ -> changeGuestList.executeUpdate()@ } CATCH(Exception) { -> Main.writeToLog(e.getMessage(),)@ }
results[https://github.com/PerfModDash/esnet-perfsonar/blob/d0ce9c8021077321a29a765c963b63e126027f4b/maddash/maddash-server/src/main/java/net/es/maddash/utils/DimensionUtil.java][getParams][1] = -> TRY { -> stmt=conn.prepareStatement("SELECT keyName, value FROM dimensions WHERE configIdent=?",)@ -> stmt.setString(1,configIdent,)@ -> results=stmt.executeQuery()@ } CATCH(Exception) { -> log.warn("Unable to get hos parameters for "+configIdent,)@ }
results[https://github.com/patrickvane/my_java_library/blob/7224d21527421c8b80d88940dbe17a53b66eaab6/01a. My Common Objects/lib/patrick_vane/My_Database_Connection_Pool/MyConnection.java][doesTableExist][1] = -> TRY {  -> IF { -> return true@statementDoesTableExist==null } -> statementDoesTableExist.setString(1,table,)@!(statementDoesTableExist==null) -> return getCount(statementDoesTableExist,)>=1@!(statementDoesTableExist==null) } CATCH(Exception) {}
results[https://github.com/kraktos/DBPediaMapping/blob/9a094404af8d6f5cb318a4aca5b9d420b986b359/EntityLinker/src/de/dws/mapper/dbConnectivity/DBWrapper.java][fetchSurfaceForms][1] = -> TRY { -> pstmt.setString(1,arg,)@ -> rs=pstmt.executeQuery()@ } CATCH(Exception) { -> logger.error(" exception while fetching "+arg+" "+e.getMessage(),)@ }
results[https://github.com/aureliano/mater-dei/blob/6f2aa02b8f6ffd905d374aa483236669d90f2fd0/src/main/java/br/materdei/bdd/database/helper/PostgresHelper.java][tableExists][1] = -> TRY {  -> ps=conn.prepareStatement(query,)@ -> ps.setString(1,table,)@ -> return ps.executeQuery().next()@ } CATCH(Exception) {}
results[https://github.com/adrianfish/clog/blob/2b8460ecb6a359b5e297cf6af37601f31f4ad700/impl/src/java/org/sakaiproject/clog/impl/sql/SQLGenerator.java][getRestoreStatementsForPost][2] = -> TRY {  -> st=connection.prepareStatement("UPDATE "+TABLE_POST+" SET "+VISIBILITY+" = '"+Visibilities.PRIVATE+"' WHERE "+POST_ID+" = ?",)@ -> st.setString(1,post.getId(),)@ -> statements.add(st,)@ } CATCH(Exception) {}
results[https://github.com/Gruppe8DTU/Rejsekortet/blob/18701aa7cc524938a52e912bac2f8e176046010b/src/persistance/SQL_Connect.java][setRights][1] = -> TRY {  -> preparedStatement=connection.prepareStatement(executeQuery,)@ -> preparedStatement.setInt(1,right,)@ -> preparedStatement.setString(2,user,)@ -> preparedStatement.execute()@ } CATCH(Exception) {}
results[https://github.com/thomasattic/castor/blob/d0abe6c51053c807a783a51517c8d3dc1d739918/cpactf/src/test/java/ctf/jdo/tc8x/TestLazyEmployeeExpiration.java][updateAddrUsingJDBC][1] = -> TRY { -> _updateAddressStatement.setString(1,newStreet,)@ -> _updateAddressStatement.setInt(2,addressId,)@ -> rc=_updateAddressStatement.executeUpdate()@ } CATCH(Exception) { -> LOG.error("updateAddrUsingJDBC: exception updating address",e,)@ }
results[https://github.com/gh0stbust3rs/OnlineShop/blob/2a885ac9fff072f96c84561de084525d56e386cf/src/java/pkgOnlineShop/Database.java][deleteCategory][2] = -> TRY {  -> pstm=con.prepareStatement(sql,)@ -> pstm.setString(1,name,)@ -> pstm.execute()@ -> pstm.close()@ } CATCH(Exception) {}
results[https://github.com/apache/derby/blob/030bfacb0277eb2704a083c0db627181137fcda5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_9.java][testJarStorage][1] = -> TRY {  -> backupdir=SupportFilesSetup.getReadWriteFileName("d6505-backup",)@ -> backupStmt=prepareStatement("call syscs_util.syscs_backup_database(?)",)@ -> backupStmt.setString(1,backupdir,)@ -> backupStmt.execute()@ } CATCH(Exception) {}
results[https://github.com/apache/derby/blob/911d88c46edfdcd38c2f52d0f6a7ed514b1d704d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java][testXMLParse][1] = -> TRY {  -> pSt=prepareStatement("insert into paramInsert values XMLPARSE(document "+"cast (? as CLOB) preserve whitespace)",)@ -> pSt.setString(1,"<ay>caramba</ay>",)@ -> assertUpdateCount(pSt,1,)@ -> pSt.close()@ } CATCH(Exception) {}
results[https://github.com/gec/BinaryNotes/blob/e5c93ae8bdbd62884506e9dbd362b50be9e5054f/BinaryNotesMQ/java/src/org/bn/mq/impl/SQLQueueStorage.java][getMessagesToSend][1] = -> TRY { -> this.getMessagesCmd.setString(1,consumer.getId(),)@ -> set=this.getMessagesCmd.executeQuery()@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/apache/derby/blob/e33b8d871ece038784769f3e95d16bc1b259eb09/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java][getConglomerateID][1] = -> TRY {  -> ps=conn.prepareStatement("select c.conglomeratenumber\n"+"from sys.sysconglomerates c, sys.systables t\n"+"where t.tablename = ? and t.tableid = c.tableid",)@ -> ps.setString(1,tableName,)@ -> result=getScalarLong(ps,)@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/jkingdon/mayfly/blob/5a6a03852cf25ebdd4e72335a1596eed0b1d6ee4/test/net/sourceforge/mayfly/acceptance/StatementTest.java][testStringJdbcParameter][2] = -> TRY {  -> prepared=connection.prepareStatement("insert into foo (s) values (?)",)@ -> prepared.setString(1,"can't",)@ -> assertEquals(1,prepared.executeUpdate(),)@ -> prepared.close()@ } CATCH(Exception) {}
results[https://github.com/Hidendra/LWC/blob/2b6653b024968174a8d1149a35a0ed9f71ae39fd/src/com/griefcraft/sql/PhysDB.java][unregisterProtectionRights][2] = -> TRY { -> _delete_rights_ID_entity.setInt(1,chestID,)@ -> _delete_rights_ID_entity.setString(2,entity.toLowerCase(),)@ -> _delete_rights_ID_entity.executeUpdate()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/tranchis/Mapcelona/blob/110f9d0308fc5dd72b86b12bd72a22e116e44de0/JavaParser/src/virtuoso/jena/driver/VirtPrefixMapping.java][removeNsPrefix][1] = -> super.removeNsPrefix(prefix,)@ -> TRY { -> ps=conn.prepareStatement(query,)@ -> ps.setString(1,prefix,)@ -> ps.execute()@ } CATCH(Exception) { -> throw new JenaException(e,)@ }
results[https://github.com/der/ukl-registry-poc/blob/99938cdad40e77423c96f0f3f4a122382434464f/src/main/java/com/epimorphics/registry/security/DBUserStore.java][userlist][1] = -> TRY { -> s=conn.prepareStatement("SELECT ID, NAME FROM USERS WHERE "+query+" ORDER BY NAME",)@ -> s.setString(1,arg,)@ -> rs=s.executeQuery()@ } CATCH(Exception) { -> log.error("Failed to access security database",e,)@ -> throw new EpiException(e,)@ }
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/6e307fa9881bf923e3263b6797bba53c290bf3b9/me/Guga/Guga_SERVER_MOD/CurrencyManager.java][onPlayerJoin][3] = -> TRY { -> stat.setString(1,p.getName().toLowerCase(),)@ -> stat.executeUpdate()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/thomasattic/castor/blob/397561b2720d1bc8f4b2698e9df32d4574c23e49/cpactf/src/test/java/org/castor/cpa/test/test75/TestExpireManyToMany.java][updatePersonUsingJDBC][2] = -> TRY { -> _updatePersonStatement.setString(1,JDBC_UPDATED_VALUE,)@ -> _updatePersonStatement.setInt(2,personId,)@ -> rc=_updatePersonStatement.executeUpdate()@ } CATCH(Exception) { -> LOG.warn("updatePersonUsingJDBC: exception updating person "+personId+": "+e.getMessage(),e,)@ }
results[https://github.com/skavanagh/EC2Box/blob/8931dd0561238598e297a4d86dffc5360c96071d/src/main/java/com/ec2box/manage/db/AWSCredDB.java][getAWSCred][3] = -> TRY { -> stmt=con.prepareStatement("select * from aws_credentials where access_key like ?",)@ -> stmt.setString(1,accessKey,)@ -> rs=stmt.executeQuery()@ -> DBUtils.closeStmt(stmt,)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/Hidendra/LWC/blob/2b6653b024968174a8d1149a35a0ed9f71ae39fd/src/com/griefcraft/sql/MemDB.java][unregisterPlayer][6] = -> TRY { -> statement=connection.prepareStatement("DELETE FROM `sessions` WHERE `player` = ?",)@ -> statement.setString(1,player,)@ -> statement.executeUpdate()@ -> statement.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/apache/derby/blob/8f1a708d1a756aa39e3d5bddaa5712ecc196fe17/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java][testSmallClobFields][2] = -> TRY {  -> ps=prepareStatement("insert into testClob (smallClob) values(?)",)@ -> LOOP { -> ps.setString(1,val,)@ -> ps.executeUpdate()@ } } CATCH(Exception) {}
results[https://github.com/thomasattic/castor/blob/676b4a56a4aca025094bb8b99d7794f29d3e4ca4/cpactf/src/old/java/ctf/jdo/tc7x/TestExpireManyToMany.java][updateGroupUsingJDBC][3] = -> TRY { -> _updateGroupStatement.setString(1,JDBC_UPDATED_VALUE,)@ -> _updateGroupStatement.setInt(2,groupId,)@ -> rc=_updateGroupStatement.executeUpdate()@ } CATCH(Exception) { -> log("updateGroupUsingJDBC: exception updating group "+groupId+": "+e.getMessage(),e,)@ }
results[https://github.com/VirginiaFIRST/frc2013score/blob/95d747ef9666a24b752e86c59d1fc65d8659df05/src/FRC_Score_Sys/SqlDB.java][FetchMatchList][1] = -> System.out.println("Match List Fetch Requested for type "+type,)@ -> TRY { -> s=c.prepareStatement("SELECT id,Saved,RScore,BScore FROM MATCHES WHERE id LIKE ?",)@ -> s.setString(1,type+"%",)@ -> rs=s.executeQuery()@ } CATCH(Exception) { -> Except.ExceptionHandler("FetchMatchList",e,false,true,"Match list can not be loaded.",)@ }
results[https://github.com/ekirkilevics/Spring/blob/2c7d3673a81e9abe839e05e0981612b052d45551/org.springframework.testsuite/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java][testPreparedStatementSetterFails][4] = -> TRY {  -> mockPreparedStatement=(PreparedStatement) ctrlPreparedStatement.getMock()@ -> mockPreparedStatement.setString(1,name,)@ -> mockPreparedStatement.executeUpdate()@ -> mockPreparedStatement.close()@ -> ctrlConnection.setReturnValue(mockPreparedStatement,)@ } CATCH(Exception) {}
results[https://github.com/Hidendra/LWC/blob/2b6653b024968174a8d1149a35a0ed9f71ae39fd/src/com/griefcraft/sql/MemDB.java][getLockPassword][2] = -> TRY { -> statement=connection.prepareStatement("SELECT `password` FROM `locks` WHERE `player` = ?",)@ -> statement.setString(1,player,)@ -> set=statement.executeQuery()@ -> statement.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/sayornis/USGS-VHP/blob/d39d3ee1b07a6d701666d328135da43da480c1c1/VDX/branches/Valve3.3.0/gov/usgs/vdx/data/SQLDataSource.java][defaultGetChannel][2] = -> TRY { -> ps=database.getPreparedStatement("SELECT cid FROM channels WHERE code = ? ",)@ -> ps.setString(1,code,)@ -> rs=ps.executeQuery()@ } CATCH(Exception) { -> logger.log(Level.SEVERE,"SQLDataSource.defaultGetChannel(code) failed. ("+database.getDatabasePrefix()+"_"+dbName+")",e,)@ }
results[https://github.com/biblex2013/biblex/blob/6bd71135676504f1cf07835b11556fafc5405af3/biblex/src/main/java/fi/helsinki/biblex/storage/SQLiteStorage.java][get][1] = -> TRY { -> st=conn.prepareStatement("SELECT id,name,style FROM Entries WHERE name = ?;",)@ -> st.setString(1,name,)@ -> rs=st.executeQuery()@ } CATCH(Exception) { -> System.err.println("Error in SQLiteStorage.get(string): "+e.toString(),)@ }
results[https://github.com/shutterstock/bristlecone/blob/90c0f2e5bf87722301e0a4c0b5f9c8d74a3ec77f/src/com/continuent/bristlecone/benchmark/scenarios/WriteSimpleScenario.java][iterate][1] = -> TRY {  -> value=localKey+"_"+Thread.currentThread().getName()+"_"+iterationCount@ -> helper.generateParameters(tableSet,pstmt,)@ -> pstmt.setString(2,value,)@ -> pstmt.executeUpdate()@ } CATCH(Exception) {}
results[https://github.com/L2J/L2J_Server_BETA/blob/1d44c33e93b618a5766d05c98c07ae1d4709c31a/java/com/l2jserver/loginserver/LoginController.java][setAccountAccessLevel][2] = -> TRY { -> ps.setInt(1,banLevel,)@ -> ps.setString(2,account,)@ -> ps.executeUpdate()@ } CATCH(Exception) { -> _log.log(Level.WARNING,"Could not set accessLevel: "+e.getMessage(),e,)@ }
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/b4a8d9e9774c5fd37fd40ee1a08f34a512f42520/me/Guga/Guga_SERVER_MOD/Currency/CurrencyHandler.java][addCredits][1] = -> TRY { -> stat.setLong(1,amount,)@ -> stat.setString(2,playerName.toLowerCase(),)@ -> return stat.executeUpdate()==1@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/fe42f125c1c95b669ce43da27efbdb6d1dde6065/me/Guga/Guga_SERVER_MOD/Estates/EstateHandler.java][hasGrantedAccess][1] = -> TRY { -> stat.setInt(1,residence_id,)@ -> stat.setString(2,username.toLowerCase(),)@ -> result=stat.executeQuery()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/4a52104aea251734c59fa6743c94594a9eda810b/me/MnC/MnC_SERVER_MOD/BanHandler.java][ipBanExpiration][1] = -> TRY { -> stat.setString(1,ip,)@ -> stat.setLong(2,System.currentTimeMillis()/1000,)@ -> result=stat.executeQuery()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/tacitknowledge/autopatch/blob/2a9496dc2674a8f47a689fedda50114b288e0239/src/integration-test/java/com/tacitknowledge/util/migration/MigrationUnlockTest.java][lockPatchTable][1] = -> TRY {  -> conn=DriverManager.getConnection("jdbc:hsqldb:mem:"+database,"sa","",)@ -> stmt=conn.prepareStatement("UPDATE patches SET patch_in_progress = 'T' WHERE patch_level in ( SELECT MAX(patch_level) FROM patches WHERE system_name = ?)",)@ -> stmt.setString(1,database,)@ -> rowCount=stmt.executeUpdate()@ -> SqlUtil.close(conn,stmt,null,)@ } CATCH(Exception) {}
results[https://github.com/Hidendra/LWC/blob/22716a7ef79b63073a7bacb772cc760bf6228bea/src/main/com/griefcraft/sql/MemDB.java][registerPlayer][1] = -> TRY { -> statement=prepare("INSERT INTO `sessions` (player, chest) VALUES(?, ?)",)@ -> statement.setString(1,player,)@ -> statement.setInt(2,chestID,)@ -> statement.executeUpdate()@ } CATCH(Exception) { -> printException(e,)@ }
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/7f082fe85197e3f0d4c9cc8a12085093358099c6/me/MnC/MnC_SERVER_MOD/VipManager.java][removeVip][1] = -> TRY { -> stat.setString(1,name.toLowerCase(),)@ -> stat.executeUpdate()@ -> return stat.getUpdateCount()==1@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/hbcit2010software/hbcitsports/blob/6a020dae2b089971adbbc5f392c4a90cebc47602/src/cn/edu/hbcit/smms/dao/createprogramdao/SelectItems.java][selectItemsById][1] = -> TRY { -> ps=conn.prepareStatement("SELECT t_group.groupname,t_finalitem.finalitemname,t_finalitem.id "+"FROM t_finalitem "+"JOIN t_group2item ON t_finalitem.gp2itid = t_group2item.id "+"JOIN t_group2sports ON t_group2item.gp2spid = t_group2sports.id "+"JOIN t_group ON t_group2sports.groupid = t_group.id "+"JOIN t_item ON t_group2item.itemid = t_item.id "+"WHERE t_group2sports.sportsid = ? AND t_item.itemtype = ? and t_finalitem.finalitemtype != 2",)@ -> ps.setInt(1,sportsid,)@ -> ps.setString(2,itemtype,)@ -> rs=ps.executeQuery()@ } CATCH(Exception) { -> ee.printStackTrace()@ }
results[https://github.com/mseiwert/RoM/blob/9e578d286479766ec2e2dbc8bccc0ab3267f0328/playground/src/DataLayer/DataLayer.java][isAdmin][2] = -> TRY { -> pstmt=this.getConnection().prepareStatement(SqlStatements.SQL_IS_ADMIN,)@ -> pstmt.setString(1,u_name,)@ -> this.rs=pstmt.executeQuery()@ } CATCH(Exception) { -> System.out.println(s,)@ }
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/b4cdceeb149e577126c7ff342f6d02329984bfe3/me/MnC/MnC_SERVER_MOD/locker/BlockLocker.java][getBlockLockId][1] = -> TRY { -> stat.setString(1,world,)@ -> stat.setInt(2,x,)@ -> stat.setInt(3,y,)@ -> stat.setInt(4,z,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/der/ukl-registry-poc/blob/99938cdad40e77423c96f0f3f4a122382434464f/src/main/java/com/epimorphics/registry/security/DBUserStore.java][doUnregister][1] = -> TRY { -> s=conn.prepareStatement("DELETE FROM USERS WHERE ID=?",)@ -> s.setString(1,id,)@ -> s.executeUpdate()@ } CATCH(Exception) { -> log.error("Failed to access security database",e,)@ -> throw new EpiException(e,)@ }
results[https://github.com/NCIP/catissue-advanced-query/blob/485ab0c4c95cd328807aef14e3e4cab0bb96fbef/software/WEB-INF/test/edu/wustl/common/query/impl/XQueryGeneratorTest.java][executeParametrizedXQuery][5] = -> TRY {  -> ps=jdbcDao.getPreparedStatement(xquery,)@ -> LOOP { -> ps.setString(i+1,values[i],)@i<values.length } -> return ps.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/Azrielg13/innovative/blob/584526680c3e8b205d906bd336b5f9ca996529c4/qee/src/com/digitald4/pm/User.java][refresh][1] = -> TRY {  -> ps=con.prepareStatement(SELECT+" FROM "+TABLE+" "+WHERE,)@ -> ps.setString(1,KEY,)@ -> ps.setInt(2,id,)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/Zabell92/ProjectBelman/blob/a125c5037fee870632f3c315b485f676187e5ec1/src/DAL/EmployeeDBM.java][getByName][1] = -> TRY {  -> ps=con.prepareStatement(sql,)@ -> ps.setString(1,Name,)@ -> rs=ps.executeQuery()@ -> IF { -> return ID@rs.next() } } CATCH(Exception) {}
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/988235ad2b5070168372b6be2af2bd3abfdfa79f/me/MnC/MnC_SERVER_MOD/Currency/CurrencyHandler.java][addCredits][1] = -> TRY { -> stat.setFloat(1,amount,)@ -> stat.setString(2,playerName.toLowerCase(),)@ -> return stat.executeUpdate()==1@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/codefollower/H2-Research/blob/55534e45e48b9b7161a29afc814317a8b4961416/my-test/my/test/jdbc/JdbcConnectionTest.java][main][2] = -> TRY {  -> ps=conn.prepareStatement("insert into t values(?,?)",)@ -> ps.setInt(2,20,)@ -> ps.setString(1,"aaa",)@ -> ps.executeUpdate()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/Emigrate91/ChiDaBa/blob/9838c896f2818d0b95a16e57dc1dce57022734ec/src/DB/DB.java][getDuengerID][1] = -> TRY {  -> pstmt=con.prepareStatement(sql,)@ -> pstmt.setString(1,d,)@ -> rslt=pstmt.executeQuery()@ } ELSE { -> return null@!(rslt.next()) } CATCH(Exception) {}
