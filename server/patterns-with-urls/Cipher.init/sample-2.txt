results[https://github.com/bladesilent/Harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherTest.java][test_initILjava_security_Key][6] = -> TRY {  -> cipher=Cipher.getInstance(algorithm+"/ECB/PKCS5Padding",)@ -> cipher.init(Cipher.ENCRYPT_MODE,cipherKey,)@ } CATCH(Exception) {}
results[https://github.com/lcsoftware/free-back-server/blob/e62ef4737fcecda9204d9cc4d87f370938b45fd9/freeback/src/net/freeback/utils/FbSecurity.java][encrypt][11] = -> TRY {  -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return cipher.doFinal(input,)@ } CATCH(Exception) {}
results[https://github.com/leandrocruz/Xingu/blob/865a2d0a627a36b7921e8e427dba173ca7fdfddb/crypto/src/main/java/br/com/ibnetwork/xingu/crypto/impl/rsa/RSAUtils.java][decrypt][1] = -> TRY {  -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> cis=new CipherInputStream(is,cipher,)@ } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/09c99a676d4e74af47b1d520efdbdd16b7ee5337/test/javax/crypto/Cipher/GCMAPI.java][main][3] = -> TRY {  -> c=Cipher.getInstance("AES",)@ -> c.init(Cipher.ENCRYPT_MODE,new SecretKeySpec( new byte[],"AES",),)@ } CATCH(Exception) {}
results[https://github.com/htwg/UCE/blob/d54d8353680a696b244920b22292476176e791a5/connectivitymanager/src/main/java/de/fhkn/in/uce/connectivitymanager/connection/UCESecureSocket.java][initializeEncryptCipher][2] = -> TRY {  -> this.encrypt=Cipher.getInstance(AES_ALGORITHM_NAME,)@ -> this.encrypt.init(Cipher.ENCRYPT_MODE,this.keyExchange.getSharedKey(AES_ALGORITHM_NAME,),)@ } CATCH(Exception) {}
results[https://github.com/jazzlly/Notes/blob/828857d5a518ccab9178b421442cec1dcb6ad207/java/security/java.sec.src/src/org/zlex/chapter07_2/DESedeCoder.java][decrypt][16] = -> TRY {  -> k=toKey(key,)@ -> cipher=Cipher.getInstance(CIPHER_ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,k,)@ -> return cipher.doFinal(data,)@ } CATCH(Exception) {}
results[https://github.com/InsomniaAOSP/platform_libcore/blob/4d9d276d01aee9255fec5eaae93827d3af306d34/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/SealedObjectTest.java][testGetAlgorithm][53] = -> TRY {  -> key=kg.generateKey()@ -> cipher=Cipher.getInstance(algorithm,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> so=new SealedObject(secret,cipher,)@ } CATCH(Exception) {}
results[https://github.com/leandrocruz/Xingu/blob/865a2d0a627a36b7921e8e427dba173ca7fdfddb/crypto/src/test/java/br/com/ibnetwork/xingu/crypto/KeySizeTest.java][enc][3] = -> TRY {  -> enc=Cipher.getInstance(algorithm,)@ -> enc.init(Cipher.ENCRYPT_MODE,privateKey,)@ -> return enc.doFinal(message.getBytes(),)@ } CATCH(Exception) {}
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/Zzz/src/security/rsa/RsaMessage.java][decrypt][1] = -> TRY {  -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> return cipher.doFinal(toBytes(message,),)@ } CATCH(Exception) {}
results[https://github.com/mattgarkusha/HomeSync/blob/3a5b7602e8deefb011c108f5d045bd3f67f702aa/Eclipse Workspace/assign 3 1.6/src/FileEncryptor.java][loadKey][10] = -> TRY {  -> cDec=Cipher.getInstance("PBEWithSHAAnd3KeyTripleDES",)@ -> key=keyFact.generateSecret(PBESpec,)@ -> cDec.init(Cipher.DECRYPT_MODE,key,)@ -> decryptedKeyBytes=cDec.doFinal(encryptedKeyBytes,)@ } CATCH(Exception) {}
results[https://github.com/andershong/eCab/blob/670c08fbb8bd4ba792b88b5b2231a74538816746/src/com/jinghong/core/utils/EncryptUtil.java][getEncCode][6] = -> TRY { -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> byteFina=cipher.doFinal(byteS,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/madakralc/DAT076/blob/3e4bf9ce8861c8f0d3c4a528c459fc30127f48cd/Task_Manager_Backend/src/main/java/com/awesomedat076/task_manager_backend/EncryptPassword.java][decryptPassword][9] = -> TRY {  -> key=generateKey()@ -> c=Cipher.getInstance(ALGORITHM,)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> decPasswordValue=c.doFinal(decordedEncryptedPassword,)@ } CATCH(Exception) {}
results[https://github.com/eclipse/cdo.old/blob/dd8af9882a10cff828174d87c51f215039b96b68/org.eclipse.emf.cdo.weaver.ajdt/ecore/org/eclipse/emf/ecore/resource/impl/DESCipherImpl.java][encrypt][4] = -> TRY {  -> cipher=Cipher.getInstance(ENCRYPTION_SCHEME,)@ -> cipher.init(Cipher.ENCRYPT_MODE,getKey(),)@ -> return new CipherOutputStream(outputStream,cipher,)@ } CATCH(Exception) {}
results[https://github.com/ianso/scriptus/blob/738124a83bb556197c889b3612df982d161cd40b/src/main/java/net/ex337/scriptus/CryptUtils.java][encrypt][2] = -> TRY { -> cipher=Cipher.getInstance(cipherScheme,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> result=cipher.doFinal(plaintext,)@ } CATCH(Exception) { -> throw new ScriptusRuntimeException("Problem with cipher",e,)@ }
results[https://github.com/ixiaopan/EasyAndroid/blob/2ded76bb35e82dd2e26f18035a3c7f2c024025d8/src/me/xiaopan/java/easy/util/DESCoder.java][decryptByte][6] = -> TRY { -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> return cipher.doFinal(decryptByteArray,)@ } CATCH(Exception) { -> throw new RuntimeException("Error initializing SqlMap class. Cause: "+e,)@ }
results[https://github.com/pavel-slyvka/lavida/blob/d1c226ab677a50463ea802776cf89d1210ae666f/finance/service/src/main/java/com/lavida/service/EncryptionService.java][init][1] = -> TRY { -> key=keyFactory.generatePublic(keySpec,)@ -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/Dhandapani/gluster-ovirt/blob/bee2165ff04f64ce7a28d34b0ba70e44431c4b14/backend/manager/modules/engineencryptutils/src/main/java/org/ovirt/engine/core/engineencryptutils/EncryptionUtils.java][decode][3] = -> TRY { -> cipher=Cipher.getInstance(params.algorithm,)@ -> cipher.init(Cipher.DECRYPT_MODE,params.secretKey,)@ -> decode=cipher.doFinal(encoding,)@ } CATCH(Exception) { -> log.error("Error in decrypting the secret",e,)@ }
results[https://github.com/SoftwareSynthesis/SoftwareEngineeringProject/blob/79311a26bb01f9b8a98521002c3e08bfc3ed71b4/Sources/ModelManager/Source/org/softwaresysnthesis/mytalk/server/authentication/AESAlgorithm.java][decrypt][2] = -> TRY {  -> cipher=Cipher.getInstance(AESAlgorithm.algorithm,)@ -> key=this.generateKey()@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> decodedValue=cipher.doFinal(decordedValue,)@ } CATCH(Exception) {}
results[https://github.com/eclipse/emf/blob/db0c77791d147ca7b3a5cefe3683177bf69f385c/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/resource/impl/DESCipherImpl.java][decrypt][4] = -> TRY {  -> cipher=Cipher.getInstance(ENCRYPTION_SCHEME,)@ -> cipher.init(Cipher.DECRYPT_MODE,getKey(),)@ -> return new CipherInputStream(inputStream,cipher,)@ } CATCH(Exception) {}
results[https://github.com/pavel-slyvka/lavida/blob/d1c226ab677a50463ea802776cf89d1210ae666f/finance/service/src/main/java/com/lavida/service/DecryptionService.java][init][1] = -> TRY { -> key=keyFactory.generatePrivate(keySpec,)@ -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/ecsec/open-ecard/blob/6e643ff57bace7801e3cbb6712c35aaeac1de39c/ifd/ifd-protocols/pace/src/main/java/org/openecard/ifd/protocol/pace/SecureMessaging.java][getCipherIV][2] = -> TRY {  -> c=Cipher.getInstance("AES/ECB/NoPadding",)@ -> key=new SecretKeySpec(keyENC,"AES",)@ -> c.init(Cipher.ENCRYPT_MODE,key,)@ -> return c.doFinal(smssc,)@ } CATCH(Exception) {}
results[https://github.com/dzonekl/netxstudio/blob/f017ca6ed778572bbca6c0f42c0f8045a90f78a4/plugins/com.netxforge.base/src/com/netxforge/base/security/JCAService.java][decrypt][2] = -> TRY { -> cipher=Cipher.getInstance(CIPHER_TYPE,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> outputBytes=cipher.doFinal(encrypted,)@ } CATCH(Exception) { -> throw new RuntimeException("Failed to decrypt password",e,)@ }
results[https://github.com/crow-misia/ermaster.old/blob/fe9f5aeb4dfc252c8e0bd90529e64822a31f1d96/org.insightech.er/src/org/insightech/er/util/PasswordCrypt.java][decrypt][2] = -> TRY {  -> key=getKey()@ -> cipher=Cipher.getInstance(CIPHER_ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> output=cipher.doFinal(encrypted,)@ } CATCH(Exception) {}
results[https://github.com/waarp/WaarpCommon/blob/1bb1c11a7c41d91ebbf41ecf1192bc2fb5480dfb/src/main/java/org/waarp/common/crypto/KeyObject.java][toCrypt][1] = -> TRY { -> cipher=Cipher.getInstance(getInstance(),)@ -> cipher.init(Cipher.ENCRYPT_MODE,secretKey,)@ } CATCH(Exception) { -> logger.warn("Crypt Error",e,)@ }
results[https://github.com/waarp/WaarpCommon/blob/1bb1c11a7c41d91ebbf41ecf1192bc2fb5480dfb/src/main/java/org/waarp/common/crypto/KeyObject.java][toDecrypt][1] = -> TRY { -> cipher=Cipher.getInstance(getAlgorithm(),)@ -> cipher.init(Cipher.DECRYPT_MODE,secretKey,)@ } CATCH(Exception) { -> logger.warn("Uncrypt Error",e,)@ }
results[https://github.com/bbossgroups/bbossgroups-3.5/blob/e83020f8d2cb27453bccfaa5707d8e21f3e24aee/bbossaop/src-jgroups/bboss/org/jgroups/protocols/ENCRYPT.java][initKeyPair][1] = -> TRY {  -> Kpair=KpairGen.generateKeyPair()@ -> asymCipher=Cipher.getInstance(asymAlgorithm,)@ -> asymCipher.init(Cipher.DECRYPT_MODE,Kpair.getPrivate(),)@ } CATCH(Exception) {}
results[https://github.com/DeaneLooi/CyberPrime/blob/a743ab2f57bf5eae9381d805a8518797510c33ce/CyberPrime2/src/cyberprime/util/Algorithms.java][decrypt][1] = -> TRY {  -> cKey=generateKey(key,)@ -> c=Cipher.getInstance(ALGO,)@ -> c.init(Cipher.DECRYPT_MODE,cKey,)@ -> decValue=c.doFinal(decodedValue,)@ } CATCH(Exception) {}
results[https://github.com/jazzlly/Notes/blob/2b412eb8c53e63924cb7f6afe781bed3ffb851e6/computer.science/languages/java/security/java.sec.src/src/org/zlex/chapter08_3/ElGamalCoder.java][decryptByPrivateKey][6] = -> TRY {  -> privateKey=keyFactory.generatePrivate(pkcs8KeySpec,)@ -> cipher=Cipher.getInstance(keyFactory.getAlgorithm(),)@ -> cipher.init(Cipher.DECRYPT_MODE,privateKey,)@ -> return cipher.doFinal(data,)@ } CATCH(Exception) {}
results[https://github.com/communicationfreedom/cffreedom-utils/blob/206ad49e0428175b30ca926c388eb43a44e2fc61/src/com/cffreedom/utils/security/EncryptDecryptProxy.java][decrypt][2] = -> TRY { -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.DECRYPT_MODE,this.key,)@ -> plainTextPwdBytes=cipher.doFinal(encrypedPwdBytes,)@ } CATCH(Exception) { -> logger.logError(METHOD,e.getMessage(),e,)@ }
results[https://github.com/derekhiggins/ovirt-engine/blob/ad7dd6e7c7fc07c94f23d634b3c730ab7fe7b8f3/backend/manager/modules/engineencryptutils/src/main/java/org/ovirt/engine/core/engineencryptutils/EncryptionUtils.java][encode][2] = -> TRY { -> cipher=Cipher.getInstance(params.algorithm,)@ -> cipher.init(Cipher.ENCRYPT_MODE,params.secretKey,)@ -> encoding=cipher.doFinal(secret.getBytes(),)@ } CATCH(Exception) { -> log.error("Error in encrypting the secret",e,)@ }
results[https://github.com/fucking007/src/blob/4c073b1d6f73a181f964152f4781a581fd23ecf9/sigepsa/AESencrp.java][encrypt][9] = -> TRY {  -> key=generateKey()@ -> c=Cipher.getInstance(ALGO,)@ -> c.init(Cipher.ENCRYPT_MODE,key,)@ -> encVal=c.doFinal(Data.getBytes(),)@ } CATCH(Exception) {}
results[https://github.com/giannini/java.learning/blob/2227304c4d4f33100a5d92f9af6a986579c6526e/license/com/java/rsa/RSACoder.java][encryptByPublicKey][6] = -> TRY {  -> publicKey=keyFactory.generatePublic(x509KeySpec,)@ -> cipher=Cipher.getInstance(keyFactory.getAlgorithm(),)@ -> cipher.init(Cipher.ENCRYPT_MODE,publicKey,)@ -> return cipher.doFinal(data,)@ } CATCH(Exception) {}
results[https://github.com/mattgarkusha/HomeSync/blob/7822ceba3c0f3d4f4d9f0f53760f9278712bb84b/Eclipse Workspace/Crypto Assignment 2/src/PasswordEncryption.java][encrypt][3] = -> TRY {  -> cDec=Cipher.getInstance("PBEWithSHAAnd3KeyTripleDES",)@ -> skey=keyFact.generateSecret(PBESpec,)@ -> cDec.init(Cipher.ENCRYPT_MODE,skey,)@ -> cipherText=cDec.doFinal(CryptoUtils.toByteArray(plaintext,),)@ } CATCH(Exception) {}
results[https://github.com/martinb3/egonet/blob/bbf7d93c321d09479af2d2b698e3318ba4442aec/src/com/endlessloopsoftware/elsutils/security/SymmetricKeyEncryption.java][encrypt][2] = -> TRY { -> key=getKey()@ -> desCipher=Cipher.getInstance("DES/ECB/PKCS5Padding",)@ -> desCipher.init(Cipher.ENCRYPT_MODE,key,)@ -> ciphertext=desCipher.doFinal(source,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/mattgarkusha/HomeSync/blob/3a5b7602e8deefb011c108f5d045bd3f67f702aa/Eclipse Workspace/assign 3 1.6/src/FileEncryptor.java][createKey][6] = -> TRY {  -> enc=Cipher.getInstance("PBEWithSHAAnd3KeyTripleDES",)@ -> skey=keyFact.generateSecret(PBESpec,)@ -> enc.init(Cipher.ENCRYPT_MODE,skey,)@ -> encryptedKey=enc.doFinal(encryptionKey.getEncoded(),)@ } CATCH(Exception) {}
results[https://github.com/lecture2go/plugins-sdk-6.1.1/blob/fd4a5a34159ece9c523b9f591abe2b0699910d6f/portlets/lecture2go-guest-spring-portlet/l2g-src/de/uhh/l2g/util/ReadWriteDES.java][decode][9] = -> TRY {  -> c=Cipher.getInstance("DES",)@ -> k=new SecretKeySpec(pass.getBytes(),"DES",)@ -> c.init(Cipher.DECRYPT_MODE,k,)@ -> cis=new CipherInputStream(is,c,)@ } CATCH(Exception) {}
results[https://github.com/lecture2go/plugins-sdk-6.1.1/blob/fd4a5a34159ece9c523b9f591abe2b0699910d6f/portlets/lecture2go-coordinator-spring-portlet/l2-src/de/uhh/l2g/util/ReadWriteDES.java][encode][9] = -> TRY {  -> c=Cipher.getInstance("DES",)@ -> k=new SecretKeySpec(pass.getBytes(),"DES",)@ -> c.init(Cipher.ENCRYPT_MODE,k,)@ -> cos=new CipherOutputStream(out,c,)@ } CATCH(Exception) {}
results[https://github.com/zhangkaitao/es/blob/830ad8958937fffeb1af8c2bf973485177dffef4/common/src/main/java/com/sishuok/es/common/utils/security/DESCoder.java][encrypt][4] = -> TRY {  -> k=toKey(decryptBASE64(key,),)@ -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.ENCRYPT_MODE,k,)@ -> return cipher.doFinal(data,)@ } CATCH(Exception) {}
results[https://github.com/debop/jvm-experiments/blob/a8c066fd7e67702eae36d105e868be4a44092a8a/jvm-experiments-commons/src/main/java/kr/escp/commons/cryptography/symmetric/SymmetricEncryptorBase.java][doEncrypt][2] = -> TRY {  -> cipher=Cipher.getInstance(getAlgorithm(),)@ -> cipher.init(Cipher.ENCRYPT_MODE,generateKey(),)@ -> return cipher.doFinal(plainBytes,)@ } CATCH(Exception) {}
results[https://github.com/sunlin901203/sunny/blob/d0de7843207367eb668505667051fdeadf97a21b/sunny-parent/sunny-common/src/main/java/com/sunnyframework/common/util/CodeUtil.java][decrypt][6] = -> TRY {  -> k=toKey(CodeUtil.decryptBase64(key,),)@ -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,k,)@ -> return cipher.doFinal(data,)@ } CATCH(Exception) {}
results[https://github.com/dzonekl/netxstudio/blob/546012d964295313177787d9bc8d255e412d38c3/Client/com.netxforge.netxstudio.common/src/com/netxforge/netxstudio/common/jca/JCAService.java][encrypt][2] = -> TRY { -> cipher=Cipher.getInstance(CIPHER_TYPE,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> outputBytes=cipher.doFinal(password.getBytes(),)@ } CATCH(Exception) { -> throw new RuntimeException("Failed to encrypt password",e,)@ }
results[https://github.com/zhanghao-py/gongyu/blob/4086a3733f9a3d039ca4d9390f2b6052d779ae83/src/main/java/cm/h3c/college/pay/core/encode/des/DESCoder.java][decrypt][2] = -> TRY {  -> k=toKey(Base64.decodeBase64(key,),)@ -> cipher=Cipher.getInstance(DES_ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,k,)@ -> return cipher.doFinal(data,)@ } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/e29089cd2f1827672b8e1fd7d492d8de8a128937/test/javax/crypto/JceSecurity/SunJCE_BC_LoadOrdering.java][main0][3] = -> TRY {  -> key=keyGen.generateKey()@ -> cipher=Cipher.getInstance("DES/CBC/PKCS5Padding",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> cipher.doFinal("some string".getBytes(),)@ } CATCH(Exception) {}
results[https://github.com/ixcode/platform/blob/6d72e6b6b4700a06cc29942d2559ca31b1654c3b/core/src/test/unit/java/ixcode/platform/cryptography/CryptographyTest.java][can_encrypt_a_value_one_way][2] = -> TRY {  -> key=keyGenerator.generateKey()@ -> aes=Cipher.getInstance("AES",)@ -> aes.init(Cipher.ENCRYPT_MODE,key,)@ -> encryptedBytes=aes.doFinal(mySecret.getBytes("UTF8",),)@ } CATCH(Exception) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherTest.java][testUpdatebyteArrayintintbyteArrayint][2] = -> TRY {  -> c=Cipher.getInstance("DESede",)@ -> c.init(Cipher.ENCRYPT_MODE,cipherKey,)@ -> TRY { -> c.update(b,0,10,b1,5,)@ } } CATCH(Exception) {}
results[https://github.com/RyanTheAllmighty/ATLauncher/blob/f3e0822f20e0083c974524565f974b78ab2897b0/src/com/atlauncher/utils/Utils.java][decrypt][1] = -> TRY { -> key=generateKey()@ -> c=Cipher.getInstance("AES",)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> decValue=c.doFinal(decordedValue,)@ } CATCH(Exception) { -> App.settings.logStackTrace(e,)@ }
results[https://github.com/qronon/qrone/blob/5b167cc0fd488c8fefcaaccb4fc9be695aa4017b/src/org/qrone/login/ID.java][encode4][1] = -> TRY { -> skey=new SecretKeySpec(key,"AES",)@ -> cipher=Cipher.getInstance("AES/ECB/NoPadding",)@ -> cipher.init(Cipher.ENCRYPT_MODE,skey,)@ -> enc=cipher.doFinal(src,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/AbinashBishoyi/FreeRapid-Plugins/blob/762364d716bcf3e8dc7dbb7eaf84564a0595bf5a/src/channel4/cz/vity/freerapid/plugins/services/channel4/Channel4FileRunner.java][getAuthParams][1] = -> TRY {  -> cipher=Cipher.getInstance("Blowfish/ECB/PKCS5Padding",)@ -> cipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(DECRYPT_KEY,"Blowfish",),)@ -> decrypted=cipher.doFinal(Base64.decodeBase64(token,),)@ } CATCH(Exception) {}
results[https://github.com/SoftwareSynthesis/SoftwareEngineeringProject/blob/79311a26bb01f9b8a98521002c3e08bfc3ed71b4/Sources/ModelManager/Source/org/softwaresysnthesis/mytalk/server/authentication/AESAlgorithm.java][encrypt][2] = -> TRY {  -> cipher=Cipher.getInstance(AESAlgorithm.algorithm,)@ -> key=this.generateKey()@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> encryptedByteArray=cipher.doFinal(plainText.getBytes(),)@ } CATCH(Exception) {}
results[https://github.com/DeaneLooi/CyberPrime/blob/a743ab2f57bf5eae9381d805a8518797510c33ce/CyberPrime2/src/cyberprime/util/Algorithms.java][encrypt][1] = -> TRY {  -> cKey=generateKey(key,)@ -> c=Cipher.getInstance(ALGO,)@ -> c.init(Cipher.ENCRYPT_MODE,cKey,)@ -> encVal=c.doFinal(Data.getBytes(),)@ } CATCH(Exception) {}
results[https://github.com/projectdanube/xdi2/blob/37368eaaa68a59f32a201c96286067363d2665d5/messaging/src/main/java/xdi2/messaging/target/interceptor/impl/encryption/StaticLiteralCryptoService.java][decryptLiteralDataString][1] = -> TRY {  -> cipher=Cipher.getInstance(this.getTransformation(),)@ -> cipher.init(Cipher.DECRYPT_MODE,this.secretKey,)@ -> literalDataBytes=cipher.doFinal(Base64.decodeBase64(encryptedLiteralDataString,),)@ } CATCH(Exception) {}
results[https://github.com/communicationfreedom/cffreedom-utils/blob/c4b3a82263c3e817d89295dd8587d4a34c7c5306/src/main/java/com/cffreedom/utils/security/EncryptDecryptProxy.java][decrypt][1] = -> TRY { -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.DECRYPT_MODE,this.key,)@ -> plainTextPwdBytes=cipher.doFinal(encrypedPwdBytes,)@ } CATCH(Exception) { -> logger.error(e.getMessage(),)@ }
results[https://github.com/Dhandapani/gluster-ovirt/blob/bee2165ff04f64ce7a28d34b0ba70e44431c4b14/backend/manager/modules/engineencryptutils/src/main/java/org/ovirt/engine/core/engineencryptutils/EncryptionUtils.java][Decrypt][2] = -> TRY { -> rsa=Cipher.getInstance(algo,)@ -> rsa.init(Cipher.DECRYPT_MODE,key,)@ -> plainbytes=rsa.doFinal(cipherbytes,)@ } CATCH(Exception) { -> log.error("Error in the Decryption",e,)@ -> error.argvalue=e.getMessage()@ }
results[https://github.com/rSmart/kuali_rice/blob/a4555412dc7dcb71a2783540bbbfff492e2f4141/rice-framework/krad-development-tools/src/main/java/org/kuali/rice/krad/devtools/maintainablexml/EncryptionService.java][setSecretKey][1] = -> TRY {  -> IF { -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.WRAP_MODE,getDesKey(),)@ } } CATCH(Exception) {}
results[https://github.com/mdaniel/svn-caucho-com-resin/blob/7920ff3c49b9539d7ce28ca51101852fc2dcdaaf/modules/resin/src/com/caucho/hemp/servlet/ServerAuthManager.java][decryptKey][1] = -> TRY { -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.UNWRAP_MODE,_authKeyPair.getPrivate(),)@ -> key=cipher.unwrap(encKey,keyAlgorithm,Cipher.SECRET_KEY,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/projectdanube/xdi2/blob/37368eaaa68a59f32a201c96286067363d2665d5/messaging/src/main/java/xdi2/messaging/target/interceptor/impl/encryption/StaticLiteralCryptoService.java][encryptLiteralDataString][1] = -> TRY {  -> cipher=Cipher.getInstance(this.getTransformation(),)@ -> cipher.init(Cipher.ENCRYPT_MODE,this.secretKey,)@ -> encryptedLiteralDataBytes=cipher.doFinal(literalDataString.getBytes("UTF-8",),)@ } CATCH(Exception) {}
results[https://github.com/AbinashBishoyi/FreeRapid-Plugins/blob/e576758041bfb787673311549568c1db119d6ffd/src/saavn/cz/vity/freerapid/plugins/services/saavn/SaavnFileRunner.java][decryptPlay][1] = -> TRY {  -> cipher=Cipher.getInstance("DES/ECB/PKCS5Padding",)@ -> cipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(SECRET_KEY,"DES",),)@ -> return new String(cipher.doFinal(Base64.decodeBase64(str,),),"UTF-8",)@ } CATCH(Exception) {}
results[https://github.com/martinb3/egonet/blob/877893479cb55d5c2eba1aabb20d11f42a0d8e15/src/org/egonet/util/SymmetricKeyEncryption.java][encrypt][4] = -> TRY { -> key=getKey()@ -> desCipher=Cipher.getInstance("DES/ECB/PKCS5Padding",)@ -> desCipher.init(Cipher.ENCRYPT_MODE,key,)@ -> ciphertext=desCipher.doFinal(source,)@ } CATCH(Exception) { -> logger.error(ex.toString(),)@ }
results[https://github.com/RyanTheAllmighty/ATLauncher/blob/f3e0822f20e0083c974524565f974b78ab2897b0/src/com/atlauncher/utils/Utils.java][encrypt][1] = -> TRY { -> key=generateKey()@ -> c=Cipher.getInstance("AES",)@ -> c.init(Cipher.ENCRYPT_MODE,key,)@ -> encVal=c.doFinal(Data.getBytes(),)@ } CATCH(Exception) { -> App.settings.logStackTrace(e,)@ }
results[https://github.com/qronon/qrone/blob/5b167cc0fd488c8fefcaaccb4fc9be695aa4017b/src/org/qrone/login/ID.java][decode4][1] = -> TRY { -> skey=new SecretKeySpec(key,"AES",)@ -> cipher=Cipher.getInstance("AES/ECB/NoPadding",)@ -> BLOCK_SIZE=cipher.getBlockSize()@ -> cipher.init(Cipher.DECRYPT_MODE,skey,)@ -> return cipher.doFinal(src,0,src.length,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/OpenNTF/XPagesToolkit/blob/f6ec1c43167e72e00338aec1ce5167009dcbd9d9/org.openntf.xpt.agents/src/org/openntf/xpt/agents/master/PasswordService.java][encrypt][1] = -> TRY { -> aes=Cipher.getInstance("AES",)@ -> aes.init(Cipher.ENCRYPT_MODE,getKey(),)@ -> ciphertext=aes.doFinal(strPW.getBytes(),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/xwic/etlgine/blob/4575892b85a2aa9e17b030e640946aeff49f714c/de.xwic.etlgine/src/de/xwic/etlgine/util/CryptHelper.java][decrypt][1] = -> TRY { -> cipher=Cipher.getInstance(algorithm,)@ -> cipher.init(Cipher.DECRYPT_MODE,getMyKey(),)@ -> return new String(cipher.doFinal(data,),)@ } CATCH(Exception) { -> throw new RuntimeException("Error decrypting string!",e,)@ }
results[https://github.com/OpenIotOrg/openiot/blob/ab006c734941776297172389f1bc1d67fd7f17ea/modules/x-gsn/src/main/java/org/openiot/gsn/http/ac/Protector.java][decrypt][1] = -> TRY {  -> key=generateKey()@ -> c=Cipher.getInstance(ALGORITHM,)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> LOOP { -> decValue=c.doFinal(decordedValue,)@ } } CATCH(Exception) {}
results[https://github.com/mjeanroy/springhub/blob/24f70780f8ada76a0d1a2e3decf1f874f48c8803/springhub-web/src/main/java/com/mick8569/springhub/commons/crypto/Crypto.java][decryptAES][3] = -> TRY { -> key=generateAESKey(secret,)@ -> c=Cipher.getInstance(AES,)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> decValue=c.doFinal(decodedValue,)@ } CATCH(Exception) { -> LOG.error(ex.getMessage(),ex,)@ }
results[https://github.com/communicationfreedom/cffreedom-utils/blob/d89739af47c09c582f474de6cf2cbb20510818f7/src/com/cffreedom/security/EncryptDecryptProxy.java][encrypt][2] = -> TRY { -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.ENCRYPT_MODE,this.key,)@ -> return Base64.encodeBase64String(cipher.doFinal(cleartext,),)@ } CATCH(Exception) { -> logger.logError(METHOD,e.getMessage(),e,)@ }
results[https://github.com/europeana/contrib/blob/c17d990e2cdeeb04810bb90f917ae031aaa597c4/ait/trunk/yuma/src/main/java/at/ait/dme/yuma/server/auth/AuthenticationServiceImpl.java][decrypt][3] = -> TRY {  -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> LOOP { -> outOffset+=cipher.doFinal(cipherText,inOffset,Math.min(KEY_SIZE,inLen,),plainText,outOffset,)@(inLen=cipherText.length-inOffset)>0 } } CATCH(Exception) {}
results[https://github.com/fywb251/bsl_impc_android/blob/0befac4975509a2a4851c92b36a553b36765732a/cube-android/src/com/foreveross/chameleon/util/SymEncrypt.java][decrypt][1] = -> TRY { -> key=getKey(strKey.getBytes(),"DES",)@ -> c=Cipher.getInstance("DES",)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> clearByte=c.doFinal(code,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/RyanTheAllmighty/ATLauncher/blob/97218b9071d4e13c4e5cef4c2867e84ab1bc06e4/src/com/atlauncher/gui/Utils.java][decrypt][1] = -> TRY { -> key=generateKey()@ -> c=Cipher.getInstance("AES",)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> decValue=c.doFinal(decordedValue,)@ } CATCH(Exception) { -> App.settings.getConsole().logStackTrace(e,)@ }
results[https://github.com/leandrocruz/Xingu/blob/865a2d0a627a36b7921e8e427dba173ca7fdfddb/crypto/src/main/java/br/com/ibnetwork/xingu/crypto/impl/rsa/RSAUtils.java][encrypt][1] = -> TRY {  -> IF { -> key=(PubKey) key.wrappedKey()@key instanceof PubKey } -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> cos=new CipherOutputStream(baos,cipher,)@ } CATCH(Exception) {}
results[https://github.com/ImpressiveCode/ic-depress/blob/12bdf6fbeb40f5b38a42e3b450b52171bb447624/ic-depress-data-anonymisation/src/org/impressivecode/depress/data/objects/CryptographicUtility.java][useAlgorithm][1] = -> key=new SecretKeySpec(encodedKey,0,8,"DES",)@ -> TRY { -> cipher=Cipher.getInstance("DES/ECB/PKCS5Padding",)@ -> cipher.init(encryptMode,key,)@ -> transformed=cipher.doFinal(encodedInput,)@ } CATCH(Exception) { -> e.printStackTrace()@ -> throw new RuntimeException(e,)@ }
results[https://github.com/quickbundle/qb-core/blob/bab5ebedd4e85b87e435b0812852aca5d591859d/java-lib/quickbundle-tools/src/main/java/org/quickbundle/tools/support/encrypt/ZipEncrypt_rsa.java][encrypt][2] = -> TRY {  -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.ENCRYPT_MODE,privateKey,)@ -> LOOP { -> fos.write(cipher.doFinal(b,),)@fis.read(b,)!=-1 } } CATCH(Exception) {}
results[https://github.com/xwic/etlgine/blob/4575892b85a2aa9e17b030e640946aeff49f714c/de.xwic.etlgine/src/de/xwic/etlgine/util/CryptHelper.java][encrypt][1] = -> TRY { -> cipher=Cipher.getInstance(algorithm,)@ -> cipher.init(Cipher.ENCRYPT_MODE,getMyKey(),)@ -> return cipher.doFinal(string.getBytes(),)@ } CATCH(Exception) { -> throw new RuntimeException("Error encrypting string!",e,)@ }
results[https://github.com/OpenNTF/XPagesToolkit/blob/f6ec1c43167e72e00338aec1ce5167009dcbd9d9/org.openntf.xpt.agents/src/org/openntf/xpt/agents/master/PasswordService.java][decrypt][1] = -> TRY { -> aes=Cipher.getInstance("AES",)@ -> aes.init(Cipher.DECRYPT_MODE,getKey(),)@ -> strRC=new String(aes.doFinal(ciphertext,),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/rSmart/kuali_rice/blob/1b270300443723a93dde7e8fdcaee4ea258ed9ed/impl/src/main/java/org/kuali/rice/kew/documentoperation/web/DocumentContentOperationAction.java][decrypt][2] = -> TRY {  -> IF { -> return ""@StringUtils.isBlank(value,) } -> cipher=Cipher.getInstance(ALGORITHM,)@!(StringUtils.isBlank(value,)) -> cipher.init(Cipher.DECRYPT_MODE,getSecretKey(encryptionKey,),)@!(StringUtils.isBlank(value,)) -> cleartext1=cipher.doFinal(encryptedData,)@!(StringUtils.isBlank(value,)) } CATCH(Exception) {}
results[https://github.com/sakai-mirror/lessonbuilder/blob/e2f40855a35235ad0c32796864c512ada4386d73/tool/src/java/org/sakaiproject/lessonbuildertool/tool/producers/ShowPageProducer.java][getSessionParameter][1] = -> IF { -> return null@!(url.startsWith("/access/lessonbuilder",)) } -> TRY { -> sessionCipher=Cipher.getInstance("Blowfish",)@!(!(url.startsWith("/access/lessonbuilder",))) -> sessionCipher.init(Cipher.ENCRYPT_MODE,lessonBuilderAccessService.getSessionKey(),)@!(!(url.startsWith("/access/lessonbuilder",))) -> sessionBytes=sessionCipher.doFinal(sessionBytes,)@!(!(url.startsWith("/access/lessonbuilder",))) } CATCH(Exception) { -> System.out.println("unable to generate encrypted session id "+e,)@!(!(url.startsWith("/access/lessonbuilder",))) }
results[https://github.com/davros-/android_libcore_s4/blob/e888585a72df3786111230769d73fee92dbbfb39/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/SealedObjectTest.java][testDeserialization][27] = -> TRY {  -> key=kg.generateKey()@ -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> LOOP { -> sealedObjects.add(new SealedObject("hello",cipher,),)@ } } CATCH(Exception) {}
results[https://github.com/javaee5/TMS/blob/0cdd81c9b4417100ef9d241e425933ce05d2d1bd/src/ir/university/toosi/tms/util/EncryptUtil.java][decrypt][1] = -> TRY { -> key=generateKey()@ -> c=Cipher.getInstance(ALGORITHM,)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> LOOP { -> decValue=c.doFinal(decordedValue,)@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/mjeanroy/springhub/blob/24f70780f8ada76a0d1a2e3decf1f874f48c8803/springhub-web/src/main/java/com/mick8569/springhub/commons/crypto/Crypto.java][encryptAES][3] = -> TRY { -> key=generateAESKey(secret,)@ -> c=Cipher.getInstance(AES,)@ -> c.init(Cipher.ENCRYPT_MODE,key,)@ -> encVal=c.doFinal(data.getBytes(),)@ } CATCH(Exception) { -> LOG.error(ex.getMessage(),ex,)@ }
results[https://github.com/enwida/idpRepo/blob/fc465b8da94b3172cb859b7ed604802010672b2e/workspace/enwida/src/main/java/de/enwida/web/service/implementation/CookieSecurityService.java][encrypt][4] = -> TRY { -> cipher=Cipher.getInstance(DESEDE_ENCRYPTION_SCHEME,)@ -> cipher.init(Cipher.ENCRYPT_MODE,getKey(encryptionKey,),)@ -> encryptedText=cipher.doFinal(plainText,)@ } CATCH(Exception) { -> Logger.getLogger(getClass(),).error("Error encountered while encryption: ",e,)@ }
results[https://github.com/fywb251/bsl_impc_android/blob/0befac4975509a2a4851c92b36a553b36765732a/cube-android/src/com/foreveross/chameleon/util/SymEncrypt.java][encrypt][1] = -> TRY { -> key=getKey(strKey.getBytes(),"DES",)@ -> c=Cipher.getInstance("DES",)@ -> c.init(Cipher.ENCRYPT_MODE,key,)@ -> r=c.doFinal(s.getBytes(),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/lyhcode/codecanaan/blob/505f18d10ea980953e65a70eacaa60af2ce11ce9/client/webstart/src/main/java/com/codecanaan/ScriptLoader.java][loadGroovy][3] = -> TRY {  -> key=new SecretKeySpec("thebestsecretkey".getBytes(),"AES",)@ -> c=Cipher.getInstance("AES",)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> decValue=c.doFinal(Hex.decodeHex(script.toCharArray(),),)@ } CATCH(Exception) {}
results[https://github.com/kragen/waterken-server/blob/f1a5665456dfcdddc3659a4cc5f4f7dd445468b5/waterken/remote/src/org/waterken/remote/http/SessionMaker.java][hash][2] = -> TRY { -> key=Base32.decode(keyBuffer.toString(),)@ -> aes=Cipher.getInstance("AES/ECB/NoPadding",)@ -> aes.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(key,"AES",),)@ -> aes.doFinal(plaintext,0,plaintext.length,cyphertext,)@ } CATCH(Exception) { -> throw new Error(e,)@ }
results[https://github.com/jboss-switchyard/core/blob/3e262098a58608de7e14e12eed91e3061f284ee6/security/base/src/main/java/org/switchyard/security/crypto/PublicCrypto.java][decrypt][1] = -> TRY { -> cipher=Cipher.getInstance(_keyTransformation,)@ -> cipher.init(Cipher.DECRYPT_MODE,_key,)@ -> LOOP { -> decBytes=cipher.doFinal(copyBytes(buf,bufLength,),)@(bufLength=encIn.read(buf,))!=-1 } } CATCH(Exception) { -> throw new SwitchYardException(e,)@ }
results[https://github.com/mkovatsc/Californium/blob/6ab30346aa03e9bdf86bdd62782903e0030a630e/californium/src/main/java/ch/inf/vs/californium/network/connector/dtls/CCMBlockCipher.java][encrypt][2] = -> TRY { -> cipher=Cipher.getInstance(BLOCK_CIPHER,)@ -> cipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(key,BLOCK_CIPHER,),)@ -> T=computeCbcMac(nonce,m,a,cipher,numAuthenticationBytes,)@ -> S_i=generateKeyStreamBlocks(lengthM,nonce,cipher,)@ } CATCH(Exception) { -> LOG.severe("Could not encrypt the message.",)@ -> e.printStackTrace()@ }
results[https://github.com/communicationfreedom/cffreedom-utils/blob/c4b3a82263c3e817d89295dd8587d4a34c7c5306/src/main/java/com/cffreedom/utils/security/EncryptDecryptProxy.java][encrypt][1] = -> TRY { -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.ENCRYPT_MODE,this.key,)@ -> return Convert.toString(Base64.encodeBase64(cipher.doFinal(cleartext,),),)@ } CATCH(Exception) { -> logger.error(e.getMessage(),)@ }
results[https://github.com/taoprogramer/PPNB/blob/4652f1e4aece1400dd4d4e983bdf73f95066fd5c/PalmPrintNetBank/src/com/ppnb/util/RsaEncrypt.java][decryptString][1] = -> TRY { -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.DECRYPT_MODE,getKey(pathname,).getPrivate(),)@ -> return new String(cipher.doFinal(newArr,),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/deegree/deegree2-desktop/blob/273cc767baf26ca7817cd620b969750eb490b728/src/main/java/org/deegree/igeo/utils/Encryption.java][encrypt][1] = -> TRY { -> cipher=Cipher.getInstance(ciph,)@ -> key=loadKey(ciph,passFilename,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> encrypted=cipher.doFinal(textToEncrypt.getBytes("UTF-8",),)@ } CATCH(Exception) { -> LOG.logError("Could not encrypt, returning original text:"+e.getMessage(),)@ }
results[https://github.com/semistone/rent/blob/7864161f574a4b229ee7e73f30f5235b68686399/src/org/siraya/rent/utils/EncodeUtility.java][decrypt][1] = -> TRY { -> key=generateKey(keyName,)@ -> c=Cipher.getInstance(ALGO,)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> decValue=c.doFinal(decordedValue,)@ } CATCH(Exception) { -> logger.error("error decrypt",e,)@ -> throw new RentException(RentException.RentErrorCode.ErrorGeneral,"decrypt data:"+encryptedData+" error:"+e.getMessage(),)@ }
results[https://github.com/SonarSource/sonar/blob/94be3ff3dbb62e585b80c6c3cf68396ed2e7d2e4/sonar-plugin-api/src/main/java/org/sonar/api/config/AesCipher.java][decrypt][1] = -> TRY { -> cipher=javax.crypto.Cipher.getInstance(CRYPTO_KEY,)@ -> cipher.init(javax.crypto.Cipher.DECRYPT_MODE,loadSecretFile(),)@ -> cipherData=cipher.doFinal(Base64.decodeBase64(StringUtils.trim(encryptedText,),),)@ } CATCH(Exception) { -> throw Throwables.propagate(e,)@ }
results[https://github.com/OpenIotOrg/openiot/blob/ab006c734941776297172389f1bc1d67fd7f17ea/modules/x-gsn/src/main/java/org/openiot/gsn/http/ac/Protector.java][encrypt][1] = -> TRY {  -> key=generateKey()@ -> c=Cipher.getInstance(ALGORITHM,)@ -> c.init(Cipher.ENCRYPT_MODE,key,)@ -> LOOP { -> encValue=c.doFinal(valueToEnc.getBytes(),)@ } } CATCH(Exception) {}
results[https://github.com/RyanTheAllmighty/ATLauncher/blob/97218b9071d4e13c4e5cef4c2867e84ab1bc06e4/src/com/atlauncher/gui/Utils.java][encrypt][1] = -> TRY { -> key=generateKey()@ -> c=Cipher.getInstance("AES",)@ -> c.init(Cipher.ENCRYPT_MODE,key,)@ -> encVal=c.doFinal(Data.getBytes(),)@ } CATCH(Exception) { -> App.settings.getConsole().logStackTrace(e,)@ }
results[https://github.com/taoprogramer/PPNB/blob/e516a769c6556670ac2ecf5b0c78b13c698ef601/PalmPrintNetBank/src/com/ppnb/util/RsaDecode.java][decryptString][1] = -> TRY { -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.DECRYPT_MODE,getKey().getPrivate(),)@ -> return new String(cipher.doFinal(newArr,),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/sorcersoft/sorcer/blob/f0324e56604cff1ea1fa9fffdbbb86e2ed52dc4b/iGrid/sos/sos-platform/src/main/java/sorcer/core/loki/member/LokiMemberUtil.java][readKP][8] = -> TRY { -> localKA=kg.genKeyAgreement(myKeyPair,)@ -> localKA.doPhase(kpeRes.publicKey,true,)@ -> deCipher=Cipher.getInstance("DES",)@ -> deCipher.init(Cipher.DECRYPT_MODE,localKA.generateSecret("DES",),)@ -> l_bais=new ByteArrayInputStream(deCipher.doFinal(kpeRes.keyPair,),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/jkwatson/Muse-Controller/blob/9d8acfeb64e673f3d2b4f9ea75ecd035cd69237e/src/com/sleazyweasel/pandora/JsonPandoraRadio.java][decrypt][1] = -> TRY { -> decryptionCipher=Cipher.getInstance(BLOWFISH_ECB_PKCS5_PADDING,)@ -> decryptionCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(authConfiguration.getDecriptionKey().getBytes(),"Blowfish",),)@ -> result=decryptionCipher.doFinal(Hex.toBytes(input,),)@ } CATCH(Exception) { -> throw new RuntimeException("Failed to properly decrypt data",e,)@ }
results[https://github.com/taoprogramer/PPNB/blob/e516a769c6556670ac2ecf5b0c78b13c698ef601/PalmPrintNetBank/src/com/ppnb/util/RsaDecode.java][decryptFile][1] = -> TRY { -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.DECRYPT_MODE,getKey().getPrivate(),)@ -> LOOP { -> enText=cipher.doFinal(newArr,)@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/deegree/deegree2-desktop/blob/273cc767baf26ca7817cd620b969750eb490b728/src/main/java/org/deegree/igeo/utils/Encryption.java][decrypt][1] = -> TRY { -> cipher=Cipher.getInstance(ciph,)@ -> key=loadKey(ciph,passFilename,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> decrypted=cipher.doFinal(new BASE64Decoder().decodeBuffer(textToDecryt,),)@ } CATCH(Exception) { -> LOG.logError("Could not decrypt, return original text:"+e.getMessage(),)@ }
results[https://github.com/semistone/rent/blob/7864161f574a4b229ee7e73f30f5235b68686399/src/org/siraya/rent/utils/EncodeUtility.java][encrypt][1] = -> TRY { -> key=generateKey(keyName,)@ -> c=Cipher.getInstance(ALGO,)@ -> c.init(Cipher.ENCRYPT_MODE,key,)@ -> encVal=c.doFinal(Data.getBytes(),)@ } CATCH(Exception) { -> logger.error("encrypt",e,)@ -> throw new RentException(RentException.RentErrorCode.ErrorGeneral,e.getMessage(),)@ }
results[https://github.com/skavanagh/EC2Box/blob/eda7d846697b073e0e3c7add99bcaa30cb0345a0/src/main/java/com/ec2box/manage/util/EncryptionUtil.java][encrypt][1] = -> IF { -> TRY { -> c=Cipher.getInstance("AES",)@ -> c.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(key,"AES",),)@ -> encVal=c.doFinal(str.getBytes(),)@str!=null&&str.length()>0 } CATCH(Exception) { -> ex.printStackTrace()@ } }
results[https://github.com/wadahiro/openidm/blob/78ae7aa58e59540df48586afa22796955f32d16a/openidm-crypto/src/main/java/org/forgerock/openidm/crypto/impl/Main.java][encrypt][1] = -> TRY {  -> cipher=Cipher.getInstance(CRYPT_ALGORITHM,)@ -> cipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(NON_SECRET_KEY,CRYPT_ALGORITHM,),)@ -> return buf.append(byteArrayToHexString(cipher.doFinal(s.getBytes(),),),).toString()@ } CATCH(Exception) {}
results[https://github.com/javaee5/TMS/blob/0cdd81c9b4417100ef9d241e425933ce05d2d1bd/src/ir/university/toosi/tms/util/EncryptUtil.java][encrypt][1] = -> TRY { -> key=generateKey()@ -> c=Cipher.getInstance(ALGORITHM,)@ -> c.init(Cipher.ENCRYPT_MODE,key,)@ -> LOOP { -> encValue=c.doFinal(valueToEnc.getBytes(),)@ } } CATCH(Exception) { -> e.printStackTrace()@ }
