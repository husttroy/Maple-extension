results[https://github.com/avr6130/ATM-BANK/blob/cd706c93b81aab04cd26a1dcadb0fad9ba3a9b97/crypto/keyexchange/KeyExchangeSupport.java][encryptSecret] = -> TRY { -> rsaCipher=Cipher.getInstance(KeyExchangeSupport.pkAlgorithm,)@ -> rsaCipher.init(Cipher.ENCRYPT_MODE,bankPublicKey,)@ -> so=new SealedObject(secret,rsaCipher,)@ } CATCH { -> IF { } }
results[https://github.com/ikeji/openjdk7-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/com/sun/crypto/provider/Cipher/RSA/TestRSA.java][testKat] = -> System.out.println("Testing known values for "+alg+"...",)@ -> c=Cipher.getInstance(alg,p,)@ -> c.init(mode,key,)@ -> r=c.doFinal(parse(in,),)@ -> s=parse(out,)@ -> IF { -> throw new Exception("Unexpected test result",)@Arrays.equals(r,s,)!=result }
results[https://github.com/uditrugman/openjdk8-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/com/sun/crypto/provider/Cipher/RSA/TestRSA.java][testKat] = -> System.out.println("Testing known values for "+alg+"...",)@ -> c=Cipher.getInstance(alg,p,)@ -> c.init(mode,key,)@ -> r=c.doFinal(parse(in,),)@ -> s=parse(out,)@ -> IF { -> throw new Exception("Unexpected test result",)@Arrays.equals(r,s,)!=result }
results[https://github.com/avr6130/ATM-BANK/blob/ea66367c604a1459ba7f8ae04ce66887797a0a0e/com/group2/crypto/keyexchange/KeyExchangeSupport.java][decryptSecret] = -> TRY { -> rsaCipher=Cipher.getInstance(KeyExchangeSupport.pkAlgorithm,)@ -> rsaCipher.init(Cipher.DECRYPT_MODE,this.bankPrivate,)@ -> return so.getObject(rsaCipher,)@ } CATCH { -> IF { } }
results[https://github.com/uditrugman/openjdk8-jdk/blob/cd189373aa100818005a0817d6f68dac286c8b0a/test/com/sun/crypto/provider/Cipher/RSA/TestOAEP.java][testEncryptDecrypt] = -> System.out.println("Testing OAEP with hash "+hashAlg+", "+dataLength+" bytes",)@ -> c=Cipher.getInstance("RSA/ECB/OAEPwith"+hashAlg+"andMGF1Padding",cp,)@ -> c.init(Cipher.ENCRYPT_MODE,publicKey,)@ -> enc=c.doFinal(data,)@ -> c.init(Cipher.DECRYPT_MODE,privateKey,)@ -> dec=c.doFinal(enc,)@ -> IF { -> throw new Exception("Data does not match",)@Arrays.equals(data,dec,)==false }
results[https://github.com/axDev-JDK/jdk/blob/acbdb0ade569a980d025ec2b09f528c0bc1a29cd/test/com/sun/crypto/provider/Cipher/RSA/TestRSA.java][testKat] = -> System.out.println("Testing known values for "+alg+"...",)@ -> c=Cipher.getInstance(alg,p,)@ -> c.init(mode,key,)@ -> r=c.doFinal(parse(in,),)@ -> s=parse(out,)@ -> IF { -> throw new Exception("Unexpected test result",)@Arrays.equals(r,s,)!=result }
results[https://github.com/ikeji/openjdk7-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/com/sun/crypto/provider/Cipher/RSA/TestOAEP.java][testEncryptDecrypt] = -> System.out.println("Testing OAEP with hash "+hashAlg+", "+dataLength+" bytes",)@ -> c=Cipher.getInstance("RSA/ECB/OAEPwith"+hashAlg+"andMGF1Padding",cp,)@ -> c.init(Cipher.ENCRYPT_MODE,publicKey,)@ -> enc=c.doFinal(data,)@ -> c.init(Cipher.DECRYPT_MODE,privateKey,)@ -> dec=c.doFinal(enc,)@ -> IF { -> throw new Exception("Data does not match",)@Arrays.equals(data,dec,)==false }
results[https://github.com/axDev-JDK/jdk/blob/acbdb0ade569a980d025ec2b09f528c0bc1a29cd/test/com/sun/crypto/provider/Cipher/RSA/TestOAEP.java][testEncryptDecrypt] = -> System.out.println("Testing OAEP with hash "+hashAlg+", "+dataLength+" bytes",)@ -> c=Cipher.getInstance("RSA/ECB/OAEPwith"+hashAlg+"andMGF1Padding",cp,)@ -> c.init(Cipher.ENCRYPT_MODE,publicKey,)@ -> enc=c.doFinal(data,)@ -> c.init(Cipher.DECRYPT_MODE,privateKey,)@ -> dec=c.doFinal(enc,)@ -> IF { -> throw new Exception("Data does not match",)@Arrays.equals(data,dec,)==false }
results[https://github.com/avr6130/ATM-BANK/blob/cd706c93b81aab04cd26a1dcadb0fad9ba3a9b97/crypto/keyexchange/KeyExchangeSupport.java][decryptSecret] = -> TRY { -> rsaCipher=Cipher.getInstance(KeyExchangeSupport.pkAlgorithm,)@ -> rsaCipher.init(Cipher.DECRYPT_MODE,this.bankPrivate,)@ -> return so.getObject(rsaCipher,)@ } CATCH { -> IF { } }
results[https://github.com/avr6130/ATM-BANK/blob/ea66367c604a1459ba7f8ae04ce66887797a0a0e/com/group2/crypto/keyexchange/KeyExchangeSupport.java][encryptSecret] = -> TRY { -> rsaCipher=Cipher.getInstance(KeyExchangeSupport.pkAlgorithm,)@ -> rsaCipher.init(Cipher.ENCRYPT_MODE,bankPublicKey,)@ -> so=new SealedObject(secret,rsaCipher,)@ } CATCH { -> IF { } }
