results[https://github.com/cogroo/cogroo4/blob/683218e5729a3f1215ce467723bb02848463b2b6/lang/pt_br/cogroo-addon/src/org/cogroo/addon/util/SecurityUtil.java][decryptSecretKey] = -> TRY { -> rsacf=Cipher.getInstance("RSA",)@ -> rsacf.init(Cipher.DECRYPT_MODE,privatekey,)@ -> result=rsacf.doFinal(encryptedSecretKey,)@ } CATCH { }
results[https://github.com/eiNetwork/eiNetwork2/blob/ae5a90c3afe03a620c536a1a085c6667596f66c6/vufind/packaging_app/src/com/adobe/adept/client/XMLUtil.java][getSignatureBytes] = -> TRY { -> cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return cipher.doFinal(hash,)@ } CATCH { }
results[https://github.com/brianthetall/java-learning/blob/e16d5b0583eeb4180bd953599427f62ba04051dc/Crypto/RSACrypt.java][decrypt] = -> TRY { -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.DECRYPT_MODE,privkey,)@ -> ciphertext=cipher.doFinal(data,)@ } CATCH { }
results[https://github.com/ysc/APDPlat/blob/0290a747e54177c049148c2f58e1871045ebfea9/APDPlat_Core/src/main/java/org/apdplat/platform/util/PKIUtils.java][decrypt] = -> TRY { -> cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding",)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> result=cipher.doFinal(data,)@ } CATCH { }
results[https://github.com/eiNetwork/eiNetwork/blob/396df8ae393e19bae0dcfa69aacbcdf89bb9dfcc/vufind/packaging_app/src/com/adobe/adept/client/XMLUtil.java][checkSignature] = -> TRY { -> cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding",)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> dhash=cipher.doFinal(signature,)@ } CATCH { }
results[https://github.com/mixi-inc/triaina/blob/ea93022b3592a62c34620ec64172f3163fcb80e0/android/Commons/src/triaina/commons/utils/CryptUtils.java][decrypt] = -> TRY { -> cipher=Cipher.getInstance(mode,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> return cipher.doFinal(soruce,)@ } CATCH { }
results[https://github.com/ianso/scriptus/blob/738124a83bb556197c889b3612df982d161cd40b/src/main/java/net/ex337/scriptus/CryptUtils.java][encrypt] = -> TRY { -> cipher=Cipher.getInstance(cipherScheme,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> result=cipher.doFinal(plaintext,)@ } CATCH { }
results[https://github.com/nesi/slcs-server/blob/942494061225975db77f03fa2bbefafd77092f68/src/au/org/arcs/slcs/utils/CryptoUtil.java][asymEncrypt] = -> TRY { -> cipher=Cipher.getInstance(ASYMMETRIC_ALGORITHM,)@ -> cipher.init(Cipher.ENCRYPT_MODE,pk,)@ -> result=cipher.doFinal(message,)@ } CATCH { }
results[https://github.com/ixiaopan/EasyAndroid/blob/2ded76bb35e82dd2e26f18035a3c7f2c024025d8/src/me/xiaopan/java/easy/util/DESCoder.java][decryptByte] = -> TRY { -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> return cipher.doFinal(decryptByteArray,)@ } CATCH { }
results[https://github.com/SSilence/scotty/blob/f94be415cac66f1ca45727d5b815f90b121199bb/scotty-commons/src/main/java/scotty/crypto/RSAEncryption.java][encryptDecrypt] = -> TRY { -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(mode,key,)@ -> return cipher.doFinal(content,)@ } CATCH { }
