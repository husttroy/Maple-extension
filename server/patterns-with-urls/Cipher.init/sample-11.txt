results[https://github.com/teiid/teiid/blob/cacd56b9d6d03fe21401f1d1dfce2ef90daa55b9/engine/src/main/java/org/teiid/common/buffer/impl/EncryptedStorageManager.java][<init>] = -> decrypt=Cipher.getInstance(DEFAULT_ALGORITHM,)@ -> decrypt.init(Cipher.DECRYPT_MODE,key,)@ -> encrypt=Cipher.getInstance(DEFAULT_ALGORITHM,)@ -> blockSize=encrypt.getBlockSize()@ -> encrypt.init(Cipher.ENCRYPT_MODE,key,)@
results[https://github.com/echocat/jomon/blob/83d33451fc6eef949afebd4a6d17975eac9c2ff2/runtime/src/main/java/org/echocat/jomon/runtime/util/EncodedSerialGenerator.java][init] = -> key=new SecretKeySpec(_password.getBytes("UTF-8",),ALGORITHM,)@ -> _encryptCipher=Cipher.getInstance(ALGORITHM,)@ -> _encryptCipher.init(ENCRYPT_MODE,key,)@ -> _decryptCipher=Cipher.getInstance(ALGORITHM,)@ -> _decryptCipher.init(DECRYPT_MODE,key,)@
results[https://github.com/wangwang4git/4MyLove/blob/df2944ed0a3b3d3fa3edb40598e7591cdd2c9331/src/com/bbs/whu/utils/MyEncryptionDecryptionUtils.java][<init>] = -> key=getKey(strKey.getBytes(),)@ -> encryptCipher=Cipher.getInstance("DES",)@ -> encryptCipher.init(Cipher.ENCRYPT_MODE,key,)@ -> decryptCipher=Cipher.getInstance("DES",)@ -> decryptCipher.init(Cipher.DECRYPT_MODE,key,)@
results[https://github.com/bbossgroups/bbossgroups-3.5/blob/a8f6d654bdda4c8d57e5f91b366c930bafe6ac1b/bboss-persistent/src/com/frameworkset/common/poolman/security/DESCipher.java][<init>] = -> key=getKey(strKey.getBytes(),)@ -> encryptCipher=Cipher.getInstance("DES",)@ -> encryptCipher.init(Cipher.ENCRYPT_MODE,key,)@ -> decryptCipher=Cipher.getInstance("DES",)@ -> decryptCipher.init(Cipher.DECRYPT_MODE,key,)@
results[https://github.com/bbossgroups/bboss-cms/blob/720fff3123b088f865c5ca5bdf559d547bcd62db/src-ldap/com/sany/ldap/common/DESCipher.java][<init>] = -> key=getKey(strKey.getBytes(),)@ -> encryptCipher=Cipher.getInstance("DES",)@ -> encryptCipher.init(Cipher.ENCRYPT_MODE,key,)@ -> decryptCipher=Cipher.getInstance("DES",)@ -> decryptCipher.init(Cipher.DECRYPT_MODE,key,)@
results[https://github.com/ebspos/ebspos/blob/6bade373cb2f67e6f66cb9b4cf1f35f54d09d8a9/core/net/loyin/util/safe/DESPlus.java][<init>] = -> key=getKey(strKey.getBytes(),)@ -> encryptCipher=Cipher.getInstance("DES",)@ -> encryptCipher.init(Cipher.ENCRYPT_MODE,key,)@ -> decryptCipher=Cipher.getInstance("DES",)@ -> decryptCipher.init(Cipher.DECRYPT_MODE,key,)@
results[https://github.com/bbossgroups/bboss-cms/blob/be90adae15480817527e8ecaa5aa522296b0d83f/src-sys/com/liferay/portlet/iframe/action/DESCipher.java][<init>] = -> key=getKey(strKey.getBytes(),)@ -> encryptCipher=Cipher.getInstance("DES",)@ -> encryptCipher.init(Cipher.ENCRYPT_MODE,key,)@ -> decryptCipher=Cipher.getInstance("DES",)@ -> decryptCipher.init(Cipher.DECRYPT_MODE,key,)@
results[https://github.com/codefireX/platform_libcore/blob/8d7d7380feb10e1d5f84536eea757ff87c283a56/luni/src/test/java/libcore/javax/crypto/CipherTest.java][testOutputPKCS1Padding] = -> encryptCipher=Cipher.getInstance("RSA/ECB/PKCS1Padding",)@ -> encryptCipher.init(Cipher.ENCRYPT_MODE,encryptKey,)@ -> cipherText=encryptCipher.doFinal(ORIGINAL_PLAIN_TEXT,)@ -> decryptCipher=Cipher.getInstance("RSA/ECB/NoPadding",)@ -> decryptCipher.init(Cipher.DECRYPT_MODE,decryptKey,)@ -> plainText=decryptCipher.doFinal(cipherText,)@ -> assertPadding(encryptKey,expectedBlockType,ORIGINAL_PLAIN_TEXT,plainText,)@
results[https://github.com/TaintDroid/android_platform_libcore/blob/9a2a441ae372167dc122defbdde062076802b490/luni/src/test/java/libcore/javax/crypto/CipherTest.java][testOutputPKCS1Padding] = -> encryptCipher=Cipher.getInstance("RSA/ECB/PKCS1Padding",)@ -> encryptCipher.init(Cipher.ENCRYPT_MODE,encryptKey,)@ -> cipherText=encryptCipher.doFinal(ORIGINAL_PLAIN_TEXT,)@ -> decryptCipher=Cipher.getInstance("RSA/ECB/NoPadding",)@ -> decryptCipher.init(Cipher.DECRYPT_MODE,decryptKey,)@ -> plainText=decryptCipher.doFinal(cipherText,)@ -> assertPadding(encryptKey,expectedBlockType,ORIGINAL_PLAIN_TEXT,plainText,)@
results[https://github.com/Crossbones/android_libcore/blob/3ba656f5d7b3e08c89f13d2035534064c8ef734d/luni/src/test/java/libcore/javax/crypto/CipherTest.java][testOutputPKCS1Padding] = -> encryptCipher=Cipher.getInstance("RSA/ECB/PKCS1Padding",)@ -> encryptCipher.init(Cipher.ENCRYPT_MODE,encryptKey,)@ -> cipherText=encryptCipher.doFinal(ORIGINAL_PLAIN_TEXT,)@ -> decryptCipher=Cipher.getInstance("RSA/ECB/NoPadding",)@ -> decryptCipher.init(Cipher.DECRYPT_MODE,decryptKey,)@ -> plainText=decryptCipher.doFinal(cipherText,)@ -> assertPadding(expectedBlockType,ORIGINAL_PLAIN_TEXT,plainText,)@
