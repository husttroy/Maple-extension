results[https://github.com/mrdon/jforum-cvs/blob/16cb2055a2f6d75f88a78225f6ada348841ef77d/src/net/jforum/dao/generic/PrivateMessageModel.java][getPmText][13] = -> TRY {  -> return rs.getString("privmsgs_text",)@ } CATCH(Exception) {}
results[https://github.com/pjordan/tac-aa/blob/d29b48c4b6d4fbbb6312d69acaa6d4b79cb7f14a/tasim/src/main/java/se/sics/isl/db/sql/SQLDBResult.java][getString][1] = -> TRY { -> return rs.getString(name,)@ } CATCH(Exception) { -> log.log(Level.WARNING,"could not getString "+name,e,)@ }
results[https://github.com/Azrielg13/innovative/blob/584526680c3e8b205d906bd336b5f9ca996529c4/qee/war/WEB-INF/src/com/digitald4/pm/InsuranceType.java][refresh][4] = -> TRY {  -> name=rs.getString("insType",)@ -> hide=rs.getBoolean("hide",)@ } CATCH(Exception) {}
results[https://github.com/bbockelm/DBS/blob/7f09fbda458d91396522fc0dc574acd381a65d1c/Servers/MS/src/ms/cron/Start.java][get][7] = -> TRY {  -> value=rs.getString(key,)@ -> IF { -> return ""@MSUtil.isNull(value,) } } CATCH(Exception) {}
results[https://github.com/l-urence/MobiDoc/blob/b7ecc57d53eec410538bc4b1b987aee52aeee76e/implementierung/PeterHorn/MobiDocServer/src/de/htw/server/db/DbData.java][getIllnessInfo][16] = -> TRY {  -> this.m_resultSet=this.m_statement.executeQuery("select information from disease "+"where id_disease="+illnessId,)@ -> this.m_resultSet.next()@ -> returnValue=this.m_resultSet.getString("information",)@ } CATCH(Exception) {}
results[https://github.com/ClockWorkTeam/ClockWork/blob/981aae8ec5518080b8c981f4c42b7d422d7e4599/Codice/server/src/test/testIntegrazione/AuthenticationManagerTest.java][testRemoveUser][1] = -> rs=connection.select("UserDataSQL","*","username='username'","",)@ -> TRY { -> rs.getString("username",)@ } CATCH(Exception) { -> assertTrue("Utente non eliminato dal database",true,)@ }
results[https://github.com/dpwhite2/csc440-project1/blob/c5ecb0219bd2c0d7afedacfd96b08e3344d65fcc/src/edu/ncsu/csc/csc440/project1/menu/ProfAddHomework.java][findCID][1] = -> TRY {  -> rs=stmt.executeQuery()@ -> rs.next()@ -> cid=rs.getString("cid",)@ } CATCH(Exception) {}
results[https://github.com/passacaglia/LearnJava/blob/5a37891d34a4254e2a1bc91e533a73a2752e26c3/MyTinyProjects/Contacts/src/com/az/javabean/DBAccess.java][getEmail][12] = -> TRY { -> IF { -> value=rs.getString("email",)@null!=rs } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/dfleischhacker/goldminer/blob/b447aa93a3582f3e980fda232113e548c0a7e25c/src/main/java/de/uni_mannheim/informatik/dws/goldminer/database/TerminologyExtractor.java][getClassURI][4] = -> TRY {  -> results=m_database.query(sQuery,)@ -> IF { -> return results.getString("uri",)@results.next() } } CATCH(Exception) {}
results[https://github.com/suvajitgupta/Tasks/blob/e8b1afa8014fb1246ae8c5a831907ff1fd2292ea/persevere/WEB-INF/src/org/persvr/datasource/DatabaseTableDataSource.java][getValueFromRs][1] = -> TRY {  -> rowId=ObjectId.idForObject(DatabaseTableDataSource.this,rs.getString(columnCount+1,),)@ -> initializer=DataSourceHelper.initializeObject(rowId,)@ -> mapResult(initializer,rs,rowId.subObjectId,)@ } CATCH(Exception) {}
results[https://github.com/openlearning/wwald/blob/779d139fa3618f93176acfdbe94b67e8f2b3077b/src/test/java/org/wwald/model/DataFacadeRDBMSImplTest.java][testUpsertKvTableClob_Update][11] = -> TRY {  -> rs=stmt.executeQuery(sql,)@ -> rs.next()@ -> fetchedV=rs.getString("v",)@ -> assertEquals(updatedV,fetchedV,)@ } CATCH(Exception) {}
results[https://github.com/aaronbrown1988/arduino-tof/blob/b465acaf80c307b1403e97da12c2f22f42668599/software/tof/ToF/src/trampoline/DBConnect.java][resultGetString][1] = -> TRY { -> s=rs_.getString(recordName,)@ } CATCH(Exception) { -> messageHandler_.setError(10,)@ -> messageHandler_.setMoreDetails(e.toString(),)@ }
results[https://github.com/biosemantics/charaparser/blob/ab6fbea2f4dc4c441c6c108fefe372267f4f08cc/src/main/java/edu/arizona/biosemantics/semanticmarkup/markupelement/description/ling/learn/lib/OTOLearner.java][populateCurationList][1] = -> TRY {  -> rs=stmt.executeQuery("select category from "+this.glossaryTable+" where term ='"+word+"'",)@ -> IF { -> cat=rs.getString("category",)@rs.next() } } CATCH(Exception) {}
results[https://github.com/ClockWorkTeam/ClockWork/blob/2f7b71adc9f768c2a2f98d90b3b13ab6c30fe786/Codice/server/src/server/usermanager/UserManagerTest.java][testSetPassword][2] = -> TRY {  -> rs=connection.select("UserDataSQL","*","","",)@ -> assertTrue("Password non modificata",rs.getString("password",).equals("newPassword",),)@ } CATCH(Exception) {}
results[https://github.com/abc-50/waterlooeventfinder/blob/acb3a7893bbedd6bb47aea5e617f55bb9af1715d/waterlooeventfinder2/src/com/waterlooeventfinder2/server/utils.java][RStoCategory][1] = -> TRY { -> catId=rs.getInt("categoryId",)@ -> catName=rs.getString("categoryName",)@ -> c=new Category(catId,catName,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/porcelli/OpenSpotLight/blob/a7d223f88651e277d675b2e863d7ad57b2a6d5f5/osl-federation/loader/osl-federation-database-loader/src/main/java/org/openspotlight/federation/finder/db/handler/SqlServerFunctionFilterNameHandler.java][shouldIncludeName][4] = -> TRY {  -> isFunction=resultSet.getString("PROCEDURE_NAME",).endsWith(";0",)@ -> IF { -> return true@isFunction } } CATCH(Exception) {}
results[https://github.com/abc-50/waterlooeventfinder/blob/acb3a7893bbedd6bb47aea5e617f55bb9af1715d/waterlooeventfinder2/src/com/waterlooeventfinder2/server/utils.java][RStoTime][1] = -> TRY { -> timeId=rs.getInt("timeId",)@ -> timeDisplay=rs.getString("timeDisplayName",)@ -> t=new Time(timeId,timeDisplay,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/abc-50/waterlooeventfinder/blob/acb3a7893bbedd6bb47aea5e617f55bb9af1715d/waterlooeventfinder2/src/com/waterlooeventfinder2/server/utils.java][RStoTypeUser][1] = -> TRY { -> typeId=rs.getInt("userTypeId",)@ -> userType=rs.getString("userType",)@ -> c=new TypeUser(typeId,userType,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/ppretki/lastentarvike/blob/8aa9207f011ecf18f63475b3f681c6c89dd02f83/online.shop.datamodel/src/test/java/pl/com/itsense/ecommerce/datamodel/impl/EntityTest.java][testH2ConnectionManagement][11] = -> TRY {  -> rs=stat.executeQuery("select * from test",)@ -> LOOP { -> System.out.println(rs.getString("name",),)@rs.next() } } CATCH(Exception) {}
results[https://github.com/angusmacdonald/h2o/blob/7763bd04c5ea5e21f6e794c198fd802ac04e43e4/src/test/org/h2/samples/SecurePassword.java][main][1] = -> TRY {  -> rs=prep.executeQuery()@ -> LOOP { -> System.out.println(rs.getString("name",),)@rs.next() } } CATCH(Exception) {}
results[https://github.com/ClockWorkTeam/ClockWork/blob/981aae8ec5518080b8c981f4c42b7d422d7e4599/Codice/server/src/test/testIntegrazione/AuthenticationManagerTest.java][testLogout][1] = -> rs=connection.select("UserDataSQL","*","username='username'","",)@ -> TRY { -> assertTrue("IP non modificata nel riferimento presente nella base di dati",rs.getString("IP",).equals("0",),)@ } CATCH(Exception) { -> assertTrue("user mancante",false,)@ }
results[https://github.com/cbredlow/projectAwesome/blob/be676e690a51a853ec92dcfd90dc5b8cea95addd/ProjectAwesome/src/projectawesome/LoginHandler.java][handleLogin][1] = -> TRY { -> rs=ps.executeQuery()@ -> rs.first()@ -> return password.equals(rs.getString("PasswordHash",),)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/24ba1ff867c71e227645dcd9484c43117532a1d2/me/Guga/Guga_SERVER_MOD/Extensions/Residences/ResidenceHandler.java][getResidenceOwner][7] = -> TRY { -> result=stat.executeQuery()@ -> IF { -> return result.getString("username",)@result.next() } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/NUBIC/ctms-commons-mirror/blob/4c60c9238d5a7ec8abdfccacc72abfd7922872f2/core/src/test/java/gov/nih/nci/cabig/ctms/tools/hibernate/CodedEnumTypeTest.java][testNullSafeGetWhenNull][2] = -> TRY {  -> expect(rs.getString("sample",),).andReturn(null,)@ -> assertNull(type.nullSafeGet(rs, new String[],null,),)@ } CATCH(Exception) {}
results[https://github.com/NUBIC/bering/blob/886bb79884f0af6bf62ff982ce19a84728b03476/core/src/test/java/edu/northwestern/bioinformatics/bering/DatabaseAdapterTest.java][testExecute][7] = -> TRY {  -> rs=stmt.executeQuery("SELECT title FROM "+TABLE_NAME,)@ -> LOOP { -> assertEquals("New Title",rs.getString("title",),)@rs.next() } } CATCH(Exception) {}
results[https://github.com/Hidendra/LWC/blob/2b6653b024968174a8d1149a35a0ed9f71ae39fd/src/com/griefcraft/sql/MemDB.java][getLockPassword][2] = -> TRY { -> set=statement.executeQuery()@ -> LOOP { -> password=set.getString("password",)@set.next() } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/tacitknowledge/autopatch-maven-plugin/blob/de3e0ef3dcf4019e12526f5baa4ad8c234d6a011/migrate/src/inttest/com/tacitknowledge/util/migration/MigrationUnlockTest.java][verifyPatchTableNotLocked][5] = -> TRY {  -> rs=stmt.executeQuery("SELECT patch_in_progress FROM patches",)@ -> rs.next()@ -> assertEquals("F",rs.getString("patch_in_progress",),)@ -> SqlUtil.close(conn,stmt,rs,)@ } CATCH(Exception) {}
results[https://github.com/biosemantics/charaparser/blob/19a8c8614f04ae872554a9206e8623412d57a57b/charaparser/src/semanticMarkup/io/input/lib/db/PerlDBVolumeReader.java][read][1] = -> TRY {  -> resultSet=statement.executeQuery("select source from "+this.databasePrefix+"_sentence",)@ -> LOOP { -> source=resultSet.getString("source",)@resultSet.next() -> sourceIds=source.split(".txt-",)@ } } CATCH(Exception) {}
results[https://github.com/leogato/novedades/blob/9e2a079d74dbbcec3a79be0cafd63696236af696/src/util/HoraServer.java][getFechaHora][2] = -> TRY { -> re1=conexion.st.executeQuery(sql,)@ -> LOOP { -> fx=re1.getString("Hora_Fecha",)@re1.next() } } CATCH(Exception) { -> System.out.print(e,)@ }
results[https://github.com/VirginiaFIRST/frc2013score/blob/95d747ef9666a24b752e86c59d1fc65d8659df05/src/FRC_Score_Sys/SqlDB.java][FetchOption][1] = -> TRY { -> rs=s.executeQuery()@ -> LOOP { -> ret=rs.getString("VAL",)@rs.next() } } CATCH(Exception) { -> Except.ExceptionHandler("FetchOption",e,false,false,)@ }
results[https://github.com/kjgarwin/RPCS-Dispatcher/blob/a162da47ca67cc22982150a0d727e66438d1bd57/src/cmu/edu/pinquu/events/sentiment/SentimentCommandHandler.java][ValidateSession][2] = -> TRY { -> rs=s.executeQuery(query,)@ -> IF { -> sK=rs.getString("session_key",)@rs.first() } } CATCH(Exception) { -> Dispatcher.LogException(ex,)@ }
results[https://github.com/exoplatform/jcr/blob/a94ee84bc6a8ab619dbd9725bad8ce27d8021c68/exo.jcr.component.core/src/test/java/org/exoplatform/services/jcr/impl/storage/jdbc/JDBCConnectionTestBase.java][testRenameNode][6] = -> TRY {  -> rs=connect.createStatement().executeQuery("select * from "+"JCR_"+tableType+"ITEM"+" where N_ORDER_NUM=8",)@ -> rs.next()@ -> assertEquals("[http://www.jcp.org/jcr/1.0]nodetypes",rs.getString("NAME",),)@ } CATCH(Exception) {}
results[https://github.com/mrdon/jforum-cvs/blob/533d46b0a22c6abe2d18ab6086fe66bde115b0ac/src/net/jforum/drivers/mysql/UserModel.java][getUsernameByEmail][6] = -> TRY {  -> rs=p.executeQuery()@ -> IF { -> username=rs.getString("username",)@rs.next() } -> rs.close()@ } CATCH(Exception) {}
results[https://github.com/ReadyTalk/OliVE/blob/0490fa5f416d3e2cdb9e976d2edb787cb4d4b1bc/src/com/readytalk/olive/logic/OliveLogic.java][getName][3] = -> TRY { -> r=st.executeQuery(s,)@ -> IF { -> name=r.getString("Name",)@r.first() } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/codefollower/Lealone/blob/748d535f0c30b29e62e6a20ae87c106a5309509c/lealone-regular/src/main/java/com/codefollower/lealone/server/pg/PgServerThread.java][sendDataRow][8] = -> TRY {  -> columns=rs.getMetaData().getColumnCount()@ -> LOOP { -> values[i]=rs.getString(i+1,)@i<columns } } CATCH(Exception) {}
results[https://github.com/lenik/usnap/blob/04501e3a6914b09f53d211e553952f4a1aca5827/learning/2003/java_1/net/CruiseLine/CreditCardFinder.java][addCreditCardNumber][1] = -> TRY {  -> ccResults=statement1.executeQuery(getCCString,)@ -> LOOP { -> ccNum=ccResults.getString("CreditCardNumber",)@ccResults.next() } -> cust.setCreditCardNumber(ccNum,)@ } CATCH(Exception) {}
results[https://github.com/Hidendra/LWC/blob/22716a7ef79b63073a7bacb772cc760bf6228bea/src/main/com/griefcraft/sql/MemDB.java][getLockPassword][1] = -> TRY { -> set=statement.executeQuery()@ -> LOOP { -> password=set.getString("password",)@set.next() } } CATCH(Exception) { -> printException(e,)@ }
results[https://github.com/NCIP/ctms-commons/blob/01efad65b773084e89075ddd66fdd52e44c54853/core/src/test/java/gov/nih/nci/cabig/ctms/tools/hibernate/CodedEnumTypeTest.java][testNullSafeGetWhenValidCode][2] = -> TRY {  -> expect(rs.getString("sample",),).andReturn("A",)@ -> assertSame(SampleCodedEnum.AIRSHIP,type.nullSafeGet(rs, new String[],null,),)@ } CATCH(Exception) {}
results[https://github.com/sjsu-cmpe/vyuudha/blob/35005ef7bf2dc53abd8765a597982565f88280d3/src/main/java/com/dds/plugin/storage/mysqldb/MySQLDB.java][get][1] = -> TRY { -> resultSet=statement.executeQuery("select "+database+"."+table+".VALUE from "+database+"."+table+" where "+database+"."+table+".KEY = \""+key+"\"",)@ -> resultSet.next()@ -> return resultSet.getString("value",)@ } CATCH(Exception) { -> logger.error("Exception : "+e.getMessage(),)@ }
results[https://github.com/markokr/pgjdbc-test/blob/e8a03e7a475acb2f840022ce8063f0114d026110/org/postgresql/test/jdbc2/DatabaseMetaDataTest.java][testSchemas][3] = -> TRY {  -> rs=dbmd.getSchemas()@ -> LOOP { -> schema=rs.getString("TABLE_SCHEM",)@rs.next() } -> rs.close()@ } CATCH(Exception) {}
results[https://github.com/kaiquan/ReUnite/blob/4b8e06abc8eeda6124b731d4b6760709284d934f/src/Model/Meal.java][CREATE_MEAL][3] = -> TRY { -> rs=DB.readRequest(sqlQuery,)@ -> LOOP { -> MealID=rs.getString("mealID",)@rs.next() } } CATCH(Exception) { -> System.out.println("Failed to retrieve ID...",)@ }
results[https://github.com/afonso-praca/BugTrackingSystem/blob/3826f58648aa04f634c792151e4a1dd6d8cd997a/src/java/br/uniriotec/tracker/dao/DAOComponent.java][getOperator][1] = -> TRY { -> rs=st.executeQuery(sqlQuery,)@ -> IF { -> return rs.getString("operadorEmail",)@rs.next() } } CATCH(Exception) { -> System.err.println(e,)@ }
results[https://github.com/jdmr/mateo/blob/04651fd779fb3990afd5fd69f7e18447f584e2d1/src/main/java/mx/edu/um/mateo/inscripciones/model/ccobro/ccp/Metodos.java][getAutorizacionID][3] = -> TRY {  -> rst=stmt.executeQuery(strComando,)@ -> IF { -> strAutorizacionId=rst.getString("ID_AUTORIZACION",)@rst.next() } -> rst.close()@ } CATCH(Exception) {}
results[https://github.com/liquibase/BACKUP_FROM_SVN/blob/77d20c9fc70766b54829addbf9070d10f116a720/liquibase-integration-tests/src/test/java/liquibase/dbtest/oracle/OracleIntegrationTest.java][indexCreatedOnCorrectSchema][2] = -> TRY {  -> indexOwner=queryIndex.executeQuery("SELECT owner FROM ALL_INDEXES WHERE index_name = 'IDX_BOOK_ID'",)@ -> assertTrue(indexOwner.next(),)@ -> owner=indexOwner.getString("owner",)@ -> assertEquals("LIQUIBASEB",owner,)@ } CATCH(Exception) {}
results[https://github.com/Hidendra/LWC/blob/22716a7ef79b63073a7bacb772cc760bf6228bea/src/main/com/griefcraft/sql/MemDB.java][getModeData][1] = -> TRY { -> set=statement.executeQuery()@ -> IF { -> ret=set.getString("data",)@set.next() } } CATCH(Exception) { -> printException(e,)@ }
results[https://github.com/kaiquan/ReUnite/blob/111350705f6eb628c0079f64ab92ad0c03cd0b6c/src/Model/Membership/Guest.java][GET_RESPONSE][1] = -> TRY { -> rs=DB.readRequest(dbQuery,)@ -> LOOP { -> response=rs.getString("response",)@rs.next() } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/tacitknowledge/autopatch/blob/2a9496dc2674a8f47a689fedda50114b288e0239/src/integration-test/java/com/tacitknowledge/util/migration/MigrationUnlockTest.java][verifyPatchTableNotLocked][1] = -> TRY {  -> rs=stmt.executeQuery()@ -> rs.next()@ -> assertEquals("F",rs.getString("patch_in_progress",),)@ -> SqlUtil.close(conn,stmt,rs,)@ } CATCH(Exception) {}
results[https://github.com/pbl2108/mobile-computing/blob/e6b6b29c138a4ff170e0de9ae09242f56dbfa5b1/MySQLAccess.java][getAllLibsAndPermissions][1] = -> TRY { -> LOOP { -> val=resultSet.getString(field,)@resultSet.next() -> a=val.split("\", \"",)@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/Judahh/RTPhone/blob/5120f65f1a52f3622cd91180fc7c800d094d36ca/RTPhoneServer/src/rmiserver/RMIServer.java][getUserAddress][1] = -> TRY { -> resultSet=statement.executeQuery(query,)@ -> LOOP { -> return resultSet.getString("logged",)@resultSet.next() } } CATCH(Exception) { -> System.out.println(e,)@ }
results[https://github.com/rik-coenders/2io71/blob/0eeb32758e1bcf849913f15cfd19a0768d611324/2io71.nl/src/main/java/nl/dbl2io71/actions/CreateDocumentListener.java][execute][1] = -> TRY {  -> rs00=st00.executeQuery()@ -> rs00.next()@ -> bpName=rs00.getString("name",)@ -> rs00.close()@ -> exec.setVariable("bpName",bpName,)@ } CATCH(Exception) {}
results[https://github.com/anagri/SmartPool/blob/a743127440244156c4967264466dd0554ce97365/test/smartpool/data/typeHandler/BuddyTypeHandlerTest.java][shouldGetBuddyObjectFromBuddyUserName][1] = -> TRY {  -> resultSet=mock(ResultSet.class,)@ -> when(resultSet.getString("buddyUserName",),).thenReturn("buddy",)@ -> buddyTypeHandler.getResult(resultSet,"buddyUserName",)@ } CATCH(Exception) {}
results[https://github.com/linzhp/Propheta/blob/d670e0e8e7b40d547ccc4a5c0495168a937ebda5/src/data/database/ExportData.java][createSchema][1] = -> TRY {  -> rs=mainDB.statement.executeQuery("select sql from sqlite_master "+"where name in ('nodebasicinfo','cocomoestimation', 'quickEstimation')",)@ -> LOOP { -> toDB.statement.executeUpdate(rs.getString("sql",),)@rs.next() } } CATCH(Exception) {}
results[https://github.com/openlearning/wwald/blob/779d139fa3618f93176acfdbe94b67e8f2b3077b/src/test/java/org/wwald/model/DataFacadeRDBMSImplTest.java][testUpdateUser_Password][1] = -> TRY {  -> rs=stmt.executeQuery(sql,)@ -> rs.next()@ -> updatedPassword=rs.getString("password",)@ -> assertEquals(true,passwordEncryptor.checkPassword(newPassword,updatedPassword,),)@ } CATCH(Exception) {}
results[https://github.com/apache/ambari/blob/b97572927705f9aa686f59b43f099673c6224e05/ambari-server/src/test/java/org/apache/ambari/server/orm/DBAccessorImplTest.java][testCreateTable][2] = -> TRY {  -> resultSet=statement.executeQuery(String.format("select * from %s",tableName,),)@ -> LOOP { -> assertEquals(resultSet.getString("name",),"hello",)@resultSet.next() } } CATCH(Exception) {}
results[https://github.com/CP317-2013/LorisPlus/blob/1fb0ba1057bc69cf14243b615373e819d228f78b/Implementation/Raj&Theo/workspace/EditStudent/src/loris/shared/course/CourseImplementation.java][prepareCourseAntireqs][14] = -> TRY { -> LOOP { -> courseAntiReqs.add(r.getString(COURSE_COURSE_CODE,),)@r.next() } -> r.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/ameenudeen/FileHaven/blob/51b8790620d95f5b93fe13d143484a54149e6897/FileHaven_2.4/src/database/ChatDBAO.java][getTimestamp][1] = -> TRY { -> rs=prepStmt.executeQuery()@ -> IF { -> date=rs.getString("NOW()",)@rs.next() } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/daniLima/grupo1_ne3a_2012_2/blob/f19fc119567fc8eb5252546bdfb6a143b6c4b385/SistemaNatacao/src/br/edu/utfpr/cm/tsi/projetointegrador/gui/Produto/JDialogVisualizarProduto.java][busca][1] = -> TRY { -> rs=pst.executeQuery()@ -> IF { -> CodigoText.setText(rs.getString("codigo",),)@rs.next() } } CATCH(Exception) { -> JOptionPane.showMessageDialog(null,"Erro na busca do banco",)@ }
results[https://github.com/Rainist/MontazuFaceMaker/blob/1e049e6107b656c78067b5826b961066d9b88f65/src/Rainist/Montazu/DB/MontazuMysql.java][GetCustomComment][4] = -> TRY { -> rs=cs.executeQuery()@ -> LOOP { -> Comment=rs.getString("COMMENT",)@rs.next() } } CATCH(Exception) { -> System.err.println(ex.getMessage(),)@ }
results[https://github.com/danielabutano/biosources-test-subtree/blob/50cc9749650f13966519d00a08df3a8a12f8d794/ensembl/ensembl-snp-db/main/src/org/intermine/bio/dataconversion/EnsemblSnpDbConverter.java][processGenotypes][2] = -> TRY {  -> res=queryStrains(connection,)@ -> LOOP { -> strainId=res.getInt("sample_id",)@res.next() -> strainName=res.getString("name",)@res.next() -> strain.setAttribute("name",strainName,)@ } } CATCH(Exception) {}
results[https://github.com/Hidendra/LWC/blob/18f2fe44bd85e9c0b501e57e4df4f76c12bdd050/src/com/griefcraft/sql/MemoryDatabase.java][getSessionUsers][5] = -> TRY { -> set=statement.executeQuery()@ -> LOOP { -> player=set.getString("player",)@set.next() -> sessionUsers.add(player,)@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/hbcit2010software/hbcitsports/blob/6fa0a22c56945d9e8f9b738cb0c86e7c8e9b1f81/src/cn/edu/hbcit/smms/dao/createprogramdao/SelectPlayerDAO.java][selectDepartmentName][1] = -> TRY { -> rs=ps.executeQuery()@ -> LOOP { -> name=new String(rs.getString("departname",),)@rs.next() } } CATCH(Exception) { -> ee.printStackTrace()@ }
results[https://github.com/jamiewaese/GenomeLunchBox/blob/5c686ada9a0d802d6ce9a103df16756eaf9632b5/src/my/HMM_Model/HMM_ModelUI.java][getQueryGrpValues][2] = -> TRY { -> QuerygrpResultset=connect.getData(query,st,)@ -> LOOP { -> organismName=QuerygrpResultset.getString("organism_name",)@QuerygrpResultset.next() -> GrpValuesList.add(organismName,)@ } } CATCH(Exception) { -> JOptionPane.showMessageDialog(null,ex,)@ }
results[https://github.com/fedora-bigdata/ambari/blob/b97572927705f9aa686f59b43f099673c6224e05/ambari-server/src/test/java/org/apache/ambari/server/orm/DBAccessorImplTest.java][testUpdateTable][4] = -> TRY {  -> resultSet=statement.executeQuery("select name from "+tableName,)@ -> LOOP { -> assertEquals(resultSet.getString("name",),"blah",)@resultSet.next() } -> resultSet.close()@ } CATCH(Exception) {}
results[https://github.com/FreakyPenguin/elexis-hilotec-base/blob/a03ec9ac9020af9ee6cd14b2cf9cc1a46863f035/elexis-importer-praxistar/src/ch/elexis/importer/praxistar/Importer.java][fetchRow][1] = -> TRY {  -> ret=new HashMap<String, String>()@ -> LOOP { -> ret.put(col,StringTool.unNull(res.getString(col,),),)@ } } CATCH(Exception) {}
results[https://github.com/CP317-2013/LorisPlus/blob/bcd01625ecdb6e90bd819a6a278f4dcbbf886b85/Implementation/Raj&Theo/workspace/AddStudent/src/loris/shared/user/student/StudentImplementation.java][prepareSectionDays][10] = -> TRY { -> r=dayStatement.executeQuery(sql,)@ -> IF { -> sectionDays=new Days(dayID,r.getString(DAYS_CODE,),)@r.next() } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/kaiquan/ReUnite/blob/a46f9134d0ea8943fa239b3a9b0a60816202326b/src/Model/Facility.java][CREATE_FACILITY][1] = -> TRY { -> rs=DB.readRequest(sqlQuery,)@ -> LOOP { -> facilityID=rs.getString("facilityID",)@rs.next() -> System.out.println(facilityID,)@ } } CATCH(Exception) { -> System.out.println("Failed to retrieve ID",)@ }
results[https://github.com/jonathancg90/Proyasistencia/blob/2ebded26e8007da4d67337891089a17d344e8ccd/Identificacion/src/Control/Identificacion.java][BtnConsultarActionPerformed][1] = -> TRY { -> rs=Obj_Con.Ejec_Consultas(Consulta,)@ -> LOOP { -> mensaje=mensaje+"\n"+i+") "+rs.getString("hora",)@rs.next() } -> EnviarTexto(mensaje,)@ } CATCH(Exception) { -> System.out.println("Error Boton consultar: "+e,)@ }
results[https://github.com/svn2github/H2-Mirror/blob/215771a28861c5e8a85582dd94b1c1b04e1bd83d/h2/src/test/org/h2/samples/SecurePassword.java][main][5] = -> TRY {  -> rs=prep.executeQuery()@ -> LOOP { -> System.out.println(rs.getString("name",),)@rs.next() } -> rs.close()@ } CATCH(Exception) {}
results[https://github.com/geomatico/dataportal/blob/51fdfdd1b6447e9bde2c47cf65b77342eb222ae0/dataportal/src/test/java/test/dataportal/functional/Services.java][getUserHash][2] = -> TRY {  -> resultSet=st.executeQuery("select * from \"users\" where \"id\"='"+userName+"'",)@ -> IF { -> throw new RuntimeException()@!(resultSet.first()) } -> hash=resultSet.getString("hash",)@!(!(resultSet.first())) -> resultSet.close()@!(!(resultSet.first())) } CATCH(Exception) {}
results[https://github.com/openlearning/wwald/blob/779d139fa3618f93176acfdbe94b67e8f2b3077b/src/test/java/org/wwald/model/DataFacadeRDBMSImplTest.java][testUpdateCourseWiki1][1] = -> TRY {  -> rs=stmt.executeQuery(retreiveCoursesWikiSql,)@ -> LOOP { -> retreivedCoursesWiki=rs.getString("content",)@rs.next() } -> assertNotNull("Could not retreive inserted courses wiki from the database",retreivedCoursesWiki,)@ -> assertEquals(newCoursesWiki,retreivedCoursesWiki,)@ } CATCH(Exception) {}
results[https://github.com/rhusar/HornetQ-oldmigration/blob/2c45545137d57787bbd0db59a58d8c0ae8fcfcfa/tests/src/org/jboss/test/messaging/tools/jmx/Example.java][main][4] = -> TRY {  -> rs=c.createStatement().executeQuery("SELECT SOME_FIELD FROM SOME_TABLE",)@ -> LOOP { -> a=rs.getString("SOME_FIELD",)@rs.next() -> System.out.println(a,)@ } } CATCH(Exception) {}
results[https://github.com/Hidendra/LWC/blob/22716a7ef79b63073a7bacb772cc760bf6228bea/src/main/com/griefcraft/sql/MemDB.java][getActions][3] = -> TRY { -> set=statement.executeQuery()@ -> LOOP { -> action=set.getString("action",)@set.next() -> actions.add(action,)@ } } CATCH(Exception) { -> printException(e,)@ }
results[https://github.com/jonathancg90/Proyasistencia/blob/2f97fbebeef803a9444c5af179268576856df728/Sis_Asistencia/src/Dao/RestauracionDAO.java][getpass][2] = -> TRY { -> rs=s.executeQuery(query,)@ -> LOOP { -> pass=rs.getString("pass",)@rs.next() } -> rs.close()@ } CATCH(Exception) { -> System.out.println("RestauracionDAO getpass: "+e,)@ }
results[https://github.com/thelabtech/staffsite-java/blob/4c9cd2c0f6ca09ce4521712a0bf67ba64e3c7d89/services-src/source/org/alt60m/ministry/servlet/StaffInfo.java][getDistinctFieldValues][1] = -> TRY {  -> query="SELECT distinct "+field+" from "+STAFF_TABLE+" WHERE (removedFromPeopleSoft='N') AND "+field+" is not null order by "+field@ -> distinctFields=stmt1.executeQuery(query,)@ -> count=stmt2.executeQuery("SELECT count(distinct "+field+") from "+STAFF_TABLE+" WHERE (removedFromPeopleSoft='N')",)@ -> LOOP { -> results[cnt]=distinctFields.getString(field,)@distinctFields.next() } -> distinctFields.close()@ } CATCH(Exception) {}
results[https://github.com/kumpelblase2/Dragons-Lair/blob/a587b6adba10cb2c9ac7f1f030cf8c7d1d80ad30/src/de/kumpelblase2/dragonslair/api/ScheduledEvent.java][<init>][1] = -> TRY { -> events=result.getString(TableColumns.Scheduled_Events.EVENT_IDS,)@ -> this.autoStart=result.getBoolean(TableColumns.Scheduled_Events.AUTO_START,)@ -> this.repeat=result.getBoolean(TableColumns.Scheduled_Events.REPEATING,)@ -> this.repeatDelay=result.getInt(TableColumns.Scheduled_Events.REPEATING_DELAY,)@ -> this.startDelay=result.getInt(TableColumns.Scheduled_Events.INIT_DELAY,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/arjan-do/Project/blob/6078ba94d85c64f6ebbbcd8c22c457011a06bb14/src/GUI/DeelnemerWijzigenMCs.java][initValues][2] = -> TRY { -> res=stat.executeQuery()@ -> LOOP { -> betaald=res.getString("Heeft_betaald",)@res.next() -> datum=res.getDate("datum_betaling",)@res.next() } } CATCH(Exception) { -> System.out.println(e,)@ }
results[https://github.com/phenoscape/phenoscape-nlp/blob/9696321ad1dc389cd6bd75645cfbd90f89e15662/parsing-gui/src/fna/db/VolumeMarkupDbAccessor.java][populateCurationList][1] = -> TRY { -> rs=stmt.executeQuery("select category from "+this.glossarytable+" where term ='"+word+"'",)@ -> IF { -> cat=rs.getString("category",)@rs.next() } } CATCH(Exception) { -> LOGGER.error("Couldn't update sentence table in VolumeMarkupDbAccessor:populateCurationList",sqlexe,)@ -> sqlexe.printStackTrace()@ }
results[https://github.com/jmrboosties/Pokemon-MMO/blob/fecc18f0db5943a89d194859c34a143cea9e1c1b/src/com/pokemon/mmo/DBParser.java][test][1] = -> TRY { -> rs=adapter.makeQuery("SELECT * FROM pokemon WHERE id = '1'",)@ -> fill=rs.getString("name",)@ } CATCH(Exception) { -> e.printStackTrace()@ } -> IF { -> System.out.println(fill,)@ }
results[https://github.com/biosemantics/charaparser/blob/ee8a59fb7cd024846d23820c98862c6b7eb8ccf1/src/main/java/edu/arizona/biosemantics/semanticmarkup/markupelement/description/ling/learn/lib/PerlTerminologyLearner.java][readTags][1] = -> TRY { -> resultSet=statement.executeQuery("select tag from "+this.databasePrefix+"_sentence",)@ -> LOOP { -> tag=resultSet.getString("tag",)@resultSet.next() -> tags.add(tag,)@ } } CATCH(Exception) { -> log(LogLevel.ERROR,"problem accessing sentence table",e,)@ }
results[https://github.com/wensby/ai-project/blob/322823b3cfaebcbd546d291eacd65fbf7eafd7f9/src/toDB.java][tags2DB][1] = -> TRY {  -> result=stmt.executeQuery(query,)@ -> LOOP { -> userID=result.getInt("userID",)@result.next() -> tagIDString=result.getString("tagIDstring",)@result.next() -> tagInts=Parser.semiColon_Integer_parser(tagIDString,)@ } } CATCH(Exception) {}
results[https://github.com/openlearning/wwald/blob/779d139fa3618f93176acfdbe94b67e8f2b3077b/src/test/java/org/wwald/model/DataFacadeRDBMSImplTest.java][testAddCourseEnrollment][1] = -> TRY {  -> rs=stmt.executeQuery(sql,)@ -> rs.next()@ -> retrievedUserid=rs.getInt("userid",)@ -> courseId=rs.getString("course_id",)@ -> assertEquals(course.getId(),courseId,)@ } CATCH(Exception) {}
results[https://github.com/KLIM8D/ucn-2semproject-dm79-group2/blob/69371d59f9e78f91b3df7c7ce0d12b1fe5622643/src/db/DBCity.java][buildCity][1] = -> TRY {  -> IF { -> return null@row==null } -> cityId=row.getInt("cityId",)@!(row==null) -> zipCode=row.getInt("zipCode",)@!(row==null) -> cityName=row.getString("cityName",)@!(row==null) -> return new City(cityId,zipCode,cityName,)@!(row==null) } CATCH(Exception) {}
results[https://github.com/ttron/lab/blob/d4f2497e072f3599081f80138df2b66880e6425a/Office/src/cn/ttron/office/UCanAccessDB.java][main][3] = -> TRY { -> resu=stmt.executeQuery("select * from CC_TRACK",)@ -> LOOP { -> System.out.println(++i+"#"+resu.getString("name",),)@resu.next() } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/majoely/dragon/blob/417bc97584d92bf53f3b279a73630607cef196c6/PDC dragon game/src/gui/Container.java][switch0][3] = -> TRY { -> intro=stmt.executeQuery("select INTRO from PDC.INTRO where id = 0",)@ -> intro.next()@ -> layout=new Info(intro.getString("intro",).replaceAll("\\\\n","\n",),"Next",)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/kennethzq/newarch/blob/39b7564305debdab412e7dd4410e76d2d106d82e/kaas/kaas-service/src/test/java/com/thinkingtop/kaas/services/util/BeforeTest.java][testH2][1] = -> TRY {  -> rs=stmt.executeQuery("SELECT * FROM TEST_MEM",)@ -> LOOP { -> System.out.println(rs.getInt("ID",)+","+rs.getString("NAME",),)@rs.next() } } CATCH(Exception) {}
results[https://github.com/biosemantics/charaparser/blob/d4463d423bfbf2d446db433704a841a693a516dd/charaparser/src/semanticMarkup/ling/learn/lib/PerlTerminologyLearner.java][readModifiers][2] = -> TRY { -> resultSet=statement.executeQuery("select modifier from "+this.databasePrefix+"_sentence",)@ -> LOOP { -> modifier=resultSet.getString("modifier",)@resultSet.next() -> modifiers.add(modifier,)@ } } CATCH(Exception) { -> log(LogLevel.ERROR,"sentence table not found",)@ }
results[https://github.com/HSR01/KBS_JAVA/blob/cbc7dadfea8602a584a717608e780f7187792f95/java_backend/src/Database/DbConnect.java][getLocatie][2] = -> TRY { -> rs=st.executeQuery(query,)@ -> LOOP { -> returnval[i]=rs.getString("Plaatsnaam",)@rs.next() } } CATCH(Exception) { -> System.out.println("error : "+e.getClass(),)@ }
results[https://github.com/liumingli/comicdiy/blob/7a651e6f0e9b52e92b8cb80253012771d0631ee3/src/com/ybcx/comic/facade/CallBackServlet.java][connect][1] = -> TRY { -> rs=stmt.executeQuery(sql,)@ -> LOOP { -> accessToken=rs.getString("u_accessToken",)@rs.next()==true -> log.info("accessToken "+accessToken,)@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/jdmr/mateo/blob/04651fd779fb3990afd5fd69f7e18447f584e2d1/src/main/java/mx/edu/um/mateo/inscripciones/model/ccobro/ccp/Metodos.java][getFondos][1] = -> TRY {  -> vctFondos=new Vector()@ -> rset=pstmt.executeQuery()@ -> LOOP { -> vctFondos.add(rset.getString("ID_Auxiliar",)+"@"+rset.getString("Nombre",),)@rset.next() } -> rset.close()@ } CATCH(Exception) {}
results[https://github.com/HSR01/KBS_JAVA/blob/4cb0145323f76e117811c8cc217194ee48184fec/java_backend/src/java_backend/DbConnect.java][getData][3] = -> TRY { -> rs=st.executeQuery(query,)@ -> LOOP { -> content=rs.getString(collum,)@rs.next() -> System.out.println(content,)@ } } CATCH(Exception) { -> System.out.println("Query lees ERROR: "+ea,)@ }
results[https://github.com/rogerbraun/Slang-DBC/blob/5aeb94d7125eacabee5611dbb2cfd53e6ed5c1d2/src/de/uni_tuebingen/wsi/ct/slang2/dbc/server/DBC_Server.java][getLanguages][2] = -> TRY {  -> languages=new Vector()@ -> res=stmt.executeQuery("SELECT count(*) AS c, language "+"FROM words GROUP BY language ORDER BY c DESC",)@ -> LOOP { -> languages.add(res.getString("language",),)@res.next() } } CATCH(Exception) {}
results[https://github.com/FreakyPenguin/elexis-hilotec-base/blob/a03ec9ac9020af9ee6cd14b2cf9cc1a46863f035/elexis-arzttarife-schweiz/src/ch/elexis/data/TarmedImporter.java][put][1] = -> TRY {  -> LOOP { -> val=r.getString(v,)@ -> IF { -> h.put(v,val,)@val!=null } } } CATCH(Exception) {}
results[https://github.com/westeras/vcf-analyzer/blob/944da557f4eed574f71d710412074e2d5a1428b2/src/java/FilterApplier.java][filterOnEntryData][1] = -> TRY {  -> LOOP { -> IF { -> testValue=entryData.getString(param.tableName,)@ -> pass=comparisonHandler.testFilterComparison(type,param,testValue,)@ } } } CATCH(Exception) {}
results[https://github.com/ramesesinc/incubation/blob/92776aa920095c337b27bb3230e6c28c3f4fa42c/rameses-jdbc16/test/test/TestSql.java][testHello][1] = -> TRY {  -> rs=s.executeQuery("select * from sariaya_etracs.account limit 5",)@ -> LOOP { -> System.out.println(rs.getString("accttitle",),)@rs.next() } -> rs.close()@ } CATCH(Exception) {}
results[https://github.com/dfleischhacker/goldminer/blob/035bc4605a28df74a7d09fcfbc59019e5e7633b1/GoldMiner/src/miner/ontology/ResultSetup.java][readClasses][2] = -> TRY {  -> results=m_database.query(sQuery,)@ -> LOOP { -> id=results.getInt("id",)@results.next() -> uri=results.getString("uri",)@results.next() -> classes.put(id,uri,)@ } } CATCH(Exception) {}
results[https://github.com/irstv/H2GIS/blob/3a2fb2e34bcb06728c4d9921bf83d2e3bb2fd845/h2spatial/src/test/java/org/h2gis/h2spatial/OGCConformance3Test.java][T2][2] = -> TRY {  -> rs=st.executeQuery("SELECT f_geometry_column FROM geometry_columns WHERE f_table_name = 'STREAMS';",)@ -> assertTrue(rs.next(),)@ -> assertEquals("centerline",rs.getString("f_geometry_column",).toLowerCase(),)@ } CATCH(Exception) {}
results[https://github.com/anagri/SmartPool/blob/3453329e1bd5b0e0221c7d7c8e7fe84c7f8df2ee/test/smartpool/data/typeHandler/LocalTimeTypeHandlerTest.java][testGetResult][1] = -> TRY {  -> when(rs.getString("column",),).thenReturn("10:50",)@ -> Assert.assertEquals(new LocalTime(10,50,),localTimeTypeHandler.getResult(rs,"column",),)@ } CATCH(Exception) {}
results[https://github.com/rptiwari/mwdb/blob/d5a2504d9f45325175bca6f12de2341d29f0e2b4/Phase2/src/edu/mwdb/project/DblpData.java][getForwardAndInversePaperKeywIndex][1] = -> TRY {  -> allPapersRs=stmt.executeQuery("SELECT paperid,abstract FROM papers",)@ -> LOOP { -> paperId=allPapersRs.getInt("paperId",)@allPapersRs.next() -> abst=allPapersRs.getString("abstract",)@allPapersRs.next() -> wordsInAbstract=abst.split("[ .,?!()]+",)@ } } CATCH(Exception) {}
results[https://github.com/USGS-CIDA/nude/blob/d9d92a525a94802e20b5f2fd955cf171b810241a/src/main/java/gov/usgs/cida/nude/out/TableXmlReader.java][hasValue][2] = -> TRY { -> IF { -> value=rset.getString(column,)@!("".equals(column,)) } -> IF { -> return false@value==null||value.equals("",) } } CATCH(Exception) { -> log.error("hasValue(rset,"+column+"): "+e,)@ }
results[https://github.com/dpwhite2/csc440-project1/blob/acdea275ee9decf1ba4088c1ef03b0bafb4b28fb/src/edu/ncsu/csc/csc440/project1/objs/Attempt.java][<init>][1] = -> TRY {  -> this.attid=rs.getInt("attid",)@ -> this.eid=rs.getInt("eid",)@ -> this.sid=rs.getString("sid",)@ -> this.attnum=rs.getInt("attnum",)@ -> this.submitTime=rs.getDate("submittime",)@ -> this.points=rs.getInt("points",)@ } CATCH(Exception) {}
