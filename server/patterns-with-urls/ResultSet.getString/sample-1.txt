results[https://github.com/timabell/sqlHawk/blob/6da3c55803e7a7186a9add86e89b79f85a3fd22a/src/net/sourceforge/schemaspy/db/read/DbReader.java][getOptionalString][9] = -> TRY { -> return rs.getString(columnName,)@ }
results[https://github.com/ClockWorkTeam/ClockWork/blob/262f68b4c3f240d0ff2004797ad15c1f9950f66e/Codice/server/src/server/dao/UserDaoSQL.java][checkPassword][1] = -> rs=connection.select("UserDataSQL","*","username='"+username+"' AND (password='"+password+"')","",)@ -> TRY { -> rs.getString("username",)@ }
results[https://github.com/miserani/paodequeijo/blob/23aaf757bd969f511c3caed05b07259e0b765f63/src/persistencia/ConsultaHistoricoMySQL.java][buscarQuantidade][1] = -> TRY { -> rs=stmt.executeQuery()@ -> qtd=rs.getString("quantidade",)@ }
results[https://github.com/NUBIC/psc-mirror/blob/b9462214ebf302f142f8399709711514ead1d3ec/src/edu/northwestern/bioinformatics/studycalendar/utils/hibernate/StringCodedEnumType.java][getKeyObject][168] = -> TRY {  -> return rs.getString(colname,)@ } CATCH(SQLException) {}
results[https://github.com/Markush2010/CloudRAID/blob/353d991c4e34776382f99bc4eb2eb9e3fa790c79/src/persistance/de/dhbw/mannheim/cloudraid/persistence/HSQLDatabaseConnector.java][getName][6] = -> TRY { -> rs=findNameStatement.getResultSet()@ -> rs.next()@ -> return rs.getString("path_name",)@ }
results[https://github.com/jk-5/nexus-java/blob/32ba4a52ba0e84b60e99dd9565316cd986c4ee56/NexusServer3.0/src/com/nexus/playlist/Playlist.java][GetContent][1] = -> TRY { -> rs=stmt.executeQuery("SELECT * FROM playlists WHERE ID='"+this.ID+"'",)@ -> rs.first()@ -> return rs.getString("Content",)@ }
results[https://github.com/mrdon/jforum-plugins/blob/16cb2055a2f6d75f88a78225f6ada348841ef77d/src/net/jforum/dao/generic/PrivateMessageModel.java][getPmText][13] = -> TRY {  -> return rs.getString("privmsgs_text",)@ } CATCH(Exception) {}
results[https://github.com/cyounes/jmbs/blob/aaddb105424dc90a45b934dc50fe2450daa248f8/Server/src/main/java/jmbs/server/UserDAO.java][checkMail][4] = -> res=executeQuery()@ -> TRY { -> res.getString("email",)@ -> close(res,)@ }
results[https://github.com/teachus/teachus/blob/b491ed9927cf6dfa4f5fb2c3a15c713d011c26c6/teachus-backend-hibernate/src/main/java/dk/teachus/backend/dao/hibernate/PasswordUserType.java][nullSafeGet][5] = -> TRY {  -> return rs.getString(names[0],)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/Sniperlocked/projstats/blob/04322257b71dd6f6032f09c20ff8b7a1a6be159c/cs108finalproject/src/entities/User.java][getUser][1] = -> rs=Database.getUser(userName,)@ -> TRY { -> rs.next()@ -> passwordInDatabase=rs.getString("password",)@ }
results[https://github.com/pcfascinated/PullPit/blob/f3685acd4710adb922da8cf5f428424323bad3e5/PullPit/src/kea/kme/pullpit/server/persistence/UserHandler.java][getUserName][2] = -> TRY { -> rs=ps.executeQuery()@ -> rs.next()@ -> return rs.getString("userName",)@ }
results[https://github.com/NCIP/catissue-advanced-query/blob/51c2195fafb5fdf2e526e189c84219f3fcc87994/software/AdvancedQuery/src/main/java/edu/wustl/query/querysuite/metadata/InsertPaths.java][ifIntermediatePathExists][1] = -> TRY {  -> interPath=resultSet.getString("INTERMEDIATE_PATH",)@ } CATCH(SQLException,IOException,DAOException) {}
results[https://github.com/davidmartinho/fenix-framework/blob/524d3aa3976aceaed1ce45551b7a2fe0a05b92bd/fenix-framework-core/src/main/java/pt/ist/fenixframework/pstm/ResultSetReader.java][readPartial][5] = -> TRY {  -> partialAsString=rs.getString(columnName,)@ -> return (partialAsString==null)?null:PartialExternalization.partialFromString(partialAsString,)@ } CATCH(SQLException) {}
results[https://github.com/tkunicki/ogc-swie/blob/a591c2948822585b2daea1c4eee9b78c9d14272d/src/main/java/gov/usgs/webservices/ibatis/ISODateTimeTypeHandler.java][getResult][3] = -> TRY {  -> dateString=rs.getString(columnName,)@ -> return getISODateTimeFromSQL(dateString,)@ } CATCH(SQLException) {}
results[https://github.com/marleau/cs122b_p3/blob/c73aa7686da77d2bb6bf76eda2e075ac3071cb83/WebContent/WEB-INF/sources/Fabflix/ShoppingCart.java][getMovieTitle][4] = -> TRY { -> rs=statement.executeQuery(query,)@ -> IF { -> return rs.getString("title",)@rs.next() } }
results[https://github.com/NCIP/psc/blob/d6bb48edcb92b188c25befc0c080243a10d1b44d/core/src/test/java/edu/northwestern/bioinformatics/studycalendar/tools/configuration/ConfigurationTest.java][processRow][13] = -> TRY {  -> assertEquals(expected,rs.getString("value",),)@ } CATCH(SQLException) {}
results[https://github.com/NCIP/iso21090/blob/277f2c358586ad9d76a9ac3b007fb63f20f632e9/code/hibernate/src/main/java/gov/nih/nci/iso21090/hibernate/usertype/IiUserType.java][nullSafeGet][1] = -> TRY {  -> extension=resultSet.getString(names[0],)@ -> ii.setExtension(extension,)@ } CATCH(SQLException) {}
results[https://github.com/HGitMaster/geotools-osgi/blob/1a6a436c076bf733c6bd0565a05c8ec6f70c1c2d/modules/plugin/jdbc/jdbc-sqlserver/src/main/java/org/geotools/data/sqlserver/SQLServerDialect.java][decodeGeometryValue][3] = -> TRY {  -> s=rs.getString(column,)@ -> return decodeGeometry(s,factory,)@ } CATCH(IOException,SQLException) {}
results[https://github.com/apache/derby/blob/10df8a5b0daa7be3d1907978d0d0c096570e4bfc/java/engine/org/apache/derby/vti/ForwardingVTI.java][getString][2] = -> TRY {  -> return _wrappedResultSet.getString(mapColumnNumber(i,),)@ } CATCH(SQLException) {}
results[https://github.com/dusken/pegadi/blob/1f3f32e924bba1b62c313cce524a36860fbdd5e2/server/src/main/java/org/pegadi/server/article/ArticleServerImpl.java][mapRow][1] = -> TRY {  -> return userServer.getUserByUsername(rs.getString("refJournalist",),)@ } CATCH(SQLException) {}
results[https://github.com/bcsoft/bc-business-dataconvert/blob/3ad44d7dec8809bc0eb17c4ee7934a1b753d0d9d/src/main/java/cn/bc/business/dataconvert/impl/principal/PrincipalConverter.java][mapRow][2] = -> TRY {  -> return rs.getString("name",).trim()@ } CATCH(SQLException) {}
results[https://github.com/samboneym/gerrit/blob/bc5d36851529f159e9e5cbb838369ea1d19ffe3e/gerrit-server/src/main/java/com/google/gerrit/server/schema/Schema_53.java][asInheritableBoolean][5] = -> TRY {  -> return ("Y".equals(rs.getString(col,),))?Project.InheritableBoolean.TRUE:Project.InheritableBoolean.INHERIT@ } CATCH(SQLException) {}
results[https://github.com/raykroeker/thinkparity/blob/51141f3d71ee3fba7caa0e521e06f4afd35adb16/remote/model/src/main/java/com/thinkparity/server/model/io/sql/contact/ContactSql.java][extractJabberId][1] = -> TRY {  -> return JabberIdBuilder.parseQualifiedUsername(rs.getString("contactUsername",),)@ } CATCH(SQLException) {}
results[https://github.com/rSmart/kuali_rice/blob/1b270300443723a93dde7e8fdcaee4ea258ed9ed/impl/src/main/java/org/kuali/rice/kew/docsearch/SearchableAttributeStringValue.java][setupAttributeValue][2] = -> TRY {  -> this.setSearchableAttributeValue(resultSet.getString(columnName,),)@ } CATCH(SQLException) {}
results[https://github.com/miserani/paodequeijo/blob/7e57fb3d6a56fcd5c451ef35d722e44b311fa935/src/persistencia/ConsultaFormaPagamentoCompraMySQL.java][buscarNomeForma][4] = -> TRY { -> rs=stmt.executeQuery()@ -> LOOP { -> return rs.getString("descricao",)@rs.next() } }
results[https://github.com/victornava/fororo/blob/00174c10c22b8004f303bb80e9774017515bd88a/src/server/db/DBConfig.java][mapConfig][1] = -> TRY {  -> return new Config(set.getString("WELCOME",),)@ } CATCH(SQLException) {}
results[https://github.com/isaacmadan/freezing-octo-bear/blob/17274ca68ce5a54b3e6a44cbf248abcc2ee3e22d/hw6/src/site/AccountManager.java][getSalt][3] = -> TRY { -> rs=stmt.executeQuery("SELECT * FROM users WHERE username='"+username+"'",)@ -> LOOP { -> return rs.getString("salt",)@rs.next() } }
results[https://github.com/INBio/Threat-Modeling-System/blob/a5e6653a6a24379ea1fe9b5eb8ddc1e7ffc89b9b/modeling-core/src/main/java/org/inbio/modeling/core/common/dao/impl/TaxonIndexDAOImpl.java][mapRow][2] = -> TRY {  -> r=new String()@ -> r=rs.getString("taxon_name",)+"~1"@ } CATCH(SQLException) {}
results[https://github.com/derekhiggins/ovirt-engine/blob/26d1b788a8ced3cfa098bbeda989aa77fcaa0163/backend/manager/modules/dal/src/main/java/org/ovirt/engine/core/dao/StorageDomainStaticDAODbFacadeImpl.java][mapRow][4] = -> TRY {  -> return Guid.createGuidFromString(rs.getString("storage_id",),)@ } CATCH(SQLException) {}
results[https://github.com/repshak/BeeQueue/blob/a6e6622457f9cb2d82006bec057da3040fd9dbb9/src/org/beequeue/sql/mapping/EnumNameType.java][get][7] = -> TRY {  -> name=rs.getString(idx.next(),)@ } CATCH(SQLException) {}
results[https://github.com/killbill/killbill-commons/blob/59b750734648accc47c3ed6e1e549a9a3150de73/jdbi/src/main/java/org/killbill/commons/jdbi/mapper/MapperBase.java][getUUID][3] = -> TRY {  -> result=resultSet.getString(fieldName,)@ -> return (result==null)?null:UUID.fromString(result,)@ } CATCH(SQLException) {}
results[https://github.com/testinfected/simple-petstore/blob/396c4029355c2dde827e5e9a1a08a3028f029d65/persistence/src/main/java/org/testinfected/petstore/jdbc/LineItemRecord.java][number][12] = -> TRY {  -> return rs.getString(findColumn(rs,NUMBER,),)@ } CATCH(SQLException) {}
results[https://github.com/ebean-orm/avaje-ebeanorm/blob/7aae897def16ec72ab474bbd433ad988c25752cf/src/main/java/com/avaje/ebeaninternal/server/type/RsetDataReader.java][getString][1] = -> TRY {  -> return rset.getString(pos(),)@ } CATCH(SQLException) {}
results[https://github.com/Bombe/utils/blob/87fba09bba793fa78c3f7fd06200f56fb1ecc28d/src/main/java/net/pterodactylus/util/database/ObjectCreator.java][createObject][1] = -> TRY {  -> return (fieldName==null)?resultSet.getString(index,):resultSet.getString(fieldName,)@ } CATCH(SQLException) {}
results[https://github.com/djspiewak/activeobjects/blob/9d69cccaf764480006f48d650f50d960d89c7c6c/ActiveObjects/src/net/java/ao/types/CharType.java][pullFromDatabase][3] = -> TRY {  -> return res.getString(field,).charAt(0,)@ } CATCH(SQLException) {}
results[https://github.com/korpling/ANNIS/blob/503434bf1533443bba871456af9d1eb0d7e5eb09/Annis-Service/annis-service-impl/src/main/java/annis/sqlgen/SAnnotateSqlGenerator.java][stringValue][9] = -> TRY {  -> return resultSet.getString(factsTas.columnName(table,column,),)@ } CATCH(SQLException) {}
results[https://github.com/codefollower/H2-Research/blob/b002b3eb4d2c623fcb28bab5a3a22e03fd493bfc/src/tools/org/h2/jaqu/TableInspector.java][addColumn][8] = -> TRY {  -> columns.add(rs.getString("COLUMN_NAME",),)@ } CATCH(SQLException) {}
results[https://github.com/KinkyDesign/yaqp/blob/9263cbdc21e28ab61f1f687c1989644e47cb3f15/src/org/opentox/database/ModelsTable.java][next][1] = -> TRY { -> result=RESULT_SET.getString(column,)@ } CATCH(SQLException) { -> throw new NoSuchElementException()@ }
results[https://github.com/roman-himself/MyActiviti/blob/0c9a123ea18c75e72a647ac4c18622efdb1685e2/modules/activiti-engine/src/main/java/org/activiti/impl/persistence/IbatisVariableTypeHandler.java][getResult][8] = -> TRY {  -> typeName=rs.getString(columnName,)@ -> return variableTypes.getVariableType(typeName,)@ } CATCH(SQLException) {}
results[https://github.com/rodwiddowson/java-identity-provider/blob/83e36778b936235ce21165c519f20aa24eedcf29/shib-idp-impl/src/main/java/edu/internet2/middleware/shibboleth/idp/consent/persistence/JDBCStorage.java][mapRow][1] = -> TRY {  -> return new RelyingParty(rs.getString("entityId",),)@ } CATCH(SQLException) {}
results[https://github.com/USGS-CIDA/sedmap/blob/3b7847f396a8ccea05a3b36ba32d058096a5f757/src/main/java/gov/cida/sedmap/data/ResultSetColumnIterator.java][next][1] = -> TRY { -> return rs.getString(++column,)@ } CATCH(SQLException) { -> throw new ResultSetColumnIterator.SqlException(e,)@ }
results[https://github.com/ohmage/server/blob/7346d2995981f0293a2e1f690dd856d156e0a7c6/src/org/ohmage/query/CampaignClassQueries.java][mapRow][8] = -> TRY {  -> return Campaign.Role.getValue(rs.getString("role",),)@ } CATCH(SQLException) {}
results[https://github.com/ualerts-org/ualerts-server/blob/6e869f4cc10f31c34587947e591d8311609ee902/src/main/java/org/ualerts/mobile/subscribe/service/data/JdbcRegionDaoImpl.java][mapRow][2] = -> TRY {  -> return RegionsHolder.getRegionByName(rs.getString(REGION_NAME,),)@ } CATCH(SQLException) {}
results[https://github.com/Paxle/Paxle/blob/558fccb041f77bbb24485e1cf18fc2864c116bcb/bundles/DataLayer/src/main/java/org/paxle/data/db/impl/URIUserType.java][nullSafeGet][1] = -> TRY {  -> value=rs.getString(names[0],)@ -> return (value==null)?null:URI.create(value,)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/tkunicki/ogc-swie/blob/6192b7215a1fdf16d9b9487674141a7b6a9febda/src/main/java/gov/usgs/webservices/ibatis/StateCodeTypeHandler.java][getResult][1] = -> TRY {  -> state_cd=rs.getString(columnName,)@ -> return getPostalNameFromSQL(state_cd,)@ } CATCH(SQLException) {}
results[https://github.com/flotpk/geoserver/blob/7be7e6f8739cb3ab5659cf16bfbcd2d220424d0b/src/community/dbconfig/src/main/java/org/geoserver/config/hib/types/KeywordInfoType.java][nullSafeGet][1] = -> TRY {  -> srsNameStyle=rs.getString(names[0],)@ -> kwInfo=(srsNameStyle==null)?null:fromString(srsNameStyle,)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/testinfected/simple-petstore/blob/396c4029355c2dde827e5e9a1a08a3028f029d65/persistence/src/main/java/org/testinfected/petstore/jdbc/OrderRecord.java][number][2] = -> TRY {  -> return rs.getString(getColumnIndex(rs,NUMBER,),)@ } CATCH(SQLException) {}
results[https://github.com/Daveiac/FProj_Gruppe48/blob/9e6f28b2a38d333d1bbed8c95000258a550c80fd/KalenderProsjekt/src/server/DBController.java][getMeetingRoomFromResultSet][1] = -> TRY {  -> return new MeetingRoom(rs.getString("roomName",),)@ } CATCH(SQLException) {}
results[https://github.com/emmanuelbernard/hibernate-core-ogm/blob/bdc83cb2e611c7954f95532ef10e31133f6ad905/core/src/main/java/org/hibernate/type/descriptor/sql/VarcharTypeDescriptor.java][doExtract][5] = -> TRY {  -> return javaTypeDescriptor.wrap(rs.getString(name,),options,)@ } CATCH(SQLException) {}
results[https://github.com/derekhiggins/ovirt-engine/blob/748e6e65fcfb6c2c6b2b2b356459a817af452e65/backend/manager/modules/dal/src/main/java/org/ovirt/engine/core/dao/gluster/GlusterVolumeDaoDbFacadeImpl.java][mapRow][2] = -> TRY {  -> return AccessProtocol.valueOf(rs.getString("access_protocol",),)@ } CATCH(SQLException) {}
results[https://github.com/Qi4j/qi4j-sdk/blob/dc2d52200a4333de13580cc7fb29df2ef02a6627/extensions/entitystore-sql/src/main/java/org/qi4j/entitystore/sql/database/DatabaseDerbyMixin.java][getEntityValue][4] = -> TRY {  -> return new StringReader(resultSet.getString(SQLUtil.STATE_COLUMN,),)@ } CATCH(SQLException) {}
results[https://github.com/INightmare/apache-isis/blob/38a411e4b7f554ea69bad911c33ccad42a96b987/framework/runtimes/dflt/objectstores/sql/sql-impl/src/main/java/org/apache/isis/runtimes/dflt/objectstores/sql/jdbc/JdbcResults.java][getString][1] = -> TRY { -> return set.getString(columnName,)@ } CATCH(SQLException) { -> throw new SqlObjectStoreException(e,)@ }
results[https://github.com/Ramblurr/CyberGame/blob/1facad2b466ddb9799698b09972bb222738ac2d7/src/yao/gameweb/util/Database.java][getUsername][2] = -> TRY { -> rs=prep.executeQuery()@ -> IF { -> name=rs.getString("username",)@rs.next() } }
results[https://github.com/adaniluk/presentationJava/blob/d3fe2eb69be1b222e82fd6bd3d30ff8e7fd3cc0f/src/pl/edu/pk/wieik/pwj/presentation/model/HtmlSlide.java][load][3] = -> TRY {  -> this.id=res.getInt("h:id",)@ -> this.content=res.getString("h:content",)@ } CATCH(SQLException) {}
results[https://github.com/mixxit/npcx/blob/90ec89ff3922dd2f28a2ab4c4fcd1d70048edc2c/src/net/gamerservices/npcx/npcx.java][dbGetNPCname][1] = -> TRY { -> rs11=s11.getResultSet()@ -> LOOP { -> name=rs11.getString("name",)@rs11.next() -> return name@rs11.next() } }
results[https://github.com/OpenNTF/org.openntf.domino/blob/81bb2effedd8b4e6b651de5ff1499f5129893fde/org.openntf.domino/commons/com/ibm/commons/util/print/ResultSetPrinter.java][getRowValue][3] = -> TRY { -> return rs.getString(col+1,)@ } CATCH(SQLException) { -> ex.printStackTrace()@ }
results[https://github.com/zhangkaitao/es/blob/1e10982ad521e7d482e05d4408b569b1c4926bd0/common/src/main/java/com/sishuok/es/common/repository/hibernate/type/JsonMapUserType.java][nullSafeGet][2] = -> TRY {  -> json=rs.getString(names[0],)@ -> map=JSON.parseObject(json,HashMap.class,)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/klossalex/walkingarchive-backend/blob/e4eea91b7c5d0aa80d6f9396db954b1fae9730fe/src/main/java/org/walkingarchive/backend/model/types/HstoreUserType.java][nullSafeGet][1] = -> TRY {  -> val=rs.getString(col,)@ -> return HstoreHelper.toMap(val,)@ } CATCH(SQLException) {}
results[https://github.com/tkunicki/ogc-swie/blob/0a204c27cd6924c4b647ebb2e815a337ada03f3b/src/main/java/gov/usgs/webservices/ibatis/USGS_URL_TypeHandler.java][getResult][1] = -> TRY {  -> state_cd=rs.getString(columnName,)@ -> return getURLFromSQL(state_cd,)@ } CATCH(SQLException) {}
results[https://github.com/korpling/ANNIS/blob/7e722e1f64911b6bdc869e4514d47dcc18453b8c/annis-service-implementation/src/main/java/annis/sqlgen/CsvCorpusPathExtractor.java][extractCorpusPath][2] = -> TRY {  -> csv=resultSet.getString(columnName,)@ -> pathArray=csv.split(",",)@ } CATCH(SQLException) {}
results[https://github.com/JCPP/GestionaleMagazzino/blob/54dbc829ee612a6022b72f1d343b2ddf239eeb7a/src/modelsCancelleria/Dipendente.java][validateResponsabile][2] = -> rs=que.eseguiQuery(query,)@ -> TRY { -> LOOP { -> risultato=rs.getString("tipo",)@rs.next() } }
results[https://github.com/bisanthe/twitstreet/blob/b1e056f74f857756d37987c7f7f90fb80645adf7/src/com/twitstreet/db/data/GroupRole.java][getDataFromResultSet][1] = -> TRY {  -> this.id=rs.getLong("id",)@ -> this.name=rs.getString("name",)@ } CATCH(SQLException) {}
results[https://github.com/pjordan/tac-aa/blob/d29b48c4b6d4fbbb6312d69acaa6d4b79cb7f14a/tasim/src/main/java/se/sics/isl/db/sql/SQLDBResult.java][getString][1] = -> TRY { -> return rs.getString(name,)@ } CATCH(Exception) { -> log.log(Level.WARNING,"could not getString "+name,e,)@ }
results[https://github.com/eclipse/datatools.connectivity/blob/9144ad36ad4c50893a3999aad1e78779c0c4dcd9/plugins/org.eclipse.datatools.connectivity.sqm.core/src/org/eclipse/datatools/connectivity/sqm/loader/JDBCSchemaLoader.java][initialize][1] = -> TRY {  -> schema.setName(rs.getString(COLUMN_TABLE_SCHEM,),)@ } CATCH(SQLException) {}
results[https://github.com/obiba/magma/blob/0e63ec358d9eff265fe6ba7dc8ffb87cf1f3772d/magma-datasource-limesurvey/src/main/java/org/obiba/magma/datasource/limesurvey/LimesurveyVariableEntityProvider.java][mapRow][2] = -> TRY {  -> entityId=rs.getString("token",)@ -> return new VariableEntityBean(LimesurveyValueTable.PARTICIPANT,entityId,)@ } CATCH(SQLException) {}
results[https://github.com/joedayz/corespring/blob/4420ad3703c3ac25e5742fb263edc3fb644142a4/18-mybatis-1/src/main/java/rewards/internal/restaurant/BenefitAvailabilityPolicyTypeHandler.java][getResult][2] = -> TRY {  -> policyCode=rs.getString(columnName,)@ -> return valueOf(policyCode,)@ } CATCH(SQLException) {}
results[https://github.com/smithereen/2011-mi2_d402a-Traffic-Simulation/blob/24a14ea10bda23f721d8d02582eecc695984c992/src/utils/DatabaseUtil.java][checkDistanceToOtherVehicles][1] = -> TRY { -> result=statement.executeQuery(sql,)@ -> result.next()@ -> distance=Double.parseDouble(result.getString("distance",),)@ }
results[https://github.com/Paxle/Paxle/blob/558fccb041f77bbb24485e1cf18fc2864c116bcb/bundles/DataLayer/src/main/java/org/paxle/data/db/impl/EnumUserType.java][nullSafeGet][1] = -> TRY {  -> name=rs.getString(names[0],)@ -> return (name==null)?null:Enum.valueOf(enumClass,name,)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/Wisser/Jailer/blob/b10c2749dbf3193ab7ca87b046e25a8275f335ed/src/main/net/sf/jailer/Jailer.java][readCurrentRow][3] = -> TRY {  -> message="Can't export all rows from table '"+resultSet.getString("TO_TYPE",)+"' due to cyclic aggregation"@ -> throw new RuntimeException(message,)@ } CATCH(SQLException) {}
results[https://github.com/obiba/magma/blob/b7d8c6f7b47dd0d50820a7083f223930aa49de00/magma-datasource-hibernate/src/main/java/org/obiba/magma/datasource/hibernate/type/ValueTypeHibernateType.java][get][9] = -> TRY {  -> return ValueType.Factory.forName(rs.getString(name,),)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/rmannibucau/batchee/blob/a7b81a653a1a0930e277dfae8c203d889d9b25de/extras/src/test/java/org/apache/batchee/extras/JdbcReaderTest.java][map][1] = -> TRY {  -> name=resultSet.getString("name",)@ -> resultSet.deleteRow()@ } CATCH(SQLException) {}
results[https://github.com/akwei/halo-query/blob/3b952a37a917135d56f480897cea310e56fee2bf/src/halo/query/mapping/RowMapperUtil.java][getBigInteger][1] = -> TRY {  -> return new BigInteger(rs.getString(name,),)@ } CATCH(SQLException) {}
results[https://github.com/Sniperlocked/projstats/blob/91d6d1703d562beafc113c5c6df87c9ae04d241f/cs108finalproject/src/entities/Profile.java][getAboutMe][3] = -> aboutMe=new String()@ -> rs=Database.getUser(userName,)@ -> TRY { -> rs.next()@ -> aboutMe=rs.getString("about",)@ }
results[https://github.com/avicentic/tap/blob/552568f68b848fef191ca9dc67ea0c95e066f6ab/tapcore/src/main/java/rs/vicko/security/LocaleRowMapper.java][mapRow][1] = -> TRY {  -> return new Locale(rs.getString("code",),)@ } CATCH(SQLException) {}
results[https://github.com/tkunicki/ogc-swie/blob/b116138c230a5a1f334e597b3a8f7578dc6a15ea/src/main/java/gov/usgs/webservices/ibatis/StateFullNameTypeHandler.java][getResult][1] = -> TRY {  -> state_cd=rs.getString(columnName,)@ -> return getFullStateNameFromSQL(state_cd,)@ } CATCH(SQLException) {}
results[https://github.com/sconealone/cs304/blob/3949a3d0b9dafb8a7136130ca41ecdd97353755d/tables/BorrowerType.java][<init>][1] = -> TRY {  -> type=rs.getString(++paramIndex,)@ -> bookTimeLimit=rs.getInt(++paramIndex,)@ } CATCH(SQLException) {}
results[https://github.com/moonjava/moonjava-flight/blob/b0d257914829e3f3bb534a2f5aca300d66e98713/src/main/java/br/com/moonjava/flight/jdbc/ResultSetJdbcWrapper.java][getString][1] = -> TRY { -> return rs.getString(alias+"."+columnLabel,)@ } CATCH(SQLException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/lievenva/SchemaSpy-ng/blob/298b3b8c74e114e8ca08cfb8d15411046e03f5c2/src/main/java/net/sourceforge/schemaspy/model/TableIndex.java][<init>][1] = -> TRY {  -> name=rs.getString("INDEX_NAME",)@ -> isUnique=!(rs.getBoolean("NON_UNIQUE",))@ } CATCH(SQLException) {}
results[https://github.com/spring-projects/spring-batch/blob/170c815916376824ec0229b7ddefa6809efaa598/samples/src/test/java/org/springframework/batch/sample/mapping/CustomerCreditRowMapperTests.java][setUpResultSetMock][1] = -> TRY {  -> rs.getString(CustomerCreditRowMapper.NAME_COLUMN,)@ -> rs.getBigDecimal(CustomerCreditRowMapper.CREDIT_COLUMN,)@ } CATCH(SQLException) {}
results[https://github.com/CubeIsland/AuctionHouse/blob/1d7135042d0b08e7ea6b91b915b078aa2c80208f/src/main/java/de/cubeisland/AuctionHouse/Database.java][getBidderString][2] = -> TRY { -> set=this.query("SELECT * from `bidder` where `id`=? LIMIT 1;",id,)@ -> IF { -> return set.getString("name",)@set.next() } }
results[https://github.com/rrkommer/gwiki/blob/880040b0dac1302dfb0aa08eddcffb6e88ab4b62/gwiki-genome-dependencies/src/main/java/de/micromata/genome/dao/db/DbFieldUtils.java][readString][1] = -> TRY {  -> return rs.getString(type.name(),)@ } CATCH(SQLException) {}
results[https://github.com/Azrielg13/innovative/blob/584526680c3e8b205d906bd336b5f9ca996529c4/qee/src/com/digitald4/pm/InsuranceType.java][refresh][4] = -> TRY {  -> name=rs.getString("insType",)@ -> hide=rs.getBoolean("hide",)@ } CATCH(Exception) {}
results[https://github.com/Dhandapani/gluster-ovirt/blob/4e7d9efe8d105b6feb9f3920aeff67142ebaa07a/backend/manager/modules/dal/src/main/java/org/ovirt/engine/core/dao/StoragePoolDAODbFacadeImpl.java][getStorageFormatTypeForPool][1] = -> TRY {  -> return StorageFormatType.forValue(rs.getString("storage_pool_format_type",),)@ } CATCH(SQLException) {}
results[https://github.com/amegginson/jbpm-bpel-ftl/blob/934bd77e927be1b401048f1f86114e6e6f504c1f/modules/jpdl/core/src/main/java/org/jbpm/db/hibernate/AccessType.java][get][2] = -> TRY {  -> return new Access(rs.getString(name,),)@ } CATCH(SQLException) {}
results[https://github.com/MercuryGroup/Project/blob/886fcf6750322e1c8c7c46066d38f217de9edb13/src/AdminPanel.java][actionPerformed][2] = -> dbResult=database.doQuery("SELECT * FROM admin WHERE Username='"+username+"' AND Password='"+password+"' LIMIT 1",)@ -> TRY { -> IF { -> currentUser=dbResult.getString("Username",)@dbResult!=null&&dbResult.next() } }
results[https://github.com/Dhandapani/gluster-ovirt/blob/f0cb2c98d420f7af2a43fcacf74b2b934732ebb4/backend/manager/modules/dal/src/main/java/org/ovirt/engine/core/dao/SnapshotDaoDbFacadeImpl.java][mapConfiguration][1] = -> TRY {  -> snapshot.setVmConfiguration(rs.getString("vm_configuration",),)@ } CATCH(SQLException) {}
results[https://github.com/amegginson/jbpm-bpel-ftl/blob/934bd77e927be1b401048f1f86114e6e6f504c1f/modules/jpdl/core/src/main/java/org/jbpm/db/hibernate/ConverterEnumType.java][nullSafeGet][2] = -> TRY {  -> converterDatabaseId=resultSet.getString(names[0],)@ -> return Converters.getConverterByDatabaseId(converterDatabaseId,)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/exoplatform/jcr/blob/5d7cf6ef5009c73f880d2608c235345a5b0d28c0/exo.jcr.component.core/src/main/java/org/exoplatform/services/jcr/impl/checker/NodeRemover.java][removeChildrenItems][1] = -> TRY {  -> parentId=resultSet.getString(DBConstants.COLUMN_ID,)@ -> node=createNodeData(resultSet,)@ } CATCH(SQLException,IllegalNameException,IllegalStateException,UnsupportedOperationException,InvalidItemStateException,RepositoryException) {}
results[https://github.com/dCache/dcache/blob/5bb5f3fc39a0a362820c8d0fdb40399b72165431/modules/srm-server/src/main/java/org/dcache/srm/request/sql/LsFileRequestStorage.java][getFileRequest][1] = -> TRY {  -> SURL=set.getString(++next_index,)@ -> return new LsFileRequest(ID,NEXTJOBID,CREATIONTIME,LIFETIME,STATE,ERRORMESSAGE,SCHEDULERID,SCHEDULER_TIMESTAMP,NUMOFRETR,MAXNUMOFRETR,LASTSTATETRANSITIONTIME,jobHistoryArray,REQUESTID,CREDENTIALID,STATUSCODE,SURL,)@ } CATCH(SQLException) {}
results[https://github.com/NCIP/cab2b/blob/0887c1f6aae5d33b313dc58244d873eb82816b5c/software/dependencies/washucommons/cab2b_2009_mar_27_streamline/src/edu/wustl/common/hibernate/EnumType.java][nullSafeGet][1] = -> TRY {  -> s=rs.getString(names[0],)@ -> return (s!=null)?valueOf(s,):s@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/openmrs/openmrs-module-reporting/blob/89410d0804581192ec96f59819c01b5388ed36e0/api/src/main/java/org/openmrs/module/reporting/report/service/db/PropertiesType.java][nullSafeGet][1] = -> TRY {  -> s=rs.getString(names[0],)@ -> return assemble(s,null,)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/nffdiogosilva/cafeteria/blob/f134035fa711c5d14bc402eed5ebc4369936aa1e/src/pt/uac/cafeteria/model/persistence/CourseMapper.java][doLoad][1] = -> TRY {  -> name=rs.getString("nome",)@ -> return new Course(id,name,)@ } CATCH(SQLException) {}
results[https://github.com/GameRevision/GWLP-R/blob/7c327dda7811a45c3b5753d65c55f7d3746eb5de/loginshard/src/main/java/com/gamerevision/gwlpr/loginshard/model/database/Account.java][<init>][1] = -> TRY { -> this.password=resultSet.getString("Password",)@ } CATCH(SQLException) { -> LOGGER.error("sql error in constructor",)@ }
results[https://github.com/maikeps/TCC/blob/ea80a440b2c08e58dc9bf2a7fb0202c4a2f8dc6a/src/MySQL/ConjuntoResultados.java][getString][1] = -> TRY { -> return rs.getString(t,)@ } CATCH(SQLException) { -> System.out.println("Erro no SQL: "+sqlError,)@ }
results[https://github.com/hmsiccbl/screensaver/blob/c953c12010bfb825fe9a346560d392335d71ff3c/src/edu/harvard/med/screensaver/db/screendb/ScreenDBUserSynchronizer.java][getClassification][1] = -> TRY {  -> classificationString=resultSet.getString("classification",)@ -> classification=_userClassificationUserType.getTermForValue(classificationString,)@ } CATCH(SQLException) {}
results[https://github.com/nakag/ddlutils/blob/39157f91ffbb409410aed763c8f0c89c6f9749b7/src/java/org/apache/ddlutils/io/JdbcModelReader.java][getValueAsString][1] = -> TRY {  -> return (availableColumns.contains(columnName,))?data.getString(columnName,):defaultValue@ } CATCH(SQLException) {}
results[https://github.com/cchantep/acolyte/blob/654575844c3386a5471c01cf2c1710ab9a29d7e4/studio/src/main/java/acolyte/RowFormatter.java][getString][1] = -> TRY { -> return rs.getString(p+1,)@ } CATCH(SQLException) { -> throw new RuntimeException("Fails to get value",e,)@ }
results[https://github.com/NCIP/cadsr-util/blob/01c082d5c7f07cafccba3cd44be6ff1cb6e1e940/cadsrutil/src/java/gov/nih/nci/ncicb/cadsr/common/persistence/dao/jdbc/JDBCFormDAO.java][mapRow][1] = -> TRY {  -> formName=rs.getString("LONG_NAME",)@ -> return new JDBCFormTransferObject(rs,)@ } CATCH(SQLException) {}
results[https://github.com/mlocher-sf/jobmatch/blob/05d4d753c62d54e36bc00341f79d83048939be7c/pse/kg2k/src/jobmatch/jobmatch/data/ConstantTableDO.java][initFromResultSet][1] = -> TRY {  -> setDescription(rs.getString("Description",),)@ } CATCH(SQLException,ObjectIdException,DataObjectException,DatabaseManagerException) {}
results[https://github.com/NCIP/cadsr-cdecurate/blob/7d5cfe9015f111b6cee5c9ae08998c050dfc2a0a/src/gov/nih/nci/cadsr/cdecurate/tool/ValueDomainAction.java][setExtras][1] = -> TRY {  -> ac.setDefinition(rs.getString("definition",),)@ } CATCH(SQLException) {}
