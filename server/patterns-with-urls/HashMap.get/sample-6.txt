results[https://github.com/rSmart/kuali_rice/blob/a4555412dc7dcb71a2783540bbbfff492e2f4141/rice-middleware/impl/src/main/java/org/kuali/rice/kcb/deliverer/impl/SMSMessageDeliverer.java][validatePreferenceValues] = -> TRY {  } ELSE { -> mobileNumber=(String) prefs.get(getName()+"."+MOBILE_NUMBER,)@!(!(prefs.containsKey(getName()+"."+MOBILE_NUMBER,))) } CATCH {}
results[https://github.com/imoseyon/leanKernel-d2usc-deprecated/blob/85dca4838d36fa8e8db240b308ebe03f9643160c/vendor/samsung/common/packages/apps/Email/lib_Src/mail-1.1.2/source/javax/mail/internet/MimeUtility.java][mimeCharset] = -> mc=(String) javaCharsets.get(charset.toLowerCase(),)@!(javaCharsets==null||charset==null) -> return (mc!=null)?mc:charset@!(javaCharsets==null||charset==null)
results[https://github.com/rSmart/kuali_rice/blob/a4555412dc7dcb71a2783540bbbfff492e2f4141/rice-middleware/impl/src/main/java/org/kuali/rice/kcb/deliverer/impl/AOLInstantMessageDeliverer.java][validatePreferenceValues] = -> TRY {  } ELSE { -> screenName=(String) prefs.get(getName()+"."+SCREEN_NAME,)@!(!(prefs.containsKey(getName()+"."+SCREEN_NAME,))) } CATCH {}
results[https://github.com/srnsw/xena/blob/8e19788ceb5f18d32d53017a5fc60bc2b3024de9/plugins/email/ext/src/mail-1.1.2/source/javax/mail/internet/MimeUtility.java][mimeCharset] = -> mc=(String) javaCharsets.get(charset.toLowerCase(),)@!(javaCharsets==null||charset==null) -> return (mc!=null)?mc:charset@!(javaCharsets==null||charset==null)
results[https://github.com/rSmart/kuali_rice/blob/1b270300443723a93dde7e8fdcaee4ea258ed9ed/impl/src/main/java/org/kuali/rice/kcb/deliverer/impl/SMSMessageDeliverer.java][validatePreferenceValues] = -> TRY {  } ELSE { -> mobileNumber=(String) prefs.get(getName()+"."+MOBILE_NUMBER,)@!(!(prefs.containsKey(getName()+"."+MOBILE_NUMBER,))) } CATCH {}
results[https://github.com/srnsw/xena/blob/b8b0147f5d64a4a0a91019e8d279ea7b0ef18c4d/ext/src/mail-1.1.2/source/javax/mail/internet/MimeUtility.java][mimeCharset] = -> mc=(String) javaCharsets.get(charset.toLowerCase(),)@!(javaCharsets==null||charset==null) -> return (mc!=null)?mc:charset@!(javaCharsets==null||charset==null)
results[https://github.com/rSmart/kuali_rice/blob/1b270300443723a93dde7e8fdcaee4ea258ed9ed/impl/src/main/java/org/kuali/rice/kcb/deliverer/impl/AOLInstantMessageDeliverer.java][validatePreferenceValues] = -> TRY {  } ELSE { -> screenName=(String) prefs.get(getName()+"."+SCREEN_NAME,)@!(!(prefs.containsKey(getName()+"."+SCREEN_NAME,))) } CATCH {}
results[https://github.com/aptana/studio2/blob/0905925e7efa7e473e7c2b3d69a618e19056ed31/plugins/com.aptana.ide.scripting/src/com/aptana/ide/scripting/Global.java][getXrefId] = -> IF { -> result=(String) this._idXref.get(path,)@this._idXref.containsKey(path,) }
results[https://github.com/nakag/ddlutils/blob/fad3329d26d9e9b3d58e8832db7e8341042fef7e/src/java/org/apache/ddlutils/PlatformUtils.java][determineDatabaseType] = -> IF { -> return (String) jdbcDriverToPlatform.get(driverName,)@jdbcDriverToPlatform.containsKey(driverName,) }
results[https://github.com/PieceMaker/OpenJUMP/blob/3d64e9d3a7e9414b9fbe84632ac7d664789088fb/src/com/vividsolutions/jump/workbench/ui/renderer/RenderingManager.java][getRenderFactoryForLayerable] = -> IF { -> return (Renderer.ContentDependendFactory) layerableClassToRendererFactoryMap.get(clss,)@layerableClassToRendererFactoryMap.containsKey(clss,) }
