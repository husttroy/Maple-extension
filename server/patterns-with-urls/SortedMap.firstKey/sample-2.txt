results[https://github.com/joliebig/featurehouse/blob/294b965bef0a440c2790ad6626700e9c0943dc70/fstcomp/examples/Java/BerkeleyDB/base/src/com/sleepycat/je/recovery/Checkpointer.java][flushDirtyNodes] = -> LOOP { -> currentLevel=(Integer) dirtyMap.firstKey()@dirtyMap.size()>0 -> logProvisionally=currentLevel.intValue()!=highestFlushLevel@dirtyMap.size()>0 -> nodeSet=(Set) dirtyMap.get(currentLevel,)@dirtyMap.size()>0 -> iter=nodeSet.iterator()@dirtyMap.size()>0 -> LOOP { -> targetRef=(CheckpointReference) iter.next()@dirtyMap.size()>0 && iter.hasNext() -> this.hook546(dirtyMap,allowDeltas,checkpointStart,currentLevel,logProvisionally,targetRef,)@dirtyMap.size()>0 && iter.hasNext() -> iter.remove()@dirtyMap.size()>0 && iter.hasNext() } -> dirtyMap.remove(currentLevel,)@dirtyMap.size()>0 }
results[https://github.com/joliebig/featurehouse_fstcomp_examples/blob/a60569a67cce65186e15e6ce73d11c282c03cfaf/Java/BerkeleyDB/base/com/sleepycat/je/recovery/Checkpointer.java][flushDirtyNodes] = -> LOOP { -> currentLevel=(Integer) dirtyMap.firstKey()@dirtyMap.size()>0 -> logProvisionally=currentLevel.intValue()!=highestFlushLevel@dirtyMap.size()>0 -> nodeSet=(Set) dirtyMap.get(currentLevel,)@dirtyMap.size()>0 -> iter=nodeSet.iterator()@dirtyMap.size()>0 -> LOOP { -> targetRef=(CheckpointReference) iter.next()@dirtyMap.size()>0 && iter.hasNext() -> this.hook546(dirtyMap,allowDeltas,checkpointStart,currentLevel,logProvisionally,targetRef,)@dirtyMap.size()>0 && iter.hasNext() -> iter.remove()@dirtyMap.size()>0 && iter.hasNext() } -> dirtyMap.remove(currentLevel,)@dirtyMap.size()>0 }
results[https://github.com/joliebig/featurehouse_fstcomp_examples/blob/da30f4c64c25b72a7713e9a728eca2f3e9ce4c23/Java/BerkeleyDB/base/src/com/sleepycat/je/recovery/Checkpointer.java][flushDirtyNodes] = -> LOOP { -> currentLevel=(Integer) dirtyMap.firstKey()@dirtyMap.size()>0 -> logProvisionally=currentLevel.intValue()!=highestFlushLevel@dirtyMap.size()>0 -> nodeSet=(Set) dirtyMap.get(currentLevel,)@dirtyMap.size()>0 -> iter=nodeSet.iterator()@dirtyMap.size()>0 -> LOOP { -> targetRef=(CheckpointReference) iter.next()@dirtyMap.size()>0 && iter.hasNext() -> this.hook546(dirtyMap,allowDeltas,checkpointStart,currentLevel,logProvisionally,targetRef,)@dirtyMap.size()>0 && iter.hasNext() -> iter.remove()@dirtyMap.size()>0 && iter.hasNext() } -> dirtyMap.remove(currentLevel,)@dirtyMap.size()>0 }
results[https://github.com/joliebig/featurehouse/blob/27d637402352e841e1dab09725a2683720a8a3b9/fstcomp/examples/BerkeleyDB/base/src/com/sleepycat/je/recovery/Checkpointer.java][flushDirtyNodes] = -> LOOP { -> currentLevel=(Integer) dirtyMap.firstKey()@dirtyMap.size()>0 -> logProvisionally=currentLevel.intValue()!=highestFlushLevel@dirtyMap.size()>0 -> nodeSet=(Set) dirtyMap.get(currentLevel,)@dirtyMap.size()>0 -> iter=nodeSet.iterator()@dirtyMap.size()>0 -> LOOP { -> targetRef=(CheckpointReference) iter.next()@dirtyMap.size()>0 && iter.hasNext() -> this.hook546(dirtyMap,allowDeltas,checkpointStart,currentLevel,logProvisionally,targetRef,)@dirtyMap.size()>0 && iter.hasNext() -> iter.remove()@dirtyMap.size()>0 && iter.hasNext() } -> dirtyMap.remove(currentLevel,)@dirtyMap.size()>0 }
results[https://github.com/freenet/plugin-Freemail-v0.1/blob/b1127dbb831b616f7e87a246a49284ae1c400c7f/src/fnmail/imap/IMAPHandler.java][handle_select] = -> IF { -> msgs=this.mb.listMessages()@ -> numexists=msgs.size()@ -> LOOP { -> current=(Integer) msgs.firstKey()@msgs.size()>0 -> m=(MailMessage) msgs.get(msgs.firstKey(),)@msgs.size()>0 -> m.flags.set("\\Recent",false,)@msgs.size()>0 -> m.storeFlags()@msgs.size()>0 -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 } -> this.sendState(numexists+" EXISTS",)@ }
results[https://github.com/freenet/plugin-Freemail-v0.1/blob/b1127dbb831b616f7e87a246a49284ae1c400c7f/src/fnmail/imap/IMAPHandler.java][handle_uid] = -> IF { -> this.reply(msg,"BAD Not enough arguments to uid command",)@msg.args==null||msg.args.length<3 } -> msgs=this.mb.listMessages()@!(msg.args==null||msg.args.length<3) && !(!(this.verify_auth(msg,))) -> IF { -> IF { -> this.reply(msg,"OK Fetch completed",)@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && msg.args[0].toLowerCase().equals("fetch",) } ELSE { -> IF { -> this.reply(msg,"NO No such message",)@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(msg.args[0].toLowerCase().equals("fetch",)) && msg.args[0].toLowerCase().equals("store",) } } -> return @!(msg.args==null||msg.args.length<3) && !(!(this.verify_auth(msg,))) && msgs.size()==0 } -> parts=msg.args[1].split(":",)@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> TRY { -> from=Integer.parseInt(parts[0],)@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) } CATCH { -> this.reply(msg,"BAD Bad number",)@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> return @!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) } } ELSE { -> IF { -> tmp=(Integer) msgs.lastKey()@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && parts[1].equals("*",) && parts.length<2 -> to=tmp.intValue()@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && parts[1].equals("*",) && !(parts.length<2) } ELSE { -> TRY { -> to=Integer.parseInt(parts[1],)@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(parts.length<2) && !(parts[1].equals("*",)) } CATCH { -> this.reply(msg,"BAD Bad number",)@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(parts.length<2) && !(parts[1].equals("*",)) -> return @!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(parts.length<2) && !(parts[1].equals("*",)) } } -> IF { -> msgs=msgs.tailMap(new Integer(from,),)@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && parts.length<2 && msg.args[0].toLowerCase().equals("fetch",) -> LOOP { -> curuid=(Integer) msgs.firstKey()@msgs.size()>0 && !(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && parts.length<2 && msg.args[0].toLowerCase().equals("fetch",) -> IF { -> this.reply(msg,"BAD Unknown attribute in list or unterminated list",)@msgs.size()>0 && !(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),msgnum,msg.args,2,true,)) && !(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && parts.length<2 && msg.args[0].toLowerCase().equals("fetch",) } -> msgs=msgs.tailMap(new Integer(curuid.intValue()+1,),)@msgs.size()>0 && !(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(!(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),msgnum,msg.args,2,true,))) && parts.length<2 && msg.args[0].toLowerCase().equals("fetch",) } -> this.reply(msg,"OK Fetch completed",)@!(msg.args==null||msg.args.length<3) && !(msgs.size()>0) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && parts.length<2 && msg.args[0].toLowerCase().equals("fetch",) } ELSE { -> IF { -> msgs=msgs.tailMap(new Integer(from,),)@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && parts.length<2 && !(msg.args[0].toLowerCase().equals("fetch",)) && msg.args[0].toLowerCase().equals("store",) -> msgs=msgs.headMap(new Integer(to+1,),)@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && parts.length<2 && !(msg.args[0].toLowerCase().equals("fetch",)) && msg.args[0].toLowerCase().equals("store",) -> LOOP { -> targetmsgs[i]=(MailMessage) msgs.values().toArray()[i]@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && parts.length<2 && !(msg.args[0].toLowerCase().equals("fetch",)) && msg.args[0].toLowerCase().equals("store",) && i<targetmsgs.length } -> this.do_store(msg.args,2,targetmsgs,msg,true,)@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && parts.length<2 && !(msg.args[0].toLowerCase().equals("fetch",)) && msg.args[0].toLowerCase().equals("store",) -> this.reply(msg,"OK Store completed",)@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && parts.length<2 && !(msg.args[0].toLowerCase().equals("fetch",)) && msg.args[0].toLowerCase().equals("store",) } ELSE { -> this.reply(msg,"BAD Unknown command",)@!(msg.args==null||msg.args.length<3) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(msg.args[0].toLowerCase().equals("store",)) && parts.length<2 && !(msg.args[0].toLowerCase().equals("fetch",)) } }
results[https://github.com/freenet/plugin-Freemail-v0.1/blob/b1127dbb831b616f7e87a246a49284ae1c400c7f/src/fnmail/imap/IMAPHandler.java][handle_fetch] = -> IF { -> return @!(this.verify_auth(msg,)) } -> msgs=this.mb.listMessages()@!(!(this.verify_auth(msg,))) -> IF { -> this.reply(msg,"OK Fetch completed",)@!(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> return @!(!(this.verify_auth(msg,))) && msgs.size()==0 } -> IF { -> this.reply(msg,"BAD Not enough arguments",)@!(msgs.size()==0) && !(!(this.verify_auth(msg,))) && msg.args==null||msg.args.length<2 } -> parts=msg.args[0].split(":",)@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> TRY { -> from=Integer.parseInt(parts[0],)@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) } CATCH { -> this.reply(msg,"BAD Bad number",)@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> return @!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) } } ELSE { -> IF { -> to=msgs.size()@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && parts[1].equals("*",) && !(parts.length<2) } ELSE { -> TRY { -> to=Integer.parseInt(parts[1],)@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(parts.length<2) && !(parts[1].equals("*",)) } CATCH { -> this.reply(msg,"BAD Bad number",)@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(parts.length<2) && !(parts[1].equals("*",)) -> return @!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(parts.length<2) && !(parts[1].equals("*",)) } } -> IF { -> this.reply(msg,"NO Invalid message ID",)@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && from==0||to==0||from>msgs.size()||to>msgs.size() && parts.length<2 } -> LOOP { -> current=(Integer) msgs.firstKey()@msgs.size()>0 && !(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && parts.length<2 -> IF { -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 && !(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && i<from && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && parts.length<2 } -> IF { -> this.reply(msg,"BAD Unknown attribute in list or unterminated list",)@!(msg.args==null||msg.args.length<2) && !(msgs.size()>0) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && parts.length<2 && !(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,)) -> return @msgs.size()>0 && !(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && parts.length<2 && !(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,)) } -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 && !(msg.args==null||msg.args.length<2) && !(!(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,))) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && parts.length<2 } -> this.reply(msg,"OK Fetch completed",)@!(msg.args==null||msg.args.length<2) && !(msgs.size()>0) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && parts.length<2
