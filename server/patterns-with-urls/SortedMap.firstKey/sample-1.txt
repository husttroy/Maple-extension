results[https://github.com/AllBinary/phoneme-components-cdc/blob/03923aebc00db2e353b6c3c86a7874c009d48647/src/share/classes/java/util/TreeSet.java][first][41] = -> return m.firstKey()@
results[https://github.com/DSpace/DSpace-SVN-Deprecated/blob/072ba755763012dc76dbc2bfc1d2bb79cd1164e6/dspace/src/org/dspace/browse/Browse.java][cleanDateCache][2] = -> dateCache.remove(dateCache.firstKey(),)@!(dateCache.size()<CACHE_MAXIMUM)
results[https://github.com/serso/jscl/blob/178be0a99eb22baa9facdb5797b87cd87c570968/src/main/java/jscl/math/polynomial/TreePolynomial.java][tail][1] = -> return (content.size()>0)?term((Monomial) content.firstKey(),):null@
results[https://github.com/zywonderful2/mydeal/blob/5a4dc52e3d97c1c01755301ede192e247eca8ccc/src/org/archive/crawler/processor/LexicalCrawlMapper.java][map][1] = -> tail=map.tailMap(classKey,)@ -> return (String) tail.get(tail.firstKey(),)@
results[https://github.com/kiniry-teaching/UCD/blob/160f3f6879b60b6ec505152b6bbe97481065909d/COMP30050-2008/users/lorcancoyle/week7assignment/construct/src/org/construct_infrastructure/component/gossiping/buffer/BufferManagerImpl.java][removeAMessage][4] = -> source=(SortedMap) sourceEntry.getValue()@ -> lowest=(Message) source.remove(source.firstKey(),)@ -> messageID=lowest.getMessageID()@
results[https://github.com/sangamon/sneer/blob/9bd0c6327a2520d22321801a94e183a6e5d4daba/sneer/commons/lib/collections-generic-4.01/src/test/org/apache/commons/collections15/map/AbstractTestSortedMap.java][testFirstKey][1] = -> sm=(SortedMap) makeFullMap()@ -> assertSame(sm.keySet().iterator().next(),sm.firstKey(),)@
results[https://github.com/and146/SPLAT-ARI/blob/dd5a41620f2739930b8fbe8ea74bacfb77088bef/ttools/src/main/uk/ac/starlink/ttools/plot/MapBinnedData.java][getBinIterator][2] = -> keyIt=(includeEmpty&&!(map_.isEmpty()))?mapper_.keyIterator(map_.firstKey(),map_.lastKey(),):map_.keySet().iterator()@
results[https://github.com/uditrugman/openjdk8-jdk/blob/d3f90dea8d0e0b8fe3a64c235f8f7ae9512c7bd0/src/solaris/classes/sun/awt/X11/XToolkit.java][getNextTaskTime][3] = -> TRY { -> IF { -> return -1L@timeoutTasks==null||timeoutTasks.isEmpty() } -> return (Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) } FINALLY { -> awtUnlock()@!(timeoutTasks==null||timeoutTasks.isEmpty()) }
results[https://github.com/mcarlson/openlaszlo/blob/97ceb27d766d07c1b6e4acd876ad00fcffb31153/WEB-INF/lps/server/src/org/openlaszlo/sc/TranslationUnit.java][originalLineNumber][1] = -> nextLineNumber=lnums.tailMap(new Integer(num,),)@ -> IF { -> return null@nextLineNumber.size()==0 } -> key=nextLineNumber.firstKey()@!(nextLineNumber.size()==0) -> IF { -> return null@!(nextLineNumber.size()==0) && key==null } -> return (SourceFileLine) lnums.get(key,)@!(key==null) && !(nextLineNumber.size()==0)
results[https://github.com/UltimatumKang/android_dalvik/blob/38da5f685e572c154e5b0ed73a5ae56b96d4a320/libcore/concurrent/src/test/java/tests/api/java/util/concurrent/ConcurrentSkipListSubMapTest.java][testDescendingTailMapContents][184] = -> ssm=sm.tailMap(m4,)@ -> assertEquals(m4,ssm.firstKey(),)@ -> assertEquals(m5,ssm.lastKey(),)@ -> assertEquals("D",ssm.remove(m4,),)@ -> assertEquals(1,ssm.size(),)@
results[https://github.com/kaspervandenberg/aida/blob/095db6b98f83e8677d144c8572a4f60e42df85da/System/lucene-2.1.0/src/java/org/apache/lucene/index/ParallelReader.java][<init>][1] = -> TRY {  -> field=(String) fieldToReader.firstKey()@ -> IF { -> termEnum=(IndexReader) fieldToReader.get(field,).terms()@field!=null } } CATCH(IOException) {}
results[https://github.com/aldaris/opensso/blob/25f3bcfe1cb1fa607290bf253a2c8b31efa0bcc2/products/shared/source/com/sun/identity/common/TimerPool.java][runNext][4] = } ELSE { -> IF { -> TRY { -> nextRun=(Date) taskList.firstKey()@nextRun!=null -> delay=nextRun.getTime()-now@nextRun!=null } CATCH(NoSuchElementException) { -> scheduler.setDelay(-1,)@ } }
results[https://github.com/joliebig/featurehouse/blob/294b965bef0a440c2790ad6626700e9c0943dc70/fstcomp/examples/Java/BerkeleyDB/base/src/com/sleepycat/je/recovery/Checkpointer.java][flushDirtyNodes][4] = -> TRY {  -> LOOP { -> currentLevel=(Integer) dirtyMap.firstKey()@dirtyMap.size()>0 -> logProvisionally=currentLevel.intValue()!=highestFlushLevel@ -> nodeSet=(Set) dirtyMap.get(currentLevel,)@dirtyMap.size()>0 -> LOOP { -> this.hook546(dirtyMap,allowDeltas,checkpointStart,currentLevel,logProvisionally,targetRef,)@dirtyMap.size()>0 } -> dirtyMap.remove(currentLevel,)@dirtyMap.size()>0 } } CATCH(DatabaseException) {}
results[https://github.com/Unidata/thredds/blob/e8e5ce0a3615aad58f81851163c788ca8b67840f/cdm/src/main/java/thredds/util/PathMatcher.java][match][2] = -> tail=treeMap.tailMap(path,)@ -> IF { -> return null@tail.isEmpty() } -> after=(String) tail.firstKey()@!(tail.isEmpty()) -> IF { -> return treeMap.get(after,)@path.startsWith(after,) && !(tail.isEmpty()) } -> iter=tail.keySet().iterator()@!(tail.isEmpty()) && !(path.startsWith(after,)) -> LOOP { -> IF { -> return treeMap.get(key,)@!(tail.isEmpty()) && path.startsWith(key,) && !(path.startsWith(after,)) && iter.hasNext() } }
results[https://github.com/mbtaylor/jsamp/blob/0f94610d75e19c0e62bcf73d311a7d69eb9a37de/src/java/org/astrogrid/samp/client/HubConnector.java][watchTimeouts][1] = -> LOOP { -> nextFinish=(tagMap_.isEmpty())?Long.MAX_VALUE:(CallItem) tagMap_.get(tagMap_.firstKey(),).finish_@ -> delay=nextFinish-System.currentTimeMillis()@ -> IF { -> TRY { -> tagMap_.wait(delay,)@delay>0 } CATCH(InterruptedException) { -> Thread.currentThread().interrupt()@ } } -> it=tagMap_.entrySet().iterator()@ }
results[https://github.com/uditrugman/openjdk8-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/util/TreeMap/SubMap.java][main][3] = -> TRY {  -> m2=m.subMap(new Integer(2,),new Integer(2,),)@ -> TRY { -> m2.firstKey()@ } -> TRY { -> m2.lastKey()@ } -> IF { -> throw new Exception("first key wrong",)@!(m3.firstKey().equals(new Integer(2,),)) } -> IF { -> throw new Exception("last key wrong",)@!(m3.lastKey().equals(new Integer(2,),)) && !(!(m3.firstKey().equals(new Integer(2,),))) } } CATCH(Exception) {}
results[https://github.com/lemmy/SecuredSLP/blob/4c5c4f1d4323e6aae411a59318441e352af12ce4/ch.ethz.iks.slp/src/main/java/ch/ethz/iks/slp/impl/SLPDaemonImpl.java][run][2] = -> TRY { -> LOOP { -> IF { -> serviceDisposalQueue.wait()@serviceDisposalQueue.isEmpty() } ELSE { -> LOOP { -> service=(ServiceURL) serviceDisposalQueue.get(nextActivity,)@!(serviceDisposalQueue.isEmpty()) && !(serviceDisposalQueue.isEmpty())&&(nextActivity=(Long) serviceDisposalQueue.firstKey()).longValue()<=System.currentTimeMillis() -> serviceDisposalQueue.remove(nextActivity,)@!(serviceDisposalQueue.isEmpty()) && !(serviceDisposalQueue.isEmpty())&&(nextActivity=(Long) serviceDisposalQueue.firstKey()).longValue()<=System.currentTimeMillis() } -> IF { -> nextActivity=(Long) serviceDisposalQueue.firstKey()@!(serviceDisposalQueue.isEmpty()) -> waitTime=nextActivity.longValue()-System.currentTimeMillis()@ -> IF { -> serviceDisposalQueue.wait(waitTime,)@!(serviceDisposalQueue.isEmpty()) && waitTime>0 } } } } }
results[https://github.com/and146/SPLAT-ARI/blob/dd5a41620f2739930b8fbe8ea74bacfb77088bef/ttools/src/main/uk/ac/starlink/ttools/filter/SortHeadFilter.java][wrap][2] = -> TRY {  -> headMap=new TreeMap()@ -> LOOP { -> IF { -> headMap.put(sortKey,rseq.getRow(),)@headMap.size()<nrows_ && rseq.next() } ELSE { -> marginal=(SortKey) (keepHead_)?headMap.lastKey():headMap.firstKey()@!(headMap.size()<nrows_) -> IF { -> assert headMap.size()==nrows_@!(headMap.size()<nrows_) -> headMap.remove(marginal,)@!(headMap.size()<nrows_) && marginal.compareTo(sortKey,)*(keepHead_)?+1:-1>0 -> headMap.put(sortKey,rseq.getRow(),)@!(headMap.size()<nrows_) && marginal.compareTo(sortKey,)*(keepHead_)?+1:-1>0 && rseq.next() -> assert headMap.size()==nrows_@!(headMap.size()<nrows_) } } } -> it=headMap.entrySet().iterator()@ } CATCH(IOException) {}
results[https://github.com/jerrevds/ODS/blob/540bba0e3a2f5516142f8377f7caf2a94a3ac454/version1/rosgi/src/main/java/ch/ethz/iks/util/Scheduler.java][run][1] = -> TRY { -> LOOP { -> IF { -> expirationQueue.wait()@expirationQueue.isEmpty() } ELSE { -> LOOP { -> object=expirationQueue.remove(nextActivity,)@!(expirationQueue.isEmpty()) && !(expirationQueue.isEmpty())&&(nextActivity=(Long) expirationQueue.firstKey()).longValue()<=System.currentTimeMillis()+10 -> listener.due(Scheduler.this,nextActivity.longValue(),object,)@!(expirationQueue.isEmpty())&&(nextActivity=(Long) expirationQueue.firstKey()).longValue()<=System.currentTimeMillis()+10 } -> IF { -> nextActivity=(Long) expirationQueue.firstKey()@!(expirationQueue.isEmpty()) -> next=nextActivity.longValue()-System.currentTimeMillis()-10@ -> IF { -> expirationQueue.wait(next,)@!(expirationQueue.isEmpty()) && next>0 } } } } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/Crossbones/android_dalvik/blob/38da5f685e572c154e5b0ed73a5ae56b96d4a320/libcore/concurrent/src/test/java/tests/api/java/util/concurrent/ConcurrentSkipListSubMapTest.java][testDescendingSubMapContents2][184] = -> sm=map.subMap(m2,m3,)@ -> assertEquals(1,sm.size(),)@ -> assertEquals(m2,sm.firstKey(),)@ -> assertEquals(m2,sm.lastKey(),)@ -> assertFalse(sm.containsKey(m1,),)@ -> assertTrue(sm.containsKey(m2,),)@ -> assertFalse(sm.containsKey(m3,),)@ -> assertFalse(sm.containsKey(m4,),)@ -> assertFalse(sm.containsKey(m5,),)@ -> i=sm.keySet().iterator()@ -> j=sm.keySet().iterator()@ -> assertEquals(0,sm.size(),)@ -> assertTrue(sm.isEmpty(),)@ -> assertSame(sm.remove(m3,),null,)@
results[https://github.com/freenet/plugin-Freemail-v0.1/blob/b1127dbb831b616f7e87a246a49284ae1c400c7f/src/fnmail/imap/IMAPHandler.java][handle_fetch][1] = -> msgs=this.mb.listMessages()@ -> IF { -> return @msgs.size()==0 } } ELSE { -> IF { -> to=msgs.size()@!(msgs.size()==0) && parts[1].equals("*",) } ELSE { -> CATCH(NumberFormatException) { -> return @!(msgs.size()==0) && !(parts[1].equals("*",)) } } -> IF { -> return @!(msgs.size()==0) && from==0||to==0||from>msgs.size()||to>msgs.size() } -> LOOP { -> current=(Integer) msgs.firstKey()@msgs.size()>0 && !(msgs.size()==0) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) -> IF { -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 && !(msgs.size()==0) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) } -> IF { -> return @msgs.size()>0 && !(msgs.size()==0) && !(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,)) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) } -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 && !(msgs.size()==0) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && !(!(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,))) }
results[https://github.com/freenet/plugin-Freemail-v0.1/blob/b1127dbb831b616f7e87a246a49284ae1c400c7f/src/fnmail/imap/IMAPHandler.java][handle_uid][1] = -> msgs=this.mb.listMessages()@!(!(this.verify_auth(msg,))) -> IF { -> return @!(!(this.verify_auth(msg,))) && msgs.size()==0 } } ELSE { -> IF { -> tmp=(Integer) msgs.lastKey()@!(msgs.size()==0) && parts[1].equals("*",) && !(!(this.verify_auth(msg,))) } ELSE { -> CATCH(NumberFormatException) { -> return @!(msgs.size()==0) && !(parts[1].equals("*",)) && !(!(this.verify_auth(msg,))) } } -> IF { -> msgs=msgs.tailMap(new Integer(from,),)@!(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> LOOP { -> curuid=(Integer) msgs.firstKey()@msgs.size()>0 && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> IF { -> return @msgs.size()>0 && !(msgs.size()==0) && !(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),msgnum,msg.args,2,true,)) && !(!(this.verify_auth(msg,))) } -> msgs=msgs.tailMap(new Integer(curuid.intValue()+1,),)@msgs.size()>0 && !(msgs.size()==0) && !(!(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),msgnum,msg.args,2,true,))) && !(!(this.verify_auth(msg,))) } } ELSE { -> IF { -> msgs=msgs.tailMap(new Integer(from,),)@!(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> msgs=msgs.headMap(new Integer(to+1,),)@!(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> LOOP { -> targetmsgs[i]=(MailMessage) msgs.values().toArray()[i]@!(msgs.size()==0) && !(!(this.verify_auth(msg,))) && i<targetmsgs.length } } }
results[https://github.com/dukeboard/kevoree-extra/blob/2f6312dfc5b28f7d8e86d175168a94784238b867/org.kevoree.extra.freePastry/src/main/java/rice/p2p/multiring/MultiringIdFactory.java][firstKey][1] = -> return (map.firstKey()==null)?null:(RingId) map.firstKey().getId()@
results[https://github.com/freenet/plugin-Freemail-v0.1/blob/b1127dbb831b616f7e87a246a49284ae1c400c7f/src/fnmail/imap/IMAPHandler.java][handle_select][1] = -> IF { -> msgs=this.mb.listMessages()@ -> numexists=msgs.size()@ -> LOOP { -> current=(Integer) msgs.firstKey()@msgs.size()>0 -> m=(MailMessage) msgs.get(msgs.firstKey(),)@msgs.size()>0 -> m.storeFlags()@ -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 } }
results[https://github.com/axDev-JDK/jdk/blob/f3d3b57687e28b2805bdb70087a6e2ccd982c8d1/src/solaris/classes/sun/awt/X11/XToolkit.java][callTimeoutTasks][3] = -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  tasks={1}",Long.valueOf(System.currentTimeMillis(),),timeoutTasks,)@timeoutTaskLog.isLoggable(PlatformLogger.FINER,) } -> time=(Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> LOOP { -> tasks=(java.util.List) timeoutTasks.remove(time,)@time.compareTo(currentTime,)<=0 && !(timeoutTasks==null||timeoutTasks.isEmpty()) -> LOOP { -> CATCH(ThreadDeath) { -> throw td@time.compareTo(currentTime,)<=0 && !(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() } CATCH(Throwable) { -> processException(thr,)@!(time.compareTo(currentTime,)<=0) && !(iter.hasNext()) && !(timeoutTasks==null||timeoutTasks.isEmpty()) } } -> time=(Long) timeoutTasks.firstKey()@time.compareTo(currentTime,)<=0 && !(iter.hasNext()) && !(timeoutTasks==null||timeoutTasks.isEmpty()) }
results[https://github.com/buglabs/bug-osgi/blob/3f7851d8b7932b8d7fe62668dcc20c372ed33fb1/com/buglabs/util/ServiceFilterGenerator.java][generatePropertiesFilter][2] = -> IF { -> return "("+(String) propertiesMap.firstKey()+"="+(String) propertiesMap.get(propertiesMap.firstKey(),)+")"@propertiesMap.size()==1 } ELSE { -> IF { -> return "(&"+generatePropertiesFilter(propertiesMap.subMap(propertiesMap.firstKey(),propertiesMap.firstKey()+"\0",),)+generatePropertiesFilter(propertiesMap.tailMap(propertiesMap.firstKey()+"\0",),)+")"@propertiesMap.size()>1 && !(propertiesMap.size()==1) } }
results[https://github.com/buglabs/bug-osgi/blob/8a626292dde0dc44cf53f407f68bc4209dfea14c/com.buglabs.bug.legacy/com/buglabs/util/ServiceFilterGenerator.java][generateServiceFilter][2] = -> IF { -> return "(&("+Constants.OBJECTCLASS+"="+(String) servicesMap.firstKey()+")"+generatePropertiesFilter(new TreeMap((Map) servicesMap.get(servicesMap.firstKey(),),),)+")"@servicesMap.size()==1 } ELSE { -> IF { -> return "(|"+generateServiceFilter(servicesMap.subMap(servicesMap.firstKey(),servicesMap.firstKey()+"\0",),)+generateServiceFilter(servicesMap.tailMap(servicesMap.firstKey()+"\0",),)+")"@servicesMap.size()>1 && !(servicesMap.size()==1) } }
results[https://github.com/sangamon/sneer/blob/9bd0c6327a2520d22321801a94e183a6e5d4daba/sneer/commons/lib/collections-generic-4.01/src/test/org/apache/commons/collections15/map/TestLazySortedMap.java][testSortOrder][1] = -> map=makeTestSortedMap(oneFactory,)@ -> map.put("A","a",)@ -> map.get("B",)@ -> map.put("C","c",)@ -> assertEquals("First key should be A",map.firstKey(),"A",)@ -> assertEquals("Last key should be C",map.lastKey(),"C",)@ -> assertEquals("First key in tail map should be B",map.tailMap("B",).firstKey(),"B",)@ -> assertEquals("Last key in head map should be B",map.headMap("C",).lastKey(),"B",)@ -> assertEquals("Last key in submap should be B",map.subMap("A","C",).lastKey(),"B",)@ -> c=map.comparator()@
results[https://github.com/sangamon/sneer/blob/9bd0c6327a2520d22321801a94e183a6e5d4daba/sneer/commons/lib/collections-generic-4.01/src/test/org/apache/commons/collections15/map/TestPredicatedSortedMap.java][testSortOrder][1] = -> map=makeTestSortedMap()@ -> map.put("A","a",)@ -> map.put("B","b",)@ -> TRY { -> map.put(null,"c",)@ } -> map.put("C","c",)@ -> TRY { -> map.put("D",null,)@ } -> assertEquals("First key should be A",map.firstKey(),"A",)@ -> assertEquals("Last key should be C",map.lastKey(),"C",)@ -> assertEquals("First key in tail map should be B",map.tailMap("B",).firstKey(),"B",)@ -> assertEquals("Last key in head map should be B",map.headMap("C",).lastKey(),"B",)@ -> assertEquals("Last key in submap should be B",map.subMap("A","C",).lastKey(),"B",)@ -> c=map.comparator()@
results[https://github.com/PA-MIRAGE/android_dalvik/blob/38da5f685e572c154e5b0ed73a5ae56b96d4a320/libcore/concurrent/src/test/java/tests/api/java/util/concurrent/ConcurrentSkipListSubMapTest.java][testDescendingSubMapContents][184] = -> sm=map.subMap(m2,m4,)@ -> assertEquals(m2,sm.firstKey(),)@ -> assertEquals(m3,sm.lastKey(),)@ -> assertEquals(2,sm.size(),)@ -> assertFalse(sm.containsKey(m1,),)@ -> assertTrue(sm.containsKey(m2,),)@ -> assertTrue(sm.containsKey(m3,),)@ -> assertFalse(sm.containsKey(m4,),)@ -> assertFalse(sm.containsKey(m5,),)@ -> i=sm.keySet().iterator()@ -> j=sm.keySet().iterator()@ -> assertEquals(1,sm.size(),)@ -> assertEquals(m3,sm.firstKey(),)@ -> assertEquals(m3,sm.lastKey(),)@ -> assertEquals("C",sm.remove(m3,),)@ -> assertTrue(sm.isEmpty(),)@
results[https://github.com/jankotek/MapDB/blob/05b942ae18093a0fabc96d89eae0ef0d2d6c7946/src/test/java/org/mapdb/BTreeMapExtendTest.java][test_SubMap_firstKey][1] = -> firstKey1=new Integer(100,).toString()@ -> firstKey2=new Integer(101,).toString()@ -> assertEquals(firstKey1,subMap_default.firstKey(),)@ -> assertEquals(firstKey2,subMap_startExcluded_endExcluded.firstKey(),)@ -> assertEquals(firstKey2,subMap_startExcluded_endIncluded.firstKey(),)@ -> assertEquals(firstKey1,subMap_startIncluded_endExcluded.firstKey(),)@ -> assertEquals(firstKey1,subMap_startIncluded_endIncluded.firstKey(),)@ -> TRY { -> subMap_default.subMap(firstKey1,firstKey1,).firstKey()@ } -> TRY { -> subMap_startExcluded_endExcluded.subMap(firstKey2,firstKey2,).firstKey()@ } -> TRY { -> subMap_startExcluded_endIncluded.subMap(firstKey2,firstKey2,).firstKey()@ } -> TRY { -> subMap_startIncluded_endExcluded.subMap(firstKey1,firstKey1,).firstKey()@ } -> TRY { -> subMap_startIncluded_endIncluded.subMap(firstKey1,firstKey1,).firstKey()@ } -> assertEquals(firstKey1,subMap_default_comparator.firstKey(),)@ -> assertEquals(firstKey2,subMap_startExcluded_endExcluded_comparator.firstKey(),)@ -> assertEquals(firstKey2,subMap_startExcluded_endIncluded_comparator.firstKey(),)@ -> assertEquals(firstKey1,subMap_startIncluded_endExcluded_comparator.firstKey(),)@ -> assertEquals(firstKey1,subMap_startIncluded_endIncluded_comparator.firstKey(),)@ -> TRY { -> subMap_default_comparator.subMap(firstKey1,firstKey1,).firstKey()@ } -> TRY { -> subMap_startExcluded_endExcluded_comparator.subMap(firstKey2,firstKey2,).firstKey()@ } -> TRY { -> subMap_startExcluded_endIncluded_comparator.subMap(firstKey2,firstKey2,).firstKey()@ } -> TRY { -> subMap_startIncluded_endExcluded_comparator.subMap(firstKey1,firstKey1,).firstKey()@ } -> TRY { -> subMap_startIncluded_endIncluded_comparator.subMap(firstKey1,firstKey1,).firstKey()@ }
results[https://github.com/kaffe/kaffe/blob/3aef3a4acc96859de7fd0017cc485d186e3fdf9c/test/regression/MapTest.java][checkSorted][1] = -> TRY {  -> IF { -> return @!(map0 instanceof SortedMap) } -> map=(SortedMap) map0@!(!(map0 instanceof SortedMap)) -> checkIsSorted(map,)@!(!(map0 instanceof SortedMap)) -> TRY { -> i=map.keySet().iterator()@!(!(map0 instanceof SortedMap)) -> LOOP { -> ary[++count]=(next==null)?-1:next.intValue()@!(!(map0 instanceof SortedMap)) } -> check(count==map.size(),)@!(!(map0 instanceof SortedMap)) -> halfKey=new Integer((count==0)?0:ary[count/2],)@!(!(map0 instanceof SortedMap)) -> map2=map.tailMap(halfKey,)@!(!(map0 instanceof SortedMap)) -> map3=new TreeMap(map2,)@!(!(map0 instanceof SortedMap)) -> i=map2.entrySet().iterator()@!(!(map0 instanceof SortedMap)) -> LOOP { -> checkIsSorted(map,)@!(!(map0 instanceof SortedMap)) -> checkIsSorted(map2,)@!(!(map0 instanceof SortedMap)) } -> TRY { -> map2.firstKey()@!(!(map0 instanceof SortedMap)) } -> check(map.size()==count/2,)@!(!(map0 instanceof SortedMap)) -> check(map.get(halfKey,)==null,)@!(!(map0 instanceof SortedMap)) -> i=map.keySet().iterator()@!(!(map0 instanceof SortedMap)) -> LOOP { -> check(map.comparator().compare(next,halfKey,)<0,)@!(!(map0 instanceof SortedMap)) -> check(ary[index]==(next==null)?-1:next.intValue(),)@!(!(map0 instanceof SortedMap)) } -> IF { -> TRY { -> check((Integer) map.firstKey().intValue()==ary[0],)@!(!(map0 instanceof SortedMap)) } CATCH(NullPointerException) { -> check(ary[0]==-1,)@!(!(map0 instanceof SortedMap)) } -> TRY { -> check((Integer) map.lastKey().intValue()==ary[count/2-1],)@!(!(map0 instanceof SortedMap)) && count>1 } CATCH(NullPointerException) { -> check(ary[count/2-1]==-1,)@!(!(map0 instanceof SortedMap)) && count>1 } } -> LOOP { -> map2.put(e.getKey(),e.getValue(),)@!(!(map0 instanceof SortedMap)) -> checkIsSorted(map,)@!(!(map0 instanceof SortedMap)) -> checkIsSorted(map2,)@!(!(map0 instanceof SortedMap)) } -> IF { -> TRY { -> check((Integer) map.firstKey().intValue()==ary[0],)@!(!(map0 instanceof SortedMap)) } CATCH(NullPointerException) { -> check(ary[0]==-1,)@!(!(map0 instanceof SortedMap)) } -> TRY { -> check((Integer) map.lastKey().intValue()==ary[count-1],)@!(!(map0 instanceof SortedMap)) && count>0 } CATCH(NullPointerException) { -> check(ary[count-1]==-1,)@!(!(map0 instanceof SortedMap)) && count>0 } } -> i=map.keySet().iterator()@!(!(map0 instanceof SortedMap)) -> LOOP { -> check(ary[++index]==(next==null)?-1:next.intValue(),)@!(!(map0 instanceof SortedMap)) } } } CATCH(Exception) {}
