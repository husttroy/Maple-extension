results[https://github.com/uditrugman/openjdk8-jdk/blob/d3f90dea8d0e0b8fe3a64c235f8f7ae9512c7bd0/src/solaris/classes/sun/awt/X11/XToolkit.java][getNextTaskTime] = -> TRY { -> IF { -> return -1L@timeoutTasks==null||timeoutTasks.isEmpty() } -> return (Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) } FINALLY { }
results[https://github.com/axDev-JDK/jdk/blob/f3d3b57687e28b2805bdb70087a6e2ccd982c8d1/src/solaris/classes/sun/awt/X11/XToolkit.java][getNextTaskTime] = -> TRY { -> IF { -> return -1L@timeoutTasks==null||timeoutTasks.isEmpty() } -> return (Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) } FINALLY { }
results[https://github.com/ikeji/openjdk7-jdk/blob/cfd77a8a983051fa89847e8d8179e67ca78d5b38/src/solaris/classes/sun/awt/X11/XToolkit.java][getNextTaskTime] = -> TRY { -> IF { -> return -1L@timeoutTasks==null||timeoutTasks.isEmpty() } -> return (Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) } FINALLY { }
results[https://github.com/uditrugman/openjdk8-jdk/blob/d3f90dea8d0e0b8fe3a64c235f8f7ae9512c7bd0/src/solaris/classes/sun/awt/X11/XToolkit.java][callTimeoutTasks] = -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  tasks={1}",Long.valueOf(System.currentTimeMillis(),),timeoutTasks,)@timeoutTaskLog.isLoggable(PlatformLogger.Level.FINER,) } -> currentTime=Long.valueOf(System.currentTimeMillis(),)@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> time=(Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> LOOP { -> tasks=(java.util.List) timeoutTasks.remove(time,)@!(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 -> iter=tasks.iterator()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 -> LOOP { -> task=(Runnable) iter.next()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  about to run task={1}",Long.valueOf(currentTime,),task,)@timeoutTaskLog.isLoggable(PlatformLogger.Level.FINER,) && !(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } -> TRY { -> task.run()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } CATCH { -> throw td@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } CATCH { } } -> time=(Long) timeoutTasks.firstKey()@!(iter.hasNext()) && !(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 }
results[https://github.com/ikeji/openjdk7-jdk/blob/cfd77a8a983051fa89847e8d8179e67ca78d5b38/src/solaris/classes/sun/awt/X11/XToolkit.java][callTimeoutTasks] = -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  tasks={1}",Long.valueOf(System.currentTimeMillis(),),timeoutTasks,)@timeoutTaskLog.isLoggable(PlatformLogger.FINER,) } -> currentTime=Long.valueOf(System.currentTimeMillis(),)@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> time=(Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> LOOP { -> tasks=(java.util.List) timeoutTasks.remove(time,)@!(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 -> iter=tasks.iterator()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 -> LOOP { -> task=(Runnable) iter.next()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  about to run task={1}",Long.valueOf(currentTime,),task,)@timeoutTaskLog.isLoggable(PlatformLogger.FINER,) && !(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } -> TRY { -> task.run()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } CATCH { -> throw td@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } CATCH { } } -> time=(Long) timeoutTasks.firstKey()@!(iter.hasNext()) && !(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 }
results[https://github.com/axDev-JDK/jdk/blob/f3d3b57687e28b2805bdb70087a6e2ccd982c8d1/src/solaris/classes/sun/awt/X11/XToolkit.java][callTimeoutTasks] = -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  tasks={1}",Long.valueOf(System.currentTimeMillis(),),timeoutTasks,)@timeoutTaskLog.isLoggable(PlatformLogger.FINER,) } -> currentTime=Long.valueOf(System.currentTimeMillis(),)@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> time=(Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> LOOP { -> tasks=(java.util.List) timeoutTasks.remove(time,)@!(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 -> iter=tasks.iterator()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 -> LOOP { -> task=(Runnable) iter.next()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  about to run task={1}",Long.valueOf(currentTime,),task,)@timeoutTaskLog.isLoggable(PlatformLogger.FINER,) && !(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } -> TRY { -> task.run()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } CATCH { -> throw td@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } CATCH { } } -> time=(Long) timeoutTasks.firstKey()@!(iter.hasNext()) && !(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 }
results[https://github.com/freenet/plugin-Freemail-v0.1/blob/b1127dbb831b616f7e87a246a49284ae1c400c7f/src/fnmail/imap/IMAPHandler.java][handle_fetch] = -> IF { -> return @!(this.verify_auth(msg,)) } -> msgs=this.mb.listMessages()@!(!(this.verify_auth(msg,))) -> IF { -> this.reply(msg,"OK Fetch completed",)@!(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> return @!(!(this.verify_auth(msg,))) && msgs.size()==0 } -> IF { -> this.reply(msg,"BAD Not enough arguments",)@!(msgs.size()==0) && !(!(this.verify_auth(msg,))) && msg.args==null||msg.args.length<2 } -> parts=msg.args[0].split(":",)@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> TRY { -> from=Integer.parseInt(parts[0],)@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) } CATCH { -> this.reply(msg,"BAD Bad number",)@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> return @!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) } } ELSE { -> IF { -> to=msgs.size()@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && parts[1].equals("*",) && !(parts.length<2) } ELSE { -> TRY { -> to=Integer.parseInt(parts[1],)@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(parts.length<2) && !(parts[1].equals("*",)) } CATCH { -> this.reply(msg,"BAD Bad number",)@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(parts.length<2) && !(parts[1].equals("*",)) -> return @!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(parts.length<2) && !(parts[1].equals("*",)) } } -> IF { -> this.reply(msg,"NO Invalid message ID",)@!(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && from==0||to==0||from>msgs.size()||to>msgs.size() && parts.length<2 } -> LOOP { -> current=(Integer) msgs.firstKey()@msgs.size()>0 && !(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && parts.length<2 -> IF { -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 && !(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && i<from && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && parts.length<2 } -> IF { -> this.reply(msg,"BAD Unknown attribute in list or unterminated list",)@!(msg.args==null||msg.args.length<2) && !(msgs.size()>0) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && parts.length<2 && !(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,)) -> return @msgs.size()>0 && !(msg.args==null||msg.args.length<2) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && parts.length<2 && !(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,)) } -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 && !(msg.args==null||msg.args.length<2) && !(!(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,))) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && parts.length<2 } -> this.reply(msg,"OK Fetch completed",)@!(msg.args==null||msg.args.length<2) && !(msgs.size()>0) && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && parts.length<2
