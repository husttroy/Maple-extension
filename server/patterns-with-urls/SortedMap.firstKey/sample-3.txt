results[https://github.com/uditrugman/openjdk8-jdk/blob/d3f90dea8d0e0b8fe3a64c235f8f7ae9512c7bd0/src/solaris/classes/sun/awt/X11/XToolkit.java][getNextTaskTime] = -> TRY { -> IF { -> return -1L@timeoutTasks==null||timeoutTasks.isEmpty() } -> return (Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) } FINALLY { }
results[https://github.com/axDev-JDK/jdk/blob/f3d3b57687e28b2805bdb70087a6e2ccd982c8d1/src/solaris/classes/sun/awt/X11/XToolkit.java][getNextTaskTime] = -> TRY { -> IF { -> return -1L@timeoutTasks==null||timeoutTasks.isEmpty() } -> return (Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) } FINALLY { }
results[https://github.com/ikeji/openjdk7-jdk/blob/cfd77a8a983051fa89847e8d8179e67ca78d5b38/src/solaris/classes/sun/awt/X11/XToolkit.java][getNextTaskTime] = -> TRY { -> IF { -> return -1L@timeoutTasks==null||timeoutTasks.isEmpty() } -> return (Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) } FINALLY { }
results[https://github.com/jerrevds/ODS/blob/540bba0e3a2f5516142f8377f7caf2a94a3ac454/version1/rosgi/src/main/java/ch/ethz/iks/util/Scheduler.java][run] = -> TRY { -> LOOP { -> expirationQueue@ -> IF { -> expirationQueue.wait()@expirationQueue.isEmpty() } ELSE { -> nextActivity@!(expirationQueue.isEmpty()) -> LOOP { -> object=expirationQueue.remove(nextActivity,)@!(expirationQueue.isEmpty()) && !(expirationQueue.isEmpty())&&(nextActivity=(Long) expirationQueue.firstKey()).longValue()<=System.currentTimeMillis()+10 -> listener.due(Scheduler.this,nextActivity.longValue(),object,)@!(expirationQueue.isEmpty()) && !(expirationQueue.isEmpty())&&(nextActivity=(Long) expirationQueue.firstKey()).longValue()<=System.currentTimeMillis()+10 } -> IF { -> nextActivity=(Long) expirationQueue.firstKey()@!(expirationQueue.isEmpty()) -> next=nextActivity.longValue()-System.currentTimeMillis()-10@!(expirationQueue.isEmpty()) -> IF { -> expirationQueue.wait(next,)@!(expirationQueue.isEmpty()) && next>0 } } } } } CATCH { }
results[https://github.com/lemmy/SecuredSLP/blob/4c5c4f1d4323e6aae411a59318441e352af12ce4/ch.ethz.iks.slp/src/main/java/ch/ethz/iks/slp/impl/SLPDaemonImpl.java][run] = -> TRY { -> LOOP { -> serviceDisposalQueue@ -> IF { -> serviceDisposalQueue.wait()@serviceDisposalQueue.isEmpty() } ELSE { -> nextActivity@!(serviceDisposalQueue.isEmpty()) -> LOOP { -> service=(ServiceURL) serviceDisposalQueue.get(nextActivity,)@!(serviceDisposalQueue.isEmpty()) && !(serviceDisposalQueue.isEmpty())&&(nextActivity=(Long) serviceDisposalQueue.firstKey()).longValue()<=System.currentTimeMillis() -> dereg=new ServiceDeregistration(service,null,null,SLPCore.DEFAULT_LOCALE,)@!(serviceDisposalQueue.isEmpty()) && !(serviceDisposalQueue.isEmpty())&&(nextActivity=(Long) serviceDisposalQueue.firstKey()).longValue()<=System.currentTimeMillis() -> TRY { -> deregisterService(dereg,)@!(serviceDisposalQueue.isEmpty()) && !(serviceDisposalQueue.isEmpty())&&(nextActivity=(Long) serviceDisposalQueue.firstKey()).longValue()<=System.currentTimeMillis() } CATCH { } -> SLPCore.platform.logTraceReg("disposed service "+service,)@!(serviceDisposalQueue.isEmpty()) && !(serviceDisposalQueue.isEmpty())&&(nextActivity=(Long) serviceDisposalQueue.firstKey()).longValue()<=System.currentTimeMillis() -> serviceDisposalQueue.remove(nextActivity,)@!(serviceDisposalQueue.isEmpty()) && !(serviceDisposalQueue.isEmpty())&&(nextActivity=(Long) serviceDisposalQueue.firstKey()).longValue()<=System.currentTimeMillis() } -> IF { -> nextActivity=(Long) serviceDisposalQueue.firstKey()@!(serviceDisposalQueue.isEmpty()) -> waitTime=nextActivity.longValue()-System.currentTimeMillis()@!(serviceDisposalQueue.isEmpty()) -> IF { -> SLPCore.platform.logDebug("sleeping for "+waitTime/1000+" seconds.",)@!(serviceDisposalQueue.isEmpty()) && waitTime>0 -> serviceDisposalQueue.wait(waitTime,)@!(serviceDisposalQueue.isEmpty()) && waitTime>0 } } } } }
results[https://github.com/Unidata/thredds/blob/e8e5ce0a3615aad58f81851163c788ca8b67840f/cdm/src/main/java/thredds/util/PathMatcher.java][match] = -> tail=treeMap.tailMap(path,)@ -> IF { -> return null@tail.isEmpty() } -> after=(String) tail.firstKey()@!(tail.isEmpty()) -> IF { -> return treeMap.get(after,)@!(tail.isEmpty()) && path.startsWith(after,) } -> iter=tail.keySet().iterator()@!(tail.isEmpty()) && !(path.startsWith(after,)) -> LOOP { -> key=(String) iter.next()@!(tail.isEmpty()) && iter.hasNext() && !(path.startsWith(after,)) -> IF { -> return treeMap.get(key,)@path.startsWith(key,) && !(tail.isEmpty()) && iter.hasNext() && !(path.startsWith(after,)) } }
results[https://github.com/asascience/THREDDS/blob/257acc04e4ca5edb2302c243cb8f7bc03222b5c7/cdm/src/main/java/thredds/util/PathMatcher.java][match] = -> tail=treeMap.tailMap(path,)@ -> IF { -> return null@tail.isEmpty() } -> after=(String) tail.firstKey()@!(tail.isEmpty()) -> IF { -> return treeMap.get(after,)@!(tail.isEmpty()) && path.startsWith(after,) } -> iter=tail.keySet().iterator()@!(tail.isEmpty()) && !(path.startsWith(after,)) -> LOOP { -> key=(String) iter.next()@!(tail.isEmpty()) && iter.hasNext() && !(path.startsWith(after,)) -> IF { -> return treeMap.get(key,)@path.startsWith(key,) && !(tail.isEmpty()) && iter.hasNext() && !(path.startsWith(after,)) } }
results[https://github.com/uditrugman/openjdk8-jdk/blob/d3f90dea8d0e0b8fe3a64c235f8f7ae9512c7bd0/src/solaris/classes/sun/awt/X11/XToolkit.java][callTimeoutTasks] = -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  tasks={1}",Long.valueOf(System.currentTimeMillis(),),timeoutTasks,)@timeoutTaskLog.isLoggable(PlatformLogger.Level.FINER,) } -> currentTime=Long.valueOf(System.currentTimeMillis(),)@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> time=(Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> LOOP { -> tasks=(java.util.List) timeoutTasks.remove(time,)@!(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 -> iter=tasks.iterator()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 -> LOOP { -> task=(Runnable) iter.next()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  about to run task={1}",Long.valueOf(currentTime,),task,)@timeoutTaskLog.isLoggable(PlatformLogger.Level.FINER,) && !(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } -> TRY { -> task.run()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } CATCH { -> throw td@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } CATCH { } } -> time=(Long) timeoutTasks.firstKey()@!(iter.hasNext()) && !(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 }
results[https://github.com/ikeji/openjdk7-jdk/blob/cfd77a8a983051fa89847e8d8179e67ca78d5b38/src/solaris/classes/sun/awt/X11/XToolkit.java][callTimeoutTasks] = -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  tasks={1}",Long.valueOf(System.currentTimeMillis(),),timeoutTasks,)@timeoutTaskLog.isLoggable(PlatformLogger.FINER,) } -> currentTime=Long.valueOf(System.currentTimeMillis(),)@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> time=(Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> LOOP { -> tasks=(java.util.List) timeoutTasks.remove(time,)@!(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 -> iter=tasks.iterator()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 -> LOOP { -> task=(Runnable) iter.next()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  about to run task={1}",Long.valueOf(currentTime,),task,)@timeoutTaskLog.isLoggable(PlatformLogger.FINER,) && !(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } -> TRY { -> task.run()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } CATCH { -> throw td@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } CATCH { } } -> time=(Long) timeoutTasks.firstKey()@!(iter.hasNext()) && !(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 }
results[https://github.com/axDev-JDK/jdk/blob/f3d3b57687e28b2805bdb70087a6e2ccd982c8d1/src/solaris/classes/sun/awt/X11/XToolkit.java][callTimeoutTasks] = -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  tasks={1}",Long.valueOf(System.currentTimeMillis(),),timeoutTasks,)@timeoutTaskLog.isLoggable(PlatformLogger.FINER,) } -> currentTime=Long.valueOf(System.currentTimeMillis(),)@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> time=(Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> LOOP { -> tasks=(java.util.List) timeoutTasks.remove(time,)@!(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 -> iter=tasks.iterator()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 -> LOOP { -> task=(Runnable) iter.next()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  about to run task={1}",Long.valueOf(currentTime,),task,)@timeoutTaskLog.isLoggable(PlatformLogger.FINER,) && !(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } -> TRY { -> task.run()@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } CATCH { -> throw td@!(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() && time.compareTo(currentTime,)<=0 } CATCH { } } -> time=(Long) timeoutTasks.firstKey()@!(iter.hasNext()) && !(timeoutTasks==null||timeoutTasks.isEmpty()) && time.compareTo(currentTime,)<=0 }
