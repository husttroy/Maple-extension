results[https://github.com/iGio90/android_frameworks_base/blob/c2c778533288efb45107521eee9fcab82892fc9e/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_Aliases_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ } CATCH(Exception) {}
results[https://github.com/cubieboard/openbox_libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/support/src/test/java/java/security/TestKeyStore.java][createKeyStore][46] = -> TRY {  -> keyStore=KeyStore.getInstance("BKS",)@ -> keyStore.load(null,null,)@ } CATCH(Exception) {}
results[https://github.com/justinsb/android-libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore3Test.java][test_setKeyEntry_null][108] = -> TRY {  -> mockKeyStore.load(null,null,)@ -> mockKeyStore.setKeyEntry(null,null,null,null,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetEntry_NullParams_Encrypted_Success][7] = -> TRY {  -> mKeyStore.load(null,null,)@ -> entry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCreationDate_CAEntry_Encrypted_Success][11] = -> TRY {  -> mKeyStore.load(null,null,)@ -> actual=mKeyStore.getCreationDate(TEST_ALIAS_1,)@ } CATCH(Exception) {}
results[https://github.com/bomm/thera-pi/blob/be4e017e09ec946d1df0faf475d260a5b0d8a39c/Nebraska/src/nebraska/BCStatics3.java][erzeugeLeerenKeyStore][2] = -> TRY {  -> store=KeyStore.getInstance("BCPKCS12","BC",)@ -> store.load(null,null,)@ } CATCH(Exception) {}
results[https://github.com/Blakez/android_frameworks_base/blob/11714fcbb86c041579b3f2c64bc7e27ed7fc2705/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetKey_NoPassword_Success][6] = -> TRY {  -> mKeyStore.load(null,null,)@ -> key=mKeyStore.getKey(TEST_ALIAS_1,null,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetCertificate_CAExists_Overwrite_Encrypted_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.setCertificateEntry(TEST_ALIAS_1,cert,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_DeleteEntry_NonExistent_Encrypted_Success][2] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.deleteEntry(TEST_ALIAS_2,)@ } CATCH(Exception) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/KeyStore3Test.java][test_store_null][2] = -> TRY {  -> mockKeyStore.load(null,null,)@ -> mockKeyStore.store(null,null,)@ } CATCH(Exception) {}
results[https://github.com/apache/wss4j/blob/4144643cb68d85c08fcaabd2ffaf27c0d5255992/streaming-ws-security/src/main/java/org/apache/ws/security/stax/wss/ext/WSSSecurityProperties.java][loadDecryptionKeystore][16] = -> TRY {  -> keyStore=KeyStore.getInstance("jks",)@ -> keyStore.load(url.openStream(),keyStorePassword,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCertificateAlias_CAEntry_Encrypted_Success][15] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertEquals("Stored certificate alias should be found",TEST_ALIAS_1,mKeyStore.getCertificateAlias(actual,),)@ } CATCH(Exception) {}
results[https://github.com/hongxucn/platform_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/support/src/test/java/libcore/java/security/TestKeyStore.java][createKeyStore][38] = -> TRY { -> keyStore=KeyStore.getInstance(StandardNames.KEY_STORE_ALGORITHM,)@ -> keyStore.load(null,null,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetEntry_Nonexistent_NullParams_Failure][6] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertNull("A non-existent entry should return null",mKeyStore.getEntry(TEST_ALIAS_1,null,),)@ } CATCH(Exception) {}
results[https://github.com/iGio90/android_frameworks_base/blob/c2c778533288efb45107521eee9fcab82892fc9e/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_ContainsAliases_CAOnly_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertTrue("Should contain added CA certificate",mKeyStore.containsAlias(TEST_ALIAS_2,),)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCertificateChain_NonExist_Encrypted_Failure][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertNull("Stored certificate alias should not be found",mKeyStore.getCertificateChain(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/iGio90/android_frameworks_base/blob/c2c778533288efb45107521eee9fcab82892fc9e/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_IsKeyEntry_CA_Failure][10] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertFalse("Should return false for CA certificate",mKeyStore.isKeyEntry(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/NEXUS-EVO/frameworks_base/blob/6849ad8fbb03c21d6aa61e1bd53fe7b449cd6adb/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_IsCertificateEntry_NonExist_Failure][11] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertFalse("Should return false for non-existent entry",mKeyStore.isCertificateEntry(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/jgzornoza/SistemaVotacion/blob/96032edf244214c4a0448d2a97145571422e9e81/VotingSystemLibrary/src/main/java/org/votingsystem/signature/util/KeyStoreUtil.java][getKeyStoreFromBytes][1] = -> TRY {  -> store=KeyStore.getInstance("JKS",)@ -> store.load(new ByteArrayInputStream(keyStore,),password,)@ } CATCH(Exception) {}
results[https://github.com/Blakez/android_frameworks_base/blob/11714fcbb86c041579b3f2c64bc7e27ed7fc2705/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCertificateAlias_NonExist_Empty_Failure][10] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertNull("Stored certificate alias should not be found",mKeyStore.getCertificateAlias(actual,),)@ } CATCH(Exception) {}
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetKey_NonExistent_Failure][10] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertNull("A non-existent entry should return null",mKeyStore.getKey(TEST_ALIAS_1,null,),)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_IsKeyEntry_PrivateKey_Encrypted_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertTrue("Should return true for PrivateKeyEntry",mKeyStore.isKeyEntry(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetEntry_PrivateKeyEntry_Encrypted_Success][6] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.setEntry(TEST_ALIAS_1,expected,null,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ } CATCH(Exception) {}
results[https://github.com/iGio90/android_frameworks_base/blob/c2c778533288efb45107521eee9fcab82892fc9e/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_IsCertificateEntry_CA_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertTrue("Should return true for CA certificate",mKeyStore.isCertificateEntry(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetKeyEntry_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.setKeyEntry(TEST_ALIAS_1,privKey,null,chain,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ } CATCH(Exception) {}
results[https://github.com/NEXUS-EVO/frameworks_base/blob/6849ad8fbb03c21d6aa61e1bd53fe7b449cd6adb/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_ContainsAliases_NonExistent_Failure][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertFalse("Should contain added CA certificate",mKeyStore.containsAlias(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCertificate_NonExist_Failure][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertNull("Certificate should not exist in keystore",mKeyStore.getCertificate(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/wso2/commons/blob/6adfc623c63fd98791a12e57612156db7d00b67e/opensaml-1.1.406/tests/org/opensaml/POSTProfileTest.java][setUp][4] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(path,),password,)@ } CATCH(Exception) {}
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetCertificate_CA_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.setCertificateEntry(TEST_ALIAS_1,actual,)@ -> retrieved=mKeyStore.getCertificate(TEST_ALIAS_1,)@ } CATCH(Exception) {}
results[https://github.com/bladesilent/Harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/KeyManagerImplTest.java][testKeyManagerImpl1][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> km=new KeyManagerImpl(ks, new char[],)@ } CATCH(Exception) {}
results[https://github.com/bladesilent/Harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/KeyManagerFactoryImplTest.java][testEngineGetKeyManagers][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> kmf.engineInit(ks,null,)@ } CATCH(Exception) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/TrustManagerFactoryImplTest.java][testEngineGetTrustManagers][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> tmf.engineInit(ks,)@ } CATCH(Exception) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/TrustManagerImplTest.java][testTrustManagerImpl_1][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> tm=new TrustManagerImpl(ks,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_DeleteEntry_Encrypted_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.deleteEntry(TEST_ALIAS_1,)@ -> mKeyStore.deleteEntry(TEST_ALIAS_3,)@ -> mKeyStore.deleteEntry(TEST_ALIAS_2,)@ } CATCH(Exception) {}
results[https://github.com/davros-/android_libcore_s4/blob/e888585a72df3786111230769d73fee92dbbfb39/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java][test_deleteEmptyEntryEmptyAlias][76] = -> TRY {  -> keyTest=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyTest.load(null,null,)@ -> keyTest.deleteEntry("",)@ } CATCH(Exception) {}
results[https://github.com/ezterry/GB-libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore3Test.java][test_setKeyEntry_key_is_public][54] = -> TRY {  -> mockKeyStore.load(null,null,)@ -> mockKeyStore.setKeyEntry("Alias1",key,null,null,)@ -> mockKeyStore.setKeyEntry("Alias2",key,null, new Certificate[],)@ -> mockKeyStore.setKeyEntry("Alias3",key,null, new Certificate[],)@ } CATCH(Exception) {}
results[https://github.com/TaintDroid/android_platform_libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/support/src/test/java/java/security/TestKeyStore.java][createClient][45] = -> TRY { -> clientKeyStore=clientKeyStore=KeyStore.getInstance("BKS",)@ -> clientKeyStore.load(null,null,)@ -> copySelfSignedCertificates(clientKeyStore,caKeyStore,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/brachior/platform_dalvik/blob/f6c387128427e121477c1b32ad35cdcaa5101ba3/dx/tests/060-dex-call-static/Zorch.java][createKeyStore][1] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> ks.setKeyEntry(privateAlias,privateKey,keyStorePassword,x509cc,)@ -> ks.setCertificateEntry(publicAlias,x509c,)@ } CATCH(Exception) {}
results[https://github.com/Blakez/android_frameworks_base/blob/11714fcbb86c041579b3f2c64bc7e27ed7fc2705/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCertificateChain_SingleLength_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> actual=mKeyStore.getCertificateChain(TEST_ALIAS_1,)@ -> assertNull("Stored certificate alias should not be found",mKeyStore.getCertificateChain(TEST_ALIAS_2,),)@ } CATCH(Exception) {}
results[https://github.com/ursatong/GuardroidROM/blob/01a1c6fbcaf758ea6d9cf6296618bc6092733b36/libcore/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore3Test.java][test_setCertificateEntry_null][54] = -> TRY {  -> mockKeyStore.load(null,null,)@ -> mockKeyStore.setCertificateEntry(null,null,)@ -> mockKeyStore.setCertificateEntry(null,certificate,)@ -> mockKeyStore.setCertificateEntry("Alias",null,)@ } CATCH(Exception) {}
results[https://github.com/pruiz/signserver/blob/58966c93e12a4935902edf33db604a38742cfa76/signserver/modules/SignServer-Client-SignServerWS/src/org/signserver/protocol/ws/client/CustomJKSKeyManager.java][<init>][1] = -> TRY {  -> trustStore=KeyStore.getInstance("JKS",)@ -> password=keyStorePwd.toCharArray()@ -> trustStore.load(new FileInputStream(keyStorePath,),password,)@ } CATCH(Exception) {}
results[https://github.com/rtyley/spongycastle/blob/9a2b105b6c8c8cbfeea077e0552e04b3b476f1e5/prov/src/test/java/org/spongycastle/jce/provider/test/KeyStoreTest.java][checkStore][16] = -> TRY {  -> ks.load(new ByteArrayInputStream(data,),oldStorePass,)@ -> key=ks.getKey("android",oldStorePass,)@ -> ks.store(bOut,oldStorePass,)@ } CATCH(Exception) {}
results[https://github.com/dotCMS/dotCMS/blob/2ca65e2d8f3180e615efc7e46e1175cb91226918/src/com/dotcms/publisher/util/TrustFactory.java][<init>][3] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(trustStore,),password,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/Blakez/android_frameworks_base/blob/11714fcbb86c041579b3f2c64bc7e27ed7fc2705/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_DeleteEntry_NonExistent_Failure][8] = -> TRY {  -> mKeyStore.load(null,null,)@ -> TRY { -> mKeyStore.deleteEntry(TEST_ALIAS_2,)@ } } CATCH(Exception) {}
results[https://github.com/mlundblad/bc-java/blob/158b54fbacb8926df0e74086e95900924c862b6e/src/main/java/org/bouncycastle/jce/examples/PKCS12Example.java][main][8] = -> TRY {  -> store=KeyStore.getInstance("PKCS12","BC",)@ -> store.load(null,null,)@ -> store.setKeyEntry("Eric's Key",privKey,null,chain,)@ -> store.store(fOut,passwd,)@ } CATCH(Exception) {}
results[https://github.com/abhijitsarkar/java/blob/15a411bf8197ece656945af2bfda6f62dcb9ee6d/xml/xml-security/src/main/java/name/abhijitsarkar/xml/security/KeyStoreManager.java][loadKeyStore][3] = -> TRY {  -> ks=KeyStore.getInstance("JCEKS",)@ -> ks.load(new FileInputStream(keystore,),storePassword.toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/apache/santuario-java/blob/6fa7ee072a03c0a4bedbac3c4d1a5604192aa72f/src/test/java/org/apache/xml/security/test/dom/signature/ECDSASignatureTest.java][testOne][3] = -> TRY {  -> keyStore=KeyStore.getInstance("JKS",)@ -> keyStore.load(new java.io.FileInputStream(ECDSA_JKS,),ECDSA_JKS_PASSWORD.toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/apache/wss4j/blob/9221c69be864015e72f90b183b01211ace089dc8/ws-security-stax/src/main/java/org/apache/wss4j/stax/ext/WSSSecurityProperties.java][loadSignatureVerificationKeystore][4] = -> TRY {  -> keyStore=KeyStore.getInstance("jks",)@ -> keyStore.load(url.openStream(),keyStorePassword,)@ -> signatureVerificationWSSCrypto.setKeyStore(keyStore,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCertificate_Single_Encrypted_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertNull("Certificate should not exist in keystore",mKeyStore.getCertificate(TEST_ALIAS_2,),)@ -> retrieved=mKeyStore.getCertificate(TEST_ALIAS_1,)@ } CATCH(Exception) {}
results[https://github.com/loopj/android-async-http/blob/562e118fdc5fdfd2cc40409174ddae0a9a4884ef/library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java][getKeystoreOfCA][1] = -> TRY { -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("ca",ca,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetCertificate_PrivateKeyExists_Failure][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> TRY { -> mKeyStore.setCertificateEntry(TEST_ALIAS_1,cert,)@ } } CATCH(Exception) {}
results[https://github.com/EnderWiggin/Haven-and-Hearth-client-modified-by-Ender/blob/3dc60a9b44e3bc50838e38f8139b8b79a8968b3b/src/haven/SslHelper.java][<init>][5] = -> TRY { -> trusted=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trusted.load(null,null,)@ } CATCH(Exception) { -> throw new Error(e,)@ }
results[https://github.com/apache/santuario-java/blob/d2706890674fecb7351d50a3cf55c2f851629216/src/test/java/org/apache/xml/security/test/signature/SignatureTest.java][getKeyStore][5] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ksis=new FileInputStream(KEYSTORE_DIRECTORY+"test.jks",)@ -> ks.load(ksis,KEYSTORE_PASSWORD,)@ -> ksis.close()@ } CATCH(Exception) {}
results[https://github.com/apache/ftpserver/blob/d454a47e596bbc71f88e79bdbc4757574268c725/ssl-tests/src/test/org/apache/ftpserver/ssl/MinaClientAuthTest.java][createFTPClient][8] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(FTPCLIENT_KEYSTORE,),KEYSTORE_PASSWORD,)@ -> kmf.init(ks,KEYSTORE_PASSWORD,)@ } CATCH(Exception) {}
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_Store_LoadStoreParam_Failure][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> TRY { -> mKeyStore.store(null,)@ } } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/ba6e9e97c84948700e301eb25dc16e8a36b52524/test/sun/security/mscapi/ShortRSAKeyWithinTLS.java][doClientSide][2] = -> TRY {  -> ks=KeyStore.getInstance("Windows-MY","SunMSCAPI",)@ -> ks.load(null,null,)@ -> kmf.init(ks,null,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/1d238c66aad78972570771d075a288ba9c558372/test/sun/security/pkcs11/fips/CipherTest.java][readKeyStore][9] = -> TRY {  -> in=new FileInputStream(file,)@ -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(in,passwd,)@ -> in.close()@ } CATCH(Exception) {}
results[https://github.com/apache/activemq/blob/8bf987b134bd827b93ed8157b323bc3bd2d8a82e/activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslBrokerServiceTest.java][getTrustManager][6] = -> TRY {  -> trustedCertStore=KeyStore.getInstance(SslTransportBrokerTest.KEYSTORE_TYPE,)@ -> trustedCertStore.load(new FileInputStream(SslTransportBrokerTest.TRUST_KEYSTORE,),null,)@ -> tmf.init(trustedCertStore,)@ } CATCH(Exception) {}
results[https://github.com/rowboat/libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/tests/api/javax/net/ssl/TrustManagerFactory1Test.java][test_initLjavax_net_ssl_ManagerFactoryParameters][14] = -> TRY { -> kStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> kStore.load(null,null,)@ } CATCH(Exception) { -> fail("Unexpected exception for configuration: "+e,)@ }
results[https://github.com/NCIP/cagrid2/blob/98afa0e95b32173f05d905d24fba8d570e8438c2/cagrid-dorian/cagrid-dorian-service-tools/src/main/java/org/cagrid/dorian/service/tools/CreateTrustStore.java][execute][1] = -> TRY {  -> trustStore=KeyStore.getInstance("JKS",)@ -> trustStore.load(null,null,)@ -> trustStore.setCertificateEntry(ALIAS,certificate,)@ -> trustStore.store(truststoreStream,STORE_PASSWORD,)@ } CATCH(Exception) {}
results[https://github.com/liangqi/xqwizard/blob/2636959b41756eea61c573350a9e787145a9e22d/XQWAjax/src/xqwajax/util/cert/CertKey.java][toKeyStore][3] = -> TRY {  -> keyStore=KeyStore.getInstance(type,)@ -> keyStore.load(null,null,)@ -> keyStore.setKeyEntry("",key,password.toCharArray(),certChain,)@ } CATCH(Exception) {}
results[https://github.com/songzhiyong/lib_song/blob/9749c7c2891b86b47ee0199b4449bc48cb1d4370/src/com/loopj/android/http/MySSLSocketFactory.java][getKeystoreOfCA][2] = -> TRY { -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("ca",(java.security.cert.Certificate) ca,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/splunk/splunk-shuttl/blob/e078a7d7c4ad58f98c1d0053bdfc914ff0763389/src/java/com/splunk/ShuttlPortEntity.java][getTrustStore][3] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/kencochrane/raven-java/blob/42c385b2c5a78e3a10e7f28188e6d4ad0c130b29/raven-getsentry/src/main/java/net/kencochrane/raven/getsentry/connection/GetSentryHttpsConnection.java][getStartcomSslFactory][1] = -> TRY {  -> ks=KeyStore.getInstance("jks",)@ -> ks.load(null,null,)@ -> ks.setCertificateEntry("ca",ca,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/sun/security/pkcs11/KeyStore/ClientAuth.java][doClientSide][3] = -> TRY {  -> passphrase=NSS_PWD.toCharArray()@ -> ks=KeyStore.getInstance("PKCS11","SunPKCS11-nss",)@ -> ks.load(null,passphrase,)@ -> kmf.init(ks,passphrase,)@ } CATCH(Exception) {}
results[https://github.com/vyloy/lnvc/blob/38625c0c7f2c0e5c562bcd3cea11043a281b6a54/lvmc/openfire_src/src/java/org/jivesoftware/openfire/net/SSLConfig.java][initializeKeyStore][4] = -> TRY { -> keyStore=KeyStore.getInstance(storeType,)@ -> keyStore.load(null,keypass.toCharArray(),)@ } CATCH(Exception) { -> Log.error("Unable to initialize keystore: ",e,)@ }
results[https://github.com/dotCMS/dotCMS/blob/2ca65e2d8f3180e615efc7e46e1175cb91226918/src/com/dotcms/publisher/util/TrustFactory.java][<init>][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(keyStore,),password,)@ -> kmf.init(ks,password,)@ } CATCH(Exception) {}
results[https://github.com/prey/prey-android-client/blob/591ae9eb082a1032ffd60f1498e127871348fe65/src/com/prey/net/HttpUtils.java][getNewHttpClient][2] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new EasySSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/axDev-JDK/jdk/blob/acbdb0ade569a980d025ec2b09f528c0bc1a29cd/test/sun/security/provider/KeyStore/TestJKSWithSecretKey.java][main][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(null,passwd,)@ -> TRY { -> ks.setKeyEntry("test_encrypt_key",key,passwd,null,)@ } } CATCH(Exception) {}
results[https://github.com/huashizhenhua/TadpoleWeibo/blob/85d891b039d2a5abff1407f438055e3c0f1e6268/weibo.sdk.android.sso.demo/src/com/weibo/sdk/android/net/HttpManager.java][getNewHttpClient][29] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new MySSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/ezterry/GB-libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/tests/api/javax/net/ssl/KeyManagerFactorySpiTest.java][test_engineInit_01][21] = -> TRY { -> kst=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> kst.load(null,null,)@ -> kmf.engineInit(kst,psw,)@ } CATCH(Exception) { -> fail("Unexpected exception "+e,)@ }
results[https://github.com/otruffer/Ape_On_Tape/blob/d45effcb146762c3d202b1b4e5c93c300cf5b28f/src/org/webbitserver/helpers/SslFactory.java][<init>][1] = -> TRY { -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(keyStore,storePass.toCharArray(),)@ } CATCH(Exception) { -> throw new WebbitException(e,)@ }
results[https://github.com/rmcc/android_dalvik/blob/f6c387128427e121477c1b32ad35cdcaa5101ba3/libcore/x-net/src/test/java/tests/api/javax/net/ssl/SSLContextSpiTest.java][test_engineInit][43] = -> TRY { -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(null,null,)@ -> trustMF.init(ks,)@ } CATCH(Exception) { -> fail(ex+" unexpected exception",)@ }
results[https://github.com/Root-Box/libcore/blob/45273a0346df3d08c9c7bbf84cc1474192703df1/luni/src/test/java/tests/targets/security/cert/CertificateTest.java][createPKIXParams][21] = -> TRY {  -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("selfSignedCert",certs[0],)@ -> params=new PKIXParameters(keyStore,)@ } CATCH(Exception) {}
results[https://github.com/violetagg/apache-tomcat-8.0/blob/2d261e76344e1328498e9a59bb543a1b0d46b742/modules/tomcat-lite/java/org/apache/tomcat/lite/io/jsse/JsseSslProvider.java][getCertificateFromStore][3] = -> TRY {  -> store=KeyStore.getInstance("JKS",)@ -> store.load(new FileInputStream(file,),pass.toCharArray(),)@ -> certificate=store.getCertificate("tomcat",)@ } CATCH(Exception) {}
results[https://github.com/Blakez/android_frameworks_base/blob/11714fcbb86c041579b3f2c64bc7e27ed7fc2705/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetKeyEntry_ReplacedChain_DifferentPrivateKey_Failure][4] = -> TRY {  -> mKeyStore.load(null,null,)@ -> key1=mKeyStore.getKey(TEST_ALIAS_2,null,)@ -> TRY { -> mKeyStore.setKeyEntry(TEST_ALIAS_1,key1,null, new Certificate[],)@ } } CATCH(Exception) {}
results[https://github.com/imoseyon/leanKernel-d2usc-deprecated/blob/85dca4838d36fa8e8db240b308ebe03f9643160c/libcore/luni/src/test/java/tests/targets/security/cert/CertPathBuilderTestPKIX.java][getCertPathParameters][21] = -> TRY {  -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("selfSignedCert",selfSignedcertificate,)@ -> parameters=new PKIXBuilderParameters(keyStore,targetConstraints,)@ } CATCH(Exception) {}
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetEntry_PrivateKeyEntry_Overwrites_CAEntry_Success][3] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.setEntry(TEST_ALIAS_1,expectedPrivEntry,null,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ -> mKeyStore.setEntry(TEST_ALIAS_1,expectedCertEntry,null,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ } CATCH(Exception) {}
results[https://github.com/jponge/izpack-full-svn-history-copy/blob/d9d134b71176d2c33fbd96379d0f53dfdbe5e426/izpack-src/tags/4.3.3/src/lib/com/izforge/izpack/util/PasswordKeystoreValidator.java][getKeyStore][7] = -> TRY { -> ks=KeyStore.getInstance(type,)@ -> ks.load(new FileInputStream(fileName,),password,)@ } CATCH(Exception) { -> System.out.println("getKeyStore() Failed: "+e,)@ }
results[https://github.com/jersey/jersey-1.x/blob/a9c4639d76bd493d95e8400e5a53509cf9decfa8/samples/https-clientserver-grizzly/src/test/java/com/sun/jersey/samples/https_grizzly/MainTest.java][<init>][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(keyStore,),password,)@ -> kmf.init(ks,"asdfgh".toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/Olog/olog-java-api/blob/4774678f8fe52141cb597f1c13365f46d5f9e546/ologAPI/src/main/java/edu/msu/nscl/olog/api/MyX509TrustManager.java][<init>][3] = -> TRY {  -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(new FileInputStream(trustStore,),password,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/Blakez/android_frameworks_base/blob/11714fcbb86c041579b3f2c64bc7e27ed7fc2705/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetKeyEntry_Replaced_Success][2] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.setKeyEntry(TEST_ALIAS_1,privKey,null,chain,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ -> mKeyStore.setKeyEntry(TEST_ALIAS_1,privKey,null,chain,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/e29089cd2f1827672b8e1fd7d492d8de8a128937/test/sun/security/ssl/javax/net/ssl/NewAPIs/CheckMyTrustedKeystore.java][doClientSide][3] = -> TRY {  -> uks=KeyStore.getInstance("JKS",)@ -> uks.load(new FileInputStream(unknownFilename,),cpasswd,)@ -> kmf.init(uks,cpasswd,)@ -> kmf1.init(uks,cpasswd,)@ } CATCH(Exception) {}
results[https://github.com/iGio90/android_frameworks_base/blob/c2c778533288efb45107521eee9fcab82892fc9e/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetEntry_PrivateKeyEntry_Overwrites_PrivateKeyEntry_Success][3] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.setEntry(TEST_ALIAS_1,expected,null,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ -> mKeyStore.setEntry(TEST_ALIAS_1,expected,null,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ } CATCH(Exception) {}
results[https://github.com/OlegYch/pdfbox/blob/623a0af37723377676f57213cf74b1a909c23272/src/test/pdfbox/encryption/TestPublicKeyEncryption.java][open][2] = -> TRY {  -> ks=KeyStore.getInstance("PKCS12",)@ -> ks.load(new FileInputStream(certPath,),password.toCharArray(),)@ -> pdm=new PublicKeyDecryptionMaterial(ks,null,password,)@ } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/acbdb0ade569a980d025ec2b09f528c0bc1a29cd/test/sun/security/rsa/TestSignatures.java][getKeyStore][7] = -> TRY {  -> in=new FileInputStream(new File(BASE,"rsakeys.ks",),)@ -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(in,password,)@ -> in.close()@ } CATCH(Exception) {}
results[https://github.com/Blakez/android_frameworks_base/blob/11714fcbb86c041579b3f2c64bc7e27ed7fc2705/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetEntry_CAEntry_Overwrites_CAEntry_Success][4] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.setEntry(TEST_ALIAS_1,expectedCertEntry,null,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ -> mKeyStore.setEntry(TEST_ALIAS_1,expectedUserEntry,null,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ } CATCH(Exception) {}
results[https://github.com/jazzlly/Notes/blob/609d2fd4107e474ebb997a9506b60fa747fb5924/computer.science/android/project/MobileUtil/src/com/pekall/http/HttpClient.java][newSslSocketFactory][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new SSLSocketFactoryEx(trustStore,)@ } CATCH(Exception) { -> throw new AssertionError(e,)@ }
results[https://github.com/Blakez/android_frameworks_base/blob/11714fcbb86c041579b3f2c64bc7e27ed7fc2705/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetKeyEntry_ProtectedKey_Failure][4] = -> TRY {  -> mKeyStore.load(null,null,)@ -> TRY { -> mKeyStore.setKeyEntry(TEST_ALIAS_1,privKey,"foo".toCharArray(),chain,)@ } } CATCH(Exception) {}
results[https://github.com/Genshin/SpreeWarehouseAndroid/blob/2ad84312950b93c1f2f7699d4ffb8343e3cb7f74/src/org/genshin/spree/RESTConnector.java][getHttpClient][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new AnyCertSSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/HawaiianNinja/RoseHulman-Android-App/blob/04826c032f1f910dc9d851b2d65545c65e8417ed/src/awesome/app/SecurityHole.java][getNewHttpClient][2] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new UniversalSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/FreakyPenguin/elexis-hilotec-base/blob/be7fd9159b01d0165281a3cc6c695a9a573df08d/ch.rgw.utility/src/ch/rgw/crypt/JCEKeyManager.java][create][2] = -> IF { -> TRY { -> ks=KeyStore.getInstance(ksType,)@ks==null -> ks.load(null,null,)@ks==null } CATCH(Exception) { -> e.printStackTrace()@!(ks==null) -> return false@ks==null } }
results[https://github.com/Berico-Technologies/AMP/blob/281c9fc20e1fa8c7dc17f98b245898968b6cf505/java/amp-rabbit/src/main/java/amp/rabbit/SSLChannelFactory.java][configureConnectionFactory][1] = -> TRY {  -> keyPassphrase=_keystorePassword.toCharArray()@ -> remoteCertStore=KeyStore.getInstance("JKS",)@ -> remoteCertStore.load(new FileInputStream(_pathToRabbitTrustStore,),keyPassphrase,)@ -> tmf.init(remoteCertStore,)@ } CATCH(Exception) {}
results[https://github.com/taskadapter/redmine-java-api/blob/880fd305b91e453b0c5632bc62b412e3c6a4b6ec/org.redmine.ta.api/src/main/java/org/redmine/ta/internal/HttpUtil.java][getNewHttpClient][2] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new FakeSSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/esoeproject/esoeproject/blob/520adc43cd5661808a8e26432c6c8c957db74a86/esoedelegators/shibboleth/shib-1.3.x/src-installer/com/qut/middleware/delegator/deployment/Startup.java][loadKeystore][1] = -> TRY {  -> keystoreInputStream=new FileInputStream(keystoreFileName,)@ -> keystore=KeyStore.getInstance("JKS",)@ -> keystore.load(keystoreInputStream,keystorePassword.toCharArray(),)@ -> keystoreInputStream.close()@ } CATCH(Exception) {}
results[https://github.com/elitak/peertrust/blob/6f6e0af00562c22837d7b8a96a34f82f6d2d45c3/sandbox/securityExt/src/org/peertrust/security/credentials/x509/X509CredentialStore.java][<init>][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(file,),storePassword.toCharArray(),)@ -> addAllCredentials(ks,)@ } CATCH(Exception) {}
results[https://github.com/wvengen/jGridstart/blob/b4d1567d1310f2de15f5e33a35aa0756ad6da872/jgridstart/src/test/java/nl/nikhef/jgridstart/CertificateStore1Test.java][testImportCertificateChain][1] = -> TRY {  -> store=PKCS12KeyStoreUnlimited.getInstance()@ -> store.load(null,null,)@ -> store.setKeyEntry("Grid certificate",cert.getPrivateKey(),null,certchain,)@ -> store.store(out,pw,)@ } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/ba6e9e97c84948700e301eb25dc16e8a36b52524/test/sun/security/mscapi/ShortRSAKeyWithinTLS.java][doServerSide][1] = -> TRY {  -> ks=KeyStore.getInstance("Windows-MY","SunMSCAPI",)@ -> ks.load(null,null,)@ -> checkKeySize(ks,)@ -> kmf.init(ks,null,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/NEXUS-EVO/frameworks_base/blob/6849ad8fbb03c21d6aa61e1bd53fe7b449cd6adb/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetEntry_CAEntry_Overwrites_PrivateKeyEntry_Success][1] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.setEntry(TEST_ALIAS_1,expectedCertEntry,null,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ -> mKeyStore.setEntry(TEST_ALIAS_1,expectedPrivEntry,null,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ } CATCH(Exception) {}
results[https://github.com/DISID/gvnix/blob/c21fd46d03e51daf040f0bbdfa43f57da0b2a8e2/addon-service/src/main/java/org/gvnix/service/roo/addon/security/GvNix509TrustManager.java][loadKeyStore][1] = -> TRY {  -> in=new FileInputStream(keystore,)@ -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(in,pass,)@ -> in.close()@ } CATCH(Exception) {}
