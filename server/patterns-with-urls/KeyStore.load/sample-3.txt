results[https://github.com/cubieboard/openbox_libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/support/src/test/java/java/security/TestKeyStore.java][createKeyStore][46] = -> TRY {  -> keyStore=KeyStore.getInstance("BKS",)@ -> keyStore.load(null,null,)@ } CATCH(Exception) {}
results[https://github.com/apache/wss4j/blob/4144643cb68d85c08fcaabd2ffaf27c0d5255992/streaming-ws-security/src/main/java/org/apache/ws/security/stax/wss/ext/WSSSecurityProperties.java][loadDecryptionKeystore][16] = -> TRY {  -> keyStore=KeyStore.getInstance("jks",)@ -> keyStore.load(url.openStream(),keyStorePassword,)@ } CATCH(Exception) {}
results[https://github.com/hongxucn/platform_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/support/src/test/java/libcore/java/security/TestKeyStore.java][createKeyStore][38] = -> TRY { -> keyStore=KeyStore.getInstance(StandardNames.KEY_STORE_ALGORITHM,)@ -> keyStore.load(null,null,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/jgzornoza/SistemaVotacion/blob/96032edf244214c4a0448d2a97145571422e9e81/VotingSystemLibrary/src/main/java/org/votingsystem/signature/util/KeyStoreUtil.java][getKeyStoreFromBytes][1] = -> TRY {  -> store=KeyStore.getInstance("JKS",)@ -> store.load(new ByteArrayInputStream(keyStore,),password,)@ } CATCH(Exception) {}
results[https://github.com/wso2/commons/blob/6adfc623c63fd98791a12e57612156db7d00b67e/opensaml-1.1.406/tests/org/opensaml/POSTProfileTest.java][setUp][4] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(path,),password,)@ } CATCH(Exception) {}
results[https://github.com/bladesilent/Harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/KeyManagerImplTest.java][testKeyManagerImpl1][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> km=new KeyManagerImpl(ks, new char[],)@ } CATCH(Exception) {}
results[https://github.com/bladesilent/Harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/KeyManagerFactoryImplTest.java][testEngineGetKeyManagers][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> kmf.engineInit(ks,null,)@ } CATCH(Exception) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/TrustManagerFactoryImplTest.java][testEngineGetTrustManagers][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> tmf.engineInit(ks,)@ } CATCH(Exception) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/TrustManagerImplTest.java][testTrustManagerImpl_1][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> tm=new TrustManagerImpl(ks,)@ } CATCH(Exception) {}
results[https://github.com/davros-/android_libcore_s4/blob/e888585a72df3786111230769d73fee92dbbfb39/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java][test_deleteEmptyEntryEmptyAlias][76] = -> TRY {  -> keyTest=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyTest.load(null,null,)@ -> keyTest.deleteEntry("",)@ } CATCH(Exception) {}
results[https://github.com/TaintDroid/android_platform_libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/support/src/test/java/java/security/TestKeyStore.java][createClient][45] = -> TRY { -> clientKeyStore=clientKeyStore=KeyStore.getInstance("BKS",)@ -> clientKeyStore.load(null,null,)@ -> copySelfSignedCertificates(clientKeyStore,caKeyStore,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/brachior/platform_dalvik/blob/f6c387128427e121477c1b32ad35cdcaa5101ba3/dx/tests/060-dex-call-static/Zorch.java][createKeyStore][1] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> ks.setKeyEntry(privateAlias,privateKey,keyStorePassword,x509cc,)@ -> ks.setCertificateEntry(publicAlias,x509c,)@ } CATCH(Exception) {}
results[https://github.com/pruiz/signserver/blob/58966c93e12a4935902edf33db604a38742cfa76/signserver/modules/SignServer-Client-SignServerWS/src/org/signserver/protocol/ws/client/CustomJKSKeyManager.java][<init>][1] = -> TRY {  -> trustStore=KeyStore.getInstance("JKS",)@ -> password=keyStorePwd.toCharArray()@ -> trustStore.load(new FileInputStream(keyStorePath,),password,)@ } CATCH(Exception) {}
results[https://github.com/dotCMS/dotCMS/blob/2ca65e2d8f3180e615efc7e46e1175cb91226918/src/com/dotcms/publisher/util/TrustFactory.java][<init>][3] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(trustStore,),password,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/abhijitsarkar/java/blob/15a411bf8197ece656945af2bfda6f62dcb9ee6d/xml/xml-security/src/main/java/name/abhijitsarkar/xml/security/KeyStoreManager.java][loadKeyStore][3] = -> TRY {  -> ks=KeyStore.getInstance("JCEKS",)@ -> ks.load(new FileInputStream(keystore,),storePassword.toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/apache/santuario-java/blob/6fa7ee072a03c0a4bedbac3c4d1a5604192aa72f/src/test/java/org/apache/xml/security/test/dom/signature/ECDSASignatureTest.java][testOne][3] = -> TRY {  -> keyStore=KeyStore.getInstance("JKS",)@ -> keyStore.load(new java.io.FileInputStream(ECDSA_JKS,),ECDSA_JKS_PASSWORD.toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/apache/wss4j/blob/9221c69be864015e72f90b183b01211ace089dc8/ws-security-stax/src/main/java/org/apache/wss4j/stax/ext/WSSSecurityProperties.java][loadSignatureVerificationKeystore][4] = -> TRY {  -> keyStore=KeyStore.getInstance("jks",)@ -> keyStore.load(url.openStream(),keyStorePassword,)@ -> signatureVerificationWSSCrypto.setKeyStore(keyStore,)@ } CATCH(Exception) {}
results[https://github.com/loopj/android-async-http/blob/562e118fdc5fdfd2cc40409174ddae0a9a4884ef/library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java][getKeystoreOfCA][1] = -> TRY { -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("ca",ca,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/EnderWiggin/Haven-and-Hearth-client-modified-by-Ender/blob/3dc60a9b44e3bc50838e38f8139b8b79a8968b3b/src/haven/SslHelper.java][<init>][5] = -> TRY { -> trusted=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trusted.load(null,null,)@ } CATCH(Exception) { -> throw new Error(e,)@ }
results[https://github.com/apache/santuario-java/blob/d2706890674fecb7351d50a3cf55c2f851629216/src/test/java/org/apache/xml/security/test/signature/SignatureTest.java][getKeyStore][5] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ksis=new FileInputStream(KEYSTORE_DIRECTORY+"test.jks",)@ -> ks.load(ksis,KEYSTORE_PASSWORD,)@ -> ksis.close()@ } CATCH(Exception) {}
results[https://github.com/apache/ftpserver/blob/d454a47e596bbc71f88e79bdbc4757574268c725/ssl-tests/src/test/org/apache/ftpserver/ssl/MinaClientAuthTest.java][createFTPClient][8] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(FTPCLIENT_KEYSTORE,),KEYSTORE_PASSWORD,)@ -> kmf.init(ks,KEYSTORE_PASSWORD,)@ } CATCH(Exception) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/1d238c66aad78972570771d075a288ba9c558372/test/sun/security/pkcs11/fips/CipherTest.java][readKeyStore][9] = -> TRY {  -> in=new FileInputStream(file,)@ -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(in,passwd,)@ -> in.close()@ } CATCH(Exception) {}
results[https://github.com/apache/activemq/blob/8bf987b134bd827b93ed8157b323bc3bd2d8a82e/activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslBrokerServiceTest.java][getTrustManager][6] = -> TRY {  -> trustedCertStore=KeyStore.getInstance(SslTransportBrokerTest.KEYSTORE_TYPE,)@ -> trustedCertStore.load(new FileInputStream(SslTransportBrokerTest.TRUST_KEYSTORE,),null,)@ -> tmf.init(trustedCertStore,)@ } CATCH(Exception) {}
results[https://github.com/rowboat/libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/tests/api/javax/net/ssl/TrustManagerFactory1Test.java][test_initLjavax_net_ssl_ManagerFactoryParameters][14] = -> TRY { -> kStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> kStore.load(null,null,)@ } CATCH(Exception) { -> fail("Unexpected exception for configuration: "+e,)@ }
results[https://github.com/NCIP/cagrid2/blob/98afa0e95b32173f05d905d24fba8d570e8438c2/cagrid-dorian/cagrid-dorian-service-tools/src/main/java/org/cagrid/dorian/service/tools/CreateTrustStore.java][execute][1] = -> TRY {  -> trustStore=KeyStore.getInstance("JKS",)@ -> trustStore.load(null,null,)@ -> trustStore.setCertificateEntry(ALIAS,certificate,)@ -> trustStore.store(truststoreStream,STORE_PASSWORD,)@ } CATCH(Exception) {}
results[https://github.com/liangqi/xqwizard/blob/2636959b41756eea61c573350a9e787145a9e22d/XQWAjax/src/xqwajax/util/cert/CertKey.java][toKeyStore][3] = -> TRY {  -> keyStore=KeyStore.getInstance(type,)@ -> keyStore.load(null,null,)@ -> keyStore.setKeyEntry("",key,password.toCharArray(),certChain,)@ } CATCH(Exception) {}
results[https://github.com/songzhiyong/lib_song/blob/9749c7c2891b86b47ee0199b4449bc48cb1d4370/src/com/loopj/android/http/MySSLSocketFactory.java][getKeystoreOfCA][2] = -> TRY { -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("ca",(java.security.cert.Certificate) ca,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/splunk/splunk-shuttl/blob/e078a7d7c4ad58f98c1d0053bdfc914ff0763389/src/java/com/splunk/ShuttlPortEntity.java][getTrustStore][3] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/kencochrane/raven-java/blob/42c385b2c5a78e3a10e7f28188e6d4ad0c130b29/raven-getsentry/src/main/java/net/kencochrane/raven/getsentry/connection/GetSentryHttpsConnection.java][getStartcomSslFactory][1] = -> TRY {  -> ks=KeyStore.getInstance("jks",)@ -> ks.load(null,null,)@ -> ks.setCertificateEntry("ca",ca,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/vyloy/lnvc/blob/38625c0c7f2c0e5c562bcd3cea11043a281b6a54/lvmc/openfire_src/src/java/org/jivesoftware/openfire/net/SSLConfig.java][initializeKeyStore][4] = -> TRY { -> keyStore=KeyStore.getInstance(storeType,)@ -> keyStore.load(null,keypass.toCharArray(),)@ } CATCH(Exception) { -> Log.error("Unable to initialize keystore: ",e,)@ }
results[https://github.com/dotCMS/dotCMS/blob/2ca65e2d8f3180e615efc7e46e1175cb91226918/src/com/dotcms/publisher/util/TrustFactory.java][<init>][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(keyStore,),password,)@ -> kmf.init(ks,password,)@ } CATCH(Exception) {}
results[https://github.com/prey/prey-android-client/blob/591ae9eb082a1032ffd60f1498e127871348fe65/src/com/prey/net/HttpUtils.java][getNewHttpClient][4] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new EasySSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/axDev-JDK/jdk/blob/acbdb0ade569a980d025ec2b09f528c0bc1a29cd/test/sun/security/provider/KeyStore/TestJKSWithSecretKey.java][main][3] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(null,passwd,)@ -> TRY { -> ks.setKeyEntry("test_encrypt_key",key,passwd,null,)@ } } CATCH(Exception) {}
results[https://github.com/huashizhenhua/TadpoleWeibo/blob/85d891b039d2a5abff1407f438055e3c0f1e6268/weibo.sdk.android.sso.demo/src/com/weibo/sdk/android/net/HttpManager.java][getNewHttpClient][88] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new MySSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/ezterry/GB-libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/tests/api/javax/net/ssl/KeyManagerFactorySpiTest.java][test_engineInit_01][49] = -> TRY { -> kst=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> kst.load(null,null,)@ -> kmf.engineInit(kst,psw,)@ } CATCH(Exception) { -> fail("Unexpected exception "+e,)@ }
results[https://github.com/otruffer/Ape_On_Tape/blob/d45effcb146762c3d202b1b4e5c93c300cf5b28f/src/org/webbitserver/helpers/SslFactory.java][<init>][1] = -> TRY { -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(keyStore,storePass.toCharArray(),)@ } CATCH(Exception) { -> throw new WebbitException(e,)@ }
results[https://github.com/rmcc/android_dalvik/blob/f6c387128427e121477c1b32ad35cdcaa5101ba3/libcore/x-net/src/test/java/tests/api/javax/net/ssl/SSLContextSpiTest.java][test_engineInit][104] = -> TRY { -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(null,null,)@ -> trustMF.init(ks,)@ } CATCH(Exception) { -> fail(ex+" unexpected exception",)@ }
results[https://github.com/Root-Box/libcore/blob/45273a0346df3d08c9c7bbf84cc1474192703df1/luni/src/test/java/tests/targets/security/cert/CertificateTest.java][createPKIXParams][51] = -> TRY {  -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("selfSignedCert",certs[0],)@ -> params=new PKIXParameters(keyStore,)@ } CATCH(Exception) {}
results[https://github.com/violetagg/apache-tomcat-8.0/blob/2d261e76344e1328498e9a59bb543a1b0d46b742/modules/tomcat-lite/java/org/apache/tomcat/lite/io/jsse/JsseSslProvider.java][getCertificateFromStore][3] = -> TRY {  -> store=KeyStore.getInstance("JKS",)@ -> store.load(new FileInputStream(file,),pass.toCharArray(),)@ -> certificate=store.getCertificate("tomcat",)@ } CATCH(Exception) {}
results[https://github.com/imoseyon/leanKernel-d2usc-deprecated/blob/85dca4838d36fa8e8db240b308ebe03f9643160c/libcore/luni/src/test/java/tests/targets/security/cert/CertPathBuilderTestPKIX.java][getCertPathParameters][52] = -> TRY {  -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("selfSignedCert",selfSignedcertificate,)@ -> parameters=new PKIXBuilderParameters(keyStore,targetConstraints,)@ } CATCH(Exception) {}
results[https://github.com/jponge/izpack-full-svn-history-copy/blob/d9d134b71176d2c33fbd96379d0f53dfdbe5e426/izpack-src/tags/4.3.3/src/lib/com/izforge/izpack/util/PasswordKeystoreValidator.java][getKeyStore][21] = -> TRY { -> ks=KeyStore.getInstance(type,)@ -> ks.load(new FileInputStream(fileName,),password,)@ } CATCH(Exception) { -> System.out.println("getKeyStore() Failed: "+e,)@ }
results[https://github.com/jersey/jersey-1.x/blob/a9c4639d76bd493d95e8400e5a53509cf9decfa8/samples/https-clientserver-grizzly/src/test/java/com/sun/jersey/samples/https_grizzly/MainTest.java][<init>][3] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(keyStore,),password,)@ -> kmf.init(ks,"asdfgh".toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/Olog/olog-java-api/blob/4774678f8fe52141cb597f1c13365f46d5f9e546/ologAPI/src/main/java/edu/msu/nscl/olog/api/MyX509TrustManager.java][<init>][4] = -> TRY {  -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(new FileInputStream(trustStore,),password,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/e29089cd2f1827672b8e1fd7d492d8de8a128937/test/sun/security/ssl/javax/net/ssl/NewAPIs/CheckMyTrustedKeystore.java][doClientSide][6] = -> TRY {  -> uks=KeyStore.getInstance("JKS",)@ -> uks.load(new FileInputStream(unknownFilename,),cpasswd,)@ -> kmf.init(uks,cpasswd,)@ -> kmf1.init(uks,cpasswd,)@ } CATCH(Exception) {}
results[https://github.com/OlegYch/pdfbox/blob/623a0af37723377676f57213cf74b1a909c23272/src/test/pdfbox/encryption/TestPublicKeyEncryption.java][open][2] = -> TRY {  -> ks=KeyStore.getInstance("PKCS12",)@ -> ks.load(new FileInputStream(certPath,),password.toCharArray(),)@ -> pdm=new PublicKeyDecryptionMaterial(ks,null,password,)@ } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/acbdb0ade569a980d025ec2b09f528c0bc1a29cd/test/sun/security/rsa/TestSignatures.java][getKeyStore][12] = -> TRY {  -> in=new FileInputStream(new File(BASE,"rsakeys.ks",),)@ -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(in,password,)@ -> in.close()@ } CATCH(Exception) {}
results[https://github.com/jazzlly/Notes/blob/609d2fd4107e474ebb997a9506b60fa747fb5924/computer.science/android/project/MobileUtil/src/com/pekall/http/HttpClient.java][newSslSocketFactory][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new SSLSocketFactoryEx(trustStore,)@ } CATCH(Exception) { -> throw new AssertionError(e,)@ }
results[https://github.com/Genshin/SpreeWarehouseAndroid/blob/2ad84312950b93c1f2f7699d4ffb8343e3cb7f74/src/org/genshin/spree/RESTConnector.java][getHttpClient][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new AnyCertSSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/HawaiianNinja/RoseHulman-Android-App/blob/04826c032f1f910dc9d851b2d65545c65e8417ed/src/awesome/app/SecurityHole.java][getNewHttpClient][3] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new UniversalSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/FreakyPenguin/elexis-hilotec-base/blob/be7fd9159b01d0165281a3cc6c695a9a573df08d/ch.rgw.utility/src/ch/rgw/crypt/JCEKeyManager.java][create][3] = -> IF { -> TRY { -> ks=KeyStore.getInstance(ksType,)@ks==null -> ks.load(null,null,)@ks==null } CATCH(Exception) { -> e.printStackTrace()@!(ks==null) -> return false@ks==null } }
results[https://github.com/Berico-Technologies/AMP/blob/281c9fc20e1fa8c7dc17f98b245898968b6cf505/java/amp-rabbit/src/main/java/amp/rabbit/SSLChannelFactory.java][configureConnectionFactory][2] = -> TRY {  -> keyPassphrase=_keystorePassword.toCharArray()@ -> remoteCertStore=KeyStore.getInstance("JKS",)@ -> remoteCertStore.load(new FileInputStream(_pathToRabbitTrustStore,),keyPassphrase,)@ -> tmf.init(remoteCertStore,)@ } CATCH(Exception) {}
results[https://github.com/taskadapter/redmine-java-api/blob/880fd305b91e453b0c5632bc62b412e3c6a4b6ec/org.redmine.ta.api/src/main/java/org/redmine/ta/internal/HttpUtil.java][getNewHttpClient][5] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new FakeSSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/esoeproject/esoeproject/blob/520adc43cd5661808a8e26432c6c8c957db74a86/esoedelegators/shibboleth/shib-1.3.x/src-installer/com/qut/middleware/delegator/deployment/Startup.java][loadKeystore][3] = -> TRY {  -> keystoreInputStream=new FileInputStream(keystoreFileName,)@ -> keystore=KeyStore.getInstance("JKS",)@ -> keystore.load(keystoreInputStream,keystorePassword.toCharArray(),)@ -> keystoreInputStream.close()@ } CATCH(Exception) {}
results[https://github.com/elitak/peertrust/blob/6f6e0af00562c22837d7b8a96a34f82f6d2d45c3/sandbox/securityExt/src/org/peertrust/security/credentials/x509/X509CredentialStore.java][<init>][2] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(file,),storePassword.toCharArray(),)@ -> addAllCredentials(ks,)@ } CATCH(Exception) {}
results[https://github.com/DISID/gvnix/blob/c21fd46d03e51daf040f0bbdfa43f57da0b2a8e2/addon-service/src/main/java/org/gvnix/service/roo/addon/security/GvNix509TrustManager.java][loadKeyStore][2] = -> TRY {  -> in=new FileInputStream(keystore,)@ -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(in,pass,)@ -> in.close()@ } CATCH(Exception) {}
results[https://github.com/FreakyPenguin/elexis-hilotec-base/blob/b0c616ac6a80f26ddc95b8c81df5ac8b8c2597b2/elexis/src/ch/rgw/crypt/KeyManager.java][load][1] = -> TRY { -> ks=KeyStore.getInstance(ksType,)@ -> ks.load(new FileInputStream(ksFile,),pwd,)@ } CATCH(Exception) { -> ExHandler.handle(ex,)@ -> log.log(Level.SEVERE,"No Keystore found or coudl not open Keystore",)@ }
results[https://github.com/reficio/soap-ws/blob/9c8034a36d5eaca8c3efb8ffc3791cbd1ab157d8/soap-it/src/test/java/org/reficio/ws/it/AbstractCooperationTest.java][readKeyStore][1] = -> TRY { -> in=keyStoreUrl.openStream()@ -> ks=KeyStore.getInstance(keyStoreType,)@ -> ks.load(in,keyStorePassword.toCharArray(),)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/noinnion/newsplus/blob/e0e0c5758bfe07c5091d915d83bdd6aa7af791bc/extensions/ReadabilityExtension/src/com/noinnion/android/newsplus/extension/readability/ReadabilityClient.java][createHttpClient][3] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new MySSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return HttpUtils.createHttpClient()@ }
results[https://github.com/bleujin/aradon/blob/f013b1830c4b8c474f67d48b4537a25d3bbd718a/src/net/ion/nradon/helpers/SslFactory.java][<init>][1] = -> TRY { -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(keyStore,storePass.toCharArray(),)@ } CATCH(Exception) { -> throw new RadonException(e,)@ }
results[https://github.com/caelum/caelum-stella/blob/97a475ae7e13a5de240a8d3dc951ec160d766347/stella-nfe/src/main/java/br/com/caelum/stella/nfe/security/CertificateAndPrivateKey.java][enableSSLForServer][1] = -> TRY { -> trustStore=KeyStore.getInstance("JKS",)@ -> trustStore.load(serverCertificateFile,password.toCharArray(),)@ -> trustManagerFactory.init(trustStore,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/uditrugman/openjdk8-jdk/blob/ba6e9e97c84948700e301eb25dc16e8a36b52524/test/sun/security/ssl/com/sun/net/ssl/internal/ssl/SSLContextImpl/TrustTrustedCert.java][generateSSLContext][2] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(null,null,)@ -> ks.setCertificateEntry("Trusted RSA Signer",trusedCert,)@ -> ks.setKeyEntry("TheKey",priKey,passphrase,chain,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/eduardodaluz/xfire/blob/03646fd93502855b53a349e79f85989065887171/xfire-sandbox/xfire-ws-security/src/main/org/codehaus/xfire/security/impl/SecurityConfigurationWorker.java][loadKeyStore][1] = -> TRY { -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(inStream,keyStorePassword.toCharArray(),)@ } CATCH(Exception) { -> LOG.error(e,)@ -> throw new RuntimeException("Unable to load keyStore: ",e,)@ }
results[https://github.com/klassm/andFHEM/blob/343092f0dfd71bdaa700c15b72cdb208d71eb058/app/src/main/java/li/klass/fhem/fhem/FHEMWEBConnection.java][createNewHTTPClient][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> socketFactory=new CustomSSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/apache/directory-server/blob/a385fbefaf3f55400ecc423e6377a7aa259c042a/protocol-ldap/src/main/java/org/apache/directory/server/ldap/replication/ReplicationTrustManager.java][<init>][1] = -> TRY { -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(null,null,)@ -> tmFactory.init(ks,)@ } CATCH(Exception) { -> LOG.error("failed to initialize the keystore and X509 trustmanager",e,)@ -> throw new RuntimeException(e,)@ }
results[https://github.com/DomoTop/DomoTop/blob/c4f4a88df2393655ae2a1815497d3c1b7c5796ab/Product/proof_of_concepts/HTTPS_Client_Certificate_Android/src/com/client/certificate/AndroidHttpClient.java][getHttpClient][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new AndroidSSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/pawitp/muwifi-autologin/blob/6e73b875d34c9605922a98c961309c80fb521f06/src/org/dyndns/pawitp/muwifiautologin/Utils.java][createHttpClient][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new MySSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> Log.e(TAG,"",e,)@ }
results[https://github.com/ncats/bard/blob/b3409ad25e7834427cb5c0e452d53b9e3da3308d/src/gov/nih/ncgc/bard/capextract/SslHttpClient.java][getHttpClient][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new LooseSSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/Dhandapani/gluster-ovirt/blob/bee2165ff04f64ce7a28d34b0ba70e44431c4b14/backend/manager/modules/engineencryptutils/src/main/java/org/ovirt/engine/core/engineencryptutils/EncryptionUtils.java][getKeyStore][1] = -> TRY { -> fis=new FileInputStream(path,)@ -> store=KeyStore.getInstance(storeType,)@ -> store.load(fis,passwd.toCharArray(),)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/willuhn/jameica/blob/677f3c15ffba2c741c2c9a0e9cfe741948f8f304/src/de/willuhn/jameica/security/SSLFactory.java][init][1] = -> TRY {  -> this.keystore=KeyStore.getInstance("JKS",)@ -> pw=this.callback.createPassword().toCharArray()@ -> this.keystore.load(null,pw,)@ -> this.keystore.setKeyEntry(SYSTEM_ALIAS,this.privateKey,pw, new X509Certificate[],)@ } CATCH(Exception) {}
results[https://github.com/Wurmy/My_Redmine-Java-API_XML/blob/31cedb71fe920cd00f109f707c28ce5ce64fbfd0/src/main/java/org/redmine/ta/internal/HttpUtil.java][getNewHttpClient][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new FakeSSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new ContentEncodingHttpClient()@ }
results[https://github.com/maddoggin/platform_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/tests/api/javax/net/ssl/TrustManagerFactory1Test.java][test_getTrustManagers][49] = -> TRY { -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(null,null,)@ -> trustMF.init(ks,)@ } CATCH(Exception) { -> fail("Unexpected exception "+ex.toString(),)@ }
results[https://github.com/FunkyAndroid/platform_libcore/blob/adf25974a44503066df61cc0be515395fd7253b6/luni/src/test/java/tests/api/javax/net/ssl/SSLSessionTest.java][getKeyStore][47] = -> TRY {  -> inputStream=new ByteArrayInputStream(bytes,)@ -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyStore.load(inputStream,PASSWORD.toCharArray(),)@ -> inputStream.close()@ } CATCH(Exception) {}
results[https://github.com/AsyncHttpClient/async-http-client/blob/bce9f9020edc9bff9a71a4a63cbefc327f621db5/modules/api/src/test/java/com/ning/http/client/async/HostnameVerifierTest.java][createSSLContext][8] = -> TRY { -> keyStoreStream=HostnameVerifierTest.class.getResourceAsStream("ssltest-cacerts.jks",)@ -> keyStorePassword="changeit".toCharArray()@ -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(keyStoreStream,keyStorePassword,)@ -> kmf.init(ks,certificatePassword,)@ } CATCH(Exception) { -> throw new Error("Failed to initialize the server-side SSLContext",e,)@ }
results[https://github.com/OriginalNull/cryptim/blob/12c160a25d6514156211ebaa6ab8a2a0620dacad/shared/src/com/cryptotalk/shared/SSLSocketLib.java][createClientSocketAndHandshake][1] = -> TRY { -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(new FileInputStream(keyStorePath,),keyStorePass.toCharArray(),)@ -> tmf.init(ks,)@ } CATCH(Exception) { -> SLogger.exception(TAG,e,)@ }
results[https://github.com/robovm/robovm/blob/e9fd5fa87fffa92b2793fd1becef7659d45fbc9e/tests/libcore/luni/src/test/java/tests/targets/security/cert/CertPathValidatorTestPKIX.java][setUp][46] = -> TRY {  -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("selfSignedCert",selfSignedcertificate,)@ -> parameters=new PKIXBuilderParameters(keyStore,targetConstraints,)@ -> params=new PKIXParameters(keyStore,)@ } CATCH(Exception) {}
results[https://github.com/sannies/se-security-saml/blob/a9f344e4422f41f1058086ba59d329cadecc870a/saml2-shared/src/main/java/org/springframework/security/saml/key/JKSKeyManager.java][initialize][4] = -> TRY { -> inputStream=new FileInputStream(storeFile,)@ -> ks=KeyStore.getInstance(storeType,)@ -> ks.load(inputStream,storePass.toCharArray(),)@ } CATCH(Exception) { -> log.error("Error initializing key store",e,)@ -> throw new RuntimeException("Error initializing keystore",e,)@ }
results[https://github.com/bbockelm/DBS/blob/30e8f3c6cd8d3728e75d9d203bcf54a5ddf55c1c/Servers/MS2/client/src/gov/fnal/ms/client/util/HttpUtil.java][initSecureConnection][3] = -> TRY {  -> ks=KeyStore.getInstance("PKCS12",)@ -> ks.load(new FileInputStream(certToUse,),passToUse.toCharArray(),)@ -> kmfactory.init(ks,passToUse.toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/benjdezi/RPC/blob/533cf2b10ff9086d07da3f0d85cf894af17d2e93/src/com/labs/rpc/transport/BaseSSLTransport.java][_getSSLServerSocketFactory][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> passphrase=pwd.toCharArray()@ -> ks.load(new FileInputStream(new File(ksPath,),),passphrase,)@ -> kmf.init(ks,passphrase,)@ } CATCH(Exception) {}
results[https://github.com/jeduardo/comunicadeiro/blob/fdc6185afa11a205a6b73dbbac8dbd8dd2b3a57f/comunicadeiro-common/src/main/java/funcode/comunicadeiro/common/ssl/SSLContextFactory.java][generateKeyStore][1] = -> TRY { -> keyStore=KeyStore.getInstance("JKS",)@ -> keyStore.load(null,null,)@ -> keyStore.setKeyEntry(CERT_NAME,keyPair.getPrivate(),KEYSTORE_PWD, new java.security.cert.Certificate[],)@ } CATCH(Exception) { -> logger.severe("Error generating in-memory keystore: "+ex.getMessage(),)@ }
results[https://github.com/frostwire/frostwire-desktop/blob/90eacf1ef657a5664fd9b5e2e84d819091f9ea3c/lib/jars-src/httpcomponents-client-4.0/httpclient/src/test/java/org/apache/http/conn/ssl/TestSSLSocketFactory.java][testCreateSocket][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(null,null,)@ -> ks.setKeyEntry("RSA_KEY",pk,pwd,chain,)@ -> ks.setCertificateEntry("CERT",chain[2],)@ -> kmfactory.init(ks,pwd,)@ -> tmfactory.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/edaniels/Seminole_Tix/blob/8f34243e17b37834cee1c116f85943dafbb168b4/src/com/dunksoftware/seminoletix/MyHttpClient.java][newSslSocketFactory][1] = -> TRY { -> trusted=KeyStore.getInstance("BKS",)@ -> TRY { -> trusted.load(null,null,)@ } -> sslfactory=new MySSLSocketFactory(trusted,)@ } CATCH(Exception) { -> throw new AssertionError(e,)@ }
results[https://github.com/liangqi/xqwizard/blob/2636959b41756eea61c573350a9e787145a9e22d/XQWAjax/src/xqwajax/util/cert/CertMap.java][exportJks][3] = -> TRY {  -> jks=KeyStore.getInstance("JKS",)@ -> jks.load(null,null,)@ -> LOOP { -> jks.setCertificateEntry(Integer.toString(i,),cert,)@ } } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/a9016591003a8a25c934b09991fd14b34671ccfb/test/sun/security/ssl/com/sun/net/ssl/internal/ssl/X509TrustManagerImpl/ComodoHacker.java][getTrustManager][2] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(null,null,)@ -> TRY { -> ks.setCertificateEntry("RSA Export Signer",trustedCert,)@ } -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/SSilence/scotty/blob/c473304a04247b7b8160e0d7743f8999d2b66dac/scotty-commons/src/main/java/org/owasp/webscarab/httpclient/AbstractCertificateRepository.java][initPKCS11][3] = -> TRY { -> ks=KeyStore.getInstance("PKCS11",)@ -> ks.load(null,(kspassword==null)?null:kspassword.toCharArray(),)@ -> return addKeyStore(ks,name,)@ } CATCH(Exception) { -> System.err.println("Error instantiating the PKCS11 provider",)@ -> e.printStackTrace()@ }
results[https://github.com/axDev-JDK/jdk/blob/5f8d139aef75dbd10951354851828324ca513f80/test/sun/security/pkcs11/KeyStore/ClientAuth.java][doServerSide][2] = -> TRY {  -> passphrase=JKS_PWD.toCharArray()@ -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(new File(DIR,SERVER_KS,),),passphrase,)@ -> kmf.init(ks,passphrase,)@ } CATCH(Exception) {}
results[https://github.com/peixere/gotom/blob/4011c772fabd4f79150f9d3fea354c3388e1bed9/core/cn.gotom.sso/src/main/test/cn/gotom/sso/util/KeyStoreHelper.java][export][1] = -> TRY {  -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(new FileInputStream(keyStoreFile,),password.toCharArray(),)@ -> keyPair=getPrivateKey(keyStore,password.toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/vinin3/nxc_bank/blob/29325de9b5d2077418d9499a619b116d006e5af2/atm/src/main/java/org/atm/SecureSocketClient.java][initKeyStore][2] = -> TRY {  -> System.setProperty("javax.net.ssl.trustStore",keystoreLocation,)@ -> System.setProperty("javax.net.ssl.trustStorePassword",storepass,)@ -> keyStore=KeyStore.getInstance("JKS",)@ -> keyStore.load(new FileInputStream(keystoreLocation,),storepass.toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/bladesilent/Harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java][test_setKeyEntryLjava_lang_StringLjava_security_Key$C$Ljava_security_cert_Certificate][2] = -> TRY {  -> keyTest=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyTest.load(null,null,)@ -> keyTest.setKeyEntry("alias3",privateKey,pssWord,cert,)@ -> assertTrue("the entry specified by the alias alias3 is not a keyEntry",keyTest.isKeyEntry("alias3",),)@ } CATCH(Exception) {}
results[https://github.com/jmchilton/TINT/blob/a6a634d8e9431bb0caae1c7f2da5a9ab0f16d4e3/projects/TropixAuth/src/api/edu/umn/msi/tropix/client/credential/ConfiguredSslSocketFactory.java][getDelegate][1] = -> TRY { -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(customTruststorePath.get(),),null,)@ -> tmfactory.init(ks,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/seadas/seadas/blob/cc58dfc2812af69e43eef77b10db65eb8905521e/seadas-ocsswws/src/test/java/gov/nasa/gsfc/seadas/ocsswws/MainTest.java][<init>][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> System.out.println("absolute path: "+trustStore.getAbsolutePath(),)@ -> ks.load(new FileInputStream(trustStore,),password,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/feuyeux/quiland/blob/415a191d3fa374722d4beba10c687de8d4694d45/java/air-security/src/main/java/creative/fire/tls/cert/parse/GetCertPathKs.java][main][1] = -> TRY {  -> storepass=S_STORE_PASS.toCharArray()@ -> ks=KeyStore.getInstance(keyStoreType,)@ -> ks.load(new FileInputStream(storename,),storepass,)@ -> privateKey=(PrivateKey) ks.getKey(alias,KEY_PASS,)@ -> cchain=ks.getCertificateChain(alias,)@ } CATCH(Exception) {}
results[https://github.com/Mobiperf/Speedometer/blob/896526fc56021014eb3661ea26c74fdb4009ed63/android/src/com/google/wireless/speed/speedometer/Checkin.java][getNewHttpClient][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new MySSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> Logger.w("Unable to create SSL HTTP client",e,)@ -> client=new DefaultHttpClient()@ }
results[https://github.com/wso2/commons/blob/6adfc623c63fd98791a12e57612156db7d00b67e/ksb/src/main/java/org/wso2/tools/ksexplorer/action/UploadKeyStoreAction.java][execute][1] = -> TRY {  -> storePass=request.getParameter(KSExplorerConstants.PARAM_STORE_PASSWORD,)@ -> store=KeyStore.getInstance(storeType,)@ -> store.load(new FileInputStream(this.keyStoreFile,),storePass.toCharArray(),)@ -> ksDesc=new KeyStoreDescription(store,this.keyStoreFileFileName,)@ } CATCH(Exception) {}
results[https://github.com/PerfCake/PerfCake/blob/59626eef3c92f2ef5fcbb4faae35e49fcb8984af/src/main/java/org/perfcake/message/sender/HTTPSSender.java][initKeyStore][1] = -> TRY {  -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> TRY { -> keyStore.load(is,keyStorePassword.toCharArray(),)@ } } CATCH(Exception) {}
results[https://github.com/jstakun/gms-world-client/blob/003316b17c3bde6a86a36b65aac507a66e95771f/GMSLib/src/com/jstakun/gms/android/utils/HttpUtils.java][getSSLSocketFactory][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sslSocketFactory=TrustAllSSLSocketFactory.getSSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> LoggerUtils.error("HttpUtils.getSSLSocketFactory() exception",e,)@ }
results[https://github.com/feuyeux/quiland/blob/c967f33cf6dbdeb1bb9ae58f25cb532cab3314d0/java/air-j7j8/src/main/java/creative/air/java7/nio/server/Server.java][createSSLContext][5] = -> TRY {  -> passphrase="passphrase".toCharArray()@ -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream("testkeys",),passphrase,)@ -> kmf.init(ks,passphrase,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/violetagg/apache-tomcat-8.0/blob/c823c1cca5fb55da4eaad84e54553a187f4b21e6/modules/tomcat-lite/java/org/apache/tomcat/lite/io/SslConnector.java][getPrivateKeyFromStore][1] = -> TRY {  -> store=KeyStore.getInstance("JKS",)@ -> store.load(new FileInputStream(file,),pass.toCharArray(),)@ -> key=store.getKey("tomcat","changeit".toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/app-kt3k-com/whatsmyip-android/blob/feafe1d2e214feaa135dfd8c2f93180ae45af123/src/com/kt3k/app/hw/BaseActivity.java][run][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new MySSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> e.printStackTrace()@ -> jsi.jsExec(errorCallback,)@ }
results[https://github.com/pruiz/signserver/blob/ede1c2440d8c6ad7a891a37355e1bc7a691b07a5/signserver/src/java/org/signserver/cli/genservercert/GenServerCertificate.java][createTrustJKS][1] = -> TRY {  -> IF { -> throw new IllegalArgumentException("Parameter cert cannot be null.",)@cert==null } -> store=KeyStore.getInstance("JKS",)@!(cert==null) -> store.load(null,null,)@!(cert==null) -> store.setCertificateEntry(alias,cert,)@!(cert==null) } CATCH(Exception) {}
results[https://github.com/benjdezi/RPC/blob/533cf2b10ff9086d07da3f0d85cf894af17d2e93/src/com/labs/rpc/transport/BaseSSLTransport.java][_getSSLSocketFactory][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> passphrase=pwd.toCharArray()@ -> ks.load(new FileInputStream(new File(ksPath,),),passphrase,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
