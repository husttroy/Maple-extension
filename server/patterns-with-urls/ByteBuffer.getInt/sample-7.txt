results[https://github.com/rfkrocktk/red5-server/blob/39e2db84e3df1f22a2570cfba067eafc24c28b18/src/org/red5/server/rtmp/RTMPUtils.java][readMediumInt] = -> buf=ByteBuffer.allocate(4,)@ -> buf.put((byte) 0x00,)@ -> buf.put(in.get(),)@ -> buf.put(in.get(),)@ -> buf.put(in.get(),)@ -> buf.flip()@ -> return buf.getInt()@
results[https://github.com/Juliens/red5/blob/c9abce44ff1879de533a97101944369a60412c91/src/org/red5/server/rtmp/RTMPUtils.java][readMediumInt] = -> buf=ByteBuffer.allocate(4,)@ -> buf.put((byte) 0x00,)@ -> buf.put(in.get(),)@ -> buf.put(in.get(),)@ -> buf.put(in.get(),)@ -> buf.flip()@ -> return buf.getInt()@
results[https://github.com/disy/jSCSI/blob/c5550dbb7fa9389f6f1afb355597ba3a2978307f/bundles/commons/src/main/java/org/jscsi/parser/AdditionalHeaderSegment.java][serialize] = -> TRY {  -> dst.position(offset,)@ -> IF { -> throw new IllegalArgumentException("Destination array is too small.",)@dst.remaining()<length } -> dst.putShort(length,)@!(dst.remaining()<length) -> dst.put(type.value(),)@!(dst.remaining()<length) -> dst.put(specificField.get(),)@!(dst.remaining()<length) -> LOOP { -> dst.putInt(specificField.getInt(),)@specificField.hasRemaining() && !(dst.remaining()<length) } } CATCH {}
results[https://github.com/disy/jSCSI/blob/7dc545a6574be01137cb7b88d24a4282e10282ac/jSCSI-deprecated/src/org/jscsi/parser/AdditionalHeaderSegment.java][serialize] = -> TRY {  -> dst.position(offset,)@ -> IF { -> throw new IllegalArgumentException("Destination array is too small.",)@dst.remaining()<length } -> dst.putShort(length,)@!(dst.remaining()<length) -> dst.put(type.value(),)@!(dst.remaining()<length) -> dst.put(specificField.get(),)@!(dst.remaining()<length) -> LOOP { -> dst.putInt(specificField.getInt(),)@specificField.hasRemaining() && !(dst.remaining()<length) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/8675be9ba72bddad7f0d433be5d3373cb9e00563/kernel/tags/1.1-rc2/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxStartEntry] = -> TRY {  -> buffer.clear()@ -> buffer.put(TX_START,)@ -> buffer.limit(3,)@ -> IF { -> throw new IllegalStateException("Unable to read tx start entry xid id lengths",)@fileChannel.read(buffer,)!=2 } -> buffer.flip()@!(fileChannel.read(buffer,)!=2) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=2) -> globalIdLength=buffer.get()@!(fileChannel.read(buffer,)!=2) -> branchIdLength=buffer.get()@!(fileChannel.read(buffer,)!=2) -> buffer.limit(3+xidLength+8,)@!(fileChannel.read(buffer,)!=2) -> buffer.position(3,)@!(fileChannel.read(buffer,)!=2) -> IF { -> throw new IllegalStateException("Unable to read xid",)@!(fileChannel.read(buffer,)!=2) && fileChannel.read(buffer,)!=8+xidLength } -> buffer.flip()@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> buffer.position(3+xidLength,)@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> entry=xidIdentMap.get(identifier,)@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> IF { -> entry.setStartPosition(newLog.position(),)@entry!=null && !(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) } -> buffer.position(0,)@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> IF { -> throw new TransactionFailureException("Unable to write tx start xid",)@writeToLog!=null&&writeToLog.write(buffer,)!=3+8+xidLength && !(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) } } CATCH {}
results[https://github.com/asura-fit/asura-j/blob/dd87281b825901b6b12865bdbbd2b39806ab5907/src/jp/ac/fit/asura/nao/RoboCupGameControlData.java][update] = -> buffer=ByteBuffer.allocate(bytes.length,)@ -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> buffer.put(bytes,)@ -> buffer.rewind()@ -> buffer.getInt()@ -> playersPerTeam=buffer.get()@ -> state=buffer.get()@ -> firstHalf=buffer.get()==1@ -> kickOffTeam=buffer.get()@ -> secsRemaining=buffer.getInt()@ -> score[0]=buffer.getShort()@ -> score[1]=buffer.getShort()@ -> ballPos[0]=buffer.getFloat()@ -> ballPos[1]=buffer.getFloat()@
results[https://github.com/hugojosefson/neo4j-components-svn/blob/d5e843666905e90aa91e270aeb152b1cfa4cbec9/kernel/branches/new-index-api/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxStartEntry] = -> TRY {  -> buffer.clear()@ -> buffer.put(TX_START,)@ -> buffer.limit(3,)@ -> IF { -> throw new IllegalStateException("Unable to read tx start entry xid id lengths",)@fileChannel.read(buffer,)!=2 } -> buffer.flip()@!(fileChannel.read(buffer,)!=2) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=2) -> globalIdLength=buffer.get()@!(fileChannel.read(buffer,)!=2) -> branchIdLength=buffer.get()@!(fileChannel.read(buffer,)!=2) -> buffer.limit(3+xidLength+8,)@!(fileChannel.read(buffer,)!=2) -> buffer.position(3,)@!(fileChannel.read(buffer,)!=2) -> IF { -> throw new IllegalStateException("Unable to read xid",)@!(fileChannel.read(buffer,)!=2) && fileChannel.read(buffer,)!=8+xidLength } -> buffer.flip()@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> buffer.position(3+xidLength,)@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> entry=xidIdentMap.get(identifier,)@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> IF { -> entry.setStartPosition(newLog.position(),)@entry!=null && !(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) } -> buffer.position(0,)@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> IF { -> throw new TransactionFailureException("Unable to write tx start xid",)@writeToLog!=null&&writeToLog.write(buffer,)!=3+8+xidLength && !(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/58c53f67d53062b1f7e2a1b7d0c425812f938d68/kernel/tags/1.0/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxStartEntry] = -> TRY {  -> buffer.clear()@ -> buffer.put(TX_START,)@ -> buffer.limit(3,)@ -> IF { -> throw new IllegalStateException("Unable to read tx start entry xid id lengths",)@fileChannel.read(buffer,)!=2 } -> buffer.flip()@!(fileChannel.read(buffer,)!=2) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=2) -> globalIdLength=buffer.get()@!(fileChannel.read(buffer,)!=2) -> branchIdLength=buffer.get()@!(fileChannel.read(buffer,)!=2) -> buffer.limit(3+xidLength+8,)@!(fileChannel.read(buffer,)!=2) -> buffer.position(3,)@!(fileChannel.read(buffer,)!=2) -> IF { -> throw new IllegalStateException("Unable to read xid",)@!(fileChannel.read(buffer,)!=2) && fileChannel.read(buffer,)!=8+xidLength } -> buffer.flip()@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> buffer.position(3+xidLength,)@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> entry=xidIdentMap.get(identifier,)@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> IF { -> entry.setStartPosition(newLog.position(),)@entry!=null && !(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) } -> buffer.position(0,)@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> IF { -> throw new TransactionFailureException("Unable to write tx start xid",)@writeToLog!=null&&writeToLog.write(buffer,)!=3+8+xidLength && !(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/5b31daddd2ab557dfe0c0cfd0d0a0357386d3117/kernel/tags/1.1-rc1/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxStartEntry] = -> TRY {  -> buffer.clear()@ -> buffer.put(TX_START,)@ -> buffer.limit(3,)@ -> IF { -> throw new IllegalStateException("Unable to read tx start entry xid id lengths",)@fileChannel.read(buffer,)!=2 } -> buffer.flip()@!(fileChannel.read(buffer,)!=2) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=2) -> globalIdLength=buffer.get()@!(fileChannel.read(buffer,)!=2) -> branchIdLength=buffer.get()@!(fileChannel.read(buffer,)!=2) -> buffer.limit(3+xidLength+8,)@!(fileChannel.read(buffer,)!=2) -> buffer.position(3,)@!(fileChannel.read(buffer,)!=2) -> IF { -> throw new IllegalStateException("Unable to read xid",)@!(fileChannel.read(buffer,)!=2) && fileChannel.read(buffer,)!=8+xidLength } -> buffer.flip()@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> buffer.position(3+xidLength,)@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> entry=xidIdentMap.get(identifier,)@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> IF { -> entry.setStartPosition(newLog.position(),)@entry!=null && !(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) } -> buffer.position(0,)@!(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) -> IF { -> throw new TransactionFailureException("Unable to write tx start xid",)@writeToLog!=null&&writeToLog.write(buffer,)!=3+8+xidLength && !(fileChannel.read(buffer,)!=8+xidLength) && !(fileChannel.read(buffer,)!=2) } } CATCH {}
results[https://github.com/asura-fit/asura-j/blob/bd25ac234e39c0220d1514083b3f04fc2e498216/src/jp/ac/fit/asura/nao/communication/RoboCupGameControlData.java][update] = -> buffer=ByteBuffer.allocate(bytes.length,)@ -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> buffer.put(bytes,)@ -> buffer.rewind()@ -> buffer.getInt()@ -> buffer.getInt()@ -> playersPerTeam=buffer.get()@ -> state=buffer.get()@ -> firstHalf=buffer.get()@ -> kickOffTeam=buffer.get()@ -> secondaryState=buffer.get()@ -> buffer.get()@ -> buffer.getShort()@ -> secsRemaining=buffer.getInt()@ -> teams[0].readBytes(buffer,)@ -> teams[1].readBytes(buffer,)@ -> ballPosX=buffer.getFloat()@ -> ballPosZ=buffer.getFloat()@
