results[https://github.com/aspotton/xonotic/blob/740a38b25a4637627123304d6355a355376a1979/misc/tools/NexuizDemoRecorder/main/src/main/java/com/nexuiz/demorecorder/application/democutter/DemoCutterUtils.java][convertLittleEndian] = -> bb=ByteBuffer.allocate(4,)@ -> bb.order(ByteOrder.LITTLE_ENDIAN,)@ -> bb.put(b,)@ -> bb.position(0,)@ -> return bb.getInt()@
results[https://github.com/rjm535/xonotic_mod/blob/740a38b25a4637627123304d6355a355376a1979/misc/tools/NexuizDemoRecorder/main/src/main/java/com/nexuiz/demorecorder/application/democutter/DemoCutterUtils.java][convertLittleEndian] = -> bb=ByteBuffer.allocate(4,)@ -> bb.order(ByteOrder.LITTLE_ENDIAN,)@ -> bb.put(b,)@ -> bb.position(0,)@ -> return bb.getInt()@
results[https://github.com/jkiddo/jolivia/blob/25e5b5499d2aab358d86694e304d171d4bf9953c/jolivia.protocol/src/main/java/org/dyndns/jkiddo/dmap/DmapInputStream.java][readInt] = -> TRY {  -> buffer=ByteBuffer.allocate(size,)@ -> LOOP { -> buffer.put((byte) read(),)@ } -> buffer.position(0,)@ -> return buffer.getInt()@ } CATCH {}
results[https://github.com/jkiddo/jolivia/blob/c8cbea99b2a6a113f028becc0ba160d9bf2d3a65/jolivia.example/src/test/java/test/Noop.java][stringReadAsInt] = -> buffer=ByteBuffer.allocate(s.length(),)@ -> LOOP { -> buffer.put((byte) s.charAt(i,),)@i<s.length() } -> buffer.position(0,)@ -> return buffer.getInt()@
results[https://github.com/hugojosefson/neo4j-components-svn/blob/d4b587a7b17dc00fd878c7578162ee6029716f56/kernel/tags/1.1-rc/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxOnePhaseCommit] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_1P_COMMIT,)@ -> IF { -> throw new IllegalStateException("Unable to read 1P commit entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write 1P commit entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
results[https://github.com/Mobisocial/dungbeetle/blob/2f3e1fc7df63b691623631601e2ea780ccd1e9d7/src/org/mobisocial/appmanifest/ShortNameGenerator.java][main] = -> buffer=ByteBuffer.allocate(4,)@ -> buffer.put((byte) 'M',)@ -> buffer.put((byte) 'U',)@ -> buffer.put((byte) 'S',)@ -> buffer.put((byte) 'U',)@ -> buffer.position(0,)@ -> System.out.println("0x"+Integer.toHexString(buffer.getInt(),),)@
results[https://github.com/hugojosefson/neo4j-components-svn/blob/5b31daddd2ab557dfe0c0cfd0d0a0357386d3117/kernel/tags/1.1-rc1/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxTwoPhaseCommit] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_2P_COMMIT,)@ -> IF { -> throw new IllegalStateException("Unable to read 2P commit entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write 2P commit entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/58c53f67d53062b1f7e2a1b7d0c425812f938d68/kernel/tags/1.0/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxPrepareEntry] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_PREPARE,)@ -> IF { -> throw new IllegalStateException("Unable to read prepare entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write prepare entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/d4b587a7b17dc00fd878c7578162ee6029716f56/kernel/tags/1.1-rc/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxPrepareEntry] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_PREPARE,)@ -> IF { -> throw new IllegalStateException("Unable to read prepare entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write prepare entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
results[https://github.com/bcopeland/hbase-thrift/blob/f337b62adc185c17ff369b96a3249a8594bdccdf/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java][deserialize] = -> TRY {  -> newByteBuffer=ByteBuffer.allocate(buf.limit()-HFileBlock.EXTRA_SERIALIZATION_SPACE,)@ -> buf.limit(buf.limit()-HFileBlock.EXTRA_SERIALIZATION_SPACE,).rewind()@ -> newByteBuffer.put(buf,)@ -> ourBuffer=new HFileBlock(newByteBuffer,)@ -> buf.position(buf.limit(),)@ -> buf.limit(buf.limit()+HFileBlock.EXTRA_SERIALIZATION_SPACE,)@ -> ourBuffer.offset=buf.getLong()@ -> ourBuffer.nextBlockOnDiskSizeWithHeader=buf.getInt()@ } CATCH {}
