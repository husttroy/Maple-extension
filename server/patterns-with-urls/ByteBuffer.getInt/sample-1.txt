results[https://github.com/hugojosefson/neo4j-components-svn/blob/d4b587a7b17dc00fd878c7578162ee6029716f56/kernel/tags/1.1-rc/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxOnePhaseCommit] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_1P_COMMIT,)@ -> IF { -> throw new IllegalStateException("Unable to read 1P commit entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write 1P commit entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/5b31daddd2ab557dfe0c0cfd0d0a0357386d3117/kernel/tags/1.1-rc1/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxTwoPhaseCommit] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_2P_COMMIT,)@ -> IF { -> throw new IllegalStateException("Unable to read 2P commit entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write 2P commit entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/58c53f67d53062b1f7e2a1b7d0c425812f938d68/kernel/tags/1.0/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxPrepareEntry] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_PREPARE,)@ -> IF { -> throw new IllegalStateException("Unable to read prepare entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write prepare entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/d4b587a7b17dc00fd878c7578162ee6029716f56/kernel/tags/1.1-rc/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxPrepareEntry] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_PREPARE,)@ -> IF { -> throw new IllegalStateException("Unable to read prepare entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write prepare entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/9c333f534fcdc9d36c60570a3df479647a8a82d4/kernel/tags/1.1-rc4/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxOnePhaseCommit] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_1P_COMMIT,)@ -> IF { -> throw new IllegalStateException("Unable to read 1P commit entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write 1P commit entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/5b31daddd2ab557dfe0c0cfd0d0a0357386d3117/kernel/tags/1.1-rc1/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxPrepareEntry] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_PREPARE,)@ -> IF { -> throw new IllegalStateException("Unable to read prepare entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write prepare entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/d4b587a7b17dc00fd878c7578162ee6029716f56/kernel/tags/1.1-rc/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxTwoPhaseCommit] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_2P_COMMIT,)@ -> IF { -> throw new IllegalStateException("Unable to read 2P commit entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write 2P commit entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/d5e843666905e90aa91e270aeb152b1cfa4cbec9/kernel/branches/new-index-api/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxOnePhaseCommit] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_1P_COMMIT,)@ -> IF { -> throw new IllegalStateException("Unable to read 1P commit entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write 1P commit entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/5b31daddd2ab557dfe0c0cfd0d0a0357386d3117/kernel/tags/1.1-rc1/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxOnePhaseCommit] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_1P_COMMIT,)@ -> IF { -> throw new IllegalStateException("Unable to read 1P commit entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write 1P commit entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/d5e843666905e90aa91e270aeb152b1cfa4cbec9/kernel/branches/new-index-api/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][readAndWriteTxPrepareEntry] = -> TRY {  -> buffer.clear()@ -> buffer.limit(1+4,)@ -> buffer.put(TX_PREPARE,)@ -> IF { -> throw new IllegalStateException("Unable to read prepare entry",)@fileChannel.read(buffer,)!=4 } -> buffer.flip()@!(fileChannel.read(buffer,)!=4) -> buffer.position(1,)@!(fileChannel.read(buffer,)!=4) -> identifier=buffer.getInt()@!(fileChannel.read(buffer,)!=4) -> buffer.position(0,)@!(fileChannel.read(buffer,)!=4) -> IF { -> throw new TransactionFailureException("Unable to write prepare entry",)@writeToLog!=null&&writeToLog.write(buffer,)!=5 && !(fileChannel.read(buffer,)!=4) } } CATCH {}
