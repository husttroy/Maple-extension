results[https://github.com/remi/selenium/blob/10e43ffc58dc0c04d1982fda85e27dc6e3fac2f7/common/test/java/org/openqa/selenium/Build.java][executeBuild][4] = -> TRY {  -> process=builder.start()@ -> exitValue=process.waitFor()@ } CATCH(Exception) {}
results[https://github.com/cinovo/de.cinovo.q.connector/blob/2f0c1d7569d42ce510f10e608631dd452e10ea9b/src/test/java/de/cinovo/q/connector/impl/AReconnectTest.java][startKDB][1] = -> TRY {  -> new ProcessBuilder(AReconnectTest.PATH_TO_Q,"-p","5000",).start()@ } CATCH(Exception) {}
results[https://github.com/kompiro/quick-junit/blob/91a830956f68670b02a5394f5c4e5728ae1fffba/experimental/learning/junit.extensions.eclipse.quick.learning/src/Learning.java][testname][2] = -> TRY {  -> builder=new ProcessBuilder("/usr/local/bin/growlnotify","-n","Quick JUnit","Quick JUnit",)@ -> builder.start()@ } CATCH(Exception) {}
results[https://github.com/mw-ding/MapReduceFramework/blob/c1c4f95cfe81f356b043e0cd518ddb7302c18833/src/main/java/mapreduce/Utility.java][startJavaProcess][7] = -> TRY {  -> processBuilder=new ProcessBuilder(newargs,)@ -> processBuilder.start()@ } CATCH(Exception) {}
results[https://github.com/pcingola/BigDataScript/blob/40f59937b4aef5e60db521b53af8e34cb988ad49/src/ca/mcgill/mcb/pcingola/bigDataScript/osCmd/CmdRunner.java][execPrepare][3] = -> TRY {  -> pb=new ProcessBuilder(commandArgs,)@ -> process=pb.start()@ } CATCH(Exception) {}
results[https://github.com/akiellor/selenium/blob/42c5c79abf2d4c41d2fa7612e472180964bc8842/java/client/test/org/openqa/selenium/Build.java][executeBuild][6] = -> TRY {  -> process=builder.start()@ -> buildWatcher=new BuildWatcher(process,)@ -> exitValue=process.waitFor()@ } CATCH(Exception) {}
results[https://github.com/kompiro/jamcircle/blob/f58f2960ea18cf070d891eeb9d4f57c3aa0bff2b/org.kompiro.jamcircle.kanban.ui.learning/src/learning/Learning.java][name][2] = -> TRY {  -> builder=new ProcessBuilder("/usr/local/git/bin/git",)@ -> process=builder.start()@ -> stream=process.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/TeamHorizon/dalvik/blob/afe3a0131e75367759e1d7a69cec0aac2a45524c/tests/063-process-manager/src/Main.java][child][57] = -> TRY {  -> pb=new ProcessBuilder("sleep","5",)@ -> proc=pb.start()@ -> proc.waitFor()@ } CATCH(Exception) {}
results[https://github.com/mdiponio/sahara-labs-rig-client-commons/blob/698c6477e1049c880cc6b98e178d2e5663cb7279/src/au/edu/labshare/rigclient/action/access/RemoteDesktopAccessAction.java][executeCommand][2] = -> TRY {  -> builder=new ProcessBuilder(command,)@ -> accessProc=builder.start()@ -> accessProc.waitFor()@ } CATCH(Exception) {}
results[https://github.com/zutherb/build-light/blob/a7a8e626f74133b2e57190e8453e492b1dc12507/app/cleware/src/main/java/com/comsysto/buildlight/cleware/daemon/ClewareDaemonLuncher.java][lunch][4] = -> TRY {  -> processBuilder=new ProcessBuilder(path,"-cp",classpath,"-Dcom.sun.management.jmxremote.authenticate=false","-Dcom.sun.management.jmxremote.ssl=false","-Dcom.sun.management.jmxremote.port=39600",ClewareDaemonImpl.class.getName(),)@ -> process=processBuilder.start()@ } CATCH(Exception) {}
results[https://github.com/ceylon/ceylon-compiler/blob/be66480a4a8a8c14c0fa8222cbec9dbe75610374/test/src/com/redhat/ceylon/compiler/java/test/fordebug/ProcessRunner.java][exec][2] = -> TRY {  -> process=pb.start()@ -> process.waitFor()@ -> return process.exitValue()@ } CATCH(Exception) {}
results[https://github.com/Betterverse/Launcher/blob/9897ff09a3f592153f12f52ee615910a5bff0186/src/main/java/org/spoutcraft/launcher/entrypoint/Mover.java][execute][3] = -> TRY {  -> processBuilder=new ProcessBuilder()@ -> processBuilder.command(commands,)@ -> processBuilder.start()@ } CATCH(Exception) {}
results[https://github.com/jmxtrans/jmxtrans/blob/2c48a93815b350fc7366beb88d3d6a62ee73de1c/src/com/googlecode/jmxtrans/model/output/RRDToolWriter.java][rrdToolUpdate][5] = -> TRY {  -> pb=new ProcessBuilder(commands,)@ -> process=pb.start()@ -> checkErrorStream(process,)@ } CATCH(Exception) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/lang/management/OperatingSystemMXBean/GetSystemLoadAverage.java][checkLoadAvg][3] = -> TRY {  -> pb=new ProcessBuilder("/usr/bin/uptime",)@ -> p=pb.start()@ -> output=commandOutput(p,)@ } CATCH(Exception) {}
results[https://github.com/tombobs/SemanticoRadiators/blob/684a1fbc30e98c3d1c8a262591770069115e9056/Alex/legacy/failedAttempts/SVNRadiatorLatest/src/main/java/LogCreator.java][getHistory][2] = -> TRY {  -> command=new ProcessBuilder("svn","log","-r",dateUsed,"--xml","-v",repo,getLogPath(),).start()@ } CATCH(Exception) {}
results[https://github.com/dlubarov/daniel/blob/6b4c82eed719e8aa2dc6d1a01a97d7f55bcaa8af/multiweb/src/daniel/multiweb/UpdateTask.java][runWithExceptions][2] = -> TRY {  -> new ProcessBuilder("/bin/sh","-c",command,).start().waitFor()@ } CATCH(Exception) {}
results[https://github.com/eu-emi/emiregistry/blob/0ced654ea47233f19ff0ccf03bab12164eeee249/dsr/src/test/java/eu/emi/dsr/db/mongodb/TestMongoDBEmbedded.java][beforeClass][4] = -> TRY {  -> pb=new ProcessBuilder(command,)@ -> p=pb.start()@ -> logger.debug("Process started with pid: "+p,)@ } CATCH(Exception) {}
results[https://github.com/cinovo/de.cinovo.q.connector/blob/c1141cb4217755c3e2ad639a7faa671bda523c04/src/it/java/de/cinovo/q/connector/impl/ATest.java][launchQProcess][1] = -> TRY {  -> new ProcessBuilder(ATest.PATH_TO_Q,"-p",String.valueOf(port,),).start()@ } CATCH(Exception) {}
results[https://github.com/sfnelson/rprof/blob/459111e68e06868b675cddaf7fd54bbff22a3ad3/server/src/test/java/nz/ac/vuw/ecs/rprofs/server/db/DatabaseTest.java][destroyDatabase][3] = -> TRY {  -> pb=new ProcessBuilder()@ -> pb.command("/bin/rm","-rf","/tmp/rprof",)@ -> pb.start()@ } CATCH(Exception) {}
results[https://github.com/catchjamil/training/blob/b22ffe9e4f21441154e8e90e9c13a98e462eeadc/MobileEventManagement2.0/src/guiPack/AutoReplySMSService.java][jButton1ActionPerformed][1] = -> TRY { -> new ProcessBuilder("taskkill","/IM","autosms.exe",).start()@ } CATCH(Exception) { -> System.out.println("Error Writing Exit Message: "+e,)@ }
results[https://github.com/madhusudancs/asterixdb/blob/677206dbf5c35d9c7f8b26e9a3846304865484e1/asterix-installer/src/test/java/edu/uci/ics/asterix/installer/test/AsterixInstallerIntegrationUtil.java][startZookeeper][1] = -> TRY {  -> pb2=new ProcessBuilder(script,"describe",)@ -> env2=pb2.environment()@ -> pb2.start()@ } CATCH(Exception) {}
results[https://github.com/nikotsunami/osce/blob/8e76daee3b43411d7e933a834eb9dccfedcc3ef0/OsceManager/src/main/java/ch/unibas/medizin/osce/server/WrapR.java][execute][1] = -> TRY { -> pb=new ProcessBuilder(paramsAll,)@ -> p=pb.start()@ } CATCH(Exception) { -> log.error("ERROR IN R : ",e,)@ }
results[https://github.com/jbosstm/narayana/blob/d6346de232fe549b8b6dfa0ab86bac05bc2e9940/qa/tests/src/org/jboss/jbossts/qa/junit/ExecutionWrapper.java][startProcess][1] = -> TRY {  -> p=new ProcessBuilder(args,).start()@ -> p.waitFor()@ } CATCH(Exception) {}
results[https://github.com/service-oriented-science/Globus-Crux-Core/blob/bab84740c0144136df33a3765626b5e6e2b9c6c5/ajaxUI/mediator/src/main/java/org/cyberaide/ws/mediator/CogMediator.java][retrieveCertificate][1] = -> TRY { -> pb=new ProcessBuilder("chmod","600",outputFile,)@ -> pb.start()@ } CATCH(Exception) { -> log.info("Failed to retrieve proxy certificate!!\n"+e,)@ }
results[https://github.com/uditrugman/openjdk8-hotspot/blob/4ae4924e487671e178d1c3fd7ee047d172876e1b/test/runtime/CommandLine/ConfigFileWarning.java][main][4] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder("-version",)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldContain("warning: .hotspotrc file is present but has been ignored.  Run with -XX:Flags=.hotspotrc to load the file.",)@ } CATCH(Exception) {}
results[https://github.com/seadas/seadas/blob/daf7218afaff7a20e6adc51793236285e4471506/seadas-processing/src/main/java/gov/nasa/gsfc/seadas/processing/general/ProgramExecutor.java][executeProgram][1] = -> probuilder=new ProcessBuilder(command,)@ -> TRY { -> process=probuilder.start()@ -> exitValue=process.waitFor()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/kohsuke/winp/blob/b8595265934ee34229763a92c141a57a23918ded/src/test/java/Main2.java][main][1] = -> TRY {  -> pb=new ProcessBuilder( new String[],)@ -> p=pb.start()@ -> new WinProcess(p,).killRecursively()@ } CATCH(Exception) {}
results[https://github.com/papyri/navigator/blob/3af1d2aab961c7d02bf3160acf5a6928829237bb/pn-sync/src/main/java/info/papyri/sync/Sync.java][reset][2] = -> TRY {  -> pb=new ProcessBuilder("git","reset",commit,)@ -> pb.directory(gitDir,)@ -> pb.start().waitFor()@ } CATCH(Exception) {}
results[https://github.com/LafayetteCollegeLibraries/metadb-dss/blob/63625969f82082abaec56786d05375343692b8eb/webapp-src/src/edu/lafayette/metadb/model/items/ItemsDAO.java][isSymbolicLink][1] = -> TRY { -> returnedValue=new ProcessBuilder("/usr/bin/test","-L",filePath,).start().waitFor()@ } CATCH(Exception) { -> MetaDbHelper.note("Warning: Could not test whether or not "+filePath+" is a symbolic link: "+e,)@ }
results[https://github.com/uditrugman/openjdk8-hotspot/blob/aa19304a7c16d5d571b87a7b689b211ecd2e3f64/test/compiler/cpuflags/RestoreMXCSR.java][main][3] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder("-XX:+RestoreMXCSROnJNICalls","-version",)@ -> out=new OutputAnalyzer(pb.start(),)@ -> out.shouldHaveExitValue(0,)@ } CATCH(Exception) {}
results[https://github.com/axDev-JDK/hotspot/blob/2c0dc559a1687f6ef8eff1e1544d9a046deaed36/test/runtime/NMT/JcmdWithNMTDisabled.java][jcmdCommand][2] = -> TRY {  -> pb.command( new String[],)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldContain("Native memory tracking is not enabled",)@ } CATCH(Exception) {}
results[https://github.com/dukeboard/kevoree-microsandbox/blob/d613ff7489be99b65a6bb926fe5cf000fab71743/org.kevoree.microsandbox.watchdog/src/main/java/org/kevoree/watchdog/child/jvm/ChildJVM.java][isolate][2] = -> TRY { -> builder=new ProcessBuilder(buildCommandLine(),)@ -> process=builder.start()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/mirkonasato/jodconverter/blob/73594fd56eaf10be6b148608dbde640a8ef98e2f/jodconverter-core/src/test/java/org/artofsolving/jodconverter/process/ProcessManagerTest.java][linuxProcessManager][1] = -> TRY {  -> process=new ProcessBuilder("sleep","5s",).start()@ -> javaPid=(Integer) ReflectionUtils.getPrivateField(process,"pid",)@ -> processManager.kill(process,pid,)@ } CATCH(Exception) {}
results[https://github.com/catchjamil/training/blob/b22ffe9e4f21441154e8e90e9c13a98e462eeadc/MobileEventManagement2.0/src/guiPack/AutoReplySMSService.java][<init>][1] = -> TRY { -> new ProcessBuilder(System.getProperty("user.dir",)+"\\autoSms\\autoSms.exe",).start()@ } CATCH(Exception) { -> System.out.println("Exception Starting SMS Server: "+e,)@ }
results[https://github.com/0xdata/h2o/blob/990bfbba5fdb316db3381f50746130416480a874/src/main/java/water/deploy/VM.java][exec][1] = -> TRY {  -> builder=new ProcessBuilder(list,)@ -> process=builder.start()@ -> NodeVM.inheritIO(process,null,)@ -> process.waitFor()@ } CATCH(Exception) {}
results[https://github.com/rzymek/vassal-src/blob/f5f48e80a9b3397b79220c67d713a91d1a8f43a4/test/VASSAL/tools/io/ProcessCallableTest.java][testInterrupt][1] = -> TRY {  -> pb=new ProcessBuilder("java","-cp",System.getProperty("java.class.path",),"VASSAL.tools.io.ProcessCallableTestBlocker",)@ -> proc=pb.start()@ -> c=new ProcessCallable(proc,outPump,errPump,exec,)@ } CATCH(Exception) {}
results[https://github.com/fucking007/src/blob/0a3d3e8e84eababcdd64a47981abd2cc8072f4a1/sigepsa/BackUpSample.java][CrearBackup][2] = -> TRY { -> new ProcessBuilder("script.bat",).start().waitFor()@ } CATCH(Exception) { -> AccionesConcurrentes.mostrarError("¡Se ha producido un erro! \n No se pudo crear la copia de seguridad",)@ }
results[https://github.com/uditrugman/openjdk8-hotspot/blob/59c33d46bd7b336f882a9a06dcdf01e47114ba3b/test/runtime/RedefineObject/TestRedefineObject.java][main][1] = -> TRY {  -> pb=new ProcessBuilder()@ -> pb.command( new String[],)@ -> pb.start().waitFor()@ } CATCH(Exception) {}
results[https://github.com/avsm/signpost/blob/96aa31ab71dec038b87a509ca70622710d1baf70/android_tools/NetQoSDiversityMonitor/src/cl/cam/ac/uk/erdos/net/RttEvaluationService.java][readFile][1] = -> TRY { -> cmd=new ProcessBuilder(args,)@ -> process=cmd.start()@ -> in=process.getInputStream()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/inspector-cochise/cochise/blob/cbb9344720db61b49bed971c53bcc7db73a3c704/HttpdConfigParser/src/org/akquinet/audit/bsi/httpd/HttpdAudit.java][getOperatingSystem][1] = -> TRY { -> p=new ProcessBuilder("./distro.sh",).start()@ -> exitVal=p.waitFor()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/uditrugman/openjdk8-hotspot/blob/9a33e0d66264573086a1af6ea8fdde0c33d1fde8/test/runtime/CompressedOops/CompressedKlassPointerAndOops.java][runWithAlignment][1] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder("-XX:+UseCompressedKlassPointers","-XX:+UseCompressedOops","-XX:ObjectAlignmentInBytes="+alignment,"-version",)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldHaveExitValue(0,)@ } CATCH(Exception) {}
results[https://github.com/jembi/openhim/blob/8784204d9f9d661679100647640cd1b68add8a11/src/test/java/org/jembi/openhim/integration/AbstractOpenHIMIntegration.java][doSetUp][1] = -> TRY {  -> pb=new ProcessBuilder("java","-jar","wiremock-1.33-standalone.jar",)@ -> pb.directory(new File("src/test/resources/integration-tests",),)@ -> wiremockProcess=pb.start()@ } CATCH(Exception) {}
results[https://github.com/barchart/barchart-udt/blob/fdc3be69e2dfe00a4b7e562b0a7265fad66b4854/barchart-udt-netty4/src/test/java/io/netty/transport/udt/util/UnitHelp.java][process][1] = -> TRY {  -> builder=new ProcessBuilder(command.split("\\s+",),)@ -> process=builder.start()@ -> process.waitFor()@ } CATCH(Exception) {}
results[https://github.com/pablopareja/MG7/blob/a460f71bb48f752a8546bff150bbf5008767dbc5/src/com/era7/bioinfo/mg7/ManageReadPackages.java][umountDetachAndDeleteVolume][1] = -> TRY {  -> pBuilder=new ProcessBuilder("umount",mG7DataXML.getVolumeDevice(),)@ -> process=pBuilder.start()@ -> process.waitFor()@ } CATCH(Exception) {}
results[https://github.com/Biggerskimo/wots2/blob/3e6eeb1d555c0df99eb3c8e51cb663d72c28b9e0/src/main/java/de/abbaddie/wot/lib/JsGenerator.java][exec][1] = -> TRY {  -> b=new ProcessBuilder(cmd,)@ -> b.redirectError(Redirect.INHERIT,)@ -> b.redirectOutput(Redirect.INHERIT,)@ -> return b.start()@ } CATCH(Exception) {}
results[https://github.com/BaseXdb/basex/blob/0a839ab7004007adae3d99862dade4a5005fccb2/src/org/basex/BaseXWebServer.java][eval][2] = -> TRY {  -> pb=new ProcessBuilder(exec,)@ -> pb.redirectErrorStream(true,)@ -> is=pb.start().getInputStream()@ } CATCH(Exception) {}
results[https://github.com/OurGrid/OurVirt/blob/4b2fda82c1020941975c2abee5bae2ba8db26ef4/src/org/ourgrid/virt/strategies/qemu/QEmuStrategy.java][checkKVM][1] = -> TRY { -> return new ProcessBuilder("kvm-ok",).start().waitFor()==0@ } CATCH(Exception) { -> LOGGER.debug("kvm-ok failed",)@ }
results[https://github.com/forcedotcom/aura/blob/bb3fc53a3bd74ce3a2edcafb0e5f091483476fe8/aura/src/test/java/org/auraframework/archetype/AuraArchetypeSimpleTestMANUAL.java][startProcess][1] = -> TRY {  -> builder=new ProcessBuilder(command,)@ -> builder.directory(workingDir,)@ -> builder.redirectErrorStream(true,)@ -> return builder.start()@ } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-hotspot/blob/aa608158b731fef2ae6ecef8ad28de7976150fed/test/runtime/CommandLine/ConfigFileParsing.java][main][1] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder("-XX:+IgnoreUnrecognizedVMOptions","-XX:Flags=.hotspotrc","-version",)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldHaveExitValue(0,)@ } CATCH(Exception) {}
results[https://github.com/svn2github/simcity/blob/989af294a2fa996e4520434b04e835f354361df6/micropolis-java/src/micropolisj/util/TranslationTool.java][onTestClicked][1] = -> TRY { -> processBuilder=new ProcessBuilder(javaPath,"-Duser.language="+selLanguage,"-Duser.country="+selCountry,"-Duser.variant="+selVariant,"-cp",classPath,"micropolisj.Main",)@!(code==null) -> processBuilder.start()@!(code==null) } CATCH(Exception) { -> JOptionPane.showMessageDialog(this,e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE,)@!(code==null) }
results[https://github.com/tonit/karafonexam2/blob/7db7863a22bd39bbb9ca428e0df55e1c9f830ae8/admin/core/src/main/java/org/apache/karaf/admin/internal/AdminServiceImpl.java][chmod][15] = -> TRY {  -> builder=new ProcessBuilder()@ -> builder.command("chmod",mode,serviceFile.getCanonicalPath(),)@ -> p=builder.start()@ -> status=p.waitFor()@ } CATCH(Exception) {}
results[https://github.com/robert-schmidtke/pcsd/blob/a724674e06bbdbf303f422a87a1ef5e9a2e56e27/assignment-2-robert/test-client/src/dk/diku/pcsd/assignment2/impl/client/LoggingTest.java][stopTomcat][4] = -> TRY { -> new ProcessBuilder("/home/robert/apache-tomcat-7.0.33/bin/shutdown.sh",).start().waitFor()@ } CATCH(Exception) { -> throw new RuntimeException(e.getMessage(),e,)@ }
results[https://github.com/axDev-JDK/hotspot/blob/2c0dc559a1687f6ef8eff1e1544d9a046deaed36/test/runtime/NMT/SummarySanityCheck.java][main][2] = -> TRY {  -> pb=new ProcessBuilder()@ -> pb.command( new String[],)@ -> output=new OutputAnalyzer(pb.start(),)@ -> jcmdout=output.getOutput()@ } CATCH(Exception) {}
results[https://github.com/pcingola/BigDataScript/blob/5267b5068894b5e2359f516373a98148df88b38d/src/ca/mcgill/mcb/pcingola/bigDataScript/osCmd/CmdLocal.java][execPrepare][1] = -> TRY {  -> pb=new ProcessBuilder(commandArgs,)@ -> process=pb.start()@ -> IF { -> stderr=process.getErrorStream()@ } } CATCH(Exception) {}
results[https://github.com/eskang/validAlloy/blob/983b3f710658214231e6ab4dbf3d7f2788be3204/src/Utils.java][setGitDate][1] = -> TRY { -> pbA=new ProcessBuilder("export GIT_AUTHOR_DATE='Wed Feb 16 14:00 2037 +0100'",)@ -> pbA.directory(path,)@ -> prA=pbA.start()@ -> prA.waitFor()@ } CATCH(Exception) { -> exc.printStackTrace()@ }
results[https://github.com/uditrugman/openjdk8-hotspot/blob/c4ba7d88216d2cbc20efd728e753dd0491f0e04f/test/gc/arguments/TestMaxHeapSizeTools.java][getNewOldSize][1] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder(gcflag,"-XX:+PrintFlagsFinal","-version",)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldHaveExitValue(0,)@ -> stdout=output.getStdout()@ } CATCH(Exception) {}
results[https://github.com/papyri/navigator/blob/ab72f12799945c81f16326e5b590ea251905a131/pn-sync/src/main/java/info/papyri/sync/SyncServlet.java][run][1] = -> pb=new ProcessBuilder("git","pull","origin","master",)@ -> pb.directory(mdDir,)@ -> TRY { -> pb.start().waitFor()@ } CATCH(Exception) { -> logger.error("Failed to sync MarkDown directory "+mdDir,e,)@ }
results[https://github.com/uditrugman/openjdk8-hotspot/blob/e85647ecbfaf530c0880648ee69fc93e5f2cdb20/test/runtime/CommandLine/UnrecognizedVMOption.java][main][4] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder("-XX:bogus_option","-version",)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldContain("Unrecognized VM option 'bogus_option'",)@ -> output.shouldHaveExitValue(1,)@ } CATCH(Exception) {}
results[https://github.com/dstepanov/coffeescript-netbeans/blob/1af2eee5a4ad08b2db328274a001311732a46798/src/coffeescript/nb/CoffeeScriptNodeJSCompiler.java][execWindows][1] = -> TRY {  -> p=pb.start()@ -> errStream=p.getErrorStream()@ -> inputStream=p.getInputStream()@ -> p.waitFor()@ -> p.destroy()@ } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-hotspot/blob/e02da711a5936414d15623f1026f08443a17439b/test/gc/concurrentMarkSweep/CheckAllocateAndSystemGC.java][main][1] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder("-showversion","-XX:+UseConcMarkSweepGC","-Xmn4m","-XX:MaxTenuringThreshold=1","-XX:-UseCMSCompactAtFullCollection","CheckAllocateAndSystemGC$AllocateAndSystemGC",)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldNotContain("error",)@ -> output.shouldHaveExitValue(0,)@ } CATCH(Exception) {}
results[https://github.com/Chrriis/DJ-Native-Integration/blob/0c34fb7ac16596f73f8f54737f0711470e35afe6/DJWebApplicationPacker/src/chrriis/dj/wapacker/wslink/WSLink.java][<init>][2] = -> IF { -> return @url==null } -> processBuilder=new ProcessBuilder(newArgs,)@!(url==null) -> TRY { -> processBuilder.start()@!(url==null) } CATCH(Exception) { -> e.printStackTrace()@!(url==null) }
results[https://github.com/interdroid/ibis-ipl/blob/0c603ad74ac9322071182309d88a6b94ea6c08c8/util/src/ibis/util/RunProcess.java][run][2] = -> TRY { -> p=builder.start()@ } CATCH(Exception) { -> proc_err=new buf("Could not execute cmd: "+builder.command().toString()+" "+e.getBytes(),)@ }
results[https://github.com/Chrriis/DJ-Native-Integration/blob/798ab0d1ece6c3436e9d4385c7fc11d67aa01a3b/Installer/src/chrriis/dj/installer/uninstall/UninstallInstallerListener.java][uninstallDJShellExtension][1] = -> TRY {  -> IF { -> return false@!(rh.keyExist(keyPath,)) } -> processBuilder=new ProcessBuilder("MsiExec.exe","/norestart","/q","/x"+clsID,)@!(!(rh.keyExist(keyPath,))) -> process=processBuilder.start()@!(!(rh.keyExist(keyPath,))) -> process.waitFor()@!(!(rh.keyExist(keyPath,))) } CATCH(Exception) {}
results[https://github.com/mchr3k/org.intrace/blob/c7e8b397f2bbe9f1509b0991bf49f264133753f5/InTrace-VisualVM-Container/InTrace-VisualVM-Plugin/src/org/intrace/visualvm/impl/InTraceLoader.java][run][2] = -> TRY { -> builder=new ProcessBuilder(command,)@ -> builder.start()@ } CATCH(Exception) { -> handler.handleStatus("Exception thrown:\n"+throwableToString(ex,),)@ -> Exceptions.printStackTrace(ex,)@ }
results[https://github.com/ReunionDev/reunion/blob/1f5b6ac47960fec5d3e915c5dcaa9cb80e4e9e04/jlauncher/src/main/java/org/reunionemu/jlauncher/Launcher.java][main][1] = -> TRY { -> builder=new ProcessBuilder( new String[],)@ -> builder.directory(new File(dir,),)@ -> p=builder.start()@ } CATCH(Exception) { -> logger.warn("Exception",e,)@ }
results[https://github.com/bsmedberg/pig/blob/de24d5d8c50fc5e04ba649405ec8d27e03430a80/contrib/zebra/src/test/org/apache/hadoop/zebra/types/TestStorageGrammar.java][<clinit>][5] = -> TRY { -> process=new ProcessBuilder(command,).start()@ -> is=process.getInputStream()@ -> System.out.printf("Output of running %s is:",command,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/uditrugman/openjdk8-hotspot/blob/d29ef688ad49c7b8fbeee497e41eb9eeee77badc/test/runtime/NMT/CommandLineEmptyArgument.java][main][4] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder("-XX:NativeMemoryTracking=",)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldContain("Syntax error, expecting -XX:NativeMemoryTracking=[off|summary|detail]",)@ -> output.shouldHaveExitValue(1,)@ } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-hotspot/blob/d29ef688ad49c7b8fbeee497e41eb9eeee77badc/test/runtime/NMT/PrintNMTStatisticsWithNMTDisabled.java][main][2] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder("-XX:+UnlockDiagnosticVMOptions","-XX:+PrintNMTStatistics","-version",)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldContain("warning: PrintNMTStatistics is disabled, because native memory tracking is not enabled",)@ -> output.shouldHaveExitValue(0,)@ } CATCH(Exception) {}
results[https://github.com/rzymek/vassal-src/blob/f5f48e80a9b3397b79220c67d713a91d1a8f43a4/test/VASSAL/tools/io/ProcessCallableTest.java][testNormal][1] = -> TRY {  -> pb=new ProcessBuilder("java","-cp",System.getProperty("java.class.path",),"VASSAL.tools.io.ProcessCallableTestEchoer",)@ -> proc=pb.start()@ -> c=new ProcessCallable(proc,outPump,errPump,exec,)@ -> pin=proc.getOutputStream()@ } CATCH(Exception) {}
results[https://github.com/elka-projekt/cs-voltdb/blob/9e9337e1b8ee2c4c6377d58f3af453090c057ff4/tests/frontend/org/voltdb/regressionsuites/TestSaveRestoreSysprocSuite.java][testRestore12Snapshot][2] = -> TRY {  -> pb=new ProcessBuilder( new String[],)@ -> proc=pb.start()@ -> os=proc.getOutputStream()@ -> assertEquals(0,proc.waitFor(),)@ } CATCH(Exception) {}
results[https://github.com/asakusafw/asakusafw/blob/c925d9197fd0798df82cf8403db452e8b3baf079/thundergate-project/asakusa-thundergate/src/test/java/com/asakusafw/bulkloader/testutil/UnitTestUtil.java][setUpBeforeClass][1] = -> TRY {  -> IF { -> pb=new ProcessBuilder("chmod","777",targetDir.getAbsolutePath(),)@ -> pb.start()@ } } CATCH(Exception) {}
results[https://github.com/kohsuke/winp/blob/3fa53450fbefc074aa40853227de1aaf4194b33b/src/test/java/TheTest.java][testKill][1] = -> TRY {  -> pb=new ProcessBuilder("notepad",)@ -> pb.environment().put("TEST","foobar",)@ -> p=pb.start()@ -> wp=new WinProcess(p,)@ } CATCH(Exception) {}
results[https://github.com/jenkinsci/shiningpanda-plugin/blob/470b23adebdf6b8ca39ff2fcd7ec3e99f8821782/src/test/java/jenkins/plugins/shiningpanda/ShiningPandaTestCase.java][createVirtualenv][1] = -> TRY {  -> pb=new ProcessBuilder("virtualenv",home.getAbsolutePath(),)@ -> process=pb.start()@ -> assertEquals(0,process.waitFor(),)@ } CATCH(Exception) {}
results[https://github.com/dukeboard/kevoree-watchdog/blob/c4eec71b6a149754fca62c635bf6e185f22a7c26/org.kevoree.bootstrap/src/main/java/org/kevoree/boot/child/jvm/ChildJVM.java][isolate][1] = -> TRY { -> builder=new ProcessBuilder(buildCommandLine(),)@ -> process=builder.start()@ -> handleStdOutAndStdErrOf(process,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/uditrugman/openjdk8-hotspot/blob/c4ba7d88216d2cbc20efd728e753dd0491f0e04f/test/gc/arguments/TestMaxHeapSizeTools.java][runWhiteBoxTest][1] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder(finalargs.toArray( new String[],),)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldHaveExitValue(0,)@ } CATCH(Exception) {}
results[https://github.com/magsilva/ironiacorp-commons/blob/8d3e365bd4c5acba778f871707a76b797c0549ef/commons-computer/test/com/ironiacorp/computer/FileExecutionTest.java][testExec][1] = -> TRY {  -> pb=os.exec(file,)@ -> process=pb.start()@ -> result=process.waitFor()@ -> assertEquals(0,process.exitValue(),)@ } CATCH(Exception) {}
results[https://github.com/apache/geronimo-gshell/blob/1868a99a1cf483a2a6bbfabc888e63252d9c80cf/gshell-commands/gshell-optional/src/main/java/org/apache/geronimo/gshell/commands/optional/ExecuteCommand.java][execute][1] = -> TRY {  -> log.info("Executing: {}",builder.command(),)@ -> p=builder.start()@ -> handler.attach(p,)@ -> status=p.waitFor()@ } CATCH(Exception) {}
results[https://github.com/CloudifySource/iTests-Framework/blob/94b2115f4d69b1a26305823b46acaae8f198f543/src/main/java/iTests/framework/testng/report/SGTestNGListener.java][initLogstash][1] = -> IF { -> TRY { -> pb=new ProcessBuilder(parts,)@ -> process=pb.start()@process==null } CATCH(Exception) { -> e.printStackTrace()@ } }
results[https://github.com/marthaler/schuelerturnier/blob/84838bdc0dc5e8e3c0b6105c2b3083ea1f5eadcb/mad_schuelerturnier_dataloader/src/test/java/com/googlecode/madschuelerturnier/business/xls/RealDBTest2013.java][xlsTest][1] = -> pb=new ProcessBuilder("open",System.getProperty("java.io.tmpdir",)+"out.xls",)@ -> TRY { -> p=pb.start()@ -> LOG.info("prozess beendet: "+p,)@ } CATCH(Exception) { -> LOG.error(e.getMessage(),e,)@ }
results[https://github.com/redstar3894/android-gcc/blob/9282a3bf08b3c88046756e5b0814284634a23125/libjava/testsuite/libjava.lang/Process_7.java][main][1] = -> TRY { -> pb=new ProcessBuilder("env",)@ -> e=pb.environment()@ -> p=pb.start()@ -> is=p.getInputStream()@ } CATCH(Exception) { -> System.out.println(ex.toString(),)@ }
results[https://github.com/jbosstm/narayana/blob/2c1b6e7bb3aa24deeffcc81658e823b46a91b5f3/ArjunaJTS/integration/src/test/java/com/arjuna/ats/jta/distributed/SimpleIsolatedServers.java][testSimultaneousRecover][1] = -> TRY {  -> IF { -> processBuilder=new ProcessBuilder("/bin/sh","-c","kill -3 $PPID",)@ -> processBuilder.redirectErrorStream(true,)@ -> process=processBuilder.start()@ -> inputStream=process.getInputStream()@ } } CATCH(Exception) {}
results[https://github.com/kframework/k/blob/19f7ce3ce0eaa8b62ab039d3b7f103bd3c0d7928/javasources/IOServer/src/resources/ResourceSmt.java][<init>][1] = -> pb=new ProcessBuilder("z3","-smt2","-in",)@ -> TRY { -> smt=pb.start()@ } CATCH(IOException) { -> e.printStackTrace()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/uDig/udig-platform/blob/349340250a93a231ae44ba69b78c7b895ff84bd5/plugins/org.locationtech.udig.omsbox/src/org/locationtech/udig/omsbox/core/OmsScriptExecutor.java][exec][2] = -> TRY {  -> processBuilder=new ProcessBuilder(args,)@ -> environment=processBuilder.environment()@ -> process=processBuilder.start()@ -> IF { -> command=processBuilder.command()@ } } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-hotspot/blob/0ed98606d2a43ea38854285ec6fc426c7667b69d/test/gc/startup_warnings/TestIncGC.java][main][2] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder("-Xincgc","-version",)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldContain("warning: Using incremental CMS is deprecated and will likely be removed in a future release",)@ -> output.shouldNotContain("error",)@ -> output.shouldHaveExitValue(0,)@ } CATCH(Exception) {}
results[https://github.com/agacek/jkind/blob/0a5fb8cd413a3812381f36196ea79a1f15ac8dcb/jkind/src/jkind/Benchmark.java][getRuntime][1] = -> TRY {  -> pb=new ProcessBuilder(args,)@ -> pb.redirectErrorStream(true,)@ -> pb.redirectOutput(Redirect.appendTo(LOG,),)@ -> process=pb.start()@ -> process.waitFor()@ } CATCH(Exception) {}
results[https://github.com/tentejswi/PersonalityExtraction/blob/f1df359c2fa57884b9f9dac7ce9cd636f130d558/src/senna/RunSenna.java][getSennaOutput][1] = -> TRY { -> pb=new ProcessBuilder("bash","-c",cmd,)@ -> pb.directory(sennaInstallationDir,)@ -> shell=pb.start()@ -> shellIn=shell.getInputStream()@ -> shellExitStatus=shell.waitFor()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/uditrugman/openjdk8-hotspot/blob/ca781b49a045b638ab4b97ddd02b2902c50dca32/test/gc/TestVerifyBeforeGCDuringStartup.java][main][1] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder(System.getProperty("test.vm.opts",),"-XX:-UseTLAB","-XX:+UnlockDiagnosticVMOptions","-XX:+VerifyBeforeGC","-version",)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldContain("[Verifying",)@ -> output.shouldHaveExitValue(0,)@ } CATCH(Exception) {}
results[https://github.com/zutherb/build-light/blob/dd271b5e5169cc0d2412e4ae0df6517902e1c2c1/driver/cleware/src/main/java/com/cleware/commandline/command/GuiCommand.java][execute][1] = -> TRY { -> processBuilder=new ProcessBuilder(path,"-cp",classpath,TrafficLightApplication.class.getCanonicalName(),)@ -> processBuilder.redirectErrorStream(true,)@ -> process=processBuilder.start()@ -> process.waitFor()@ } CATCH(Exception) { -> LOGGER.error("Could not start GUI",)@ }
results[https://github.com/uditrugman/openjdk8-hotspot/blob/d29ef688ad49c7b8fbeee497e41eb9eeee77badc/test/runtime/NMT/CommandLineSummary.java][main][5] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder("-XX:NativeMemoryTracking=summary","-version",)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldNotContain("error",)@ -> output.shouldNotContain("warning",)@ -> output.shouldHaveExitValue(0,)@ } CATCH(Exception) {}
results[https://github.com/ashleygwinnell/ark2d/blob/e8cab9ac9eaa7c7df471286542577b1316d73391/Tools/Project Manager/src/org/ashleygwinnell/ark2dprojectmanager/MyToolBar.java][run][1] = -> TRY { -> pb=new ProcessBuilder("python",pyscript,"type=game","dir="+dir,)@ -> pb.redirectErrorStream(true,)@ -> System.out.println(pb.toString(),)@ -> p=pb.start()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/tonit/karafonexam2/blob/dd22b3709edb682aecea4fa9331d650e6d669b16/gshell/gshell-wrapper/src/main/java/org/apache/servicemix/runtime/gshell/wrapper/InstallCommand.java][chmod][1] = -> TRY {  -> builder=new ProcessBuilder()@ -> builder.command("chmod",mode,serviceFile.getCanonicalPath(),)@ -> p=builder.start()@ -> handler.attach(p,)@ -> status=p.waitFor()@ } CATCH(Exception) {}
results[https://github.com/sudarshang/lucene-solr/blob/0cc1a3e20ec012b63808c2f771fdda8b1e1f6ce7/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash.java][forkTest][1] = -> TRY {  -> pb=new ProcessBuilder(cmd,)@ -> pb.directory(tempDir,)@ -> pb.redirectErrorStream(true,)@ -> p=pb.start()@ -> is=p.getInputStream()@ -> p.waitFor()@ } CATCH(Exception) {}
results[https://github.com/attdevsupport/ARO/blob/1a97a797b9aed36ed73ca2c95b6c7ab7c6a1bb4c/ARODataAnalyzer/src/com/att/aro/pcap/windows/WinPacketCapture.java][getListOfDevices][2] = -> TRY { -> pb2=new ProcessBuilder(windumpCommand,)@ -> p2=pb2.start()@ -> windumpReader=new BufferedReader(new InputStreamReader(p2.getInputStream(),),)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/elexis/elexis-3-base/blob/78bef9ad8e2aa7badd5a87efc0945efe78dc3514/com.hilotec.elexis.opendocument/src/com/hilotec/elexis/opendocument/TextPlugin.java][print][1] = -> IF { -> return false@file==null||!(ensureClosed()) } -> pb=new ProcessBuilder(args,)@!(file==null||!(ensureClosed())) -> TRY { -> editor_process=pb.start()@!(file==null||!(ensureClosed())) -> editor_process.waitFor()@!(file==null||!(ensureClosed())) } CATCH(Exception) { -> e.printStackTrace()@!(file==null||!(ensureClosed())) }
results[https://github.com/uditrugman/openjdk8-hotspot/blob/0ed98606d2a43ea38854285ec6fc426c7667b69d/test/gc/startup_warnings/TestDefNewCMS.java][main][1] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder("-XX:-UseParNewGC","-XX:+UseConcMarkSweepGC","-version",)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldContain("warning: Using the DefNew young collector with the CMS collector is deprecated and will likely be removed in a future release",)@ -> output.shouldNotContain("error",)@ -> output.shouldHaveExitValue(0,)@ } CATCH(Exception) {}
results[https://github.com/soluvas/karaf/blob/09e8eac4053138cfb02001ed36de89081471ee6c/shell/commands/src/main/java/org/apache/karaf/shell/commands/ExecuteAction.java][doExecute][3] = -> TRY {  -> builder=new ProcessBuilder(args,)@ -> log.info("Executing: {}",builder.command(),)@ -> p=builder.start()@ -> handler.attach(p,)@ -> status=p.waitFor()@ } CATCH(Exception) {}
results[https://github.com/eclipse/cdo.infrastructure/blob/3895bef10287f1b527935cff543a3eca53868b31/org.eclipse.emf.cdo.releng.promotion/src/promoter/util/IO.java][executeProcess][1] = -> TRY { -> processBuilder=new ProcessBuilder(command,)@ -> processBuilder.redirectErrorStream(true,)@ -> process=processBuilder.start()@ -> stream=process.getInputStream()@ -> process.waitFor()@ } CATCH(Exception) { -> throw new RuntimeException(ex,)@ }
results[https://github.com/dukeboard/kevoree-genetic/blob/77c7edf64964a205c33331e43e8baae1946972c0/MOEAFramework-1.18/src/main/java/org/moeaframework/algorithm/pisa/PISAAlgorithm.java][initialize][1] = -> TRY { -> process=selector.start()@ -> RedirectStream.redirect(process.getInputStream(),System.out,)@ -> RedirectStream.redirect(process.getErrorStream(),System.err,)@ } CATCH(Exception) { -> throw new AlgorithmException(this,e,)@ }
results[https://github.com/ehrickwilliam/Andare/blob/eb700d6c22174c45477a9ce0ca9d462820e37cc7/Sistema/src/br/com/okaynet/andare/gui/JFramePrincipal.java][backupDoSistema][1] = -> TRY { -> pb=new ProcessBuilder(comando,"--user="+HibernateConfiguration.getUser(),"--password="+HibernateConfiguration.getPass(),HibernateConfiguration.getBase(),"--result-file=C:\\Okaynet\\Andare\\Backup\\Backup_"+dataFormatadaNormal+".sql",)@ -> pb.start()@ } CATCH(Exception) { -> JOptionPane.showMessageDialog(null,"Aconteceu algo inesperado ao executar o Backup!",)@ }
results[https://github.com/uditrugman/openjdk8-hotspot/blob/21e08c94e5a2b8cf6ed65fe6fade55df64ba258f/test/gc/g1/TestPrintRegionRememberedSetInfo.java][runTest][1] = -> TRY {  -> pb=ProcessTools.createJavaProcessBuilder(finalargs.toArray( new String[],),)@ -> output=new OutputAnalyzer(pb.start(),)@ -> output.shouldHaveExitValue(0,)@ -> result=output.getStdout()@ } CATCH(Exception) {}
