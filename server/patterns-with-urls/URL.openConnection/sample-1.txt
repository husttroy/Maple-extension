results[https://github.com/sangamon/sneer/blob/71005db35208bfe85e5419b2d2a92b277bf703da/bricks/src/sneerapps/gis/ui/impl/LocationGuiImpl.java][grabData][5] = -> TRY {  -> conn=url.openConnection()@ -> in=conn.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/sonatype/maven-reference-en/blob/fb36577fb4faded19a13d77611c809fa89cab5c4/examples/ch06/simple-parent/simple-weather/src/main/java/com/sonatype/maven/weather/YahooRetriever.java][retrieve][117] = -> TRY {  -> conn=new URL(url,).openConnection()@ -> return conn.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/uDig/udig-platform/blob/fae0b31d673f218d5474c6cbdbc78749e8703d41/plugins/net.refractions.udig.catalog.wmt/src/net/refractions/udig/catalog/internal/wmt/wmtsource/ww/LayerSet.java][getRootElementFromUrl][3] = -> TRY {  -> connection=url.openConnection()@ -> dom=builder.build(connection.getInputStream(),)@ } CATCH(Exception) {}
results[https://github.com/gilsondev/jsf2-api/blob/124d212e7273567eb42a4ba457241c9b39572cdd/jsf-ri/test/com/sun/faces/application/resource/TestResourceImpl.java][getBytes][5] = -> TRY {  -> c=url.openConnection()@ -> c.setUseCaches(false,)@ -> in=c.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/egonw/pathvisio/blob/af58ae201d0b4b419dfad2e243bbe74aa274c50d/src/wikipathways/org/wikipathways/applet/gui/GenMappExporter.java][doExport][3] = -> TRY {  -> con=pwUrl.openConnection()@ -> pathway.readFromXml(con.getInputStream(),true,)@ } CATCH(Exception) {}
results[https://github.com/ursatong/GuardroidROM/blob/01a1c6fbcaf758ea6d9cf6296618bc6092733b36/frameworks/base/tests/CoreTests/android/core/URLTest.java][request][6] = -> TRY {  -> connection=url.openConnection()@ -> connection.connect()@ -> input=connection.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/crh/escidoc-core-1.4/blob/9800d0505b977f52b0d66ceb6d0110f75812382d/integration-tests/src/test/java/de/escidoc/core/test/EscidocAbstractTest.java][getTemplateAsString][4] = -> TRY {  -> con=(HttpURLConnection) path.openConnection()@ -> con.setRequestMethod("GET",)@ -> is=con.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/xebialabs/overthere/blob/930f1a9a670c7e50a5a5c3c201599f035833009f/src/main/java/com/xebialabs/overthere/winrm/connector/JdkHttpConnector.java][sendMessage][2] = -> TRY { -> urlConnection=targetURL.openConnection()@ -> con=(HttpURLConnection) urlConnection@ -> is=urlConnection.getInputStream()@ } CATCH(Exception) { -> throw new WinRMRuntimeIOException("send message on "+targetURL+" error ",requestDocument,responseDocument,e,)@ }
results[https://github.com/Paxle/Paxle/blob/f3b4d2913a5a4f3b288215a091cba8c9eb425743/bundles/CharsetDetector/src/org/paxle/charset/impl/CharsetDetector.java][readMimeTypeSet][1] = -> TRY { -> connection=url.openConnection()@ -> connectionIn=connection.getInputStream()@ } CATCH(Exception) { -> this.logger.warn("Unable to read inspectable mimeTypes from "+url,e,)@ }
results[https://github.com/brachior/platform_libcore/blob/0b26c7b2263a591b135e230231a331e3c0f123b8/luni/src/test/java/tests/api/java/net/JarURLConnectionTest.java][test_getInputStream_DeleteJarFileUsingURLConnection][102] = -> TRY {  -> url=new URL("jar:file:"+jarFileName+"!/"+entry,)@ -> conn=url.openConnection()@ -> conn.setUseCaches(false,)@ -> is=conn.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/liucong/jms4cxf2/blob/d56cb4fb7e9ae649d1f9b79c3d0d96a2b123f52f/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSSoapBookTest.java][getHttpInputStream][6] = -> TRY {  -> url=new URL(endpointAddress,)@ -> connect=url.openConnection()@ -> connect.addRequestProperty("Accept","application/xml,text/plain",)@ -> return connect.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/billstclair/loomclient/blob/72ac2aa32d454de56cd7751cb439bfd61a6f0a95/java/cc/loom/LoomClient.java][fetchURLString][6] = -> TRY { -> url=new URL(address,)@ -> connection=url.openConnection()@ -> in=new InputStreamReader(connection.getInputStream(),)@ } CATCH(Exception) { -> return "()"@ }
results[https://github.com/fake666/namnam/blob/8b6921757ded24929e67e3a12fee8a11c5e9e4e9/java/namnamparser/src/de/metalab/namnam/parser/util/XPathUtil.java][getHtmlUrlNode][3] = -> TRY {  -> url=new URL(sUrl,)@ -> con=url.openConnection()@ -> src=new InputSource(con.getInputStream(),)@ } CATCH(Exception) {}
results[https://github.com/mevansjr/FSO/blob/41c4e3e9c2e327987e6d4f9565024b181e70709e/JAVA 2/Week 3/ContentServiceApp/src/com/markevansjr/fragmentapp/WebStuff.java][getURLStringResponse][21] = -> TRY { -> conn=url.openConnection()@ -> bin=new BufferedInputStream(conn.getInputStream(),)@ } CATCH(Exception) { -> Log.e("URL RESPONSE ERROR","getURLStringResponse",)@ }
results[https://github.com/apache/hadoop-common/blob/93d7872cb8e73dc622c1cfd07cd08978db3940c7/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestSSLHttpServer.java][readOut][10] = -> TRY {  -> conn=(HttpsURLConnection) url.openConnection()@ -> conn.setSSLSocketFactory(clientSslFactory.createSSLSocketFactory(),)@ -> in=conn.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/taycleed/Meaning-Finder/blob/2eefe4049703d96e55fe8a34a8e103e786b0007c/Meaning Finder/src/org/bigcamp4edu/meaningfinder/XmlParser.java][getListText][33] = -> TRY { -> url=new URL(DB.listUrl+"?ic=100&userId="+Var.userId,)@ -> uc=url.openConnection()@ -> in=uc.getInputStream()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/woggle/mesos-old/blob/6168de123773c2cd97d1194603283ea168994289/frameworks/hadoop-0.20.2/src/hdfs/org/apache/hadoop/hdfs/tools/DFSck.java][run][15] = -> TRY {  -> path=new URL(url.toString(),)@ -> connection=path.openConnection()@ -> stream=connection.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/jclouds/jclouds/blob/b11148a974815aa5b4fac135fa7d7bc695e16d5d/aws/s3/core/src/test/java/org/jclouds/aws/s3/S3ConnectionIntegrationTest.java][testCopyUrl][11] = -> TRY {  -> url=new URL(httpStreamUrl,)@ -> connection=url.openConnection()@ -> length=connection.getContentLength()@ -> input=connection.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/arquillian/arquillian_deprecated/blob/54d35ff1bbb8fbf4f1131a95720567d351db746b/containers/tomcat-embedded-6/src/test/java/org/jboss/arquillian/container/tomcat/embedded_6/TomcatEmbeddedInContainerTestCase.java][shouldBeAbleToInvokeServletInDeployedWebApp][29] = -> TRY {  -> url=new URL(HELLO_WORLD_URL,)@ -> in=url.openConnection().getInputStream()@ -> len=in.read(buffer,)@ } CATCH(Exception) {}
results[https://github.com/sublima/sublima/blob/f75ba2c8ad795a18d88200fc03e806da4a2d9b3d/blocks/sublima-query/src/test/java/com/computas/sublima/query/integrationtest/SparqlResultsTest.java][testSPARQLquery][2] = -> TRY {  -> url=new URL(JOSEKI_URL+JOSEKI_ACTION+URLEncoder.encode(SPARQL_QUERY,"UTF-8",),)@ -> huc=(HttpURLConnection) url.openConnection()@ -> bodyInputStream=huc.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/mess110/detection/blob/88d230b36eb05673e531c1d3e4d7de5cba6b6f11/clients/java/detect_wrapper/src/detect/api/DetectWrapper.java][executeHttpGet][1] = -> TRY {  -> url=new URL(BASE_URL+uri,)@ -> con=(HttpURLConnection) url.openConnection()@ -> con.setRequestMethod("GET",)@ -> is=con.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/archive/src/test/java/org/apache/harmony/archive/tests/java/util/jar/JarInputStreamTest.java][test_ConstructorLjava_io_InputStream][4] = -> TRY {  -> is=new URL(jarName,).openConnection().getInputStream()@ -> jis=new JarInputStream(is,)@ } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/3e3e391a959df5a1d0406a67c6b39efd11897d97/test/sun/net/www/http/HttpClient/MultiThreadTest.java][doRequest][3] = -> TRY {  -> url=new URL(uri+"?foo="+reqnum,)@ -> http=(HttpURLConnection) url.openConnection()@ -> in=http.getInputStream()@ -> http.disconnect()@ } CATCH(Exception) {}
results[https://github.com/Chrriis/DJ-Native-Integration/blob/4943adb688a29a8c226a692f5448f0d6c6aeb89a/DJTweak/src/chrriis/dj/data/DataUtil.java][getImageData][2] = -> TRY { -> openConnection=imageURL.openConnection()@ -> openConnection.setDefaultUseCaches(false,)@ -> in=openConnection.getInputStream()@ } CATCH(Exception) { -> throw new IllegalStateException("Could not get the image data!",e,)@ }
results[https://github.com/allminewuwei/BensDeals/blob/1542ae105a8f9699c82304cda3ae1861f66d8339/src/net/bensdeals/network/core/RemoteFeedRequestTask.java][doInBackground][3] = -> TRY { -> url=new URL(path,)@ -> conn=url.openConnection()@ -> inputStream=conn.getInputStream()@ } CATCH(Exception) { -> ALog.e(e,)@ }
results[https://github.com/thomasbecker/jetty-7/blob/500f91bbce51c00a9b3db88c461b40c2e982c6ed/tests/test-integration/src/test/java/org/eclipse/jetty/test/DefaultHandlerTest.java][testGET_URL][7] = -> TRY {  -> url=new URL("http://localhost:"+serverPort+"/tests/alpha.txt",)@ -> conn=url.openConnection()@ -> conn.connect()@ -> in=conn.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/ninowalker/opentripplanner-svn/blob/ef3fb17ff41beb9969bf8c00c40f0deb713fdcc6/opentripplanner-graph-builder/src/main/java/org/opentripplanner/graph_builder/impl/ned/NEDDownloader.java][downloadFile][5] = -> TRY { -> downloadUrl=new URL("http://igskmncnwb010.cr.usgs.gov/axis2/services/DownloadService/getData?downloadID="+token,)@ -> connection=downloadUrl.openConnection()@ -> httpconnection=(HttpURLConnection) connection@ -> istream=connection.getInputStream()@ } CATCH(Exception) { -> throw new RuntimeException("Error getting data from USGS Download Server while downloading",e,)@ }
results[https://github.com/okey666/BBC-News-Reader/blob/c77c0ea6c795ec0d546e66cae6aeadb1d409dbec/src/com/digitallizard/bbcnewsreader/resource/web/HtmlParser.java][getPage][4] = -> TRY {  -> url=new URL(stringUrl,)@ -> connection=url.openConnection()@ -> connection.setRequestProperty("User-Agent",USER_AGENT,)@ -> stream=connection.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/openGDA/gda-common/blob/4793b5ab88794abab0abf6149a693916fd26ce06/uk.ac.gda.common/src/uk/ac/gda/util/schema/SchemaReader.java][<init>][1] = -> TRY {  -> builder=docBuilder.newDocumentBuilder()@ -> this.doc=builder.parse(schemaUrl.openConnection().getInputStream(),)@ } CATCH(Exception) {}
results[https://github.com/arquillian/arquillian-container-tomcat/blob/045e425da6519ead0d1238becd3ed47dfdc56e49/tomcat-remote-6/src/test/java/org/jboss/arquillian/container/tomcat/remote_6/TomcatRemoteInContainerTestCase.java][shouldBeAbleToInvokeServletInDeployedWebApp][7] = -> TRY {  -> url=new URL(contextRoot,"Test",)@ -> in=url.openConnection().getInputStream()@ -> len=in.read(buffer,)@ } CATCH(Exception) {}
results[https://github.com/medcafe/medCafe/blob/6207d6f488aee222f95a7ab61816b6a28bfcb233/src/org/mitre/medcafe/util/hDataRepository.java][main][2] = -> TRY {  -> url=new URL(args[0],)@ -> conn=url.openConnection()@ -> p=(Patient) u.unmarshal(conn.getInputStream(),)@ } CATCH(Exception) {}
results[https://github.com/srnsw/xena/blob/4572127631c99f2721415b40fb0dc974debcbb43/ext/src/javahelp/jhMaster/JavaHelp/src/new/javax/help/plaf/basic/BasicContentViewerUI.java][findTitle][2] = -> TRY { -> conn=url.openConnection()@ -> rd=new InputStreamReader(conn.getInputStream(),)@ } CATCH(Exception) { -> System.err.println(exp,)@ }
results[https://github.com/xebialabs/overthere/blob/109bb9a626ef56d901cfc1446069aaeef7ca0d03/overthere/src/main/java/com/xebialabs/overthere/winrm/connector/JdkHttpConnector.java][sendMessage][1] = -> TRY { -> urlConnection=targetURL.openConnection()@ -> con=(HttpURLConnection) urlConnection@ -> logger.debug("send message to {}:request {}",targetURL,requestDocAsString,)@ -> is=urlConnection.getInputStream()@ } CATCH(Exception) { -> throw new WinRMRuntimeIOException("send message on "+targetURL+" error ",requestDocument,responseDocument,e,)@ }
results[https://github.com/CS340Group/hit/blob/780106df5784395ff284d629c5b948f9797b8649/src/model/productidentifier/ProductIdentifierSearchUPCDotCom.java][identify][1] = -> TRY { -> url=new URL(urlCat,)@ -> urlConnection=url.openConnection()@ -> inputStream=urlConnection.getInputStream()@ } CATCH(Exception) { -> return handoff(barcode,)@ }
results[https://github.com/SINTEF-9012/ThingML/blob/46aa8896c6d7328ddbfc0e0a5a9b724e126b9900/org.thingml.coaphttp/src/main/java/org/thingml/utils/http/SecuredSensAppHelper.java][getSensorDetails][7] = -> TRY {  -> c=(HttpsURLConnection) target.openConnection()@ -> in=new BufferedReader(new InputStreamReader(c.getInputStream(),),)@ } CATCH(Exception) {}
results[https://github.com/peixere/gotom/blob/4011c772fabd4f79150f9d3fea354c3388e1bed9/commons/cn.gotom.commons/src/main/java/cn/gotom/util/StringUtils.java][getHtml][3] = -> TRY { -> conn=(HttpURLConnection) url.openConnection()@ -> isr=new InputStreamReader(conn.getInputStream(),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/flotpk/geoserver/blob/1cee34deb2670e5e76ff0bca975103c0f9e0cf4e/src/web/security/src/main/java/org/geoserver/security/web/auth/CasConnectionPanel.java][testURL][4] = -> TRY {  -> url=new URL(urlString,)@ -> con=(HttpURLConnection) url.openConnection()@ -> con.getInputStream().close()@ } CATCH(Exception) {}
results[https://github.com/IKANOW/Infinit.e/blob/0bceb797613bace34f49fc56531efde20069beda/core/infinit.e.harvest.library/src/com/ikanow/infinit/e/harvest/test/TestSecurityManager.java][testLocalJavaAfterLocalJavascriptTest][2] = -> TRY { -> myURL=new URL("http://localhost:8184/auth/login/ping/ping",)@ -> urlConnect=myURL.openConnection()@ -> is=urlConnect.getInputStream()@ } CATCH(Exception) { -> fail()@ }
results[https://github.com/jibrankhan/Domination/blob/61b5a67eeaf03e996aeb97a16f8f49307c028e9e/Domination/src_swing/net/yura/domination/tools/mapeditor/MapsTools.java][getCategories][1] = -> TRY { -> conn=new URL(MapChooser.CATEGORIES_PAGE,).openConnection()@ -> in=conn.getInputStream()@ } CATCH(Exception) { -> throw new RuntimeException(ex,)@ }
results[https://github.com/uditrugman/openjdk8-jdk/blob/ac3faf88491f55369fb6b83f77fbb75557ed3bf4/test/sun/net/www/http/ChunkedInputStream/ChunkedEncodingTest.java][client][3] = -> TRY {  -> url=new URL(u,)@ -> urlc=url.openConnection()@ -> dis=new DigestInputStream(urlc.getInputStream(),clientDigest,)@ } CATCH(Exception) {}
results[https://github.com/camsys/onebusaway-nyc/blob/e4180a8f7059bece4a7307445eb2955841e1cfe2/onebusaway-nyc-util/src/main/java/org/onebusaway/nyc/util/impl/RestApiLibrary.java][getContentsOfUrlAsString][1] = -> TRY {  -> conn=requestUrl.openConnection()@ -> conn.setConnectTimeout(connectionTimeout,)@ -> conn.setReadTimeout(readTimeout,)@ -> inStream=conn.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/fake666/namnam/blob/8377e64329bf0bf4a12b965ad88b00a151091b62/java/namnamparser/src/org/bytewerk/namnam/parser/util/XPathUtil.java][getHtmlUrlNode][3] = -> TRY {  -> url=new URL(sUrl,)@ -> con=url.openConnection()@ -> buffer=new BufferedInputStream(con.getInputStream(),)@ } CATCH(Exception) {}
results[https://github.com/concord-consortium/otrunk/blob/dba802a51fcea40b43994ede68a7b33235fdf25b/src/java/org/concord/otrunk/view/OTViewerHelper.java][loadOTDatabaseXML][1] = -> TRY {  -> urlConn=url.openConnection()@ -> urlConn.setRequestProperty("Content-Type","application/xml",)@ -> input=urlConn.getInputStream()@ -> return loadOTDatabase(input,url,)@ } CATCH(Exception) {}
results[https://github.com/dukeboard/kevoree-corelibrary/blob/8ab28a5cd8d83914fa996626afe6fe2fba0d2adf/javase/org.kevoree.library.javase.nanohttp/src/main/java/org/kevoree/library/nanohttp/NanoRestGroup.java][pullModel][1] = -> TRY {  -> url=new URL(urlPath,)@ -> conn=url.openConnection()@ -> conn.setConnectTimeout(2000,)@ -> inputStream=conn.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/ccolgrove/CS229-Project/blob/bd3860ec46fbf61ef3dd51545cd485d96888f4b7/CS229Java/src/query/QueryGetter.java][getBufferedReader][1] = -> TRY {  -> connection=u.openConnection()@ -> rd=new BufferedReader(new InputStreamReader(connection.getInputStream(),"ISO-8859-1",),)@ } CATCH(Exception) {}
results[https://github.com/medcafe/medCafe/blob/fb823d65d63d7f20ce1e1fbbbeec4610c7fa4485/src/org/mitre/medcafe/repositories/hDataRepository.java][getMedications][1] = -> TRY { -> url=new URL(hDataUrl+"/hData-REST/resources/hDataRecord/patient/medications/IBU-200-12312.xml",)@ -> conn=url.openConnection()@ -> p=(Medication) u.unmarshal(conn.getInputStream(),)@ } CATCH(Exception) { -> log.log(Level.SEVERE,"Error retrieving patient "+patientId,e,)@ }
results[https://github.com/dnt5020/IST440W-Android-App/blob/89c4d8f2ac291c2fab9a32f74c14e1e215e7ea4b/TheLuvExchange/src/com/theluvexchange/android/Weather_Main.java][setImage][1] = -> TRY { -> url=new URL(loc,)@ -> conn=url.openConnection()@ -> conn.connect()@ -> is=conn.getInputStream()@ } CATCH(Exception) { -> Log.e("TheLuvExchange","WeatherImageError",e,)@ }
results[https://github.com/greg-pe/platform_libcore/blob/09fec8d6f75c933984d31195c0efcb686eff46c6/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/CipherTest.java][test_wrap_java_security_Key][13] = -> TRY {  -> certName=Support_Resources.getURL("test.cert",)@ -> is=new URL(certName,).openConnection().getInputStream()@ -> cert=cf.generateCertificate(is,)@ } CATCH(Exception) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/com/sun/net/httpserver/Test2.java][main][2] = -> TRY {  -> url=new URL("http://localhost:"+server.getAddress().getPort()+"/test/foo.html",)@ -> urlc=(HttpURLConnection) url.openConnection()@ -> is=urlc.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/luni/src/test/impl/common/org/apache/harmony/luni/tests/internal/net/www/protocol/http/PersistenceTest.java][testIncorrectUsage][1] = -> TRY {  -> c=(HttpURLConnection) new URL("http://localhost:"+port,).openConnection()@ -> c.setDoOutput(true,)@ -> c.setRequestMethod("GET",)@ -> is=c.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/OpenIotOrg/openiot/blob/ab006c734941776297172389f1bc1d67fd7f17ea/modules/x-gsn/src/main/java/org/openiot/gsn/wrappers/HttpGetAndroidWrapper.java][parseXML][1] = -> TRY { -> url=new URL(urlPath,)@ -> conn=url.openConnection()@ -> doc=builder.parse(conn.getInputStream(),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/emolinablas/CoretelProject/blob/b81248ddd6204e55360561eb854ec7606bd69723/Coretel/src/com/researchmobile/coretel/supervision/ws/ConnectWS.java][CambiarClave][22] = -> TRY { -> urlCon=new URL("http",IP_SERVER,PUERTO,"/WS/"+url,)@ -> urlConnection=(HttpURLConnection) urlCon.openConnection()@ -> System.out.println("CambiarClave - url = "+urlCon,)@ -> inputStream=urlConnection.getInputStream()@ } CATCH(Exception) { -> System.out.println(exception,)@ }
results[https://github.com/SINTEF-9012/ThingML/blob/46aa8896c6d7328ddbfc0e0a5a9b724e126b9900/org.thingml.coaphttp/src/main/java/org/thingml/utils/http/SecuredSensAppHelper.java][getData][1] = -> TRY {  -> c=(HttpsURLConnection) target.openConnection()@ -> c.addRequestProperty("Accept",contentType,)@ -> in=new BufferedReader(new InputStreamReader(c.getInputStream(),),)@ } CATCH(Exception) {}
results[https://github.com/nkhoang/ja12sec02jav/blob/c3691f7f4d5429b7c160c49618c86414103aa89b/gea/src/main/java/com/nkhoang/gae/service/impl/VocabularyServiceImpl.java][checkWordExistence][1] = -> TRY { -> url=new URL(urlLink+word,)@ -> connection=(HttpURLConnection) url.openConnection()@ -> connection.setRequestMethod("GET",)@ -> is=connection.getInputStream()@ } CATCH(Exception) { -> LOG.error("Error fetching word using URL: "+urlLink+word,e,)@ }
results[https://github.com/pacerom/libcore/blob/b3e2cc46ae3a0bdbff39313b1d17bee1763d18c8/luni/src/test/java/libcore/java/net/URLConnectionTest.java][testUrlWithSpaceInHost][7] = -> TRY {  -> urlConnection=new URL("http://and roid.com/",).openConnection()@ -> TRY { -> urlConnection.getInputStream()@ } } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/acbdb0ade569a980d025ec2b09f528c0bc1a29cd/test/sun/net/www/protocol/http/WebGet.java][url][9] = -> TRY {  -> url=new URL(urls,)@ -> ins=url.openConnection().getInputStream()@ -> reader=new BufferedReader(new InputStreamReader(ins,),)@ } CATCH(Exception) {}
results[https://github.com/vstorm83/platform/blob/6dbb352cbf4d81cdd26fdc97f6d721a10a6d60ef/portlet/exoadmin/src/main/java/org/exoplatform/applicationregistry/util/ModelDataMapper.java][saveThumbnail][4] = -> TRY {  -> url=new URL(u,)@ -> conn=url.openConnection()@ -> is=conn.getInputStream()@ -> contentNode.setProperty("jcr:mimeType",conn.getContentType(),)@ } CATCH(Exception) {}
results[https://github.com/adtworker/iWatch/blob/482f59e6e9953e109df6bcc7ad8c77dbb8999f5f/src/com/adtworker/mail/service/data/ImgManager.java][getBitMapFromUrl][1] = -> TRY { -> u=new URL(url,)@ -> conn=(HttpURLConnection) u.openConnection()@ -> conn.setConnectTimeout(5*1000,)@ -> is=conn.getInputStream()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/wubs/485-Project/blob/8b93750e4660de3ef4d8dc7c221948473d6dd020/pa6/backend/src/hdfs/org/apache/hadoop/hdfs/tools/DFSck.java][run][2] = -> TRY {  -> path=new URL(url.toString(),)@ -> SecurityUtil.fetchServiceTicket(path,)@ -> connection=path.openConnection()@ -> stream=connection.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/markkerzner/FreeEed/blob/5dda7915d084b2ef2503d4ecb0af30b704b17015/freeeed-processing/src/main/java/org/freeeed/services/UriParser.java][readUri][2] = -> TRY { -> url=new URL(uriStr,)@ -> con=url.openConnection()@ -> in=new BufferedInputStream(con.getInputStream(),)@ } CATCH(Exception) { -> e.printStackTrace(System.out,)@ }
results[https://github.com/SpaceManiac/Glowstone/blob/b5dca8f76e595800ed1efd64f813fde5f16a897b/src/main/java/net/glowstone/net/handler/EncryptionKeyResponseHandler.java][run][1] = -> TRY { -> url=new URL(postURL,)@ -> conn=url.openConnection()@ -> is=conn.getInputStream()@ } CATCH(Exception) { -> session.disconnect("Internal error during authentication",)@ -> GlowServer.logger.log(Level.SEVERE,"Error in authentication thread",e,)@ }
results[https://github.com/powertac/server-main/blob/a0d49e0be3323f6e29df218f2d188fa30ed5eed1/src/main/java/org/powertac/server/TournamentSchedulerService.java][heartbeat][2] = -> TRY { -> url=new URL(finalUrl,)@!(tournamentSchedulerUrl.isEmpty()) -> conn=url.openConnection()@!(tournamentSchedulerUrl.isEmpty()) -> input=conn.getInputStream()@!(tournamentSchedulerUrl.isEmpty()) } CATCH(Exception) { -> e.printStackTrace()@!(tournamentSchedulerUrl.isEmpty()) -> System.out.println("heartbeat failure",)@!(tournamentSchedulerUrl.isEmpty()) }
results[https://github.com/chalstrick/chrisFiles/blob/2f835fb63539157462d5082971715fce8ea4c061/java/src/DebugHttpsClient.java][main][1] = -> TRY {  -> myurl=new URL((args.length>0)?args[0]:"https://raw.github.com/chalstrick/chrisFiles/master/README",)@ -> System.out.println("opening connection to: <"+myurl.toString()+">",)@ -> con=(HttpsURLConnection) myurl.openConnection()@ -> ins=con.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/imr/Electric-VLSI/blob/4187fb89ee1ea4a4624463640ee75784913ec40e/electric/electric-core/src/main/java/com/sun/electric/tool/user/ErrorLogger.java][process][1] = -> TRY {  -> urlCon=fileURL.openConnection()@ -> inputStream=urlCon.getInputStream()@ -> IF { -> System.out.println("Parsing XML file \""+fileURL+"\"",)@ } } CATCH(Exception) {}
results[https://github.com/bruceMacLeod/motech-server-pillreminder-0.18/blob/850c808c0bb030d466237748a2891cde2eacf0bc/platform/platform-server-api/src/main/java/org/motechproject/server/osgi/Log4JBundleLoader.java][loadBundle][3] = -> TRY {  -> log4jUrl=bundle.getResource(log4jConf,)@ -> IF { -> conn=log4jUrl.openConnection()@log4jUrl!=null -> log4jStream=conn.getInputStream()@ } } CATCH(Exception) {}
results[https://github.com/Quinix/Condroid/blob/abefbed0eb2e5cde7a14bd6643564e724a051919/src/cz/quinix/condroid/annotations/AnnotationXMLLoader.java][doInBackground][1] = -> TRY { -> url=new URL(source[0],)@ -> conn=url.openConnection()@ -> pull.setInput(conn.getInputStream(),null,)@ } CATCH(Exception) { -> throw new RuntimeException(ex,)@ }
results[https://github.com/DaivdTurnbull/Kwik-Browsa-Conversion/blob/42bce2a2a2cb40836d7f670fe9499771f0e66a61/Deliverable C/Final Code/src/org/groupf/kwikbrowsa/KwikBrowsaGUI.java][createContents][2] = -> TRY { -> url=new URL("http://web.me.com/geraldveurink/SoftwareSimply/advertising.txt",)@ -> urlConn=url.openConnection()@ -> inStreamRead=new InputStreamReader(urlConn.getInputStream(),)@ } CATCH(Exception) { -> advertising.setVisible(false,)@ }
results[https://github.com/darkip/SocialLocate/blob/cb37d8f4835c9402c0ed303d9dedcfd88e675e08/src/com/inflatablegoldfish/sociallocate/Util.java][getBitmap][1] = -> TRY { -> aURL=new URL(url,)@ -> conn=aURL.openConnection()@ -> conn.connect()@ -> is=conn.getInputStream()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/lyhcode/codecanaan/blob/505f18d10ea980953e65a70eacaa60af2ce11ce9/client/webstart/src/main/java/com/codecanaan/ScriptLoader.java][loadGroovy][3] = -> TRY {  -> url=new URL(scriptURL,)@ -> conn=url.openConnection()@ -> reader=new BufferedReader(new InputStreamReader(conn.getInputStream(),"UTF-8",),)@ } CATCH(Exception) {}
results[https://github.com/bbossgroups/bboss-cms/blob/180d8ee7fd65a32109f817ee22525cec0bd1f43b/src-cms/com/frameworkset/platform/cms/searchmanager/handler/HTMLHandler.java][main][1] = -> TRY { -> url=new java.net.URL("http://localhost:8090/creatorcms/sitepublish/site200/top.htm",)@ -> con=(HttpURLConnection) url.openConnection()@ -> rcode=con.getResponseCode()@ -> in=con.getInputStream()@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/monish001/CPP-Programs/blob/04d4f4489f64926775eebf0cd3ae1ce37ba91e99/General/pdfDownloader/HTMLCodeDownloader.java][main][1] = -> TRY { -> url=new URL("http://cl.thapar.edu/library_qp05.html",)@ -> conn=url.openConnection()@ -> in=new DataInputStream(conn.getInputStream(),)@ } CATCH(Exception) { -> System.out.println(e,)@ }
results[https://github.com/evilsocket/dsploit/blob/a7dbfa3eab1111e7ee31f26bc79afce460e67d8c/dSploit/src/it/evilsocket/dsploit/plugins/mitm/Hijacker.java][getUserName][2] = -> TRY { -> url=new URL(uri,)@ -> conn=url.openConnection()@ -> conn.connect()@ -> input=conn.getInputStream()@ } CATCH(Exception) { -> System.errorLogging(e,)@ }
results[https://github.com/PLOS/ambra-sandbox/blob/cd8478487ae340bdefa69bedf3f8cf8a37455a29/base/src/main/java/org/ambraproject/service/article/AIArticleClassifier.java][fetchXml][1] = -> TRY {  -> url=new URL(String.format(XML_URL,doi,),)@ -> conn=(HttpURLConnection) url.openConnection()@ -> conn.connect()@ -> is=conn.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/trifork/bemyndigelsesregister/blob/e53774977eb0a3603b1add650aaea71d4f319149/integration-test/src/test/java/penetration/PenetrationITCase.java][canAccessStamdataserviceHealth][1] = -> TRY {  -> urlConnection=new URL("http://localhost:8080/stamdataservice/health",).openConnection()@ -> assertEquals("OK",IOUtils.toString(urlConnection.getInputStream(),),)@ } CATCH(Exception) {}
results[https://github.com/DSpace/DSpace/blob/95ff5c780a899c802df881655173aaa50ea8a590/dspace-api/src/main/java/org/dspace/license/CreativeCommons.java][fetchURL][1] = -> TRY { -> url=new URL(url_string,)@ -> connection=url.openConnection()@ -> inputStream=connection.getInputStream()@ } CATCH(Exception) { -> log.error(exc.getMessage(),)@ }
results[https://github.com/jsjones27/kiss/blob/b255eaddf6529dff29f25a24090b6d96455a9a94/android/src/com/aj3/kiss/activities/AddItemActivity.java][doInBackground][2] = -> TRY { -> url=new URL("http://www.searchupc.com/handlers/upcsearch.ashx?request_type=1&access_token=E3EEF9D9-77FA-4362-BA41-12723A8048B0&upc="+upc[0],)@!(item!=null) -> conn=url.openConnection()@!(item!=null) -> isr=new InputStreamReader(conn.getInputStream(),)@!(item!=null) } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/saaperezru/Zentity/blob/0f578056c00c790bf0893e8fd5dd424f7f769600/java/Flickr2/src/flickrapp/FlickrCrawlerThread.java][getTags][1] = -> TRY { -> uc=new URL(tagsURL,).openConnection()@ -> dis=new DataInputStream(uc.getInputStream(),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/researchstudio-sat/ldspider4won/blob/3a98eeaf4df641ce23205e4142b10dc4141950f3/test/net/sourceforge/sitemaps/SitemapTest.java][testSitemap][1] = -> TRY {  -> u=new URL("http://www.bbc.co.uk/sitemap.xml",)@ -> s=new Sitemap(u,)@ -> con=u.openConnection()@ -> st=sp.processSitemap(s,"text/xml",con.getInputStream(),)@ } CATCH(Exception) {}
results[https://github.com/liuyijiang/web-core/blob/d839985eac7fe53e3f7f73c51646602f253bc758/src/com/mxk/org/common/util/ImageUtil.java][getImageWidthAndHeightFromUrl][1] = -> TRY { -> url=new URL(imageUrl,)@ -> is=url.openConnection().getInputStream()@ -> buff=ImageIO.read(is,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/axDev-JDK/jdk/blob/acbdb0ade569a980d025ec2b09f528c0bc1a29cd/test/sun/net/www/protocol/http/HttpInputStream.java][<init>][2] = -> TRY {  -> url=new URL("http://localhost:"+String.valueOf(port,)+"/anything",)@ -> con=(HttpURLConnection) url.openConnection()@ -> ret=con.getResponseCode()@ -> is=con.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/mit-cml/appinventor-sources/blob/6fa4c0629891a786b3b9a1a8acca084ba668f8fb/appinventor/components/src/com/google/appinventor/components/runtime/util/PackageInstaller.java][run][1] = -> TRY { -> url=new URL(inurl,)@ -> conn=url.openConnection()@ -> instream=new BufferedInputStream(conn.getInputStream(),)@ } CATCH(Exception) { -> form.dispatchErrorOccurredEvent(form,"PackageInstaller",ErrorMessages.ERROR_WEB_UNABLE_TO_GET,inurl,)@ }
results[https://github.com/emolinablas/CoretelProject/blob/b81248ddd6204e55360561eb854ec7606bd69723/Coretel/src/com/researchmobile/coretel/supervision/ws/ConnectWS.java][Login][1] = -> TRY { -> urlCon=new URL("http",IP_SERVER,PUERTO,"/WS/"+url,)@ -> urlConnection=(HttpURLConnection) urlCon.openConnection()@ -> Log.v("pio","login = "+urlConnection,)@ -> inputStream=urlConnection.getInputStream()@ } CATCH(Exception) { -> System.out.println(exception,)@ }
results[https://github.com/s4/s4/blob/5dbbaec7069cf68e51109e98c4df400e840cc825/s4-examples/twittertopiccount-ft/src/main/java/io/s4/example/twittertopiccount/TwitterFeedListener.java][connectAndRead][1] = -> TRY {  -> url=new URL(urlString,)@ -> connection=url.openConnection()@ -> connection.setRequestProperty("Authorization","Basic "+encoded,)@ -> connection.connect()@ -> is=connection.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/uDig/udig-platform/blob/34a354b156e9afa4edbadb35216b7df0b34442c0/plugins/org.locationtech.udig.catalog.wmt/src/net/refractions/udig/catalog/internal/wmt/wmtsource/NASASourceManager.java][<init>][1] = -> TRY { -> url=NASASource.class.getResource(TILESERVICE_FILE,)@ -> connection=url.openConnection()@ -> dom=builder.build(connection.getInputStream(),)@ } CATCH(Exception) { -> WMTPlugin.log("[NASASourceManager] Loading tileservice-file failed: "+TILESERVICE_FILE,exc,)@ }
results[https://github.com/niklasb/pse-broadcast-encryption/blob/a34ba009faf7d9b3558ffb334ec87bd58e6d0736/tests/junit4/cryptocast/client/TestSimpleHttpStreamServer.java][streamsCorrectly][1] = -> TRY {  -> raw=new URL("http://localhost:21312/",).openConnection().getInputStream()@ -> assertEquals(payload.length,StreamUtils.readall(raw,actual,0,actual.length,),)@ } CATCH(Exception) {}
results[https://github.com/bogeblad/infoglue/blob/31034da7bb64ca280be121fdbf61c83c7380fb1a/src/java/org/infoglue/deliver/util/HttpHelper.java][downloadFile][1] = -> TRY {  -> url=new URL(urlAddress,)@ -> conn=url.openConnection()@ -> conn.setConnectTimeout(2000,)@ -> conn.setReadTimeout(10000,)@ -> in=conn.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/androidpttadvisor/androidpttadvisor/blob/7e225e25c38017e5fd603a06d64679fc51a228d5/AndroidPTTAdvisor/src/gov/cdc/JsonUpdaterTask.java][doInBackground][1] = -> TRY { -> url=new URL(UPDATEURL,)@ -> urlConn=url.openConnection()@ -> inStream=new BufferedInputStream(urlConn.getInputStream(),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/madiator/HadoopUSC/blob/a02dd094e1b13bf15a6409f0cd287febe1ba0212/src/hdfs/org/apache/hadoop/hdfs/tools/DFSck.java][run][1] = -> TRY {  -> path=new URL(url.toString(),)@ -> System.err.println("Connecting to : "+path,)@ -> connection=path.openConnection()@ -> stream=connection.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/nterry/jclouds/blob/9e94fc6fc99bf90b4ebce071e5f0c06bafec4702/core/src/test/java/org/jclouds/http/internal/WireLiveTest.java][testCopyRemoteInputStream][2] = -> TRY {  -> url=new URL(checkNotNull(sysHttpStreamUrl,"sysHttpStreamUrl",),)@ -> connection=url.openConnection()@ -> callable=new ConnectionTester(connection.getInputStream(),)@ } CATCH(Exception) {}
results[https://github.com/nbostech/phonebook-android/blob/f7ef3f45d9cc940449eb83c606da4cba7f4716e3/src/com/nbos/phonebook/sync/platform/SyncPics.java][downloadPic][1] = -> TRY { -> url=new URL(Cloud.DOWNLOAD_CONTACT_PIC_URI+c.picId,)@ -> ucon=url.openConnection()@ -> is=ucon.getInputStream()@ } CATCH(Exception) { -> Log.e(tag,"Exception downloading pic: "+e,)@ -> e.printStackTrace()@ }
results[https://github.com/LSTS/neptus/blob/cab1acb6477edbb13fa6480856be4cacd72b3027/plugins-dev/ipcam/pt/lsts/neptus/plugins/ipcam/LumeneraPanel.java][fetchNewImage][1] = -> TRY { -> url=new URL(urltext,)@ -> con=(HttpURLConnection) url.openConnection()@ -> image=ImageIO.read(con.getInputStream(),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/hackfanatic/webspider/blob/f10f81ba26724571ee735c97b56439f86f20f1fa/src/webspider/core/Spider.java][initDisallowedURLs][1] = -> TRY { -> robotURL=new URL(ROBOTS_TXT_URL,)@ -> robotConn=robotURL.openConnection()@ -> reader=new Scanner(robotConn.getInputStream(),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/marcel-dancak/android-map/blob/74d2db4d52f154372c86d3194f7130a2e9b6ef2a/src/sk/maps/TmsLayer.java][process][1] = -> TRY { -> url=new URL(serverUrl+"/"+query,)@ -> httpCon=(HttpURLConnection) url.openConnection()@ -> is=httpCon.getInputStream()@ } CATCH(Exception) { -> Log.e(TAG,"what!",e,)@ -> e.printStackTrace()@ }
results[https://github.com/zhoulzhou/IPCPlayer/blob/c7963db8a56b7d4fa82bc3e0301a073ed94d5001/src/com/example/ipcplayer/xml/XmlActivity.java][run][1] = -> TRY { -> url=new URL("http://tingapi.ting.baidu.com/v1/restserver/ting?from=android&version=2.4.0&method=baidu.ting.billboard.billList&format=xml&type=1",)@ -> System.out.println("url: "+url,)@ -> urlconn=(HttpURLConnection) url.openConnection()@ -> in=urlconn.getInputStream()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/exoplatform/aio-portal/blob/5a03573f17819f42650cf893a8cdbb9da74d4a7f/portlet/exoadmin/src/main/java/org/exoplatform/applicationregistry/webui/component/UIGadgetInfo.java][execute][1] = -> TRY {  -> IF { -> return @service.getGadget(name,)==null } -> urlObj=new URL(url,)@!(service.getGadget(name,)==null) -> conn=urlObj.openConnection()@!(service.getGadget(name,)==null) -> is=conn.getInputStream()@!(service.getGadget(name,)==null) } CATCH(Exception) {}
results[https://github.com/levants/lightmare/blob/5c3a4a5245dc5d4c54b4e456fade784ec0f41dcf/src/test/java/ge/gov/mia/lightmare/EarFileReaderTest.java][urlTests][1] = -> TRY { -> url=new URL(manifestPath,)@ -> System.out.println(url,)@ -> connection=url.openConnection()@ -> stream=connection.getInputStream()@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/hhua/WebService/blob/362ddc78f9c42091b9d08f293093539e900bef25/WebService/src/edu/cmu/ebiz/task8/test/URLtest.java][main][1] = -> TRY {  -> url=new URL("http://api.sba.gov/geodata/all_links_for_county_of/allegheny/pa.xml",)@ -> connection=(HttpURLConnection) url.openConnection()@ -> connection.setDoInput(true,)@ -> connection.setRequestMethod("GET",)@ -> in=connection.getInputStream()@ } CATCH(Exception) {}
results[https://github.com/ochafik/nativelibs4java/blob/1fc78e3ef45c58cb489da7f6b8993bcb11f78791/jnaerator/jnaerator/src/main/java/com/ochafik/lang/compiler/URLFileObject.java][getLastModified][1] = -> TRY { -> con=url.openConnection()@ -> lastModified=con.getLastModified()@ -> con.getInputStream().close()@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/RamesesDev/osiris2/blob/c5eb07839470f6fabbc8634c17f34fea9e57b273/web/anubis-cms/test/anubis/test/FileDirTest.java][testPath][1] = -> TRY {  -> url=new URL(path,)@ -> conn=url.openConnection()@ -> System.out.println(conn,)@ -> s=StreamUtil.toString(conn.getInputStream(),)@ } CATCH(Exception) {}
results[https://github.com/remove/Tetrist/blob/a74da86ad9baf28c9f393880f2bc6b40459bf25b/Tetrist/Graphic/Nice/DrawInfosNice.java][init_font][1] = -> TRY {  -> font_url=getClass().getResource(font_path,)@ -> font_connection=font_url.openConnection()@ -> f=Font.createFont(Font.TRUETYPE_FONT,font_connection.getInputStream(),)@ } CATCH(Exception) {}
