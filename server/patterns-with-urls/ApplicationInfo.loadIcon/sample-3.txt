results[https://github.com/unidevel/android/blob/fc58eb7f8d7a4a1207f0ee34c458c0aafe6d2505/ALocker/src/com/unidevel/tools/locker/AppListActivity.java][doInBackground] = -> pm=me.getPackageManager()@ -> this.apps=new ArrayList<AppItem>()@ -> apps.add(item,)@ -> appinfos=pm.getInstalledApplications(0,)@ -> LOOP { -> appInfo=appinfos.get(x,)@x<appinfos.size() -> item.icon=appInfo.loadIcon(pm,)@x<appinfos.size() -> IF { -> item.icon=me.getResources().getDrawable(R.drawable.app,)@item.icon==null && x<appinfos.size() } -> item.name=appInfo.loadLabel(pm,).toString()@x<appinfos.size() -> apps.add(item,)@x<appinfos.size() } -> Collections.sort(this.apps,)@
results[https://github.com/unidevel/android/blob/693e9489b21f5ffb21bb9a80f02eb8937b88ebfd/alib/src/com/unidevel/AppListActivity.java][doInBackground] = -> pm=me.getPackageManager()@ -> this.apps=new ArrayList<AppItem>()@ -> appinfos=pm.getInstalledApplications(0,)@ -> LOOP { -> appInfo=appinfos.get(x,)@x<appinfos.size() -> intent=pm.getLaunchIntentForPackage(appInfo.packageName,)@x<appinfos.size() -> item.icon=appInfo.loadIcon(pm,)@x<appinfos.size() -> IF { -> item.icon=me.getResources().getDrawable(R.drawable.empty_app,)@item.icon==null && x<appinfos.size() } -> item.name=appInfo.loadLabel(pm,).toString()@x<appinfos.size() -> apps.add(item,)@x<appinfos.size() } -> Collections.sort(this.apps,)@ -> item.name=me.getString(R.string.empty_app,)@ -> item.icon=me.getResources().getDrawable(R.drawable.empty_app,)@ -> apps.add(0,item,)@
results[https://github.com/guess/pictureframe/blob/0c07cdaf65b77f87ecfb80f0344111e39d6ee849/Launcher/src/ca/taglab/Launcher/apps/AppModel.java][getIcon] = -> IF { -> IF { -> mIcon=mInfo.loadIcon(mContext.getPackageManager(),)@mIcon==null } } ELSE { -> IF { -> IF { -> mIcon=mInfo.loadIcon(mContext.getPackageManager(),)@!(mIcon==null) } } } -> return mContext.getResources().getDrawable(android.R.drawable.sym_def_app_icon,)@mIcon==null
results[https://github.com/boombuler/ADWLauncher2/blob/c4faadad6b54ed3bd24208b254771f7fdee17267/src/org/adw/launcher2/ItemInfo.java][addMarketActions] = -> IF { -> TRY { -> packageManager=view.getContext().getPackageManager()@mMarketIcon==null&&mMarketLabel==null -> applicationInfo=packageManager.getApplicationInfo(ANDROID_MARKET_PACKAGE,0,)@mMarketIcon==null&&mMarketLabel==null -> mMarketIcon=applicationInfo.loadIcon(packageManager,)@mMarketIcon==null&&mMarketLabel==null -> mMarketLabel=applicationInfo.loadLabel(packageManager,)@mMarketIcon==null&&mMarketLabel==null -> IF { -> mMarketLabel=applicationInfo.name@mMarketLabel==null && mMarketIcon==null&&mMarketLabel==null } } CATCH { -> mMarketIcon=null@mMarketIcon==null&&mMarketLabel==null -> mMarketLabel="no-market"@mMarketIcon==null&&mMarketLabel==null } } -> IF { -> IF { -> result.add(new EditAction(ACTION_MARKET,mMarketIcon,mMarketLabel,),)@mMarketIcon!=null&&mMarketLabel!=null&&this instanceof ItemPackage -> result.add(new EditAction(ACTION_SHARE_APP,android.R.drawable.ic_menu_share,R.string.menu_share,),)@ } }
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java][onCreate] = -> intent=getIntent()@ -> mDevice=(UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE,)@ -> mAccessory=(UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY,)@ -> mPendingIntent=(PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT,)@ -> mUid=intent.getIntExtra(Intent.EXTRA_UID,-1,)@ -> mPackageName=intent.getStringExtra("package",)@ -> packageManager=getPackageManager()@ -> TRY { -> aInfo=packageManager.getApplicationInfo(mPackageName,0,)@ } CATCH { } -> appName=aInfo.loadLabel(packageManager,).toString()@ -> ap.mIcon=aInfo.loadIcon(packageManager,)@ -> IF { -> ap.mMessage=getString(R.string.usb_accessory_permission_prompt,appName,)@mDevice==null -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mAccessory,)@mDevice==null } ELSE { -> ap.mMessage=getString(R.string.usb_device_permission_prompt,appName,)@!(mDevice==null) -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mDevice,)@!(mDevice==null) }
results[https://github.com/kitkatandroid/JLS36G_base/blob/d9793ebbef58d0e842c8222c1067928d778f22f1/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java][onCreate] = -> intent=getIntent()@ -> mDevice=(UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE,)@ -> mAccessory=(UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY,)@ -> mPendingIntent=(PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT,)@ -> mUid=intent.getIntExtra(Intent.EXTRA_UID,-1,)@ -> mPackageName=intent.getStringExtra("package",)@ -> packageManager=getPackageManager()@ -> TRY { -> aInfo=packageManager.getApplicationInfo(mPackageName,0,)@ } CATCH { } -> appName=aInfo.loadLabel(packageManager,).toString()@ -> ap.mIcon=aInfo.loadIcon(packageManager,)@ -> IF { -> ap.mMessage=getString(R.string.usb_accessory_permission_prompt,appName,)@mDevice==null -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mAccessory,)@mDevice==null } ELSE { -> ap.mMessage=getString(R.string.usb_device_permission_prompt,appName,)@!(mDevice==null) -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mDevice,)@!(mDevice==null) }
results[https://github.com/iGio90/android_frameworks_base/blob/c2c778533288efb45107521eee9fcab82892fc9e/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java][onCreate] = -> intent=getIntent()@ -> mDevice=(UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE,)@ -> mAccessory=(UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY,)@ -> mPendingIntent=(PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT,)@ -> mUid=intent.getIntExtra(Intent.EXTRA_UID,-1,)@ -> mPackageName=intent.getStringExtra("package",)@ -> packageManager=getPackageManager()@ -> TRY { -> aInfo=packageManager.getApplicationInfo(mPackageName,0,)@ } CATCH { } -> appName=aInfo.loadLabel(packageManager,).toString()@ -> ap.mIcon=aInfo.loadIcon(packageManager,)@ -> IF { -> ap.mMessage=getString(R.string.usb_accessory_permission_prompt,appName,)@mDevice==null -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mAccessory,)@mDevice==null } ELSE { -> ap.mMessage=getString(R.string.usb_device_permission_prompt,appName,)@!(mDevice==null) -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mDevice,)@!(mDevice==null) }
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java][onCreate] = -> intent=getIntent()@ -> mDevice=(UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE,)@ -> mAccessory=(UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY,)@ -> mPendingIntent=(PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT,)@ -> mUid=intent.getIntExtra(Intent.EXTRA_UID,-1,)@ -> mPackageName=intent.getStringExtra("package",)@ -> packageManager=getPackageManager()@ -> TRY { -> aInfo=packageManager.getApplicationInfo(mPackageName,0,)@ } CATCH { } -> appName=aInfo.loadLabel(packageManager,).toString()@ -> ap.mIcon=aInfo.loadIcon(packageManager,)@ -> IF { -> ap.mMessage=getString(R.string.usb_accessory_permission_prompt,appName,)@mDevice==null -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mAccessory,)@mDevice==null } ELSE { -> ap.mMessage=getString(R.string.usb_device_permission_prompt,appName,)@!(mDevice==null) -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mDevice,)@!(mDevice==null) }
results[https://github.com/Blakez/android_frameworks_base/blob/11714fcbb86c041579b3f2c64bc7e27ed7fc2705/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java][onCreate] = -> intent=getIntent()@ -> mDevice=(UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE,)@ -> mAccessory=(UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY,)@ -> mPendingIntent=(PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT,)@ -> mUid=intent.getIntExtra(Intent.EXTRA_UID,-1,)@ -> mPackageName=intent.getStringExtra("package",)@ -> packageManager=getPackageManager()@ -> TRY { -> aInfo=packageManager.getApplicationInfo(mPackageName,0,)@ } CATCH { } -> appName=aInfo.loadLabel(packageManager,).toString()@ -> ap.mIcon=aInfo.loadIcon(packageManager,)@ -> IF { -> ap.mMessage=getString(R.string.usb_accessory_permission_prompt,appName,)@mDevice==null -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mAccessory,)@mDevice==null } ELSE { -> ap.mMessage=getString(R.string.usb_device_permission_prompt,appName,)@!(mDevice==null) -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mDevice,)@!(mDevice==null) }
results[https://github.com/NEXUS-EVO/frameworks_base/blob/6849ad8fbb03c21d6aa61e1bd53fe7b449cd6adb/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java][onCreate] = -> intent=getIntent()@ -> mDevice=(UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE,)@ -> mAccessory=(UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY,)@ -> mPendingIntent=(PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT,)@ -> mUid=intent.getIntExtra(Intent.EXTRA_UID,-1,)@ -> mPackageName=intent.getStringExtra("package",)@ -> packageManager=getPackageManager()@ -> TRY { -> aInfo=packageManager.getApplicationInfo(mPackageName,0,)@ } CATCH { } -> appName=aInfo.loadLabel(packageManager,).toString()@ -> ap.mIcon=aInfo.loadIcon(packageManager,)@ -> IF { -> ap.mMessage=getString(R.string.usb_accessory_permission_prompt,appName,)@mDevice==null -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mAccessory,)@mDevice==null } ELSE { -> ap.mMessage=getString(R.string.usb_device_permission_prompt,appName,)@!(mDevice==null) -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mDevice,)@!(mDevice==null) }
