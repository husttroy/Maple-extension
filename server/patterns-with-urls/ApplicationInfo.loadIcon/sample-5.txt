results[https://github.com/victoryckl/android-demos/blob/eac8ef5d2b7220b201f7e016153b2d6138dee58c/MIUI-FileExplorer/FileExplorer/src/net/micode/fileexplorer/Util.java][getApkIcon] = -> pm=context.getPackageManager()@ -> info=pm.getPackageArchiveInfo(apkPath,PackageManager.GET_ACTIVITIES,)@ -> IF { -> TRY { -> return appInfo.loadIcon(pm,)@info!=null } CATCH { } }
results[https://github.com/xunroudabing/DaBing/blob/086a703cc1432f9f5ce95d881ae9017f9bdcaab2/WeiXinEmoj/src/com/dabing/emoj/utils/Util.java][getApkIcon] = -> pm=context.getPackageManager()@ -> info=pm.getPackageArchiveInfo(apkPath,PackageManager.GET_ACTIVITIES,)@ -> IF { -> TRY { -> return appInfo.loadIcon(pm,)@info!=null } CATCH { } }
results[https://github.com/sandrocheng/sandro/blob/2d1449979aa8596736148fa127c474b56b072331/project/AppLockDemo/src/com/guangli/applock/PasswordInutActivity.java][initAppInfo] = -> pManager=getPackageManager()@ -> TRY { -> info=pManager.getApplicationInfo(packename,PackageManager.GET_META_DATA,)@ -> appIcon.setImageDrawable(info.loadIcon(pManager,),)@ -> appLable.setText(info.loadLabel(pManager,),)@ } CATCH { }
results[https://github.com/rowboat/cts/blob/57a493737513a1084b2606aba9c29d31f1d6a346/tests/tests/content/src/android/content/pm/cts/ComponentInfoTest.java][testLoadIcon] = -> mComponentInfo=new ComponentInfo()@ -> mComponentInfo.applicationInfo=new ApplicationInfo()@ -> pm=mContext.getPackageManager()@ -> assertNotNull(pm,)@ -> defaultIcon=pm.getDefaultActivityIcon()@ -> d=mComponentInfo.loadIcon(pm,)@ -> assertNotNull(d,)@ -> assertNotSame(d,defaultIcon,)@ -> WidgetTestUtils.assertEquals((BitmapDrawable) d.getBitmap(),(BitmapDrawable) defaultIcon.getBitmap(),)@ -> d2=mComponentInfo.loadIcon(pm,)@ -> assertNotNull(d2,)@ -> assertNotSame(d,d2,)@ -> WidgetTestUtils.assertEquals((BitmapDrawable) d.getBitmap(),(BitmapDrawable) d2.getBitmap(),)@ -> TRY { -> mComponentInfo.loadIcon(null,)@ } CATCH { }
results[https://github.com/mkedwards/android_cts/blob/6a2dedee137f39f732898de28e1e0ef20550dcca/tests/tests/content/src/android/content/pm/cts/ComponentInfoTest.java][testLoadIcon] = -> mComponentInfo=new ComponentInfo()@ -> mComponentInfo.applicationInfo=new ApplicationInfo()@ -> pm=mContext.getPackageManager()@ -> assertNotNull(pm,)@ -> defaultIcon=pm.getDefaultActivityIcon()@ -> d=mComponentInfo.loadIcon(pm,)@ -> assertNotNull(d,)@ -> assertNotSame(d,defaultIcon,)@ -> WidgetTestUtils.assertEquals((BitmapDrawable) d.getBitmap(),(BitmapDrawable) defaultIcon.getBitmap(),)@ -> d2=mComponentInfo.loadIcon(pm,)@ -> assertNotNull(d2,)@ -> assertNotSame(d,d2,)@ -> WidgetTestUtils.assertEquals((BitmapDrawable) d.getBitmap(),(BitmapDrawable) d2.getBitmap(),)@ -> TRY { -> mComponentInfo.loadIcon(null,)@ } CATCH { }
results[https://github.com/teamgummy/frameworks_base/blob/3e7a90f576deeccc9718b9d15889ecd60ce56772/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java][onCreate] = -> intent=getIntent()@ -> mDevice=(UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE,)@ -> mAccessory=(UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY,)@ -> mPendingIntent=(PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT,)@ -> mUid=intent.getIntExtra("uid",0,)@ -> mPackageName=intent.getStringExtra("package",)@ -> packageManager=getPackageManager()@ -> TRY { -> aInfo=packageManager.getApplicationInfo(mPackageName,0,)@ } CATCH { } -> appName=aInfo.loadLabel(packageManager,).toString()@ -> ap.mIcon=aInfo.loadIcon(packageManager,)@ -> IF { -> ap.mMessage=getString(R.string.usb_accessory_permission_prompt,appName,)@mDevice==null -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mAccessory,)@mDevice==null } ELSE { -> ap.mMessage=getString(R.string.usb_device_permission_prompt,appName,)@!(mDevice==null) -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mDevice,)@!(mDevice==null) }
results[https://github.com/MIPS/cts/blob/57a493737513a1084b2606aba9c29d31f1d6a346/tests/tests/content/src/android/content/pm/cts/ComponentInfoTest.java][testLoadIcon] = -> mComponentInfo=new ComponentInfo()@ -> mComponentInfo.applicationInfo=new ApplicationInfo()@ -> pm=mContext.getPackageManager()@ -> assertNotNull(pm,)@ -> defaultIcon=pm.getDefaultActivityIcon()@ -> d=mComponentInfo.loadIcon(pm,)@ -> assertNotNull(d,)@ -> assertNotSame(d,defaultIcon,)@ -> WidgetTestUtils.assertEquals((BitmapDrawable) d.getBitmap(),(BitmapDrawable) defaultIcon.getBitmap(),)@ -> d2=mComponentInfo.loadIcon(pm,)@ -> assertNotNull(d2,)@ -> assertNotSame(d,d2,)@ -> WidgetTestUtils.assertEquals((BitmapDrawable) d.getBitmap(),(BitmapDrawable) d2.getBitmap(),)@ -> TRY { -> mComponentInfo.loadIcon(null,)@ } CATCH { }
results[https://github.com/NEXUS-EVO/frameworks_base/blob/6849ad8fbb03c21d6aa61e1bd53fe7b449cd6adb/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java][onCreate] = -> intent=getIntent()@ -> mDevice=(UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE,)@ -> mAccessory=(UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY,)@ -> mPendingIntent=(PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT,)@ -> mUid=intent.getIntExtra(Intent.EXTRA_UID,-1,)@ -> mPackageName=intent.getStringExtra("package",)@ -> packageManager=getPackageManager()@ -> TRY { -> aInfo=packageManager.getApplicationInfo(mPackageName,0,)@ } CATCH { } -> appName=aInfo.loadLabel(packageManager,).toString()@ -> ap.mIcon=aInfo.loadIcon(packageManager,)@ -> IF { -> ap.mMessage=getString(R.string.usb_accessory_permission_prompt,appName,)@mDevice==null -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mAccessory,)@mDevice==null } ELSE { -> ap.mMessage=getString(R.string.usb_device_permission_prompt,appName,)@!(mDevice==null) -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mDevice,)@!(mDevice==null) }
results[https://github.com/davros-/platform_frameworks_base/blob/4b50cc39b0518a04b16eb0f0b6286859b32373a3/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java][onCreate] = -> intent=getIntent()@ -> mDevice=(UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE,)@ -> mAccessory=(UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY,)@ -> mPendingIntent=(PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT,)@ -> mUid=intent.getIntExtra("uid",0,)@ -> mPackageName=intent.getStringExtra("package",)@ -> packageManager=getPackageManager()@ -> TRY { -> aInfo=packageManager.getApplicationInfo(mPackageName,0,)@ } CATCH { } -> appName=aInfo.loadLabel(packageManager,).toString()@ -> ap.mIcon=aInfo.loadIcon(packageManager,)@ -> IF { -> ap.mMessage=getString(R.string.usb_accessory_permission_prompt,appName,)@mDevice==null -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mAccessory,)@mDevice==null } ELSE { -> ap.mMessage=getString(R.string.usb_device_permission_prompt,appName,)@!(mDevice==null) -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mDevice,)@!(mDevice==null) }
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java][onCreate] = -> intent=getIntent()@ -> mDevice=(UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE,)@ -> mAccessory=(UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY,)@ -> mPendingIntent=(PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT,)@ -> mUid=intent.getIntExtra(Intent.EXTRA_UID,-1,)@ -> mPackageName=intent.getStringExtra("package",)@ -> packageManager=getPackageManager()@ -> TRY { -> aInfo=packageManager.getApplicationInfo(mPackageName,0,)@ } CATCH { } -> appName=aInfo.loadLabel(packageManager,).toString()@ -> ap.mIcon=aInfo.loadIcon(packageManager,)@ -> IF { -> ap.mMessage=getString(R.string.usb_accessory_permission_prompt,appName,)@mDevice==null -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mAccessory,)@mDevice==null } ELSE { -> ap.mMessage=getString(R.string.usb_device_permission_prompt,appName,)@!(mDevice==null) -> mDisconnectedReceiver=new UsbDisconnectedReceiver(this,mDevice,)@!(mDevice==null) }
