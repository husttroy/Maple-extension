results[https://github.com/dwinslow23/dixon/blob/bd782a3e0df4059268b1da08e3f8bd592ce10146/src/main/java/com/dixon/security/SimpleCipher.java][encrypt] = -> TRY { -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> cipherText=cipher.doFinal(plainText.getBytes(),)@ -> enc=new String(coder.encode(cipherText,),)@ } CATCH { }
results[https://github.com/dwinslow23/dixon/blob/bd782a3e0df4059268b1da08e3f8bd592ce10146/src/main/java/com/dixon/security/SimpleCipher.java][decrypt] = -> TRY { -> encypted=coder.decode(codedText.getBytes(),)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> decrypted=cipher.doFinal(encypted,)@ -> dec=new String(decrypted,)@ } CATCH { }
results[https://github.com/apache/juddi/blob/c8ed03d4f04e3506ddd449936abe924cba956df3/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/TripleDESCrytor.java][decrypt] = -> TRY { -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> encryptedText=Base64.decodeBase64(str.getBytes(),)@ -> plainTest=cipher.doFinal(encryptedText,)@ -> encryptedString=new String(plainTest,)@ } CATCH { }
results[https://github.com/apache/juddi/blob/67538a318ca79c7731ba8affb6ceeca80c6ea796/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/DES.java][decrypt] = -> TRY { -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> encryptedText=Base64.decodeBase64(str.getBytes(),)@ -> clear=cipher.doFinal(encryptedText,)@ -> encryptedString=new String(Base64.encodeBase64(clear,),)@ } CATCH { }
results[https://github.com/fywb251/bsl_impc_android/blob/0befac4975509a2a4851c92b36a553b36765732a/cube-android/src/com/foreveross/chameleon/util/SymEncrypt.java][decrypt] = -> TRY { -> key=getKey(strKey.getBytes(),"DES",)@ -> c=Cipher.getInstance("DES",)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> clearByte=c.doFinal(code,)@ -> r=new String(clearByte,)@ } CATCH { }
results[https://github.com/apache/juddi/blob/12e024cf1f5dced9dc1926a7b58ea05739fd04ae/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/TripleDESCrytor.java][decrypt] = -> TRY { -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> encryptedText=Base64.decodeBase64(str.getBytes(),)@ -> plainTest=cipher.doFinal(encryptedText,)@ -> encryptedString=new String(plainTest,)@ } CATCH { }
results[https://github.com/INightmare/apache-isis/blob/38a411e4b7f554ea69bad911c33ccad42a96b987/framework/runtimes/dflt/objectstores/nosql/src/main/java/org/apache/isis/runtimes/dflt/objectstores/nosql/encryption/blowfish/DataEncryptionBlowfishAbstract.java][encrypt] = -> TRY { -> key=new SecretKeySpec(specKey,BLOWFISH,)@ -> cipher=Cipher.getInstance(BLOWFISH,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(plainText.getBytes(),),)@ } CATCH { }
results[https://github.com/apache/juddi/blob/12e024cf1f5dced9dc1926a7b58ea05739fd04ae/juddi-examples/uddi-samples/src/uddi/examples/DES.java][decrypt] = -> TRY { -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> encryptedText=Base64.decodeBase64(str.getBytes(),)@ -> clear=cipher.doFinal(encryptedText,)@ -> encryptedString=new String(Base64.encodeBase64(clear,),)@ } CATCH { }
results[https://github.com/AndrewChanChina/cmsserver/blob/fa4fa4341cd4ec52d6ccac646aadd0fd71087eab/src/com/smit/util/TripleDESHelper.java][decode] = -> TRY { -> keySpec=new SecretKeySpec(key.getBytes(),"AES",)@ -> ci.init(Cipher.DECRYPT_MODE,keySpec,ips,)@ -> d=dbs64.decodeBuffer(encodeText,)@ -> dStr=ci.doFinal(d,)@ -> str=new String(dStr,)@ } CATCH { }
results[https://github.com/AndrewChanChina/cmsserver/blob/d5cf03a2841f823cd8a8d4c4313e55e88438097c/test/com/smit/productcontrol/testServcie/TripleDESHelper.java][decode] = -> TRY { -> keySpec=new SecretKeySpec(key.getBytes(),"AES",)@ -> ci.init(Cipher.DECRYPT_MODE,keySpec,ips,)@ -> d=dbs64.decodeBuffer(encodeText,)@ -> dStr=ci.doFinal(d,)@ -> str=new String(dStr,)@ } CATCH { }
