results[https://github.com/INightmare/apache-isis/blob/38a411e4b7f554ea69bad911c33ccad42a96b987/framework/runtimes/dflt/objectstores/nosql/src/main/java/org/apache/isis/runtimes/dflt/objectstores/nosql/encryption/blowfish/DataEncryptionBlowfishAbstract.java][encrypt] = -> TRY { -> key=new SecretKeySpec(specKey,BLOWFISH,)@ -> cipher=Cipher.getInstance(BLOWFISH,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(plainText.getBytes(),),)@ } CATCH { }
results[https://github.com/ha-jdbc/ha-jdbc/blob/218311633ecad4b033ee80bb639dcfcf8a3e4ee5/src/main/java/net/sf/hajdbc/codec/crypto/CipherCodec.java][encode] = -> TRY { -> cipher=Cipher.getInstance(this.key.getAlgorithm(),)@ -> cipher.init(Cipher.ENCRYPT_MODE,this.key,)@ -> return new String(Base64.encodeBase64(cipher.doFinal(value.getBytes(),),),)@ } CATCH { }
results[https://github.com/INightmare/apache-isis/blob/38a411e4b7f554ea69bad911c33ccad42a96b987/framework/runtimes/dflt/objectstores/nosql/src/main/java/org/apache/isis/runtimes/dflt/objectstores/nosql/encryption/aes/DataEncryptionAes.java][encrypt] = -> TRY { -> key=new SecretKeySpec(specKey,AES,)@ -> cipher=Cipher.getInstance("AES/ECB/PKCS7Padding",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(plainText.getBytes(),),)@ } CATCH { }
results[https://github.com/LSTS/neptus/blob/4d58343c2f0b754328d5bc72f465001d443238c5/src/pt/lsts/neptus/test/TestBlowfish.java][encryptBlowfish] = -> TRY { -> key=new SecretKeySpec(strkey.getBytes(),"Blowfish",)@ -> cipher=Cipher.getInstance("Blowfish",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(to_encrypt.getBytes(),),)@ } CATCH { }
results[https://github.com/dukeboard/kevoree-extra/blob/a9091fa5070b4961a50caf69830bb7d011f46db2/org.kevoree.extra.ha-jdbc/src/main/java/net/sf/hajdbc/codec/crypto/CipherCodec.java][decode] = -> TRY { -> cipher=Cipher.getInstance(this.key.getAlgorithm(),)@ -> cipher.init(Cipher.DECRYPT_MODE,this.key,)@ -> return new String(cipher.doFinal(Base64.decodeBase64(value.getBytes(),),),)@ } CATCH { }
results[https://github.com/dukeboard/kevoree-extra/blob/a9091fa5070b4961a50caf69830bb7d011f46db2/org.kevoree.extra.ha-jdbc/src/main/java/net/sf/hajdbc/codec/crypto/CipherCodec.java][encode] = -> TRY { -> cipher=Cipher.getInstance(this.key.getAlgorithm(),)@ -> cipher.init(Cipher.ENCRYPT_MODE,this.key,)@ -> return new String(Base64.encodeBase64(cipher.doFinal(value.getBytes(),),),)@ } CATCH { }
results[https://github.com/vincentjanv/groepI/blob/643bbc2aa06b98b4698ad8f2158d5d431a0a49cd/src/main/java/be/kdg/groepi/utils/VuforiaSignatureUtil.java][calculateRFC2104HMAC] = -> TRY { -> signingKey=new SecretKeySpec(key.getBytes(),"HmacSHA1",)@ -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,false,),)@ } CATCH { }
results[https://github.com/ha-jdbc/ha-jdbc/blob/218311633ecad4b033ee80bb639dcfcf8a3e4ee5/src/main/java/net/sf/hajdbc/codec/crypto/CipherCodec.java][decode] = -> TRY { -> cipher=Cipher.getInstance(this.key.getAlgorithm(),)@ -> cipher.init(Cipher.DECRYPT_MODE,this.key,)@ -> return new String(cipher.doFinal(Base64.decodeBase64(value.getBytes(),),),)@ } CATCH { }
results[https://github.com/oxhead/decoupled-hadoop/blob/fda683bf06f52e3c0999fec65d994f9f74fb3c50/hadoop-mapreduce/src/contrib/dynamic-scheduler/src/java/org/apache/hadoop/mapred/PriorityAuthorization.java][hmac] = -> TRY { -> signingKey=new SecretKeySpec(key.getBytes(),HMAC_SHA1_ALGORITHM,)@ -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH { }
results[https://github.com/cmccabe/hadoop/blob/2c56fe972bbc25111534ab1b3817234a3b4a981c/src/contrib/dynamic-scheduler/src/java/org/apache/hadoop/mapred/PriorityAuthorization.java][hmac] = -> TRY { -> signingKey=new SecretKeySpec(key.getBytes(),HMAC_SHA1_ALGORITHM,)@ -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH { }
