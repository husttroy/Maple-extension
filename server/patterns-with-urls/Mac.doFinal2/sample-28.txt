results[https://github.com/apache/archiva-sandbox/blob/024475645a1b1316b43ab706db76ce6eb8726028/commons-transfer/commons-transfer-api/src/main/java/org/apache/archiva/commons/transfer/defaults/Password.java][encrypt] = -> key=keyFactory.generateSecret(keySpec,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> cleartext=new String(password,).getBytes(ENCODING,)@ -> ciphertext=cipher.doFinal(cleartext,)@ -> return new String(Base64.encodeBase64(ciphertext,),)@
results[https://github.com/sosilent/euca/blob/54fd3c97a69a5054705bc777a5b6f1403a72ba1e/clc/modules/authentication/src/main/java/com/eucalyptus/auth/crypto/StringCrypto.java][decryptOpenssl] = -> pk=keystore.getKey(ALIAS,PASSWORD,)@ -> cipher=Cipher.getInstance(format,this.provider,)@ -> cipher.init(Cipher.DECRYPT_MODE,pk,)@ -> return new String(cipher.doFinal(passwordEncrypted,),)@
results[https://github.com/sosilent/euca/blob/54fd3c97a69a5054705bc777a5b6f1403a72ba1e/clc/modules/authentication/src/main/java/com/eucalyptus/auth/crypto/StringCrypto.java][decrypt] = -> keyBytes=makeKey(secret,)@ -> key=new SecretKeySpec(keyBytes,"DESede",)@ -> iv=new IvParameterSpec( new byte[],)@ -> cipher=Cipher.getInstance(this.symmetricFormat,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,iv,)@ -> return new String(cipher.doFinal(stringEncrypted,),)@
results[https://github.com/sosilent/euca/blob/54fd3c97a69a5054705bc777a5b6f1403a72ba1e/clc/modules/authentication/src/main/java/com/eucalyptus/auth/crypto/StringCrypto.java][decrypt] = -> pk=keystore.getKey(ALIAS,PASSWORD,)@ -> cipher=Cipher.getInstance(this.asymmetricFormat,this.provider,)@ -> cipher.init(Cipher.DECRYPT_MODE,pk,)@ -> return new String(cipher.doFinal(passwordEncrypted,),)@
results[https://github.com/sosilent/euca/blob/54fd3c97a69a5054705bc777a5b6f1403a72ba1e/clc/modules/authentication/src/main/java/com/eucalyptus/auth/crypto/StringCrypto.java][decryptOpenssl] = -> pk=keystore.getKey(ALIAS,PASSWORD,)@ -> cipher=Cipher.getInstance(this.asymmetricFormat,this.provider,)@ -> cipher.init(Cipher.DECRYPT_MODE,pk,)@ -> return new String(cipher.doFinal(passwordEncrypted,),)@
results[https://github.com/AndrewChanChina/cmsserver/blob/d5cf03a2841f823cd8a8d4c4313e55e88438097c/test/com/smit/productcontrol/testServcie/XDEncodeHelper.java][XDDecode] = -> TRY { -> IF { -> strBlackText=URLDecoder.decode(strBlackText,"utf-8",)@ } -> byteUtf8=strBlackText.getBytes("utf-8",)@ -> byteUtf8=dbs64.decodeBuffer(new String(byteUtf8,),)@ -> deskey=new SecretKeySpec(strKey.getBytes(),KEYTYPE,)@ -> c1.init(Cipher.DECRYPT_MODE,deskey,ips,)@ -> byteEncrypted=c1.doFinal(byteUtf8,)@ -> strUtf8=new String(byteEncrypted,"utf-8",)@ } CATCH { }
results[https://github.com/snowfix/android_dalvik/blob/f6c387128427e121477c1b32ad35cdcaa5101ba3/libcore/crypto/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/func/MacThread.java][test] = -> LOOP { -> src1[i]=(byte) i@i<size -> src2[i]=(byte) i@i<size -> src3[i]=(byte) size-i-1@i<size } -> m=Mac.getInstance(algName,)@ -> b=(byte) 0(byte) 0(byte) 0(byte) 0(byte) 0@ -> sks=new SecretKeySpec(b,"SHA1",)@ -> m.init(sks,)@ -> res=m.doFinal(src1,)@ -> sign1=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src2,)@ -> sign2=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src3,)@ -> sign3=new String(res,)@ -> IF { -> throw new Exception("Signature is not correct for algorithm "+algName,)@sign1.compareTo(sign2,)!=0||sign1.compareTo(sign3,)==0||sign2.compareTo(sign3,)==0 }
results[https://github.com/ForgeEssentials/ForgeEssentialsMain/blob/d6c21bfc72047801c02cf8464f1fc0b6c74df58d/src/FE_SRC_COMMON/com/ForgeEssentials/snooper/response/VoteResponce.java][getResponceString] = -> TRY { -> encr=new String(Arrays.copyOfRange(packet.getData(),11,packet.getLength(),),)@ -> System.out.println("encr: "+encr,)@ -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.DECRYPT_MODE,privateKey,)@ -> decodedBytes=cipher.doFinal(encr.getBytes(),)@ -> decoded=new String(decodedBytes,)@ -> System.out.println("decoded: "+decoded,)@ } CATCH { }
results[https://github.com/rmcc/android_dalvik/blob/f6c387128427e121477c1b32ad35cdcaa5101ba3/libcore/crypto/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/func/MacThread.java][test] = -> LOOP { -> src1[i]=(byte) i@i<size -> src2[i]=(byte) i@i<size -> src3[i]=(byte) size-i-1@i<size } -> m=Mac.getInstance(algName,)@ -> b=(byte) 0(byte) 0(byte) 0(byte) 0(byte) 0@ -> sks=new SecretKeySpec(b,"SHA1",)@ -> m.init(sks,)@ -> res=m.doFinal(src1,)@ -> sign1=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src2,)@ -> sign2=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src3,)@ -> sign3=new String(res,)@ -> IF { -> throw new Exception("Signature is not correct for algorithm "+algName,)@sign1.compareTo(sign2,)!=0||sign1.compareTo(sign3,)==0||sign2.compareTo(sign3,)==0 }
results[https://github.com/sdugit/libcore_7025/blob/0b26c7b2263a591b135e230231a331e3c0f123b8/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/func/MacThread.java][test] = -> LOOP { -> src1[i]=(byte) i@i<size -> src2[i]=(byte) i@i<size -> src3[i]=(byte) size-i-1@i<size } -> m=Mac.getInstance(algName,)@ -> b=(byte) 0(byte) 0(byte) 0(byte) 0(byte) 0@ -> sks=new SecretKeySpec(b,"SHA1",)@ -> m.init(sks,)@ -> res=m.doFinal(src1,)@ -> sign1=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src2,)@ -> sign2=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src3,)@ -> sign3=new String(res,)@ -> IF { -> throw new Exception("Signature is not correct for algorithm "+algName,)@sign1.compareTo(sign2,)!=0||sign1.compareTo(sign3,)==0||sign2.compareTo(sign3,)==0 }
results[https://github.com/Slayjay78/android_libcore/blob/38fc00ddece5f7d8941fecb01c7bcc2b45208496/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/func/MacThread.java][test] = -> LOOP { -> src1[i]=(byte) i@i<size -> src2[i]=(byte) i@i<size -> src3[i]=(byte) size-i-1@i<size } -> m=Mac.getInstance(algName,)@ -> b=(byte) 0(byte) 0(byte) 0(byte) 0(byte) 0@ -> sks=new SecretKeySpec(b,"SHA1",)@ -> m.init(sks,)@ -> res=m.doFinal(src1,)@ -> sign1=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src2,)@ -> sign2=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src3,)@ -> sign3=new String(res,)@ -> IF { -> throw new Exception("Signature is not correct for algorithm "+algName,)@sign1.compareTo(sign2,)!=0||sign1.compareTo(sign3,)==0||sign2.compareTo(sign3,)==0 }
results[https://github.com/XYAOSP/libcore/blob/0b26c7b2263a591b135e230231a331e3c0f123b8/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/func/MacThread.java][test] = -> LOOP { -> src1[i]=(byte) i@i<size -> src2[i]=(byte) i@i<size -> src3[i]=(byte) size-i-1@i<size } -> m=Mac.getInstance(algName,)@ -> b=(byte) 0(byte) 0(byte) 0(byte) 0(byte) 0@ -> sks=new SecretKeySpec(b,"SHA1",)@ -> m.init(sks,)@ -> res=m.doFinal(src1,)@ -> sign1=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src2,)@ -> sign2=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src3,)@ -> sign3=new String(res,)@ -> IF { -> throw new Exception("Signature is not correct for algorithm "+algName,)@sign1.compareTo(sign2,)!=0||sign1.compareTo(sign3,)==0||sign2.compareTo(sign3,)==0 }
