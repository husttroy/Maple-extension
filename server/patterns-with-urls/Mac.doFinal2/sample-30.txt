results[https://github.com/yuyang226/FlickrjApi4Android/blob/3ba91acf4e631eafe012d867dfb6b01be8fe7e00/flickrj-android/src/main/java/com/gmail/yuyang226/flickr/oauth/OAuthUtils.java][hmacsha1] = -> mac=Mac.getInstance(HMAC_SHA1,)@ -> spec=new SecretKeySpec(key+PARAMETER_SEPARATOR+tokenSecret.getBytes(),HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(ENC,),)@ -> return new String(Base64.encode(byteHMAC,),)@
results[https://github.com/spring-projects/spring-social-facebook/blob/e98c81ef2d0bd91d4c76b38e6af72379de4aebf4/spring-social-facebook-web/src/main/java/org/springframework/social/facebook/web/RealTimeUpdateController.java][verifySignature] = -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> signingKey=new SecretKeySpec(applicationSecret.getBytes(),HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(payload.getBytes(),)@ -> actual=new String(Hex.encode(rawHmac,),)@
results[https://github.com/yuyang226/FlickrjApi4Android/blob/0e18abaf7b751e3ebf828c64954e7a50da1f8b86/src/com/yuyang226/flickr/oauth/OAuthUtils.java][hmacsha1] = -> mac=Mac.getInstance(HMAC_SHA1,)@ -> spec=new SecretKeySpec(key+PARAMETER_SEPARATOR+tokenSecret.getBytes(),HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(ENC,),)@ -> return new String(Base64.encodeBase64(byteHMAC,),)@
results[https://github.com/rafali/flickr-uploader/blob/39c15c4724802a071a7972115cf8999ce86def1b/FlickrUploader/src_shared/com/googlecode/flickrjandroid/oauth/OAuthUtils.java][hmacsha1] = -> mac=Mac.getInstance(HMAC_SHA1,)@ -> spec=new SecretKeySpec(key+PARAMETER_SEPARATOR+tokenSecret.getBytes(),HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(ENC,),)@ -> return new String(Base64.encode(byteHMAC,),)@
results[https://github.com/yuyang226/FlickrjApi4Android/blob/b14c49e2690ccfe2346a9a8fd11a2267daec31d7/src/main/java/com/gmail/yuyang226/flickr/oauth/OAuthUtils.java][hmacsha1] = -> mac=Mac.getInstance(HMAC_SHA1,)@ -> spec=new SecretKeySpec(key+PARAMETER_SEPARATOR+tokenSecret.getBytes(),HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(ENC,),)@ -> return new String(Base64.encode(byteHMAC,),)@
results[https://github.com/rafali/flickr-uploader/blob/65e9b62936e1fc76da7213fca36f82bf4a242750/FlickrUploader/src/com/googlecode/flickrjandroid/oauth/OAuthUtils.java][hmacsha1] = -> mac=Mac.getInstance(HMAC_SHA1,)@ -> spec=new SecretKeySpec(key+PARAMETER_SEPARATOR+tokenSecret.getBytes(),HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(ENC,),)@ -> return new String(Base64.encode(byteHMAC,),)@
results[https://github.com/yuyang226/FlickrjApi4Android/blob/061e2f0672bdb65e96916b45ef5b6a8f95429952/flickrj-android/src/main/java/com/googlecode/flickrjandroid/oauth/OAuthUtils.java][hmacsha1] = -> mac=Mac.getInstance(HMAC_SHA1,)@ -> spec=new SecretKeySpec(key+PARAMETER_SEPARATOR+tokenSecret.getBytes(),HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(ENC,),)@ -> return new String(Base64.encode(byteHMAC,),)@
results[https://github.com/yuyang226/FlickrjApi4Android/blob/ffe9fde849db3eb7d63b1be29d4ebc09ba8c1ac0/src/com/gmail/yuyang226/flickr/oauth/OAuthUtils.java][hmacsha1] = -> mac=Mac.getInstance(HMAC_SHA1,)@ -> spec=new SecretKeySpec(key+PARAMETER_SEPARATOR+tokenSecret.getBytes(),HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(ENC,),)@ -> return new String(Base64.encodeBase64(byteHMAC,),)@
results[https://github.com/rafali/flickr-uploader/blob/ea4dafdef477e7ed5c45973eec5c436f8188c2f4/FlickrUploaderJava/src/com/googlecode/flickrjandroid/oauth/OAuthUtils.java][hmacsha1] = -> mac=Mac.getInstance(HMAC_SHA1,)@ -> spec=new SecretKeySpec(key+PARAMETER_SEPARATOR+tokenSecret.getBytes(),HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(ENC,),)@ -> return new String(Base64.encode(byteHMAC,),)@
results[https://github.com/wadahiro/openidm/blob/78ae7aa58e59540df48586afa22796955f32d16a/openidm-crypto/src/main/java/org/forgerock/openidm/crypto/impl/Main.java][decrypt] = -> IF { -> s=s.substring(__CRYPT.length(),)@s.startsWith(__CRYPT,) } -> cipher=Cipher.getInstance(CRYPT_ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(NON_SECRET_KEY,CRYPT_ALGORITHM,),)@ -> return new String(cipher.doFinal(hexStringToByteArray(s,),),)@
