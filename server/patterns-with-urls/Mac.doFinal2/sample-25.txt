results[https://github.com/spring-projects/spring-social-facebook/blob/e98c81ef2d0bd91d4c76b38e6af72379de4aebf4/spring-social-facebook-web/src/main/java/org/springframework/social/facebook/web/RealTimeUpdateController.java][verifySignature] = -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> signingKey=new SecretKeySpec(applicationSecret.getBytes(),HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(payload.getBytes(),)@ -> actual=new String(Hex.encode(rawHmac,),)@
results[https://github.com/INightmare/apache-isis/blob/38a411e4b7f554ea69bad911c33ccad42a96b987/framework/runtimes/dflt/objectstores/nosql/src/main/java/org/apache/isis/runtimes/dflt/objectstores/nosql/encryption/blowfish/DataEncryptionBlowfishAbstract.java][encrypt] = -> TRY { -> key=new SecretKeySpec(specKey,BLOWFISH,)@ -> cipher=Cipher.getInstance(BLOWFISH,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(plainText.getBytes(),),)@ } CATCH { }
results[https://github.com/LSTS/neptus/blob/4d58343c2f0b754328d5bc72f465001d443238c5/src/pt/lsts/neptus/test/TestBlowfish.java][encryptBlowfish] = -> TRY { -> key=new SecretKeySpec(strkey.getBytes(),"Blowfish",)@ -> cipher=Cipher.getInstance("Blowfish",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(to_encrypt.getBytes(),),)@ } CATCH { }
results[https://github.com/digipost/android/blob/39d7d4ad4c7e820d6e2de0189c6abdd9878c7902/src/no/digipost/android/authentication/OAuth2.java][encryptHmacSHA256] = -> secretKey=new SecretKeySpec(Secret.CLIENT_SECRET.getBytes(),ApplicationConstants.HMACSHA256,)@ -> TRY { -> mac=Mac.getInstance(ApplicationConstants.HMACSHA256,)@ -> mac.init(secretKey,)@ } CATCH { } -> hmacData=mac.doFinal(data.getBytes(),)@ -> return new String(hmacData,)@
results[https://github.com/vincentjanv/groepI/blob/643bbc2aa06b98b4698ad8f2158d5d431a0a49cd/src/main/java/be/kdg/groepi/utils/VuforiaSignatureUtil.java][calculateRFC2104HMAC] = -> TRY { -> signingKey=new SecretKeySpec(key.getBytes(),"HmacSHA1",)@ -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,false,),)@ } CATCH { }
results[https://github.com/INightmare/apache-isis/blob/38a411e4b7f554ea69bad911c33ccad42a96b987/framework/runtimes/dflt/objectstores/nosql/src/main/java/org/apache/isis/runtimes/dflt/objectstores/nosql/encryption/aes/DataEncryptionAes.java][encrypt] = -> TRY { -> key=new SecretKeySpec(specKey,AES,)@ -> cipher=Cipher.getInstance("AES/ECB/PKCS7Padding",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(plainText.getBytes(),),)@ } CATCH { }
results[https://github.com/bradens/uvc/blob/f4fe51aebe440790af1ae6ae5de284e1b7bd6166/Seng360/assign4/src/main/Part1.java][runPart1] = -> keyspec=new SecretKeySpec(key.getBytes(),"AES",)@ -> ivspec=new IvParameterSpec(iv.getBytes(),)@ -> cipher=Cipher.getInstance("AES/CBC/PKCS5Padding",)@ -> cipher.init(Cipher.DECRYPT_MODE,keyspec,ivspec,)@ -> decodedData=new BASE64Decoder().decodeBuffer(text64enc,)@ -> decryptedData=cipher.doFinal(decodedData,)@ -> System.out.println(new String(decryptedData,),)@
results[https://github.com/oxhead/decoupled-hadoop/blob/fda683bf06f52e3c0999fec65d994f9f74fb3c50/hadoop-mapreduce/src/contrib/dynamic-scheduler/src/java/org/apache/hadoop/mapred/PriorityAuthorization.java][hmac] = -> TRY { -> signingKey=new SecretKeySpec(key.getBytes(),HMAC_SHA1_ALGORITHM,)@ -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH { }
results[https://github.com/oxhead/decoupled-hadoop/blob/9a9fcf826d455aacdc24948300bdf3015302d0f5/mapreduce/src/contrib/dynamic-scheduler/src/java/org/apache/hadoop/mapred/PriorityAuthorization.java][hmac] = -> TRY { -> signingKey=new SecretKeySpec(key.getBytes(),HMAC_SHA1_ALGORITHM,)@ -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH { }
results[https://github.com/cmccabe/hadoop/blob/2c56fe972bbc25111534ab1b3817234a3b4a981c/src/contrib/dynamic-scheduler/src/java/org/apache/hadoop/mapred/PriorityAuthorization.java][hmac] = -> TRY { -> signingKey=new SecretKeySpec(key.getBytes(),HMAC_SHA1_ALGORITHM,)@ -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH { }
