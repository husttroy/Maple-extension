results[https://github.com/Yserz/Auto-B-Day/blob/07341e476c2628a46ea7557bd2a5825b9f7bed77/Auto-B-Day-ejb/src/java/de/fhb/autobday/commons/CipherHelper.java][decipher] = -> k=new SecretKeySpec(key.getBytes(),"DES",)@ -> cipher=Cipher.getInstance("DES/ECB/PKCS5Padding",)@ -> cipher.init(Cipher.DECRYPT_MODE,k,)@ -> dec=new sun.misc.BASE64Decoder().decodeBuffer(raw,)@ -> unverschlusselt=cipher.doFinal(dec,)@ -> output=new String(unverschlusselt,)@
results[https://github.com/dwinslow23/dixon/blob/bd782a3e0df4059268b1da08e3f8bd592ce10146/src/main/java/com/dixon/security/SimpleCipher.java][decrypt] = -> TRY { -> encypted=coder.decode(codedText.getBytes(),)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> decrypted=cipher.doFinal(encypted,)@ -> dec=new String(decrypted,)@ } CATCH { }
results[https://github.com/fywb251/bsl_impc_android/blob/0befac4975509a2a4851c92b36a553b36765732a/cube-android/src/com/foreveross/chameleon/util/SymEncrypt.java][decrypt] = -> TRY { -> key=getKey(strKey.getBytes(),"DES",)@ -> c=Cipher.getInstance("DES",)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> clearByte=c.doFinal(code,)@ -> r=new String(clearByte,)@ } CATCH { }
results[https://github.com/playframework/play1/blob/fd24bab5eecee77edfd19d84919c2d5cd4c03cf9/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
results[https://github.com/AndrewChanChina/cmsserver/blob/fa4fa4341cd4ec52d6ccac646aadd0fd71087eab/src/com/smit/util/TripleDESHelper.java][ebcDecode] = -> TRY { -> keySpec=new SecretKeySpec(key.getBytes(),"TripleDES",)@ -> ci.init(Cipher.DECRYPT_MODE,keySpec,)@ -> s=dbs64.decodeBuffer(encodeText,)@ -> b=ci.doFinal(s,)@ -> str=new String(b,)@ } CATCH { }
results[https://github.com/moriyoshi/play-forked/blob/161bce95c32b14e6dc0cb9df8beaed792c3c4463/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
results[https://github.com/michel-kraemer/citeproc-java/blob/56819b8ad82ef3ee41eada5c2297085ab1b57275/src/main/java/de/undercouch/citeproc/tool/MendeleyCommand.java][readConsumer] = -> k=new SecretKeySpec("#x$gbf5zs%4QvzAx".getBytes(),"AES",)@ -> c=Cipher.getInstance("AES",)@ -> c.init(Cipher.DECRYPT_MODE,k,)@ -> arr=c.doFinal(arr,)@ -> arr=DatatypeConverter.parseBase64Binary(new String(arr,),)@ -> LOOP { -> result[0]+=(char) arr[i+31]@i<2 } -> LOOP { -> result[1]+=(char) arr[i+1857]@i<16 }
results[https://github.com/LSTS/neptus/blob/4d58343c2f0b754328d5bc72f465001d443238c5/src/pt/lsts/neptus/test/TestBlowfish.java][encryptBlowfish] = -> TRY { -> key=new SecretKeySpec(strkey.getBytes(),"Blowfish",)@ -> cipher=Cipher.getInstance("Blowfish",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(to_encrypt.getBytes(),),)@ } CATCH { }
results[https://github.com/deanhiller/databus/blob/2fa5fe9142bb20f5d56d2175264ebb0ae1a52314/webapp/play-1.2.5/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
results[https://github.com/benschi11/Alt_F4/blob/db8a036f89847dc74fc3f5737362cab51ad8b871/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
