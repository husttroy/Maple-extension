results[https://github.com/dredom/workjava/blob/18bb9422d6733bccb1418f5537f76295c8bd9eee/security-example/src/main/java/com/lvls/Server.java][loginEncrypted] = -> cipher=Cipher.getInstance(ENCRYPTION_KEY,)@ -> cipher.init(Cipher.DECRYPT_MODE,secretKey,)@ -> cleartext=cipher.doFinal(encryptedPassword.getBytes(),)@ -> password=new String(cleartext,)@ -> valid=password.equals(VALID_PASSWORD,)@
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/Zzz/src/security/AuthCode.java][decrypt] = -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.DECRYPT_MODE,pk,)@ -> return new String(cipher.doFinal(Base64.decodeBase64(chipher.getBytes(),),),)@
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/Zzz/src/security/AuthCode.java][encrypt] = -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.ENCRYPT_MODE,pk,)@ -> return new String(Base64.encodeBase64(cipher.doFinal(simple.getBytes(),),),)@
results[https://github.com/dwinslow23/dixon/blob/bd782a3e0df4059268b1da08e3f8bd592ce10146/src/main/java/com/dixon/security/SimpleCipher.java][encrypt] = -> TRY { -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> cipherText=cipher.doFinal(plainText.getBytes(),)@ -> enc=new String(coder.encode(cipherText,),)@ } CATCH { }
results[https://github.com/dredom/workjava/blob/6d5060cb39e0535fabe1f3e3802c384d927416a8/security-example/src/main/java/com/dredom/Server.java][loginEncrypted] = -> cipher=Cipher.getInstance(ENCRYPTION_KEY,)@ -> cipher.init(Cipher.DECRYPT_MODE,secretKey,)@ -> cleartext=cipher.doFinal(encryptedPassword.getBytes(),)@ -> password=new String(cleartext,)@ -> valid=password.equals(VALID_PASSWORD,)@
results[https://github.com/apache/juddi/blob/c8ed03d4f04e3506ddd449936abe924cba956df3/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/TripleDESCrytor.java][decrypt] = -> TRY { -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> encryptedText=Base64.decodeBase64(str.getBytes(),)@ -> plainTest=cipher.doFinal(encryptedText,)@ -> encryptedString=new String(plainTest,)@ } CATCH { }
results[https://github.com/apache/juddi/blob/67538a318ca79c7731ba8affb6ceeca80c6ea796/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/DES.java][decrypt] = -> TRY { -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> encryptedText=Base64.decodeBase64(str.getBytes(),)@ -> clear=cipher.doFinal(encryptedText,)@ -> encryptedString=new String(Base64.encodeBase64(clear,),)@ } CATCH { }
results[https://github.com/apache/juddi/blob/12e024cf1f5dced9dc1926a7b58ea05739fd04ae/juddi-examples/uddi-samples/src/uddi/examples/DES.java][decrypt] = -> TRY { -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> encryptedText=Base64.decodeBase64(str.getBytes(),)@ -> clear=cipher.doFinal(encryptedText,)@ -> encryptedString=new String(Base64.encodeBase64(clear,),)@ } CATCH { }
results[https://github.com/apache/juddi/blob/12e024cf1f5dced9dc1926a7b58ea05739fd04ae/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/TripleDESCrytor.java][decrypt] = -> TRY { -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> encryptedText=Base64.decodeBase64(str.getBytes(),)@ -> plainTest=cipher.doFinal(encryptedText,)@ -> encryptedString=new String(plainTest,)@ } CATCH { }
results[https://github.com/apache/juddi/blob/159a80b80dbb990bb56f34ba46080e04c4857040/juddi-examples/uddi-samples/src/org/apache/juddi/samples/DES.java][decrypt] = -> TRY { -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> encryptedText=Base64.decodeBase64(str.getBytes(),)@ -> clear=cipher.doFinal(encryptedText,)@ -> encryptedString=new String(Base64.encodeBase64(clear,),)@ } CATCH { }
