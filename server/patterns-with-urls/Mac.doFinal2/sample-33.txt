results[https://github.com/abdulazeezsk/netvogue/blob/dd10a063f5b51b61c8989b620c63f5ec0b8d88df/Server/netvogue_database/src/main/java/org/netvogue/server/aws/core/FileManager.java][sign] = -> signBytes=mac.doFinal(data.getBytes("UTF8",),)@ -> signBytesString=new String(signBytes,)@ -> signature=Base64.encodeBase64(signBytes,)@ -> sig=new String(signature,)@
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/Zzz/src/security/AuthCode.java][encrypt] = -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.ENCRYPT_MODE,pk,)@ -> return new String(Base64.encodeBase64(cipher.doFinal(simple.getBytes(),),),)@
results[https://github.com/abdulazeezsk/netvogue/blob/173084126b6abafa7686bf04e9cd93d5eebe7e2b/Server/netvogue-image-persistence/src/main/java/org/netvogue/server/aws/core/FileManager.java][sign] = -> signBytes=mac.doFinal(data.getBytes("UTF8",),)@ -> signBytesString=new String(signBytes,)@ -> signature=Base64.encodeBase64(signBytes,)@ -> sig=new String(signature,)@
results[https://github.com/yuyang226/FlickrjApi4Android/blob/0e18abaf7b751e3ebf828c64954e7a50da1f8b86/src/com/yuyang226/flickr/oauth/OAuthUtils.java][hmacsha1] = -> mac=Mac.getInstance(HMAC_SHA1,)@ -> spec=new SecretKeySpec(key+PARAMETER_SEPARATOR+tokenSecret.getBytes(),HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(ENC,),)@ -> return new String(Base64.encodeBase64(byteHMAC,),)@
results[https://github.com/apache/archiva-sandbox/blob/024475645a1b1316b43ab706db76ce6eb8726028/commons-transfer/commons-transfer-api/src/main/java/org/apache/archiva/commons/transfer/defaults/Password.java][encrypt] = -> key=keyFactory.generateSecret(keySpec,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> cleartext=new String(password,).getBytes(ENCODING,)@ -> ciphertext=cipher.doFinal(cleartext,)@ -> return new String(Base64.encodeBase64(ciphertext,),)@
results[https://github.com/yuyang226/FlickrjApi4Android/blob/ffe9fde849db3eb7d63b1be29d4ebc09ba8c1ac0/src/com/gmail/yuyang226/flickr/oauth/OAuthUtils.java][hmacsha1] = -> mac=Mac.getInstance(HMAC_SHA1,)@ -> spec=new SecretKeySpec(key+PARAMETER_SEPARATOR+tokenSecret.getBytes(),HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(ENC,),)@ -> return new String(Base64.encodeBase64(byteHMAC,),)@
results[https://github.com/apache/juddi/blob/c8ed03d4f04e3506ddd449936abe924cba956df3/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/TripleDESCrytor.java][encrypt] = -> TRY { -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> plainText=clear.getBytes(UNICODE_FORMAT,)@ -> encryptedText=cipher.doFinal(plainText,)@ -> encryptedString=new String(Base64.encodeBase64(encryptedText,),)@ } CATCH { }
results[https://github.com/apache/juddi/blob/0f9a14df34b5b4c8537041af70b4338f75bfc9ba/juddi-examples/uddi-createbulk/src/uddi/createbulk/DES.java][encrypt] = -> TRY { -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> plainText=clear.getBytes(UNICODE_FORMAT,)@ -> encryptedText=cipher.doFinal(plainText,)@ -> encryptedString=new String(Base64.encodeBase64(encryptedText,),)@ } CATCH { }
results[https://github.com/apache/juddi/blob/8ee6fec515bee1794d40bbfb0db0d6a2f0f3b8c5/juddi-examples/uddi-createbulk/src/uddi/examples/DES.java][encrypt] = -> TRY { -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> plainText=clear.getBytes(UNICODE_FORMAT,)@ -> encryptedText=cipher.doFinal(plainText,)@ -> encryptedString=new String(Base64.encodeBase64(encryptedText,),)@ } CATCH { }
results[https://github.com/amyfan/Coacheller/blob/9cdb9099781dcb6969a9c21db5ce55de8dbce6e3/Lollapaloozer-Android/src/org/scribe/services/HMACSha1SignatureService.java][doSign] = -> key=new SecretKeySpec(keyString.getBytes(UTF8,),HMAC_SHA1,)@ -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(key,)@ -> bytes=mac.doFinal(toSign.getBytes(UTF8,),)@ -> return new String(Base64.encodeBase64(bytes,),).replace(CARRIAGE_RETURN,EMPTY_STRING,)@
