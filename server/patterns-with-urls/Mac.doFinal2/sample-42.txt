results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/Zzz/src/security/AuthCode.java][encrypt] = -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.ENCRYPT_MODE,pk,)@ -> return new String(Base64.encodeBase64(cipher.doFinal(simple.getBytes(),),),)@
results[https://github.com/yuyang226/FlickrjApi4Android/blob/0e18abaf7b751e3ebf828c64954e7a50da1f8b86/src/com/yuyang226/flickr/oauth/OAuthUtils.java][hmacsha1] = -> mac=Mac.getInstance(HMAC_SHA1,)@ -> spec=new SecretKeySpec(key+PARAMETER_SEPARATOR+tokenSecret.getBytes(),HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(ENC,),)@ -> return new String(Base64.encodeBase64(byteHMAC,),)@
results[https://github.com/yuyang226/FlickrjApi4Android/blob/ffe9fde849db3eb7d63b1be29d4ebc09ba8c1ac0/src/com/gmail/yuyang226/flickr/oauth/OAuthUtils.java][hmacsha1] = -> mac=Mac.getInstance(HMAC_SHA1,)@ -> spec=new SecretKeySpec(key+PARAMETER_SEPARATOR+tokenSecret.getBytes(),HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(ENC,),)@ -> return new String(Base64.encodeBase64(byteHMAC,),)@
results[https://github.com/amyfan/Coacheller/blob/9cdb9099781dcb6969a9c21db5ce55de8dbce6e3/Lollapaloozer-Android/src/org/scribe/services/HMACSha1SignatureService.java][doSign] = -> key=new SecretKeySpec(keyString.getBytes(UTF8,),HMAC_SHA1,)@ -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(key,)@ -> bytes=mac.doFinal(toSign.getBytes(UTF8,),)@ -> return new String(Base64.encodeBase64(bytes,),).replace(CARRIAGE_RETURN,EMPTY_STRING,)@
results[https://github.com/societies/SOCIETIES-Platform/blob/19704c7e2f8322c2626433b794fde7dcc678e3b9/platform-infrastructure/sns/connectors/FoursquareConnector/src/main/java/org/scribe/services/HMACSha1SignatureService.java][doSign] = -> key=new SecretKeySpec(keyString.getBytes(UTF8,),HMAC_SHA1,)@ -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(key,)@ -> bytes=mac.doFinal(toSign.getBytes(UTF8,),)@ -> return new String(Base64.encodeBase64(bytes,),).replace(CARRIAGE_RETURN,EMPTY_STRING,)@
results[https://github.com/societies/SOCIETIES-Platform/blob/19704c7e2f8322c2626433b794fde7dcc678e3b9/platform-infrastructure/sns/connectors/TwitterConnector/src/main/java/org/scribe/services/HMACSha1SignatureService.java][doSign] = -> key=new SecretKeySpec(keyString.getBytes(UTF8,),HMAC_SHA1,)@ -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(key,)@ -> bytes=mac.doFinal(toSign.getBytes(UTF8,),)@ -> return new String(Base64.encodeBase64(bytes,),).replace(CARRIAGE_RETURN,EMPTY_STRING,)@
results[https://github.com/societies/SOCIETIES-Platform/blob/5d9410190157384de1049bef62f5f52eaf2b3b9f/platform-infrastructure/sns/AndroidSNApp/src/org/scribe/services/HMACSha1SignatureService.java][doSign] = -> key=new SecretKeySpec(keyString.getBytes(UTF8,),HMAC_SHA1,)@ -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(key,)@ -> bytes=mac.doFinal(toSign.getBytes(UTF8,),)@ -> return new String(Base64.encodeBase64(bytes,),).replace(CARRIAGE_RETURN,EMPTY_STRING,)@
results[https://github.com/societies/SOCIETIES-Platform/blob/e780a277189d44ffb56d1da44073e27c0c63e185/platform-infrastructure/sns/FoursquareConnector/src/main/java/org/scribe/services/HMACSha1SignatureService.java][doSign] = -> key=new SecretKeySpec(keyString.getBytes(UTF8,),HMAC_SHA1,)@ -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(key,)@ -> bytes=mac.doFinal(toSign.getBytes(UTF8,),)@ -> return new String(Base64.encodeBase64(bytes,),).replace(CARRIAGE_RETURN,EMPTY_STRING,)@
results[https://github.com/societies/SOCIETIES-Platform/blob/e780a277189d44ffb56d1da44073e27c0c63e185/platform-infrastructure/sns/TwitterConnector/src/main/java/org/scribe/services/HMACSha1SignatureService.java][doSign] = -> key=new SecretKeySpec(keyString.getBytes(UTF8,),HMAC_SHA1,)@ -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(key,)@ -> bytes=mac.doFinal(toSign.getBytes(UTF8,),)@ -> return new String(Base64.encodeBase64(bytes,),).replace(CARRIAGE_RETURN,EMPTY_STRING,)@
results[https://github.com/qyb/sohu/blob/38215b2966d993ea41ab85a099fa783c92e14230/src/StorageWorkspace/StorageAPI/src/com/scss/utility/CommonUtilities.java][calculateRFC2104HMAC] = -> TRY { -> signingKey=new SecretKeySpec(key,algo,)@ -> mac=Mac.getInstance(algo,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data,)@ -> b64=Base64.encodeBase64(rawHmac,)@ -> result=new String(b64,)@ } CATCH { }
