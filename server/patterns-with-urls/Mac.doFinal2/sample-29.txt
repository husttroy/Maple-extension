results[https://github.com/spontecorp/ferretotalserver/blob/6ff5b0a7916a3fd19833d984d101a9521768e496/src/java/com/spontecorp/ferretotalserver/security/Cifrador.java][decrypt] = -> TRY { -> dcipher=Cipher.getInstance(CIPHER_INSTANCE,)@ -> dcipher.init(Cipher.DECRYPT_MODE,key,)@ -> dec=new sun.misc.BASE64Decoder().decodeBuffer(str,)@ -> utf8=dcipher.doFinal(dec,)@ -> result=new String(utf8,"UTF8",)@ } CATCH { }
results[https://github.com/spontecorp/serviceport/blob/c843b389cc311bf957390576270a04c26535e735/ferreasesorweb/src/java/com/spontecorp/ferreasesor/security/Cifrador.java][decrypt] = -> TRY { -> dcipher=Cipher.getInstance(CIPHER_INSTANCE,)@ -> dcipher.init(Cipher.DECRYPT_MODE,key,)@ -> dec=new sun.misc.BASE64Decoder().decodeBuffer(str,)@ -> utf8=dcipher.doFinal(dec,)@ -> result=new String(utf8,"UTF8",)@ } CATCH { }
results[https://github.com/spontecorp/ferretotalweb/blob/c843b389cc311bf957390576270a04c26535e735/ferreasesorweb/src/java/com/spontecorp/ferreasesor/security/Cifrador.java][decrypt] = -> TRY { -> dcipher=Cipher.getInstance(CIPHER_INSTANCE,)@ -> dcipher.init(Cipher.DECRYPT_MODE,key,)@ -> dec=new sun.misc.BASE64Decoder().decodeBuffer(str,)@ -> utf8=dcipher.doFinal(dec,)@ -> result=new String(utf8,"UTF8",)@ } CATCH { }
results[https://github.com/spontecorp/ferretotalserver/blob/755b75a208d17902ec196cb7e4ada088d82a3575/ferreasesorweb/src/java/com/spontecorp/ferreasesor/security/Cifrador.java][decrypt] = -> TRY { -> dcipher=Cipher.getInstance(CIPHER_INSTANCE,)@ -> dcipher.init(Cipher.DECRYPT_MODE,key,)@ -> dec=new sun.misc.BASE64Decoder().decodeBuffer(str,)@ -> utf8=dcipher.doFinal(dec,)@ -> result=new String(utf8,"UTF8",)@ } CATCH { }
results[https://github.com/WindowsAzure/azure-sdk-for-java/blob/0a786dd9c65f7114ef33b088f6bcdd6bf022ede8/microsoft-azure-api/src/main/java/com/microsoft/windowsazure/services/blob/implementation/HmacSHA256Sign.java][sign] = -> TRY { -> hmac=Mac.getInstance("hmacSHA256",)@ -> hmac.init(new SecretKeySpec(Base64.decode(accessKey,),"hmacSHA256",),)@ -> digest=hmac.doFinal(stringToSign.getBytes("UTF-8",),)@ -> return new String(Base64.encode(digest,),"UTF-8",)@ } CATCH { }
results[https://github.com/heckendorfc/plm/blob/ae57dfcb87d871badc88ea08bff48349b8ef3ddf/services/src/edu/cs673/plm/SessionToken.java][<init>] = -> TRY { -> sk=new SecKey()@ -> c=Cipher.getInstance("AES",)@ -> k=(SecretKeySpec) sk.getKey()@ -> c.init(Cipher.DECRYPT_MODE,k,)@ -> tokstr=new String(c.doFinal(hexStringToByteArray(token,),),"UTF-8",)@ -> parseToken(tokstr,)@ } CATCH { }
results[https://github.com/sdorra/scm-manager/blob/b60a5e948e26703307f2b595bbfc5586c656e5e8/scm-core/src/main/java/sonia/scm/security/DefaultCipherHandler.java][decode] = -> TRY { -> encodedInput=Base64.decode(value,)@ -> salt= new byte[]@ -> encoded= new byte[]@ -> System.arraycopy(encodedInput,0,salt,0,SALT_LENGTH,)@ -> System.arraycopy(encodedInput,SALT_LENGTH,encoded,0,encodedInput.length-SALT_LENGTH,)@ -> iv=new IvParameterSpec(salt,)@ -> secretKey=buildSecretKey(plainKey,)@ -> cipher=javax.crypto.Cipher.getInstance(CIPHER_TYPE,)@ -> cipher.init(javax.crypto.Cipher.DECRYPT_MODE,secretKey,iv,)@ -> decoded=cipher.doFinal(encoded,)@ -> result=new String(decoded,ENCODING,)@ } CATCH { }
results[https://github.com/CommercialWebDevelopment/pyramid/blob/0dd55d499395d5359b7d37785e2eb46e60990203/src/main/java/com/financial/pyramid/service/impl/PayUServiceImpl.java][hmacMD5] = -> TRY { -> keyBytes=key.getBytes()@ -> signingKey=new SecretKeySpec(keyBytes,"HmacMD5",)@ -> mac=Mac.getInstance("HmacMD5",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(value.getBytes(),)@ -> hexBytes=new Hex().encode(rawHmac,)@ -> return new String(hexBytes,"UTF-8",)@ } CATCH { }
results[https://github.com/idiginfo/citagora/blob/f31747ed8f9d7c2b1e7c6a99540cdc57428bca3f/controllers/src/main/java/org/idiginfo/docsvc/controller/rest/SecretRequest.java][generateSignature] = -> TRY { -> keyBytes=key.getBytes()@ -> signingKey=new SecretKeySpec(keyBytes,"HmacSHA1",)@ -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(value.getBytes(),)@ -> hexBytes=new Hex().encode(rawHmac,)@ -> return new String(hexBytes,"UTF-8",)@ } CATCH { }
results[https://github.com/daklaus/DistSys/blob/5763ffae7f73d0dae105de5346863ee3a93a0815/dslab3/src/at/ac/tuwien/dslab3/service/net/RSATCPClientDecorator.java][send] = -> TRY { -> cipher=Cipher.getInstance("RSA/NONE/OAEPWithSHA256AndMGF1Padding",)@ -> cipher.init(Cipher.ENCRYPT_MODE,this.publicKey,)@ -> encryptedMessage=cipher.doFinal(message.getBytes(Charset.forName("UTF-16",),),)@ -> encodedMessage=Base64.encode(encryptedMessage,)@ -> super.send(new String(encodedMessage,Charset.forName("UTF-16",),),)@ } CATCH { }
