results[https://github.com/fywb251/bsl_impc_android/blob/0befac4975509a2a4851c92b36a553b36765732a/cube-android/src/com/foreveross/chameleon/util/SymEncrypt.java][decrypt] = -> TRY { -> key=getKey(strKey.getBytes(),"DES",)@ -> c=Cipher.getInstance("DES",)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> clearByte=c.doFinal(code,)@ -> r=new String(clearByte,)@ } CATCH { }
results[https://github.com/playframework/play1/blob/fd24bab5eecee77edfd19d84919c2d5cd4c03cf9/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
results[https://github.com/moriyoshi/play-forked/blob/161bce95c32b14e6dc0cb9df8beaed792c3c4463/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
results[https://github.com/LSTS/neptus/blob/4d58343c2f0b754328d5bc72f465001d443238c5/src/pt/lsts/neptus/test/TestBlowfish.java][encryptBlowfish] = -> TRY { -> key=new SecretKeySpec(strkey.getBytes(),"Blowfish",)@ -> cipher=Cipher.getInstance("Blowfish",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(to_encrypt.getBytes(),),)@ } CATCH { }
results[https://github.com/deanhiller/databus/blob/2fa5fe9142bb20f5d56d2175264ebb0ae1a52314/webapp/play-1.2.5/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
results[https://github.com/vincentjanv/groepI/blob/643bbc2aa06b98b4698ad8f2158d5d431a0a49cd/src/main/java/be/kdg/groepi/utils/VuforiaSignatureUtil.java][calculateRFC2104HMAC] = -> TRY { -> signingKey=new SecretKeySpec(key.getBytes(),"HmacSHA1",)@ -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,false,),)@ } CATCH { }
results[https://github.com/benschi11/Alt_F4/blob/db8a036f89847dc74fc3f5737362cab51ad8b871/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
results[https://github.com/deanhiller/databus/blob/fc807cb1e7218caf2b8959baa287597943ec1357/webapp/play1.3.x/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
results[https://github.com/ForgeEssentials/ForgeEssentialsMain/blob/836f7cca27e9819615377c345321deafe00e0fc7/src/main/java/com/forgeessentials/snooper/Security.java][decrypt] = -> TRY { -> skey=new SecretKeySpec(key.getBytes(),"AES",)@ -> cipher=Cipher.getInstance("AES/ECB/PKCS5Padding",)@ -> cipher.init(Cipher.DECRYPT_MODE,skey,)@ -> output=cipher.doFinal(Base64.decode(input,),)@ -> return new String(output,)@ } CATCH { }
results[https://github.com/cmccabe/hadoop/blob/2c56fe972bbc25111534ab1b3817234a3b4a981c/src/contrib/dynamic-scheduler/src/java/org/apache/hadoop/mapred/PriorityAuthorization.java][hmac] = -> TRY { -> signingKey=new SecretKeySpec(key.getBytes(),HMAC_SHA1_ALGORITHM,)@ -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH { }
