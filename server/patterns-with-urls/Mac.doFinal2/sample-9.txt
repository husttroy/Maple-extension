results[https://github.com/eea/eea.eunis/blob/027e417c38a84aad3f8a5793fa47b3628a711272/src/main/java/ro/finsiel/eunis/auth/EncryptPassword.java][decryptString] = -> TRY { -> cipher=javax.crypto.Cipher.getInstance(this.algorithm,)@ -> cipher.init(javax.crypto.Cipher.DECRYPT_MODE,this.keySpec,)@ -> return new String(cipher.doFinal(b,),)@ } CATCH { }
results[https://github.com/eea/eea.eunis/blob/2445b5bda570a57e2a3f01ee100049256704109a/web/src/main/java/ro/finsiel/eunis/auth/EncryptPassword.java][decryptString] = -> TRY { -> cipher=javax.crypto.Cipher.getInstance(this.algorithm,)@ -> cipher.init(javax.crypto.Cipher.DECRYPT_MODE,this.keySpec,)@ -> return new String(cipher.doFinal(b,),)@ } CATCH { }
results[https://github.com/mindstream99/Cornerstone/blob/182a88f544a05a55cf7112c09b295879704ee9ca/CornerstoneCommon/src/main/java/com/paxxis/cornerstone/encryption/TripleDESEncryptionHandler.java][decrypt] = -> TRY { -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> encryptedText=Base64.decodeBase64(encryptedString,)@ -> plainText=cipher.doFinal(encryptedText,)@ -> decryptedText=new String(plainText,)@ } CATCH { }
results[https://github.com/eea/eea.eunis/blob/2e1c60449a5b59e5c65c3e44802cc0ab335a33b6/src/classes/ro/finsiel/eunis/auth/EncryptPassword.java][decryptString] = -> TRY { -> cipher=javax.crypto.Cipher.getInstance(this.algorithm,)@ -> cipher.init(javax.crypto.Cipher.DECRYPT_MODE,this.keySpec,)@ -> return new String(cipher.doFinal(b,),)@ } CATCH { }
results[https://github.com/ccavanaugh/jgnash/blob/8ddff845e7758579eaf206d224eb8080ec5ad0a1/jgnash-core/src/main/java/jgnash/util/EncryptionManager.java][decrypt] = -> TRY { -> cipher=Cipher.getInstance(ENCRYPTION_ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> return new String(cipher.doFinal(Base64.decodeBase64(encrypted,),),)@ } CATCH { }
results[https://github.com/onsip/jitsi/blob/0dfbcdbbed9cc45546ecc1644270c0c169a97b69/src/net/java/sip/communicator/impl/credentialsstorage/AESCrypto.java][encrypt] = -> TRY { -> encryptCipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(Base64.encode(encryptCipher.doFinal(plaintext.getBytes("UTF-8",),),),)@ } CATCH { }
results[https://github.com/dwinslow23/dixon/blob/bd782a3e0df4059268b1da08e3f8bd592ce10146/src/main/java/com/dixon/security/SimpleCipher.java][encrypt] = -> TRY { -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> cipherText=cipher.doFinal(plainText.getBytes(),)@ -> enc=new String(coder.encode(cipherText,),)@ } CATCH { }
results[https://github.com/blueantelope/-Antelope.CI/blob/a0ad0c7bc93173746684904d52ba303f00c75f63/com.antelope.ci.bus/com.antelope.ci.bus.common/src/main/java/com/antelope/ci/bus/common/EncryptUtil.java][decryptDES] = -> TRY { -> key=buildDESKey(seed,)@ -> cipher=Cipher.getInstance(ALGORITHM_DES,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> return new String(cipher.doFinal(decoder,),)@ } CATCH { }
results[https://github.com/apache/juddi/blob/c8ed03d4f04e3506ddd449936abe924cba956df3/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/TripleDESCrytor.java][encrypt] = -> TRY { -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> plainText=clear.getBytes(UNICODE_FORMAT,)@ -> encryptedText=cipher.doFinal(plainText,)@ -> encryptedString=new String(Base64.encodeBase64(encryptedText,),)@ } CATCH { }
results[https://github.com/apache/juddi/blob/0f9a14df34b5b4c8537041af70b4338f75bfc9ba/juddi-examples/uddi-createbulk/src/uddi/createbulk/DES.java][encrypt] = -> TRY { -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> plainText=clear.getBytes(UNICODE_FORMAT,)@ -> encryptedText=cipher.doFinal(plainText,)@ -> encryptedString=new String(Base64.encodeBase64(encryptedText,),)@ } CATCH { }
