results[https://github.com/twhume/NearMe/blob/704695fa25fe8b22d0fd6b0fc5578137cfbf1d8d/AddressBookRipper/src/org/tomhume/ase/ripper/AddressBookRipperActivity.java][sha1] = -> key=new SecretKeySpec(keyString.getBytes("UTF-8",),"HmacSHA1",)@ -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(key,)@ -> bytes=mac.doFinal(s.getBytes("UTF-8",),)@ -> return new String(Base64.encode(bytes,0,),)@
results[https://github.com/MyMalcom/malcom-lib-android/blob/a73e046d9b3c115ee21aaa078e5a96632af954ec/src/main/java/com/malcom/library/android/utils/encoding/DigestUtils.java][sha1] = -> key=new SecretKeySpec(keyString.getBytes("UTF-8",),"HmacSHA1",)@ -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(key,)@ -> bytes=mac.doFinal(s.getBytes("UTF-8",),)@ -> return new String(Base64.encode(bytes,),)@
results[https://github.com/pankajkainthla/phonegap-plugins-all/blob/ce1521b6e9fe3ff9d7e22d120e504f2b7146110b/Android/Hmac/HmacPlugin.java][hasher] = -> key=new SecretKeySpec(hashKey.getBytes("UTF-8",),keyGenerator,)@ -> hmac=Mac.getInstance(keyGenerator,)@ -> hmac.init(key,)@ -> bytes=hmac.doFinal(stringToHash.getBytes("UTF-8",),)@ -> return new String(Base64.encode(bytes,Base64.NO_WRAP,),)@
results[https://github.com/twhume/NearMe/blob/42a056daf10e2ab39fa481231014e46cdd284822/AdvSoftEngApp1/src/com/advsofteng/app1/AddressBookRipperActivity.java][sha1] = -> key=new SecretKeySpec(keyString.getBytes("UTF-8",),"HmacSHA1",)@ -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(key,)@ -> bytes=mac.doFinal(s.getBytes("UTF-8",),)@ -> return new String(Base64.encode(bytes,0,),)@
results[https://github.com/craigbooker/mdv-projects/blob/c972357aa0d13b091753c7d9d7ae8f669c25ce3b/pgplugins/Android/Hmac/HmacPlugin.java][hasher] = -> key=new SecretKeySpec(hashKey.getBytes("UTF-8",),keyGenerator,)@ -> hmac=Mac.getInstance(keyGenerator,)@ -> hmac.init(key,)@ -> bytes=hmac.doFinal(stringToHash.getBytes("UTF-8",),)@ -> return new String(Base64.encode(bytes,Base64.NO_WRAP,),)@
results[https://github.com/bogavante/purplecabbage-phonegap-plugins/blob/501010ec5f15f0c2b59f7572c9bf1d43a9025d72/Android/Hmac/HmacPlugin.java][hasher] = -> key=new SecretKeySpec(hashKey.getBytes("UTF-8",),keyGenerator,)@ -> hmac=Mac.getInstance(keyGenerator,)@ -> hmac.init(key,)@ -> bytes=hmac.doFinal(stringToHash.getBytes("UTF-8",),)@ -> return new String(Base64.encode(bytes,Base64.NO_WRAP,),)@
results[https://github.com/societies/SOCIETIES-Platform/blob/19704c7e2f8322c2626433b794fde7dcc678e3b9/platform-infrastructure/sns/connectors/FoursquareConnector/src/main/java/org/scribe/services/HMACSha1SignatureService.java][doSign] = -> key=new SecretKeySpec(keyString.getBytes(UTF8,),HMAC_SHA1,)@ -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(key,)@ -> bytes=mac.doFinal(toSign.getBytes(UTF8,),)@ -> return new String(Base64.encodeBase64(bytes,),).replace(CARRIAGE_RETURN,EMPTY_STRING,)@
results[https://github.com/societies/SOCIETIES-Platform/blob/5d9410190157384de1049bef62f5f52eaf2b3b9f/platform-infrastructure/sns/AndroidSNApp/src/org/scribe/services/HMACSha1SignatureService.java][doSign] = -> key=new SecretKeySpec(keyString.getBytes(UTF8,),HMAC_SHA1,)@ -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(key,)@ -> bytes=mac.doFinal(toSign.getBytes(UTF8,),)@ -> return new String(Base64.encodeBase64(bytes,),).replace(CARRIAGE_RETURN,EMPTY_STRING,)@
results[https://github.com/amyfan/Coacheller/blob/9cdb9099781dcb6969a9c21db5ce55de8dbce6e3/Lollapaloozer-Android/src/org/scribe/services/HMACSha1SignatureService.java][doSign] = -> key=new SecretKeySpec(keyString.getBytes(UTF8,),HMAC_SHA1,)@ -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(key,)@ -> bytes=mac.doFinal(toSign.getBytes(UTF8,),)@ -> return new String(Base64.encodeBase64(bytes,),).replace(CARRIAGE_RETURN,EMPTY_STRING,)@
results[https://github.com/WindowsAzure-Toolkits/wa-toolkit-android/blob/2be003e83af412343e9bf83efcb90377211a7779/library/src/com/windowsazure/samples/internal/authentication/SharedKey.java][signDataWithKey] = -> accessKeyBytes=Base64.decode(key.getBytes(),)@ -> requestStringBytes=data.getBytes("UTF8",)@ -> secret=new SecretKeySpec(accessKeyBytes,"HMACSHA256",)@ -> hMac=Mac.getInstance("HMACSHA256",)@ -> hMac.init(secret,)@ -> sig=hMac.doFinal(requestStringBytes,)@ -> encodedSig=new String(Base64.encode(sig,),)@
