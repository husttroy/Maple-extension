results[https://github.com/matthewmccullough/encryption-jvm-bootcamp/blob/af425a086d81b160ebda5aca1636f2be8a1e2286/keystore-symmetric-encrypt/src/main/java/com/ambientideas/SymmetricEncryptAES.java][decrypt] = -> aesCipher.init(Cipher.DECRYPT_MODE,aesKey,)@ -> decryptedBytes=aesCipher.doFinal(encryptedBytes,)@ -> decryptedText=new String(decryptedBytes,"UTF8",)@ -> System.out.println("Decrypted text: "+decryptedText,)@
results[https://github.com/interdroid/interdroid-vdb/blob/a18ee7df6405ed94721b33bce0c5d7a166cb2bda/src/interdroid/util/CryptoUtil.java][encrypt] = -> cipher=Cipher.getInstance(DEFAULT_CYPHER,)@ -> plainText=plainTextString.getBytes(DEFAULT_ENCODING,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(plainText,),DEFAULT_ENCODING,)@
results[https://github.com/matthewmccullough/encryption-jvm-bootcamp/blob/cb28c6f16aaa2b43999c52d0c24e44f3ed672d1a/jce-keystore-symmetric-encrypt/src/test/java/com/ambientideas/TestSymmetricEncryptAESFromKeystore.java][decrypt] = -> aesCipher.init(Cipher.DECRYPT_MODE,aesKey,)@ -> encryptedBytes=Base64.decodeBase64(encryptedString,)@ -> decryptedBytes=aesCipher.doFinal(encryptedBytes,)@ -> decryptedText=new String(decryptedBytes,"UTF8",)@ -> System.out.println("Decrypted text: "+decryptedText,)@
results[https://github.com/projectdanube/xdi2/blob/37368eaaa68a59f32a201c96286067363d2665d5/messaging/src/main/java/xdi2/messaging/target/interceptor/impl/encryption/StaticLiteralCryptoService.java][decryptLiteralDataString] = -> cipher=Cipher.getInstance(this.getTransformation(),)@ -> cipher.init(Cipher.DECRYPT_MODE,this.secretKey,)@ -> literalDataBytes=cipher.doFinal(Base64.decodeBase64(encryptedLiteralDataString,),)@ -> literalDataString=new String(literalDataBytes,"UTF-8",)@
results[https://github.com/interdroid/interdroid-vdb/blob/a18ee7df6405ed94721b33bce0c5d7a166cb2bda/src/interdroid/util/CryptoUtil.java][decrypt] = -> cipher=Cipher.getInstance(DEFAULT_CYPHER_SPEC,)@ -> plainText=plainTextString.getBytes(DEFAULT_ENCODING,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> return new String(cipher.doFinal(plainText,),DEFAULT_ENCODING,)@
results[https://github.com/jakenjarvis/ChatLoggerPlus/blob/1340f488ef85bb4f7aab0f64f5928dbbbb2ac9b5/src/com/tojc/minecraft/mod/Crypto/SimpleEncryption.java][decrypt] = -> spec=new SecretKeySpec(key.getBytes("UTF-8",),"Blowfish",)@ -> cipher=Cipher.getInstance("Blowfish",)@ -> cipher.init(Cipher.DECRYPT_MODE,spec,)@ -> return new String(cipher.doFinal(bytes,),"UTF-8",)@
results[https://github.com/membrane/service-proxy/blob/1503c40d32a0b8e894dc2448cc6ae907d285c3e9/com.predic8.membrane.core/core/src/main/java/com/predic8/membrane/balancer/client/LBNotificationClient.java][getEncryptedQueryString] = -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.ENCRYPT_MODE,skeySpec,)@ -> return new String(Base64.encodeBase64(cipher.doFinal(getQueryString().getBytes("UTF-8",),),),"UTF-8",)@
results[https://github.com/AbinashBishoyi/FreeRapid-Plugins/blob/e576758041bfb787673311549568c1db119d6ffd/src/saavn/cz/vity/freerapid/plugins/services/saavn/SaavnFileRunner.java][decryptPlay] = -> cipher=Cipher.getInstance("DES/ECB/PKCS5Padding",)@ -> cipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(SECRET_KEY,"DES",),)@ -> return new String(cipher.doFinal(Base64.decodeBase64(str,),),"UTF-8",)@
results[https://github.com/ixcode/platform/blob/bcb9d2fd8cc5e6a065db1ddd8d7a22f7e4658efa/core/src/test/java/ixcode/platform/cryptography/CryptographyTest.java][can_encrypt_a_value_one_way] = -> keyGenerator=KeyGenerator.getInstance("AES",)@ -> key=keyGenerator.generateKey()@ -> aes=Cipher.getInstance("AES",)@ -> aes.init(Cipher.ENCRYPT_MODE,key,)@ -> encryptedBytes=aes.doFinal(mySecret.getBytes("UTF8",),)@ -> encrypted=new String(encryptedBytes,"UTF8",)@
results[https://github.com/ixcode/platform/blob/6d72e6b6b4700a06cc29942d2559ca31b1654c3b/core/src/test/unit/java/ixcode/platform/cryptography/CryptographyTest.java][can_encrypt_a_value_one_way] = -> keyGenerator=KeyGenerator.getInstance("AES",)@ -> key=keyGenerator.generateKey()@ -> aes=Cipher.getInstance("AES",)@ -> aes.init(Cipher.ENCRYPT_MODE,key,)@ -> encryptedBytes=aes.doFinal(mySecret.getBytes("UTF8",),)@ -> encrypted=new String(encryptedBytes,"UTF8",)@
