results[https://github.com/anycook/anycook-api/blob/f58b56099cf33b039e83b5d659b6bac3f0a69819/src/main/java/de/anycook/social/facebook/FacebookHandler.java][verifySigSHA256] = -> TRY { -> mac=Mac.getInstance("HmacSHA256",)@ -> secret=new SecretKeySpec(APP_SECRET.getBytes(),"HmacSHA256",)@ -> mac.init(secret,)@ -> digest=mac.doFinal(payload.getBytes(),)@ -> expected_sig=new String(digest,)@ -> IF { -> return true@sig.equals(expected_sig,) } } CATCH { }
results[https://github.com/photon-infotech/framework/blob/81e8decf92fc6287515726d8b05635a9a3cda024/phresco-framework-impl/src/main/java/com/photon/phresco/framework/impl/ConfigProcessor.java][encyPassword] = -> TRY { -> cipher=Cipher.getInstance(AES_ALGO,)@ -> cipher.init(Cipher.ENCRYPT_MODE,getAes128Key(CI_SECRET_KEY,),)@ -> encString=new String(Base64.encode(cipher.doFinal(password+CI_ENCRYPT_MAGIC.getBytes(CI_UTF8,),),),)@ } CATCH { -> IF { } }
results[https://github.com/photon-infotech/framework/blob/74d5248831466f1fc3076fee7e4dac0f87d51e33/phresco-framework-impl/src/main/java/com/photon/phresco/framework/impl/SvnProcessor.java][decyPassword] = -> TRY { -> cipher=Cipher.getInstance(AES_ALGO,)@ -> cipher.init(Cipher.DECRYPT_MODE,getAes128Key(CI_SECRET_KEY,),)@ -> decode=Base64.decode(encryptedText.toCharArray(),)@ -> plainText=new String(cipher.doFinal(decode,),)@ -> plainText=plainText.replace(CI_ENCRYPT_MAGIC,"",)@ } CATCH { -> IF { } }
results[https://github.com/anycook/anycook-core/blob/4471f47fcd1ad310a4ae305a09a2f4cfa52c379e/src/main/java/de/anycook/social/facebook/FacebookHandler.java][verifySigSHA256] = -> TRY { -> mac=Mac.getInstance("HmacSHA256",)@ -> secret=new SecretKeySpec(APP_SECRET.getBytes(),"HmacSHA256",)@ -> mac.init(secret,)@ -> digest=mac.doFinal(payload.getBytes(),)@ -> expected_sig=new String(digest,)@ -> IF { -> return true@sig.equals(expected_sig,) } } CATCH { }
results[https://github.com/snowfix/android_dalvik/blob/f6c387128427e121477c1b32ad35cdcaa5101ba3/libcore/crypto/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/func/MacThread.java][test] = -> LOOP { -> src1[i]=(byte) i@i<size -> src2[i]=(byte) i@i<size -> src3[i]=(byte) size-i-1@i<size } -> m=Mac.getInstance(algName,)@ -> b=(byte) 0(byte) 0(byte) 0(byte) 0(byte) 0@ -> sks=new SecretKeySpec(b,"SHA1",)@ -> m.init(sks,)@ -> res=m.doFinal(src1,)@ -> sign1=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src2,)@ -> sign2=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src3,)@ -> sign3=new String(res,)@ -> IF { -> throw new Exception("Signature is not correct for algorithm "+algName,)@sign1.compareTo(sign2,)!=0||sign1.compareTo(sign3,)==0||sign2.compareTo(sign3,)==0 }
results[https://github.com/rmcc/android_dalvik/blob/f6c387128427e121477c1b32ad35cdcaa5101ba3/libcore/crypto/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/func/MacThread.java][test] = -> LOOP { -> src1[i]=(byte) i@i<size -> src2[i]=(byte) i@i<size -> src3[i]=(byte) size-i-1@i<size } -> m=Mac.getInstance(algName,)@ -> b=(byte) 0(byte) 0(byte) 0(byte) 0(byte) 0@ -> sks=new SecretKeySpec(b,"SHA1",)@ -> m.init(sks,)@ -> res=m.doFinal(src1,)@ -> sign1=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src2,)@ -> sign2=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src3,)@ -> sign3=new String(res,)@ -> IF { -> throw new Exception("Signature is not correct for algorithm "+algName,)@sign1.compareTo(sign2,)!=0||sign1.compareTo(sign3,)==0||sign2.compareTo(sign3,)==0 }
results[https://github.com/sdugit/libcore_7025/blob/0b26c7b2263a591b135e230231a331e3c0f123b8/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/func/MacThread.java][test] = -> LOOP { -> src1[i]=(byte) i@i<size -> src2[i]=(byte) i@i<size -> src3[i]=(byte) size-i-1@i<size } -> m=Mac.getInstance(algName,)@ -> b=(byte) 0(byte) 0(byte) 0(byte) 0(byte) 0@ -> sks=new SecretKeySpec(b,"SHA1",)@ -> m.init(sks,)@ -> res=m.doFinal(src1,)@ -> sign1=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src2,)@ -> sign2=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src3,)@ -> sign3=new String(res,)@ -> IF { -> throw new Exception("Signature is not correct for algorithm "+algName,)@sign1.compareTo(sign2,)!=0||sign1.compareTo(sign3,)==0||sign2.compareTo(sign3,)==0 }
results[https://github.com/anycook/anycook-core/blob/46e2432a9d4ed0796d6902d69bc7e1c8b7826b89/src/anycook/facebook/FacebookHandler.java][verifySigSHA256] = -> TRY { -> mac=Mac.getInstance("HmacSHA256",)@ -> secret=new SecretKeySpec(appsecret.getBytes(),"HmacSHA256",)@ -> mac.init(secret,)@ -> digest=mac.doFinal(payload.getBytes(),)@ -> expected_sig=new String(digest,)@ -> IF { -> return true@sig.equals(expected_sig,) } } CATCH { } CATCH { }
results[https://github.com/Slayjay78/android_libcore/blob/38fc00ddece5f7d8941fecb01c7bcc2b45208496/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/func/MacThread.java][test] = -> LOOP { -> src1[i]=(byte) i@i<size -> src2[i]=(byte) i@i<size -> src3[i]=(byte) size-i-1@i<size } -> m=Mac.getInstance(algName,)@ -> b=(byte) 0(byte) 0(byte) 0(byte) 0(byte) 0@ -> sks=new SecretKeySpec(b,"SHA1",)@ -> m.init(sks,)@ -> res=m.doFinal(src1,)@ -> sign1=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src2,)@ -> sign2=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src3,)@ -> sign3=new String(res,)@ -> IF { -> throw new Exception("Signature is not correct for algorithm "+algName,)@sign1.compareTo(sign2,)!=0||sign1.compareTo(sign3,)==0||sign2.compareTo(sign3,)==0 }
results[https://github.com/XYAOSP/libcore/blob/0b26c7b2263a591b135e230231a331e3c0f123b8/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/func/MacThread.java][test] = -> LOOP { -> src1[i]=(byte) i@i<size -> src2[i]=(byte) i@i<size -> src3[i]=(byte) size-i-1@i<size } -> m=Mac.getInstance(algName,)@ -> b=(byte) 0(byte) 0(byte) 0(byte) 0(byte) 0@ -> sks=new SecretKeySpec(b,"SHA1",)@ -> m.init(sks,)@ -> res=m.doFinal(src1,)@ -> sign1=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src2,)@ -> sign2=new String(res,)@ -> m.init(sks,)@ -> res=m.doFinal(src3,)@ -> sign3=new String(res,)@ -> IF { -> throw new Exception("Signature is not correct for algorithm "+algName,)@sign1.compareTo(sign2,)!=0||sign1.compareTo(sign3,)==0||sign2.compareTo(sign3,)==0 }
