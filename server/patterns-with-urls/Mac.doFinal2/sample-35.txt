results[https://github.com/Yserz/Auto-B-Day/blob/07341e476c2628a46ea7557bd2a5825b9f7bed77/Auto-B-Day-ejb/src/java/de/fhb/autobday/commons/CipherHelper.java][decipher] = -> k=new SecretKeySpec(key.getBytes(),"DES",)@ -> cipher=Cipher.getInstance("DES/ECB/PKCS5Padding",)@ -> cipher.init(Cipher.DECRYPT_MODE,k,)@ -> dec=new sun.misc.BASE64Decoder().decodeBuffer(raw,)@ -> unverschlusselt=cipher.doFinal(dec,)@ -> output=new String(unverschlusselt,)@
results[https://github.com/mayocat/mayocat-shop/blob/10102ac4708af0e95fae99ec16cab6ca5cf64035/platform/application/src/main/java/org/mayocat/context/AbstractScopeCookieContainerFilter.java][computeSignature] = -> securitySettings=Utils.getComponent(SecuritySettings.class,)@ -> signingKey=new SecretKeySpec(securitySettings.getSigningKey().getBytes(),HMAC_SHA256_ALGORITHM,)@ -> mac=Mac.getInstance(HMAC_SHA256_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(message.getBytes(Charsets.UTF_8,),)@ -> result=new String(Base64.encode(rawHmac,),)@
results[https://github.com/playframework/play1/blob/fd24bab5eecee77edfd19d84919c2d5cd4c03cf9/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
results[https://github.com/WindowsAzure-Toolkits/wa-toolkit-android/blob/2be003e83af412343e9bf83efcb90377211a7779/library/src/com/windowsazure/samples/internal/authentication/SharedKey.java][signDataWithKey] = -> accessKeyBytes=Base64.decode(key.getBytes(),)@ -> requestStringBytes=data.getBytes("UTF8",)@ -> secret=new SecretKeySpec(accessKeyBytes,"HMACSHA256",)@ -> hMac=Mac.getInstance("HMACSHA256",)@ -> hMac.init(secret,)@ -> sig=hMac.doFinal(requestStringBytes,)@ -> encodedSig=new String(Base64.encode(sig,),)@
results[https://github.com/moriyoshi/play-forked/blob/161bce95c32b14e6dc0cb9df8beaed792c3c4463/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
results[https://github.com/michel-kraemer/citeproc-java/blob/56819b8ad82ef3ee41eada5c2297085ab1b57275/src/main/java/de/undercouch/citeproc/tool/MendeleyCommand.java][readConsumer] = -> k=new SecretKeySpec("#x$gbf5zs%4QvzAx".getBytes(),"AES",)@ -> c=Cipher.getInstance("AES",)@ -> c.init(Cipher.DECRYPT_MODE,k,)@ -> arr=c.doFinal(arr,)@ -> arr=DatatypeConverter.parseBase64Binary(new String(arr,),)@ -> LOOP { -> result[0]+=(char) arr[i+31]@i<2 } -> LOOP { -> result[1]+=(char) arr[i+1857]@i<16 }
results[https://github.com/deanhiller/databus/blob/2fa5fe9142bb20f5d56d2175264ebb0ae1a52314/webapp/play-1.2.5/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
results[https://github.com/LSTS/neptus/blob/4d58343c2f0b754328d5bc72f465001d443238c5/src/pt/lsts/neptus/test/TestBlowfish.java][encryptBlowfish] = -> TRY { -> key=new SecretKeySpec(strkey.getBytes(),"Blowfish",)@ -> cipher=Cipher.getInstance("Blowfish",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(to_encrypt.getBytes(),),)@ } CATCH { }
results[https://github.com/digipost/android/blob/39d7d4ad4c7e820d6e2de0189c6abdd9878c7902/src/no/digipost/android/authentication/OAuth2.java][encryptHmacSHA256] = -> secretKey=new SecretKeySpec(Secret.CLIENT_SECRET.getBytes(),ApplicationConstants.HMACSHA256,)@ -> TRY { -> mac=Mac.getInstance(ApplicationConstants.HMACSHA256,)@ -> mac.init(secretKey,)@ } CATCH { } -> hmacData=mac.doFinal(data.getBytes(),)@ -> return new String(hmacData,)@
results[https://github.com/benschi11/Alt_F4/blob/db8a036f89847dc74fc3f5737362cab51ad8b871/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
