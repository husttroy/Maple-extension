results[https://github.com/Yserz/Auto-B-Day/blob/07341e476c2628a46ea7557bd2a5825b9f7bed77/Auto-B-Day-ejb/src/java/de/fhb/autobday/commons/CipherHelper.java][decipher] = -> k=new SecretKeySpec(key.getBytes(),"DES",)@ -> cipher=Cipher.getInstance("DES/ECB/PKCS5Padding",)@ -> cipher.init(Cipher.DECRYPT_MODE,k,)@ -> dec=new sun.misc.BASE64Decoder().decodeBuffer(raw,)@ -> unverschlusselt=cipher.doFinal(dec,)@ -> output=new String(unverschlusselt,)@
results[https://github.com/wadahiro/openidm/blob/78ae7aa58e59540df48586afa22796955f32d16a/openidm-crypto/src/main/java/org/forgerock/openidm/crypto/impl/Main.java][decrypt] = -> IF { -> s=s.substring(__CRYPT.length(),)@s.startsWith(__CRYPT,) } -> cipher=Cipher.getInstance(CRYPT_ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(NON_SECRET_KEY,CRYPT_ALGORITHM,),)@ -> return new String(cipher.doFinal(hexStringToByteArray(s,),),)@
results[https://github.com/AndrewChanChina/cmsserver/blob/fa4fa4341cd4ec52d6ccac646aadd0fd71087eab/src/com/smit/util/TripleDESHelper.java][ebcDecode] = -> TRY { -> keySpec=new SecretKeySpec(key.getBytes(),"TripleDES",)@ -> ci.init(Cipher.DECRYPT_MODE,keySpec,)@ -> s=dbs64.decodeBuffer(encodeText,)@ -> b=ci.doFinal(s,)@ -> str=new String(b,)@ } CATCH { }
results[https://github.com/ConductAS/openidm/blob/da59fcc674d46a66c184269f3c9ae73be2d2a119/openidm-crypto/src/main/java/org/forgerock/openidm/crypto/impl/Main.java][decrypt] = -> IF { -> s=s.substring(__CRYPT.length(),)@s.startsWith(__CRYPT,) } -> cipher=Cipher.getInstance(CRYPT_ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(NON_SECRET_KEY,CRYPT_ALGORITHM,),)@ -> return new String(cipher.doFinal(hexStringToByteArray(s,),),)@
results[https://github.com/blueantelope/-Antelope.CI/blob/a0ad0c7bc93173746684904d52ba303f00c75f63/com.antelope.ci.bus/com.antelope.ci.bus.common/src/main/java/com/antelope/ci/bus/common/EncryptUtil.java][decrypt3DES] = -> TRY { -> _3deskey=new SecretKeySpec(build3DesKey(seed,),ALGORITHM_3DES,)@ -> cipher=Cipher.getInstance(ALGORITHM_3DES,)@ -> cipher.init(Cipher.DECRYPT_MODE,_3deskey,)@ -> return new String(cipher.doFinal(decoder,),)@ } CATCH { }
results[https://github.com/zendtech/zendserver-sdk-java/blob/3b20cad3003d1e7a14d29e6b2208bb4b2b3a6e44/zendserver-sdk-java/org.zend.sdk/sdklib/org/zend/sdklib/internal/target/ZendTarget.java][decrypt] = -> TRY { -> c=Cipher.getInstance("AES",)@ -> k=new SecretKeySpec(getSeq(),"AES",)@ -> c.init(Cipher.DECRYPT_MODE,k,)@ -> return new String(c.doFinal(secretKey,),)@ } CATCH { }
results[https://github.com/INightmare/apache-isis/blob/38a411e4b7f554ea69bad911c33ccad42a96b987/framework/runtimes/dflt/objectstores/nosql/src/main/java/org/apache/isis/runtimes/dflt/objectstores/nosql/encryption/blowfish/DataEncryptionBlowfishAbstract.java][encrypt] = -> TRY { -> key=new SecretKeySpec(specKey,BLOWFISH,)@ -> cipher=Cipher.getInstance(BLOWFISH,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(plainText.getBytes(),),)@ } CATCH { }
results[https://github.com/playframework/play1/blob/fd24bab5eecee77edfd19d84919c2d5cd4c03cf9/framework/src/play/libs/Crypto.java][decryptAES] = -> TRY { -> raw=privateKey.getBytes()@ -> skeySpec=new SecretKeySpec(raw,"AES",)@ -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.DECRYPT_MODE,skeySpec,)@ -> return new String(cipher.doFinal(Codec.hexStringToByte(value,),),)@ } CATCH { }
results[https://github.com/INightmare/apache-isis/blob/38a411e4b7f554ea69bad911c33ccad42a96b987/framework/runtimes/dflt/objectstores/nosql/src/main/java/org/apache/isis/runtimes/dflt/objectstores/nosql/encryption/aes/DataEncryptionAes.java][encrypt] = -> TRY { -> key=new SecretKeySpec(specKey,AES,)@ -> cipher=Cipher.getInstance("AES/ECB/PKCS7Padding",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(plainText.getBytes(),),)@ } CATCH { }
results[https://github.com/LSTS/neptus/blob/4d58343c2f0b754328d5bc72f465001d443238c5/src/pt/lsts/neptus/test/TestBlowfish.java][encryptBlowfish] = -> TRY { -> key=new SecretKeySpec(strkey.getBytes(),"Blowfish",)@ -> cipher=Cipher.getInstance("Blowfish",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return new String(cipher.doFinal(to_encrypt.getBytes(),),)@ } CATCH { }
