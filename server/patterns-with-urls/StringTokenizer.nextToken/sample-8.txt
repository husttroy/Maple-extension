results[https://github.com/gosu-lang/gosu/blob/bf3213da1cb2bda14b57113d2dddf5fa39dbeb69/gosu-xml/src/main/java/gw/xml/date/AbstractXmlDateType.java][checkToken] = -> nextToken=st.nextToken()@ -> IF { -> throw ex@!(token.equals(nextToken,)) }
results[https://github.com/voberoi/jchord/blob/454d670dde4e31afc1fc8b11dfb3cdc63c10528b/libsrc/joeq/src/joeq/Class/jq_Type.java][read] = -> desc=st.nextToken()@ -> IF { -> return null@desc.equals("null",) } -> r=PrimordialClassLoader.loader.getOrCreateBSType(desc,)@!(desc.equals("null",))
results[https://github.com/warjan/tonic-chess/blob/c76815f784fab7d9a73df68aa8a1296c732e3cda/src/free/freechess/SeekInfoStruct.java][assertToken] = -> realToken=tokenizer.nextToken()@ -> IF { -> throw new IllegalArgumentException("Bad token \""+realToken+"\", expected \""+token+"\" instead",)@!(realToken.equals(token,)) }
results[https://github.com/apache/derby/blob/4bdaec2078aab325696701b34b59f2b5b19a5e1f/java/drda/org/apache/derby/impl/drda/DRDAStatement.java][isCallableSQL] = -> tokenizer=new java.util.StringTokenizer(sql,"\t\n\r\f=? (",)@ -> firstToken=tokenizer.nextToken()@ -> IF { -> return true@StringUtil.SQLEqualsIgnoreCase(firstToken,"call",) }
results[https://github.com/eclipse/webtools.jsf/blob/d3b61b961c31c35705369e77ca85242334fc4d74/jsf/plugins/org.eclipse.jst.jsf.common/src/org/eclipse/jst/jsf/common/metadata/internal/MetaDataLocatorFactory.java][locatorIsForProject] = -> t=new StringTokenizer(key,":",)@ -> contextId=t.nextToken()@ -> IF { -> return true@contextId.equals(projectName,) }
results[https://github.com/warjan/tonic-chess/blob/c76815f784fab7d9a73df68aa8a1296c732e3cda/src/free/freechess/GameInfoStruct.java][assertToken] = -> realToken=tokenizer.nextToken()@ -> IF { -> throw new IllegalArgumentException("Bad token \""+realToken+"\", expected \""+token+"\" instead",)@!(realToken.equals(token,)) }
results[https://github.com/netspective/sparx-2001/blob/b68c436caaaabcb2e8a6e98f3d2d798d4eccdf2b/Framework/java/com/xaf/db/SchemaDocument.java][<init>] = -> st=new StringTokenizer(ref,".",)@ -> tableName=st.nextToken()@ -> IF { -> columnName=st.nextToken()@st.hasMoreTokens() }
results[https://github.com/NCIP/catissue-advanced-query/blob/51c2195fafb5fdf2e526e189c84219f3fcc87994/software/AdvancedQuery/src/main/java/edu/wustl/query/bizlogic/CreateQueryObjectBizLogic.java][populateArrayForBetween] = -> attrParams[1]=tokenizer.nextToken()@ -> IF { -> attrParams[AQConstants.INDEX_PARAM_TWO]=tokenizer.nextToken()@ }
results[https://github.com/NCIP/catissue-advanced-query/blob/801aa19cd9d04843f08487532478e5cdcf35b59e/software/ADVANCED_QUERY_FOR_PCATISSUE_WITH_NEW_CP_4MAY/WEB-INF/src/edu/wustl/query/bizlogic/CreateQueryObjectBizLogic.java][populateArrayForBetween] = -> attrParams[1]=tokenizer.nextToken()@ -> IF { -> attrParams[AQConstants.INDEX_PARAM_TWO]=tokenizer.nextToken()@ }
results[https://github.com/allardhoeve/pcgen-multiline-objects/blob/62294839b1954659200382090e58f281111d3d5c/pcgen/code/src/java/plugin/exporttokens/ExpToken.java][getToken] = -> aTok=new StringTokenizer(tokenSource,".",)@ -> aTok.nextToken()@ -> IF { -> token=aTok.nextToken()@aTok.hasMoreTokens() }
