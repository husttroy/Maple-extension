results[https://github.com/molgenis/molgenis_apps-legacy/blob/2b396fcba67293e06043f3e8e12474ea11b1e5b1/apps/designgg/org/molgenis/designgg/Utils.java][setFile][1] = -> TRY {  -> fc=fos.getChannel()@ -> bb=ByteBuffer.wrap(fileContent,)@ -> fc.write(bb,)@ } CATCH(Exception) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/UseCharsets.java][main][1] = -> TRY {  -> outc=outf.getChannel()@ -> outputData=encoder.encode(cb,)@ -> outc.write(outputData,)@ } CATCH(Exception) {}
results[https://github.com/zhuowei/MCPELauncher/blob/52b0d745b45573a4050c334f6e51a074cd2fa620/src/net/zhuoweizhang/mcpelauncher/NerdyStuffActivity.java][dumpLib][1] = -> TRY { -> channel=os.getChannel()@ -> channel.write(com.mojang.minecraftpe.MainActivity.minecraftLibBuffer,)@ -> channel.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/bcdev/beam-globalbedo/blob/75e85c525bc3d66cb8098cdf5540293496948a03/beam-globalbedo-albedo-inversion/src/test/java/org/esa/beam/globalbedo/inversion/util/IOTest.java][testWriteFloatArray1][1] = -> TRY {  -> bb=ByteBuffer.allocateDirect(dim1*dim2*4,)@ -> floatBuffer=bb.asFloatBuffer()@ -> ch=file_output.getChannel()@ -> ch.write(bb,)@ -> ch.close()@ } CATCH(Exception) {}
results[https://github.com/ewcmsfree/ewcms/blob/2ef6f402907978c26e6faae6b913a95f99a5c036/src/main/java/com/ewcms/plugin/crawler/generate/util/IO.java][writeBytesToFile][2] = -> TRY { -> fc=new FileOutputStream(destination,).getChannel()@ -> fc.write(ByteBuffer.wrap(bytes,),)@ -> fc.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/sashakh/waze/blob/34ea3e823616a5ca237ff43ffdf5f7caa29c06ff/src/android/java/src/com/waze/FreeMapCameraPreView.java][SaveToFile][1] = -> TRY { -> fileChannel=fileOS.getChannel()@!(mBufOS.size()<=0) -> fileChannel.write(ByteBuffer.wrap(mBufOS.toByteArray(),),)@!(mBufOS.size()<=0) } CATCH(Exception) { -> WazeLog.e("Error in writing the file to the disk. ",ex,)@!(mBufOS.size()<=0) -> ex.printStackTrace()@!(mBufOS.size()<=0) }
results[https://github.com/buzheng/buzheng-study-java/blob/806c68192742caab7d45b6c523cfbe492b123f63/src/main/java/org/buzheng/study/nio/WriteToFile.java][main][1] = -> TRY {  -> channel=fos.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> buffer.put(message.getBytes(),)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/nroduit/Weasis/blob/189d73780139d9bdbda027a2e096f3655c250c68/weasis-dicom/weasis-dicom-viewer2d/src/main/java/org/weasis/dicom/viewer2d/mpr/SeriesBuilder.java][writToFile][1] = -> TRY { -> byteBuffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> out=os.getChannel()@ -> out.write(byteBuffer,)@ } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> FileUtil.safeClose(os,)@ }
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/WriteSomeBytes.java][main][1] = -> TRY {  -> fc=fout.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.put(message[i],)@i<message.length } -> buffer.flip()@ -> fc.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/taktod/JCaster/blob/80e1b292bcfe7fd113bddf232a8f7bc955b2a5cf/FlvSavePlugin/src/main/java/com/ttProject/jcaster/flvsave/core/FlvSaver.java][<init>][1] = -> TRY {  -> channel=new FileOutputStream(target,).getChannel()@ -> header=new FlvHeader()@ -> header.setAudioFlg(true,)@ -> header.setVideoFlg(true,)@ -> channel.write(header.getBuffer(),)@ } CATCH(Exception) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/FastCopyFile.java][main][1] = -> TRY {  -> fcout=fout.getChannel()@ -> buffer=ByteBuffer.allocateDirect(1024,)@ -> LOOP { -> buffer.clear()@ -> r=fcin.read(buffer,)@ -> buffer.flip()@ -> fcout.write(buffer,)@ } } CATCH(Exception) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/CopyFile.java][main][1] = -> TRY {  -> fcout=fout.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.clear()@ -> r=fcin.read(buffer,)@ -> buffer.flip()@ -> fcout.write(buffer,)@ } } CATCH(Exception) {}
results[https://github.com/zhongl/iPage/blob/0a0c634c5b48191dcc2766b3366aaa556ce888d3/src/test/java/com/github/zhongl/nio/ForceBenchmark.java][forceChannelOnce][1] = -> TRY {  -> channel=new FileOutputStream(file,).getChannel()@ -> LOOP { -> channel.write(ByteBuffer.wrap( new byte[],),)@ } -> channel.force(false,)@ -> channel.close()@ } CATCH(Exception) {}
results[https://github.com/RamesesDev/osiris2/blob/ee716ae432471d376fe6a7a2104703a8f0c83fe1/labs/rameses-scheduling/test/test/TestFile.java][testHello][1] = -> TRY {  -> buffer=ByteBuffer.allocate(100,)@ -> buffer.put(data,)@ -> buffer.flip()@ -> writeChannel=fos.getChannel()@ -> writeChannel.write(buffer,)@ -> System.out.println(writeChannel.position(),)@ -> writeChannel.close()@ } CATCH(Exception) {}
results[https://github.com/caosd/AdPlatform/blob/c63439a8b6385392b68473be09f1d82df1b3557c/project/portal/src/com/stomato/utils/FileUtils.java][writeBytes2File][1] = -> TRY {  -> targetChannel=new FileOutputStream(out,).getChannel()@ -> TRY { -> targetChannel.write(bb,)@ } FINALLY { -> targetChannel.close()@ } } CATCH(Exception) {}
results[https://github.com/exoplatform/aio-portal/blob/a01c7972884aa573f857089dd4597800aed7d209/component/xml-parser/src/main/java/org/exoplatform/services/common/DataBuffer.java][save][1] = -> TRY {  -> fchan=output.getChannel()@ -> buff=ByteBuffer.allocateDirect(d.length,)@ -> LOOP { -> buff.put(d[i],)@i<d.length } -> buff.rewind()@ -> fchan.write(buff,)@ -> buff.clear()@ -> fchan.close()@ } CATCH(Exception) {}
results[https://github.com/molgenis/molgenis_apps-legacy/blob/f5e6de5157008d31f4806c56f157367a9bac1ba6/apps/designgg/org/molgenis/designgg/CalculateDesignScreen.java][executeR][1] = -> TRY { -> LOOP { -> fc=fos.getChannel()@!(!(this.workingDir.mkdir())) -> bb=ByteBuffer.wrap(inputAttachements.get(fileName,),)@inputAttachements.keySet() && !(!(this.workingDir.mkdir())) -> fc.write(bb,)@!(!(this.workingDir.mkdir())) } } CATCH(Exception) { -> logger.error(e.getMessage(),)@ -> e.printStackTrace()@ }
results[https://github.com/bcdev/beam-globalbedo/blob/75e85c525bc3d66cb8098cdf5540293496948a03/beam-globalbedo-albedo-inversion/src/test/java/org/esa/beam/globalbedo/inversion/util/IOTest.java][testWriteFloatArray2][1] = -> TRY {  -> ch=file_output.getChannel()@ -> bb=ByteBuffer.allocate(dim1*dim2*4,)@ -> LOOP { -> LOOP { -> bb.putFloat(index,fArray[i][j],)@i<dim1 && j<dim2 } } -> ch.write(bb,)@ -> ch.close()@ } CATCH(Exception) {}
results[https://github.com/thyms/Code-Base/blob/bb57a562bb3ccabc067856c4934db81145e561ae/code.base.main/src/main/java/javam/io/RunnerReadingAFile.java][main][1] = -> TRY {  -> targetChannel=new FileOutputStream("src/main/resources/temp/temp_write.txt",).getChannel()@ -> buffer1=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer1.flip()@(read1=sourceChannel.read(buffer1,))!=-1 -> targetChannel.write(buffer1,)@(read1=sourceChannel.read(buffer1,))!=-1 -> buffer1.clear()@(read1=sourceChannel.read(buffer1,))!=-1 } -> targetChannel.close()@ } CATCH(Exception) {}
results[https://github.com/alevy/comet/blob/b70b841368edd58806742d91053d92f4e8527041/src/src/org/gudy/azureus2/core3/util/test/SHA1Verification.java][createTestFiles][10] = -> TRY { -> LOOP { -> fc=new RandomAccessFile(file,"rw",).getChannel()@ -> LOOP { -> bb=ByteBuffer.wrap(buffer,)@ -> position+=fc.write(bb,)@position<size } -> fc.close()@ } } CATCH(Exception) { -> Debug.printStackTrace(e,)@ }
results[https://github.com/axDev-JDK/jdk/blob/53fa8c28b5dfc69a4aefebf16a42c840ddd50b12/test/java/nio/channels/FileChannel/Transfer.java][xferTest02][2] = -> TRY {  -> LOOP { -> srcData[i]=(byte) generator.nextInt()@i<5000 } -> fc1=raf1.getChannel()@ -> LOOP { -> bytesWritten=fc1.write(ByteBuffer.wrap(srcData,),)@bytesWritten<5000 } -> bytesWritten=fc1.transferTo(startPosition,bytesToWrite,fc2,)@ -> fc1.close()@ } CATCH(Exception) {}
results[https://github.com/twitter/bookkeeper/blob/29eaed884a442a73cd620776085da00395f86b53/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java][writeJunkJournal][2] = -> TRY {  -> fc=new RandomAccessFile(fn,"rw",).getChannel()@ -> zeros=ByteBuffer.allocate(512,)@ -> fc.write(zeros,4*1024*1024,)@ -> fc.position(0,)@ -> LOOP { -> fc.write(ByteBuffer.wrap("JunkJunkJunk".getBytes(),),)@ } } CATCH(Exception) {}
results[https://github.com/twitter/bookkeeper/blob/29eaed884a442a73cd620776085da00395f86b53/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java][writeLedgerDir][2] = -> TRY {  -> LOGFILE_HEADER=ByteBuffer.allocate(1024,)@ -> LOGFILE_HEADER.put("BKLO".getBytes(),)@ -> logfile=new RandomAccessFile(new File(dir,Long.toHexString(logId,)+".log",),"rw",).getChannel()@ -> logfile.write((ByteBuffer) LOGFILE_HEADER.clear(),)@ -> logfile.close()@ } CATCH(Exception) {}
results[https://github.com/laarid/platform_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/libcore/java/nio/channels/FileChannelTest.java][test_readv][38] = -> TRY {  -> fc=new FileOutputStream(tmp,).getChannel()@ -> fc.write(ByteBuffer.wrap("abcdABCD".getBytes("US-ASCII",),),)@ -> fc.close()@ -> fc=new FileInputStream(tmp,).getChannel()@ -> assertEquals(8,fc.read(buffers,),)@ -> fc.close()@ } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/53fa8c28b5dfc69a4aefebf16a42c840ddd50b12/test/java/nio/channels/FileChannel/Transfer.java][xferTest03][2] = -> TRY {  -> fc1=raf1.getChannel()@ -> fc1.truncate(0,)@ -> LOOP { -> bytesWritten=fc1.write(ByteBuffer.wrap(srcData,),)@bytesWritten<4 } -> fc1.transferTo(0,srcData.length+1,fc2,)@ -> IF { -> throw new Exception("xferTest03 failed",)@fc2.size()>4 } -> fc1.close()@!(fc2.size()>4) } CATCH(Exception) {}
results[https://github.com/rhusar/HornetQ-oldmigration/blob/550e85b44084c26a5dbe40f816b45dae26e1616d/hornetq-core/src/main/java/org/hornetq/core/replication/impl/ReplicationEndpoint.java][handleReplicationSynchronization][2] = -> TRY {  -> data=msg.getData()@ -> channel2=journalSyncFile.getChannel()@ -> IF { -> channel2.close()@!(data==null) -> return @data==null } -> channel2.write(ByteBuffer.wrap(data,),)@!(data==null) -> IF { -> return @data==null } -> channel.writeDirect(ByteBuffer.wrap(data,),true,)@!(data==null) } CATCH(Exception) {}
results[https://github.com/lalalic/Personal/blob/c471fddc9a6c0e1c6dc43fb65f98a1a0e0191320/travel/android-1qiyou/src/com/equ/lbs/LocationUpdater.java][flush][1] = -> TRY { -> IF { -> out=new FileOutputStream(f,true,).getChannel()@out==null||!(out.isOpen()) } -> buffer.flip()@ -> out.write(buffer,)@ -> buffer.clear()@ -> out.force(true,)@ -> out.close()@ } CATCH(Exception) { -> service.notify(e.getMessage(),)@ }
results[https://github.com/monaca/monaca-framework-android/blob/4096a575bd6984bde66e1a81247f3dd00f479884/MonacaFramework/src/fi/iki/elonen/NanoHTTPD.java][saveTmpFile][4] = -> IF { -> TRY { -> src=b.duplicate()@ -> dest=new FileOutputStream(tempFile.getName(),).getChannel()@ -> src.position(offset,).limit(offset+len,)@len>0 -> dest.write(src.slice(),)@ } CATCH(Exception) { -> System.err.println("Error: "+e.getMessage(),)@ } }
results[https://github.com/jmesnil/hornetq-old/blob/4ba2bb971295391b28786aec5ffa06c412a6a183/src/main/org/hornetq/core/journal/impl/SyncSpeedTest.java][run][4] = -> TRY {  -> LOOP { -> channel=rfile.getChannel()@ -> write(bb,channel,fileSize,)@ -> channel.force(true,)@ -> channel.position(0,)@ -> bb1=generateBuffer(recordSize,(byte) 'h',)@ -> LOOP { -> bb1.flip()@ -> channel.write(bb1,)@ -> channel.force(false,)@ } } } CATCH(Exception) {}
results[https://github.com/sayornis/USGS-VHP/blob/057838817ad52b988a9abaea23f9affbea0b47a3/Util/src/gov/usgs/util/DriveSwamp.java][<init>][1] = -> TRY {  -> bb=ByteBuffer.allocateDirect(size,)@ -> LOOP { -> bb.put((byte) i,)@i<size } -> LOOP { -> bb.flip()@ -> out=new FileOutputStream("swamp_"+i+".tmp",).getChannel()@i<numFiles -> LOOP { -> out.write(bb,)@bb.hasRemaining() } } } CATCH(Exception) {}
results[https://github.com/trishika/DroidUPnP/blob/09de8bf361cac4f9f9de1018bff3c23fe1234417/src/fi/iki/elonen/NanoHTTPD.java][saveTmpFile][9] = -> IF { -> TRY { -> src=b.duplicate()@ -> dest=fileOutputStream.getChannel()@ -> src.position(offset,).limit(offset+len,)@len>0 -> dest.write(src.slice(),)@ } CATCH(Exception) { -> System.err.println("Error: "+e.getMessage(),)@ } FINALLY { -> safeClose(fileOutputStream,)@ } }
results[https://github.com/rhusar/HornetQ-oldmigration/blob/0f55e9d4ec2b0f3e3908c1eeb2f8e4eef6b705fc/hornetq-core/src/main/java/org/hornetq/core/replication/ReplicationEndpoint.java][handleReplicationSynchronization][1] = -> TRY {  -> data=msg.getData()@ -> IF { -> return @!(largeMessage instanceof LargeServerMessageInSync) } -> channel2=journalSyncFile.getChannel()@ -> IF { -> channel2.close()@!(data==null) -> return @data==null } -> channel2.write(ByteBuffer.wrap(data,),)@!(data==null) -> IF { -> return @data==null } -> channel.writeDirect(ByteBuffer.wrap(data,),true,)@!(data==null) } CATCH(Exception) {}
results[https://github.com/readium/SDKLauncher-Android/blob/abb09fb67a304bdb92c0ed08c48e37b0fcdf16f9/SDKLauncher-Android/src/fi/iki/elonen/NanoHTTPD.java][saveTmpFile][1] = -> IF { -> TRY { -> src=b.duplicate()@ -> dest=fileOutputStream.getChannel()@ -> src.position(offset,).limit(offset+len,)@len>0 -> dest.write(src.slice(),)@ } CATCH(Exception) { -> Log.e(TAG,""+e.getMessage(),e,)@ } FINALLY { -> safeClose(fileOutputStream,)@ } }
results[https://github.com/VirginiaFIRST/frc2013score/blob/31734c7a5c6cb8a0104dde9a29483a0d544c63c5/src/main/java/FRC_Score_Sys/WebServer/NanoHTTPD.java][saveTmpFile][1] = -> IF { -> TRY { -> src=b.duplicate()@ -> dest=fileOutputStream.getChannel()@ -> src.position(offset,).limit(offset+len,)@len>0 -> dest.write(src.slice(),)@ } CATCH(Exception) { -> logger.error(e.getLocalizedMessage(),)@ } FINALLY { -> safeClose(fileOutputStream,)@ } }
results[https://github.com/exoplatform/jcr/blob/043a505f7794acc450a96db2da5a6fb15f379fe0/exo.jcr.component.core/src/main/java/org/exoplatform/services/jcr/impl/core/query/ErrorLog.java][run][1] = -> TRY {  -> IF { -> out=new FileOutputStream(log,).getChannel()@ -> out.position(1024*fileSize-1,)@ -> out.write(ByteBuffer.wrap( new byte[],),)@ -> out.position(0,)@ -> out.force(false,)@ } ELSE { -> out=new FileOutputStream(log,true,).getChannel()@ } } CATCH(Exception) {}
results[https://github.com/wox2/migrace_databaze/blob/fe474e18a720b5bf55f88fc2d35345c3ee57b51f/skola/Fel_bc/2.semestr/OMO/Pecinovsky/MOJJ_Projekty_ASCII/07_Rozhrani_A/Elipsa.java][maWriteStore][2] = -> TRY { -> IF { -> bb=mBinaryResources.get(data,)@!(f.isFile()) -> IF { -> fc=fos.getChannel()@!(f.isFile()) && !(null!=bb) -> bb.position(0,)@null!=bb && !(f.isFile()) -> fc.write(bb,)@null!=bb && !(f.isFile()) -> fc.force(false,)@!(f.isFile()) && !(null!=bb) -> fc.close()@!(f.isFile()) && !(null!=bb) -> return 1@null!=bb && f.isFile() } -> IF { -> return 1@f.isFile() && null!=ubd && !(null!=bb) } -> return STERR_GENERIC@f.isFile() && !(null!=ubd) && !(null!=bb) } } CATCH(Exception) { -> logError("write store exception : "+e.toString(),e,)@ }
results[https://github.com/MoSync/MoSync/blob/69cab3aefea6d208159ad411ea8bf770aa644eda/runtimes/java/platforms/androidJNI/AndroidProject/src/com/mosync/internal/android/MoSyncSound.java][storeIfBinaryAudioResource][1] = -> audioData=mMoSyncThread.getBinaryResource(soundHandle,)@ -> IF { -> return @null==audioData } -> IF { -> return @!(null==audioData) && !(checkIfMimeAudioType(audioData,offset,)) } -> mimeType=readMimeString(audioData,offset,)@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) -> IF { -> return @mimeType==null && !(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) } -> TRY { -> channel=audioFileOutputStream.getChannel()@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) -> audioData.position(0,)@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) -> channel.write(audioData,)@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) -> channel.close()@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) } CATCH(Exception) { -> Log.e("MoSyncSound.storeIfBinaryAudioResource","Unable to save temporary audio file.",)@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) -> ex.printStackTrace()@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) }
results[https://github.com/RamesesDev/osiris2/blob/c8c2d2376572d4a3bd23b0ccf6d60d878d3ac47a/common/rameses-common/src/com/rameses/messaging/LogFile.java][write][1] = -> TRY { -> buffer=ByteBuffer.allocate(allocation,)@ -> buffer.put(data,)@ -> buffer.put(delimiter,)@ -> buffer.flip()@ -> writeChannel=new FileOutputStream(file,true,).getChannel()@ -> writeChannel.write(buffer,)@ -> this.writePosition=writeChannel.position()@ } CATCH(Exception) { -> throw new RuntimeException(ex,)@ } FINALLY { -> TRY { -> writeChannel.close()@ } }
results[https://github.com/veltzer/demos/blob/e94e24d62f292fe4b97dd1740c9fa6b5f46e5272/java/src/core/nio/CopyFile.java][main][3] = -> TRY {  -> fcout=fout.getChannel()@ -> IF { -> buffer=ByteBuffer.allocateDirect(size,)@ } ELSE { -> buffer=ByteBuffer.allocate(size,)@ } -> LOOP { -> readCount=fcin.read(buffer,)@ -> IF { -> buffer.flip()@ -> fcout.write(buffer,)@ -> buffer.clear()@ } } } CATCH(Exception) {}
results[https://github.com/Unidata/thredds/blob/9ebd106363a0b0259cb8e06956f501404278ffa9/cdm/src/timing/java/ucar/nc2/TimeMMap.java][writeChannelDirect][2] = -> TRY {  -> channel=file.getChannel()@ -> IF { -> System.out.println("Opened file to write:'"+rfilename+"', size="+channel.size()+" fileSize = "+fileSize+" Mb; recSize = "+recordSize+" Kb; nrecs = "+n,)@ } -> buff=ByteBuffer.allocate(recordSizeBytes,)@ -> src=buff.asIntBuffer()@ -> LOOP { -> buff.clear()@ -> channel.write(buff,)@ -> showBufferInfo(" end bb ",buff,)@ -> System.out.println(" channel pos= "+channel.position(),)@ } -> channel.close()@ } CATCH(Exception) {}
results[https://github.com/cmeiklejohn/flume-ng/blob/6ca616800ec897551fbb14959ce3a5f0c1d69aed/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/FlumeEventQueue.java][serializeAndWrite][1] = -> TRY {  -> IF { -> fileChannel=file.getChannel()@!(fileChannel.isOpen()) } -> TRY { -> buffer=ByteBuffer.allocate(expectedFileSize,)@ -> longBuffer=buffer.asLongBuffer()@ -> checksum=digest.digest(buffer.array(),)@ -> buffer.position(0,)@ -> fileChannel.write(buffer,)@ -> fileChannel.force(true,)@ } CATCH(IOException) { -> LOG.error("Error while writing checkpoint to disk.",ex,)@ } } CATCH(Exception) {}
results[https://github.com/RamesesDev/osiris2/blob/ee716ae432471d376fe6a7a2104703a8f0c83fe1/labs/rameses-scheduling/test/com/rameses/concurrent/EventQueue.java][sendMessage][1] = -> TRY { -> IF { -> throw new Exception("File does not exist",)@!(f.exists()) } -> buffer=ByteBuffer.allocate(allocation,)@!(!(f.exists())) -> buffer.put(data,)@!(!(f.exists())) -> buffer.put(delimiter,)@!(!(f.exists())) -> buffer.flip()@!(!(f.exists())) -> writeChannel=new FileOutputStream(f,true,).getChannel()@!(!(f.exists())) -> writeChannel.write(buffer,)@!(!(f.exists())) } CATCH(Exception) { -> throw new RuntimeException(ex,)@ } FINALLY { -> TRY { -> writeChannel.close()@ } }
results[https://github.com/veltzer/demos/blob/e94e24d62f292fe4b97dd1740c9fa6b5f46e5272/java/src/core/nio/BufferChannel.java][main][3] = -> TRY { -> buff=ByteBuffer.allocate(1024,)@ -> LOOP { -> buff.put((byte) 'a'+i,)@i<26 } -> System.out.println("pos is: "+buff.position(),)@ -> buff.put((byte) 'a',)@ -> System.out.println("pos is: "+buff.position(),)@ -> buff.put(304,(byte) 'a',)@ -> System.out.println("pos is: "+buff.position(),)@ -> channel=output.getChannel()@ -> buff.flip()@ -> channel.write(buff,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/killme2008/Metamorphosis/blob/91e022ba65d9ecadb509ac4c7141e5677c52de07/metamorphosis-client/src/main/java/com/taobao/metamorphosis/client/consumer/storage/LocalOffsetStorage.java][commitOffset][1] = -> IF { -> return @infoList==null||infoList.isEmpty() } -> TRY { -> channel=out.getChannel()@!(infoList==null||infoList.isEmpty()) -> buf=ByteBuffer.wrap(json.getBytes(),)@!(infoList==null||infoList.isEmpty()) -> LOOP { -> channel.write(buf,)@buf.hasRemaining() && !(infoList==null||infoList.isEmpty()) } -> this.close(channel,)@!(infoList==null||infoList.isEmpty()) } CATCH(Exception) { -> log.error("commitOffset failed ",e,)@!(infoList==null||infoList.isEmpty()) } FINALLY { -> IF { -> this.close(channel,)@channel!=null&&channel.isOpen() && !(infoList==null||infoList.isEmpty()) } -> this.close(out,)@!(infoList==null||infoList.isEmpty()) }
results[https://github.com/RamesesDev/osiris2/blob/c8c2d2376572d4a3bd23b0ccf6d60d878d3ac47a/common/rameses-common/src/com/rameses/messaging/BasicFileEventQueue.java][send][1] = -> TRY { -> buffer=ByteBuffer.allocate(super.getAllocation(),)@ -> buffer.put(data,)@ -> buffer.put(super.getDelimiter(),)@ -> buffer.flip()@ -> writeChannel=new FileOutputStream(reader.getFile(),true,).getChannel()@ -> writeChannel.write(buffer,)@ -> this.position=writeChannel.position()@ } CATCH(Exception) { -> throw new RuntimeException(ex,)@ } FINALLY { -> TRY { -> writeChannel.close()@ } }
results[https://github.com/jeromerobert/jCAE/blob/1d508573646d6b192529200ecf27d9f60135ed30/amibe/src/org/jcae/mesh/xmldata/MeshToSoupConvert.java][processOneShape][1] = -> TRY { -> fcO=new FileOutputStream(rawFile,true,).getChannel()@ -> bbo=ByteBuffer.allocate(bufferSize*80/12,)@ -> bboD=bbo.asDoubleBuffer()@ -> LOOP { -> bbo.clear()@ -> LOOP { -> bbo.position(8*bboD.position(),)@ -> bbo.putInt(iFace,)@ -> bbo.putInt(0,)@ } -> bbo.flip()@ -> fcO.write(bbo,)@ } -> fcO.close()@ } CATCH(Exception) { -> ex.printStackTrace()@ -> throw new RuntimeException(ex,)@ }
results[https://github.com/jacksonicson/twospot/blob/ce6c8f805c0b7fb2754674f923b5809c654e873e/3party/Zookeeper/zookeeper-3.2.1/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/Bookie.java][run][2] = -> TRY { -> logFile=new RandomAccessFile(new File(journalDirectory,Long.toHexString(System.currentTimeMillis(),)+".txn",),"rw",).getChannel()@ -> zeros.clear()@ -> logFile.write(zeros,nextPrealloc,)@ -> LOOP { } ELSE { -> IF { -> logFile.force(false,)@ } -> logFile.write( new ByteBuffer[],)@ -> IF { -> nextPrealloc=logFile.size()/preAllocSize+1*preAllocSize@logFile.position()>nextPrealloc -> zeros.clear()@ -> logFile.write(zeros,nextPrealloc,)@logFile.position()>nextPrealloc } } } CATCH(Exception) { -> LOG.fatal("Bookie thread exiting",e,)@ }
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/nio/src/test/java/windows/org/apache/harmony/nio/tests/java/nio/channels/FileChannelWin32OnlyTest.java][test_lock][2] = -> TRY {  -> anotherfc=new RandomAccessFile(f,"rw",).getChannel()@ -> writeBuf=ByteBuffer.wrap("bytes".getBytes(),)@ -> TRY { -> TRY { -> anotherfc.read(readBuf,)@ } -> TRY { -> anotherfc.read( new ByteBuffer[],0,1,)@ } -> TRY { -> anotherfc.write(writeBuf,)@ } -> TRY { -> anotherfc.write( new ByteBuffer[],0,1,)@ } } FINALLY { -> fc.close()@ -> anotherfc.close()@ } } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/ac3faf88491f55369fb6b83f77fbb75557ed3bf4/test/java/nio/MappedByteBuffer/Basic.java][main][2] = -> TRY {  -> fc=fos.getChannel()@ -> fc.write(ByteBuffer.wrap(srcData,),)@ -> fc.close()@ -> fc=fis.getChannel()@ -> mbb=fc.map(FileChannel.MapMode.READ_ONLY,0,10,)@ -> IF { -> throw new RuntimeException("Incorrect isReadOnly",)@!(mbb.isReadOnly()) } -> mbb=fc.map(FileChannel.MapMode.READ_ONLY,1,10,)@!(!(mbb.isReadOnly())) -> fc.close()@!(!(mbb.isReadOnly())) -> fc=raf.getChannel()@!(!(mbb.isReadOnly())) -> mbb=fc.map(FileChannel.MapMode.READ_ONLY,0,10,)@!(!(mbb.isReadOnly())) -> IF { -> throw new RuntimeException("Incorrect isReadOnly",)@!(mbb.isReadOnly()) } -> fc.close()@!(!(mbb.isReadOnly())) -> fc=raf.getChannel()@!(!(mbb.isReadOnly())) -> mbb=fc.map(FileChannel.MapMode.READ_WRITE,0,10,)@!(!(mbb.isReadOnly())) -> IF { -> throw new RuntimeException("Incorrect isReadOnly",)@!(!(mbb.isReadOnly())) && mbb.isReadOnly() } -> fc.close()@!(!(mbb.isReadOnly())) && !(mbb.isReadOnly()) } CATCH(Exception) {}
results[https://github.com/MoSync/MoSync/blob/dfed6b5d6ba92c529a0963f02cdb765d84c07281/runtimes/java/platforms/androidJNI/AndroidProject/src/com/mosync/internal/android/MoSyncAudio.java][maAudioDataCreateFromResource][1] = -> IF { -> return maAudioDataCreateFromURL(mime,audioStore.mTemporaryFileName,flags,)@audioStore!=null } -> audioData=mMoSyncThread.getBinaryResource(data,)@!(audioStore!=null) -> IF { -> IF { -> audioData.position(offset,)@!(audioStore!=null) && null!=audioData && offset>0 -> audioData=audioData.slice()@!(audioStore!=null) && null!=audioData } -> IF { -> audioData.limit(length,)@!(audioStore!=null) && -1!=length && null!=audioData } } ELSE { -> IF { -> return MA_AUDIO_ERR_INVALID_DATA@!(audioStore!=null) && byteData==null && !(null!=audioData) } -> audioData=ByteBuffer.wrap(byteData,offset,length,)@!(byteData==null) && !(audioStore!=null) && !(null!=audioData) -> IF { -> return MA_AUDIO_ERR_INVALID_DATA@!(byteData==null) && audioData==null && !(audioStore!=null) && !(null!=audioData) } } -> TRY { -> channel=audioFileOutputStream.getChannel()@!(audioStore!=null) && null!=audioData -> savedBytes=channel.write(audioData,)@!(audioStore!=null) && null!=audioData -> channel.close()@!(audioStore!=null) && null!=audioData } CATCH(Exception) { -> e.printStackTrace()@!(audioStore!=null) && null!=audioData } -> return audioCreateFromFile(fileName,flags,savedBytes,)@!(audioStore!=null) && null!=audioData
results[https://github.com/axDev-JDK/jdk/blob/53fa8c28b5dfc69a4aefebf16a42c840ddd50b12/test/java/nio/channels/FileChannel/Transfer.java][testFileChannel][2] = -> TRY {  -> sourceChannel=fos.getChannel()@ -> sourceChannel.write(ByteBuffer.wrap("Use the source, Luke!".getBytes(),),)@ -> sourceChannel.close()@ -> sourceChannel=fis.getChannel()@ -> oldSourcePosition=sourceChannel.position()@ -> bytesWritten=sinkChannel.transferFrom(sourceChannel,0,10,)@ -> IF { -> throw new RuntimeException("Transfer failed",)@bytesWritten!=10 } -> IF { -> throw new RuntimeException("Source position didn't change",)@!(bytesWritten!=10) && sourceChannel.position()==oldSourcePosition } -> IF { -> throw new RuntimeException("Sink position changed",)@!(bytesWritten!=10) && !(sourceChannel.position()==oldSourcePosition) && sinkChannel.position()!=oldSinkPosition } -> IF { -> throw new RuntimeException("Unexpected sink size",)@!(sinkChannel.position()!=oldSinkPosition) && !(bytesWritten!=10) && !(sourceChannel.position()==oldSourcePosition) && sinkChannel.size()!=10 } -> bytesWritten=sinkChannel.transferFrom(sourceChannel,1000,10,)@!(sinkChannel.position()!=oldSinkPosition) && !(bytesWritten!=10) && !(sourceChannel.position()==oldSourcePosition) && !(sinkChannel.size()!=10) -> IF { -> throw new RuntimeException("Wrote past file size",)@!(sinkChannel.position()!=oldSinkPosition) && !(bytesWritten!=10) && bytesWritten>0 && !(sourceChannel.position()==oldSourcePosition) && !(sinkChannel.size()!=10) } -> sourceChannel.close()@!(sinkChannel.position()!=oldSinkPosition) && !(bytesWritten!=10) && !(bytesWritten>0) && !(sourceChannel.position()==oldSourcePosition) && !(sinkChannel.size()!=10) } CATCH(Exception) {}
results[https://github.com/taktod/myLib/blob/d85b901e95d425e27eb67cae9e04206e1a34cc2f/myLib.xuggle/src/test/java/com/ttProject/xuggle/test/ConvertTest.java][mp3][2] = -> TRY {  -> outputMp3=new FileOutputStream("output.mp3",).getChannel()@ -> IF { -> throw new Exception("変換コーダーが開けませんでした。",)@coder.open(null,null,)<0 } -> packet=IPacket.make()@!(coder.open(null,null,)<0) -> LOOP { -> IF { -> LOOP { -> retval=coder.encodeAudio(packet,samples,samplesConsumed,)@!(buffer.limit()==buffer.position()) && samplesConsumed<samples.getNumSamples() && !(i<samplingRate*length) && !(coder.open(null,null,)<0) -> IF { -> throw new Exception("変換失敗",)@buffer.limit()==buffer.position() && samplesConsumed<samples.getNumSamples() && !(coder.open(null,null,)<0) && i<samplingRate*length && retval<0 } -> IF { -> logger.info(packet,)@!(buffer.limit()==buffer.position()) && !(retval<0) && !(samplesConsumed<samples.getNumSamples()) && !(i<samplingRate*length) && !(coder.open(null,null,)<0) && packet.isComplete() -> outputMp3.write(packet.getData().getByteBuffer(0,packet.getSize(),),)@!(buffer.limit()==buffer.position()) && !(retval<0) && !(samplesConsumed<samples.getNumSamples()) && !(i<samplingRate*length) && !(coder.open(null,null,)<0) && packet.isComplete() } } } } -> IF { -> outputMp3.close()@outputMp3!=null && !(i<samplingRate*length) && !(coder.open(null,null,)<0) } } CATCH(Exception) {}
results[https://github.com/nickman/jzab/blob/220624ec25a0c2efa3727e16eb65ed83a7cecec8/plugins/native/src/main/java/org/helios/jzab/plugin/nativex/NativeLibLoader.java][save][1] = -> IF { -> return @filesToSnipe.isEmpty() } -> TRY { -> fc=raf.getChannel()@!(filesToSnipe.isEmpty()) -> IF { -> fc.truncate(0,)@!(filesToSnipe.isEmpty()) } -> buff=ReadableWritableByteChannelBuffer.newDirectDynamic(size,)@!(filesToSnipe.isEmpty()) -> oos=new ObjectOutputStream(buff.asOutputStream(),)@!(filesToSnipe.isEmpty()) -> buff.asOutputStream().flush()@!(filesToSnipe.isEmpty()) -> LOG.info("Out: [{}]",buff,)@!(filesToSnipe.isEmpty()) -> bt=fc.write(buff.toByteBuffer(),)@!(filesToSnipe.isEmpty()) -> fc.force(true,)@!(filesToSnipe.isEmpty()) -> fc.close()@!(filesToSnipe.isEmpty()) -> LOG.debug("Saved [{}] bytes for [{}] file names",bt,filesToSnipe.size(),)@!(filesToSnipe.isEmpty()) } CATCH(Exception) { -> LOG.error("Failed to save snipe file",e,)@!(filesToSnipe.isEmpty()) } FINALLY { -> TRY { -> IF { -> fc.close()@!(filesToSnipe.isEmpty()) && fc.isOpen() } } }
results[https://github.com/eclipse/e4.xwt/blob/2ccef7eb141655004fe8de6e8cd5951a58d0b263/bundles/org.eclipse.e4.tools.ui.designer/src/org/eclipse/e4/tools/ui/designer/session/FileHelper.java][writeFile][1] = -> TRY { -> channel=new FileOutputStream(fileFullPath,).getChannel()@ -> channel.write(ByteBuffer.wrap(contents_p,),)@ } CATCH(Exception) { -> msg=new StringBuilder("FileHelper.writeFile(..) _ ",)@ -> msg.append("Failed to open channel in write mode for ",)@ -> msg.append(filePath_p,).append(" !",)@ -> E4DesignerPlugin.getDefault().logError(msg.toString(),e,)@ } FINALLY { -> IF { -> TRY { -> channel.close()@channel!=null&&channel.isOpen() } FINALLY { -> msg=new StringBuilder("FileHelper.writeFile(..) _ ",)@ -> msg.append("Failed to close opened channel in write mode ! ",)@ -> msg.append(filePath_p,).append(" may no longer be usable.",)@ -> E4DesignerPlugin.getDefault().logError(msg.toString(),e,)@ } } }
results[https://github.com/taktod/myLib/blob/538b79393865ad209adc3ec2ca4064fac0def6b1/myLib.GPLv3/myLib.xuggle/src/test/java/com/ttProject/xuggle/test/MakePacketFromMyLibMediaFlvTest.java][playTest4][4] = -> TRY {  -> outputTest=new FileOutputStream("mario.aac",).getChannel()@ -> IF { -> throw new Exception("streamCoderを開くのに失敗しました。",)@coder.open(null,null,)<0 } -> LOOP { -> LOOP { -> IF { -> IF { -> throw new RuntimeException("decoderSpecificInfoが決定していません。",)@dsi==null && !(coder.open(null,null,)<0) } -> buffer=aac.getBuffer()@!(coder.open(null,null,)<0) && !(dsi==null) -> outputTest.write(buffer.duplicate(),)@!(coder.open(null,null,)<0) && !(dsi==null) -> size=buffer.remaining()@!(coder.open(null,null,)<0) && !(dsi==null) -> bufData=IBuffer.make(null,buffer.array(),0,size,)@!(coder.open(null,null,)<0) && !(dsi==null) -> LOOP { -> IF { -> throw new Exception("デコード中にエラーが発生",)@bytesDecoded<0 && !(coder.open(null,null,)<0) && !(dsi==null) && offset<packet.getSize() } } } } } -> IF { -> outputTest.close()@outputTest!=null && !(coder.open(null,null,)<0) } } CATCH(Exception) {}
results[https://github.com/picketlink/picketlink/blob/50ca712a772da82a7fdf16de515c85d5b365d9a1/modules/idm/impl/src/main/java/org/picketlink/idm/file/internal/FileDataSource.java][performFlush][1] = -> TRY { -> channel=randomAccessFile.getChannel()@ -> bos=new ByteArrayOutputStream(FLUSH_BYTE_BUFFER,)@ -> oos=new ObjectOutputStream(bos,)@ -> channel.write(ByteBuffer.wrap(bos.toByteArray(),),)@ } CATCH(Exception) { -> throw new IdentityManagementException("Error flushing changes to file system.",e,)@ } FINALLY { -> TRY { -> IF { -> randomAccessFile.close()@randomAccessFile!=null } } } FINALLY { -> TRY { -> IF { -> oos.close()@oos!=null } } } FINALLY { -> TRY { -> IF { -> bos.close()@bos!=null } } }
results[https://github.com/taktod/myLib/blob/f1ebbed65c7f1f2b9167a55be4058fe8495304b3/myLib.xuggle.flv/src/test/java/com/ttProject/xuggle/flv/test/FastEncodeTest.java][test1][1] = -> TRY { -> target=new FileOutputStream("mario_a.flv",).getChannel()@ -> flvHeader=new FlvHeader()@ -> flvHeader.setVideoFlg(true,)@ -> flvHeader.setAudioFlg(false,)@ -> target.write(flvHeader.getBuffer(),)@ -> flvHeader.analyze(source,)@ -> LOOP { -> IF { -> LOOP { -> IF { -> throw new Exception("デコード中に問題が発生しました。",)@bytesDecoded<=0 && tag instanceof VideoTag && (tag=analyzer.analyze(source,))!=null && offset<packet.getSize() } -> IF { -> IF { -> IF { -> throw new Exception("リサンプル失敗",)@picture.isComplete() && !(bytesDecoded<=0) && resampler.resample(newPic,picture,)<0 && tag instanceof VideoTag && (tag=analyzer.analyze(source,))!=null && offset<packet.getSize() && picture.getPixelType()!=IPixelFormat.Type.BGR24 } } } } } } } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> IF { -> decoder.close()@decoder!=null } -> IF { -> TRY { -> source.close()@source!=null } } } FINALLY { -> IF { -> TRY { -> target.close()@target!=null } } }
results[https://github.com/uditrugman/openjdk8-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/nio/channels/FileChannel/Force.java][writeAfterForce][3] = -> TRY {  -> fc=fis.getChannel()@ -> fc.write(ByteBuffer.wrap(srcData,),)@ -> fc.force(false,)@ -> fc.write(ByteBuffer.wrap(srcData,),)@ -> fc.close()@ } CATCH(Exception) {}
results[https://github.com/sdugit/libcore_7025/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/libcore/java/nio/channels/FileChannelTest.java][test_append][38] = -> TRY {  -> fc=fos.getChannel()@ -> fc.write(ByteBuffer.wrap("hello".getBytes("US-ASCII",),),)@ -> fc.position(0,)@ -> assertEquals(0,fc.position(),)@ -> fc.write(ByteBuffer.wrap(" world".getBytes("US-ASCII",),),)@ } CATCH(Exception) {}
results[https://github.com/DuncanCragg/Cyrus/blob/6f7545e1ca8919a6f493cf206ee4438aa318c3ab/src/jungle/platform/Kernel.java][writeFile][2] = -> TRY {  -> channel=os.getChannel()@ -> n=channel.write(bytebuffer,)@ -> fileuser.writable(bytebuffer,n,)@ } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/io/FileDescriptor/Finalize.java][doFileChannel][3] = -> TRY {  -> fc2=fis2.getChannel()@ -> bb=ByteBuffer.allocateDirect(1,)@ -> ret=fc2.read(bb,)@ -> System.out.println("read "+ret+" bytes from fc2:",)@ -> fc2.close()@ -> fc2=fos2.getChannel()@ -> bb=ByteBuffer.allocateDirect(data.length,)@ -> bb=bb.put(data,)@ -> bb=(ByteBuffer) bb.flip()@ -> ret=fc2.write(bb,)@ -> System.out.println("Wrote:"+ret+" bytes to fc2",)@ -> fc2.close()@ } CATCH(Exception) {}
results[https://github.com/DuncanCragg/Cyrus/blob/52d4c5c4aae2949454a429ac6b94cd826e29429d/src/cyrus/platform/Kernel.java][writeFile][1] = -> TRY {  -> channel=os.getChannel()@ -> n=channel.write(bytebuffer,)@ -> fileuser.writable(bytebuffer,n,)@ } CATCH(Exception) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/ac3faf88491f55369fb6b83f77fbb75557ed3bf4/test/java/nio/channels/SocketChannel/BigReadWrite.java][main][3] = -> TRY {  -> fc=fos.getChannel()@!(!(osName.startsWith("SunOS",))) -> buf=ByteBuffer.allocate(900,)@!(!(osName.startsWith("SunOS",))) -> fc.write(buf,)@!(!(osName.startsWith("SunOS",))) -> buf=ByteBuffer.allocate(950,)@!(!(osName.startsWith("SunOS",))) -> fc.write(buf,)@!(!(osName.startsWith("SunOS",))) -> buf=ByteBuffer.allocate(975,)@!(!(osName.startsWith("SunOS",))) -> fc.write(buf,)@!(!(osName.startsWith("SunOS",))) -> buf=ByteBuffer.allocate(4419000,)@!(!(osName.startsWith("SunOS",))) -> LOOP { -> fc.write(buf,)@!(!(osName.startsWith("SunOS",))) -> buf.rewind()@!(!(osName.startsWith("SunOS",))) } -> fc.close()@!(!(osName.startsWith("SunOS",))) } CATCH(Exception) {}
results[https://github.com/alibaba/otter/blob/78e112c7a9337f367accbcebebbe7f2d9a529c9c/shared/common/src/test/java/com/alibaba/otter/shared/common/utils/NioUtilsPerformance.java][channelTest][1] = -> TRY {  -> TRY { -> tChannel=fos.getChannel()@ -> buffer=ByteBuffer.allocate(16*1024,)@ -> LOOP { -> buffer.flip()@sChannel.read(buffer,)>0 -> tChannel.write(buffer,)@sChannel.read(buffer,)>0 -> buffer.clear()@sChannel.read(buffer,)>0 } -> tChannel.close()@ } FINALLY { -> IOUtils.closeQuietly(fis,)@ -> IOUtils.closeQuietly(fos,)@ } } CATCH(Exception) {}
results[https://github.com/apache/bookkeeper/blob/16978d671b8d6d9e563edb3a6119a4be574245af/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java][writePreV2Journal][2] = -> TRY {  -> fc=new RandomAccessFile(fn,"rw",).getChannel()@ -> zeros=ByteBuffer.allocate(512,)@ -> fc.write(zeros,4*1024*1024,)@ -> fc.position(0,)@ -> LOOP { -> packet=ClientUtil.generatePacket(1,i,lastConfirmed,i*data.length,data,).toByteBuffer()@i<=numEntries -> lenBuff=ByteBuffer.allocate(4,)@ -> lenBuff.putInt(packet.remaining(),)@ -> lenBuff.flip()@ -> fc.write(lenBuff,)@ -> fc.write(packet,)@ } } CATCH(Exception) {}
results[https://github.com/elka-projekt/cs-voltdb/blob/8b01731a091d92a069ecc5174a813523d6abdb50/tests/bench/iotest/IOBench.java][call][1] = -> TRY {  -> TRY { -> fc=fos.getChannel()@ -> TRY { -> LOOP { -> b=m_buffer.duplicate()@ -> LOOP { -> fc.write(b,)@b.hasRemaining() } } } FINALLY { -> fos.close()@ } -> f.delete()@ } } CATCH(Exception) {}
results[https://github.com/tanzwud/CERT803/blob/f438ad3152f74531106a8554d4ce390db1ff78b8/javaBegins/workwithfiles/BaseInputOutput/NewInOut.java][main][4] = -> TRY {  -> fc=new FileOutputStream("data.txt",).getChannel()@ -> fc.write(ByteBuffer.wrap("Some text ".getBytes(),),)@ -> fc.close()@ -> fc=new RandomAccessFile("data.txt","rw",).getChannel()@ -> fc.position(fc.size(),)@ -> fc.write(ByteBuffer.wrap("Some more".getBytes(),),)@ -> fc.close()@ -> fc=new FileInputStream("data.txt",).getChannel()@ -> fc.read(buff,)@ } CATCH(Exception) {}
results[https://github.com/heipacker/testjava/blob/053f5b9ea3ecbbf8709e828f1d1b2999c268a811/src/test/dlmu/nio/TestNIOFlipMethod.java][main][1] = -> TRY {  -> fc=out.getChannel()@!(!(file.exists())&&!(file.createNewFile())) -> fc.write(ByteBuffer.wrap("Some text".getBytes(),),)@!(!(file.exists())&&!(file.createNewFile())) -> fc.close()@!(!(file.exists())&&!(file.createNewFile())) -> fc=randomFile.getChannel()@!(!(file.exists())&&!(file.createNewFile())) -> System.out.println("此通道的文件位置："+fc.position(),)@!(!(file.exists())&&!(file.createNewFile())) -> fc.position(fc.size(),)@!(!(file.exists())&&!(file.createNewFile())) -> fc.write(ByteBuffer.wrap("Some more".getBytes(),),)@!(!(file.exists())&&!(file.createNewFile())) -> fc.close()@!(!(file.exists())&&!(file.createNewFile())) -> fc=in.getChannel()@!(!(file.exists())&&!(file.createNewFile())) -> fc.read(buffer,)@!(!(file.exists())&&!(file.createNewFile())) -> fc.close()@!(!(file.exists())&&!(file.createNewFile())) } CATCH(Exception) {}
results[https://github.com/wicknicks/cuenet/blob/cba8cfb831700119d129cd469dd16fd4e1c4c1e4/src/test/java/esl/cuenet/index/benchmarks/NIOBenchmarks.java][writeByteBuffers][1] = -> TRY {  -> channel=stream.getChannel()@ -> LOOP { -> buffer=ByteBuffer.allocate(N,)@ -> buffer.put(bytes,)@ -> channel.write(buffer,)@ } -> channel=stream.getChannel()@ -> LOOP { -> buffer=ByteBuffer.allocate(N,)@ -> buffer.put(bytes,)@ -> channel.write(buffer,)@ } -> channel=stream.getChannel()@ -> LOOP { -> buffer=ByteBuffer.allocate(N,)@ -> buffer.put(bytes,)@ -> channel.write(buffer,)@ } } CATCH(Exception) {}
results[https://github.com/cm4j/cm4j-all/blob/2543e6c70a6fb559e74e28000c0261d71e61bae3/cm4j-test/src/main/java/com/cm4j/test/syntax/nio/simple/One_GetChannel.java][main][1] = -> TRY {  -> fc=new FileOutputStream(new File("test.txt",),).getChannel()@ -> fc.write(ByteBuffer.wrap("abcdefghijklmn".getBytes(),),)@ -> fc.close()@ -> fc=new RandomAccessFile("test.txt","rw",).getChannel()@ -> fc.position(fc.size(),)@ -> fc.write(ByteBuffer.wrap("Something more".getBytes(),),)@ -> fc.close()@ -> fc=new FileInputStream(new File("test.txt",),).getChannel()@ -> fc.read(buffer,)@ } CATCH(Exception) {}
results[https://github.com/statsbiblioteket/sbutil/blob/2fbcc90095ff654ba5f4af01499df2dceb355ea2/sbutil-common/src/test/java/dk/statsbiblioteket/util/LineReaderTest.java][testNIO][3] = -> TRY {  -> outBuffer=ByteBuffer.allocate(4096,)@ -> outBuffer.put(EXTRA,)@ -> outBuffer.flip()@ -> assertEquals("The limit of the outBuffer should be correct",EXTRA.length,outBuffer.limit(),)@ -> channelOut=output.getChannel()@ -> channelOut.position(INITIAL.length,)@ -> assertEquals("All bytes should be written",EXTRA.length,channelOut.write(outBuffer,),)@ -> channelOut.close()@ -> outBuffer2=ByteBuffer.allocate(4096,)@ -> outBuffer2.put(FIFTH,)@ -> outBuffer2.flip()@ -> assertEquals("The limit of the second outBuffer should be correct",FIFTH.length,outBuffer2.limit(),)@ -> channelOut2=output2.getChannel()@ -> channelOut2.position(4,)@ -> assertEquals("The FIFTH should be written",FIFTH.length,channelOut2.write(outBuffer2,),)@ -> channelOut2.close()@ } CATCH(Exception) {}
results[https://github.com/auxgroup-sanxing/Sesame/blob/061175727614cfcbd9cd7ce5b0536d981b54aa64/sesame-transport/src/main/java/com/sanxing/sesame/transport/util/SesameFileClient.java][copyFile][1] = -> TRY {  -> fcOut=out.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.flip()@fcIn.read(buffer,)!=-1 -> fcOut.write(buffer,)@fcIn.read(buffer,)!=-1 -> buffer.clear()@fcIn.read(buffer,)!=-1 } -> fcOut.close()@ } CATCH(Exception) {}
results[https://github.com/PieceMaker/OpenJUMP/blob/879afaad73a18657ddf4736e8d7f801836292456/src/org/openjump/core/rasterimage/GridFloat.java][writeGrid][1] = -> TRY { -> fileChannelOut=fileOutStream.getChannel()@ -> bb=ByteBuffer.allocateDirect(nCols*4,)@ -> bb.order(ByteOrder.LITTLE_ENDIAN,)@ -> LOOP { -> LOOP { -> IF { -> bb.putFloat(raster.getSampleFloat(c,r,0,),)@r<nRows && c<nCols && bb.hasRemaining() } ELSE { -> bb.compact()@!(bb.hasRemaining()) -> fileChannelOut.write(bb,)@!(bb.hasRemaining()) -> bb.clear()@!(bb.hasRemaining()) } } } -> bb.compact()@ -> fileChannelOut.write(bb,)@ -> bb.clear()@ } CATCH(Exception) { -> JOptionPane.showMessageDialog(null,"Error while reading flt file: "+ex,"Error",JOptionPane.ERROR_MESSAGE,)@ }
results[https://github.com/cuckoo03/repository/blob/6697b49e8b3c1ddf5e6c964757eb65789a3e8a8f/java_networking/src/com/nio/CharsetTest.java][main][1] = -> TRY {  -> TRY { -> buff=charset.encode("한글과 Alphabet",)@ -> fileChannel=fos.getChannel()@ -> fileChannel.write(buff,)@ } CATCH(FileNotFoundException) { -> e.printStackTrace()@ } CATCH(IOException) { -> e.printStackTrace()@ } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> TRY { -> fileChannel.close()@ } FINALLY { -> e.printStackTrace()@ } } } CATCH(UnsupportedEncodingException) {}
results[https://github.com/TaintDroid/android_platform_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/libcore/java/nio/channels/FileChannelTest.java][testReadOnlyByteArrays][38] = -> TRY {  -> readOnly=ByteBuffer.allocate(1,).asReadOnlyBuffer()@ -> fc=new FileInputStream(tmp,).getChannel()@ -> TRY { -> fc.read(readOnly,)@ } -> TRY { -> fc.read( new ByteBuffer[],)@ } -> TRY { -> fc.read( new ByteBuffer[],0,1,)@ } -> TRY { -> fc.read(readOnly,0L,)@ } -> fc.close()@ -> fc=new FileOutputStream(tmp,).getChannel()@ -> fc.write(readOnly,)@ -> fc.write( new ByteBuffer[],)@ -> fc.write( new ByteBuffer[],0,1,)@ -> fc.write(readOnly,0L,)@ -> fc.close()@ } CATCH(Exception) {}
results[https://github.com/apache/incubator-tajo/blob/a870180c454b157a6c78c1b7a0cb4c1d3eacecf8/engine/src/main/java/tajo/datachannel/Fetcher.java][messageReceived][8] = -> TRY {  -> IF { -> IF { -> return @response.getStatus()==HttpResponseStatus.NO_CONTENT } -> this.fc=raf.getChannel()@!(response.getStatus()==HttpResponseStatus.NO_CONTENT) } ELSE { -> content=response.getContent()@!(response.getStatus()==HttpResponseStatus.NO_CONTENT) && !(response.isChunked()) -> IF { -> fc.write(content.toByteBuffer(),)@!(response.getStatus()==HttpResponseStatus.NO_CONTENT) && content.readable() } } ELSE { -> chunk=(HttpChunk) e.getMessage()@ -> IF { -> fileLength=fc.position()@ -> fc.close()@ } ELSE { -> fc.write(chunk.getContent().toByteBuffer(),)@!(chunk.isLast()) } } } CATCH(Exception) {}
results[https://github.com/exoplatform/aio-portal/blob/a01c7972884aa573f857089dd4597800aed7d209/component/xml-parser/src/main/java/org/exoplatform/services/common/DataWriter.java][save][1] = -> TRY {  -> buff=ByteBuffer.allocateDirect(1024,)@ -> fchan=output.getChannel()@ -> LOOP { -> buff.put(bytes,0,read,)@(read=input.read(bytes,))>-1 -> buff.rewind()@ -> IF { -> fchan.write(buff,)@fchan.isOpen() } -> buff.clear()@ } -> buff.clear()@ -> fchan.close()@ } CATCH(Exception) {}
results[https://github.com/dotCMS/dotCMS/blob/7cb0470f143277c93bac49cf195cf13079fd1b6c/src/com/dotmarketing/webdav/DotWebdavHelper.java][setResourceContent][1] = -> TRY {  -> IF { -> IF { -> IF { -> writeCurrentChannel=new FileOutputStream(fileData,).getChannel()@ -> writeCurrentChannel.truncate(0,)@ -> buffer=ByteBuffer.allocate(currentData.length,)@ -> buffer.put(currentData,)@currentData!=null -> buffer.position(0,)@ -> writeCurrentChannel.write(buffer,)@ -> writeCurrentChannel.force(false,)@ -> writeCurrentChannel.close()@ } } ELSE { -> IF { -> writeCurrentChannel=new FileOutputStream(fileData,).getChannel()@ -> writeCurrentChannel.truncate(0,)@ -> buffer=ByteBuffer.allocate(currentData.length,)@ -> buffer.put(currentData,)@currentData!=null -> buffer.position(0,)@ -> writeCurrentChannel.write(buffer,)@ -> writeCurrentChannel.force(false,)@ -> writeCurrentChannel.close()@ } } } } CATCH(Exception) {}
results[https://github.com/apache/incubator-tajo/blob/e2a7dffdb652c77dd35a917134cef15b3d54d274/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/worker/Fetcher.java][messageReceived][1] = -> TRY {  -> TRY { -> IF { -> IF { -> return @response.getStatus()==HttpResponseStatus.NO_CONTENT } -> this.fc=raf.getChannel()@!(response.getStatus()==HttpResponseStatus.NO_CONTENT) } ELSE { -> content=response.getContent()@!(response.getStatus()==HttpResponseStatus.NO_CONTENT) && !(response.isChunked()) -> IF { -> fc.write(content.toByteBuffer(),)@!(response.getStatus()==HttpResponseStatus.NO_CONTENT) && content.readable() } } ELSE { -> chunk=(HttpChunk) e.getMessage()@ } ELSE { -> fc.write(chunk.getContent().toByteBuffer(),)@!(chunk.isLast()) } } FINALLY { -> IF { -> fileLen=file.length()@ } -> IF { -> IOUtils.cleanup(LOG,fc,raf,)@ } } } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/778166955928f5fd3150a02fe7942feeb58c9402/test/java/nio/MappedByteBuffer/Basic.java][main][1] = -> TRY {  -> TRY { -> fc=fos.getChannel()@ -> fc.write(ByteBuffer.wrap(srcData,),)@ -> fc.close()@ -> fc=fis.getChannel()@ -> mbb=fc.map(FileChannel.MapMode.READ_ONLY,0,10,)@ -> IF { -> throw new RuntimeException("Incorrect isReadOnly",)@!(mbb.isReadOnly()) } -> mbb=fc.map(FileChannel.MapMode.READ_ONLY,1,10,)@!(!(mbb.isReadOnly())) -> fc.close()@!(!(mbb.isReadOnly())) -> fc=raf.getChannel()@!(!(mbb.isReadOnly())) -> mbb=fc.map(FileChannel.MapMode.READ_ONLY,0,10,)@!(!(mbb.isReadOnly())) -> IF { -> throw new RuntimeException("Incorrect isReadOnly",)@!(mbb.isReadOnly()) } -> fc.close()@!(!(mbb.isReadOnly())) -> fc=raf.getChannel()@!(!(mbb.isReadOnly())) -> mbb=fc.map(FileChannel.MapMode.READ_WRITE,0,10,)@!(!(mbb.isReadOnly())) -> IF { -> throw new RuntimeException("Incorrect isReadOnly",)@!(!(mbb.isReadOnly())) && mbb.isReadOnly() } -> fc.close()@!(mbb.isReadOnly()) } FINALLY { -> IF { -> blah.delete()@!(!(mbb.isReadOnly())) && blah!=null } } } CATCH(Exception) {}
results[https://github.com/dotCMS/dotCMS/blob/7cb0470f143277c93bac49cf195cf13079fd1b6c/src/com/dotmarketing/webdav/DotWebdavHelper.java][createResource][1] = -> TRY {  -> TRY { -> IF { -> IF { -> throw new IOException("The file doesn't comply the folder's filter",)@hasPermission && !(checkFolderFilter(folder,fileName,)) && !(fileName.startsWith(".",)) } -> IF { -> IF { -> IF { -> throw new DotDataException("unable to locate file",)@host!=null&&InodeUtils.isSet(host.getInode(),)&&InodeUtils.isSet(folder.getInode(),) && hasPermission && !(!(checkFolderFilter(folder,fileName,))) && !(fileName.startsWith(".",)) && !(UtilMethods.isSet(actualFile.getInode(),)) && identifier!=null&&InodeUtils.isSet(identifier.getId(),)&&!(identifier.getAssetType().equals("contentlet",)) } -> IF { -> channelTo=new FileOutputStream(newVersionFile,).getChannel()@hasPermission && !(!(UtilMethods.isSet(actualFile.getInode(),))) && !(identifier!=null&&InodeUtils.isSet(identifier.getId(),)&&!(identifier.getAssetType().equals("contentlet",))) && !(host!=null&&InodeUtils.isSet(host.getInode(),)&&InodeUtils.isSet(folder.getInode(),)) && !(!(checkFolderFilter(folder,fileName,))) && !(fileName.startsWith(".",)) -> currentDataBuffer=ByteBuffer.allocate(currentData.length,)@hasPermission && !(!(UtilMethods.isSet(actualFile.getInode(),))) && !(identifier!=null&&InodeUtils.isSet(identifier.getId(),)&&!(identifier.getAssetType().equals("contentlet",))) && !(host!=null&&InodeUtils.isSet(host.getInode(),)&&InodeUtils.isSet(folder.getInode(),)) && !(!(checkFolderFilter(folder,fileName,))) && !(fileName.startsWith(".",)) -> currentDataBuffer.put(currentData,)@hasPermission && !(!(UtilMethods.isSet(actualFile.getInode(),))) && !(identifier!=null&&InodeUtils.isSet(identifier.getId(),)&&!(identifier.getAssetType().equals("contentlet",))) && !(host!=null&&InodeUtils.isSet(host.getInode(),)&&InodeUtils.isSet(folder.getInode(),)) && !(!(checkFolderFilter(folder,fileName,))) && !(fileName.startsWith(".",)) -> currentDataBuffer.position(0,)@hasPermission && !(!(UtilMethods.isSet(actualFile.getInode(),))) && !(identifier!=null&&InodeUtils.isSet(identifier.getId(),)&&!(identifier.getAssetType().equals("contentlet",))) && !(host!=null&&InodeUtils.isSet(host.getInode(),)&&InodeUtils.isSet(folder.getInode(),)) && !(!(checkFolderFilter(folder,fileName,))) && !(fileName.startsWith(".",)) -> channelTo.write(currentDataBuffer,)@hasPermission && !(!(UtilMethods.isSet(actualFile.getInode(),))) && !(identifier!=null&&InodeUtils.isSet(identifier.getId(),)&&!(identifier.getAssetType().equals("contentlet",))) && !(host!=null&&InodeUtils.isSet(host.getInode(),)&&InodeUtils.isSet(folder.getInode(),)) && !(!(checkFolderFilter(folder,fileName,))) && !(fileName.startsWith(".",)) -> channelTo.force(false,)@hasPermission && !(!(UtilMethods.isSet(actualFile.getInode(),))) && !(identifier!=null&&InodeUtils.isSet(identifier.getId(),)&&!(identifier.getAssetType().equals("contentlet",))) && !(host!=null&&InodeUtils.isSet(host.getInode(),)&&InodeUtils.isSet(folder.getInode(),)) && !(!(checkFolderFilter(folder,fileName,))) && !(fileName.startsWith(".",)) -> channelTo.close()@hasPermission && !(!(UtilMethods.isSet(actualFile.getInode(),))) && !(identifier!=null&&InodeUtils.isSet(identifier.getId(),)&&!(identifier.getAssetType().equals("contentlet",))) && !(host!=null&&InodeUtils.isSet(host.getInode(),)&&InodeUtils.isSet(folder.getInode(),)) && !(!(checkFolderFilter(folder,fileName,))) && !(fileName.startsWith(".",)) } } } } ELSE { -> throw new IOException("You don't have access to add that folder/host",)@!(hasPermission) && !(fileName.startsWith(".",)) } } CATCH(Exception) { -> throw new DotDataException(e.getMessage(),e,)@ } } CATCH(IOException,DotDataException) {}
results[https://github.com/taktod/myLib/blob/26a53fc1f96b2f989a0a4dd9123a0e75dd3923f1/myLib.GPLv3/myLib.xuggle/src/test/java/com/ttProject/xuggle/test/ConvertTest.java][flv1MakeTest][4] = -> TRY { -> output=new FileOutputStream("output.flv",).getChannel()@ -> flvHeader=new FlvHeader()@ -> flvHeader.setVideoFlg(true,)@ -> flvHeader.setAudioFlg(false,)@ -> output.write(flvHeader.getBuffer(),)@ -> IF { -> throw new RuntimeException("変換コーダーが開けませんでした。",)@retVal<0 } -> LOOP { -> IF { -> throw new Exception("変換失敗",)@retVal<0 } -> IF { -> videoTag=new VideoTag()@!(retVal<0) -> videoTag.setCodec(CodecType.H263,)@!(retVal<0) -> videoTag.setFrameType(packet.isKey(),)@!(retVal<0) && packet.isComplete() -> videoTag.setSize(12+4+buffer.remaining(),)@!(retVal<0) -> videoTag.setTimestamp((int) now-firstTimestamp,)@!(retVal<0) -> videoTag.setRawData(buffer,)@!(retVal<0) -> output.write(videoTag.getBuffer(),)@!(retVal<0) } } } CATCH(Exception) { -> e.printStackTrace()@ -> Assert.fail("例外が発生しました。",)@ } FINALLY { -> IF { -> TRY { -> output.close()@output!=null } } }
results[https://github.com/aguocool/workspace/blob/a6e10394d7333dab97fa9fc06b4231af6cbe949c/InnerClass/src/io/BufferToText.java][main][3] = -> TRY {  -> fc=new FileOutputStream("data2.txt",).getChannel()@ -> fc.write(ByteBuffer.wrap("Some text".getBytes(),),)@ -> fc.close()@ -> fc=new FileInputStream("data2.txt",).getChannel()@ -> buff=ByteBuffer.allocate(BSIZE,)@ -> fc.read(buff,)@ -> buff.flip()@ -> System.out.println(buff.asCharBuffer(),)@ -> buff.rewind()@ -> System.out.println("Decoded using "+encoding+": "+Charset.forName(encoding,).decode(buff,),)@ -> fc=new FileOutputStream("data2.txt",).getChannel()@ -> fc.write(ByteBuffer.wrap("Some text".getBytes("UTF-16BE",),),)@ -> fc.close()@ -> fc=new FileInputStream("data2.txt",).getChannel()@ -> buff.clear()@ -> fc.read(buff,)@ -> buff.flip()@ -> System.out.println(buff.asCharBuffer(),)@ -> fc=new FileOutputStream("data2.txt",).getChannel()@ -> buff=ByteBuffer.allocate(24,)@ -> buff.asCharBuffer().put("Some text",)@ -> fc.write(buff,)@ -> fc.close()@ -> fc=new FileInputStream("data2.txt",).getChannel()@ -> buff.clear()@ -> fc.read(buff,)@ -> buff.flip()@ -> System.out.println(buff.asCharBuffer(),)@ } CATCH(Exception) {}
results[https://github.com/openGDA/gda-core/blob/f0be28dd9095e4c700ab1c8189aabaef4570b59f/uk.ac.gda.analysis/src/gda/analysis/io/RawBinarySaver.java][saveFile][1] = -> TRY {  -> LOOP { -> CATCH(Exception) { -> throw new ScanFileHolderException("Error saving file '"+filename+"'",e,)@i<imax } -> CATCH(UnsupportedEncodingException) { -> throw new ScanFileHolderException("Problem dealing with dataset name",e1,)@i<imax } -> IF { -> throw new ScanFileHolderException("Rank exceeds 255!",)@i<imax } -> TRY { -> fc=fout.getChannel()@!(i<imax) -> hdrBuffer=ByteBuffer.allocateDirect(hdrSize,)@!(i<imax) -> hdrBuffer.order(ByteOrder.LITTLE_ENDIAN,)@!(i<imax) -> hdrBuffer.putInt(formatTag,)@!(i<imax) -> hdrBuffer.put(dtype,)@!(i<imax) -> hdrBuffer.put(isize,)@!(i<imax) -> hdrBuffer.put(rank,)@!(i<imax) -> LOOP { -> hdrBuffer.putInt(shape[j],)@!(i<imax) && j<rank } -> hdrBuffer.putShort((short) name.length,)@!(i<imax) -> IF { -> hdrBuffer.put(name,)@!(i<imax) } -> LOOP { -> hdrBuffer.put((byte) 0,)@hdrBuffer.position()<hdrSize && !(i<imax) } -> hdrBuffer.rewind()@!(i<imax) -> LOOP { -> fc.write(hdrBuffer,)@!(i<imax) && hdrBuffer.hasRemaining() } -> dbBuffer=ByteBuffer.allocateDirect(dataSize*8,)@!(i<imax) -> dbBuffer.order(ByteOrder.LITTLE_ENDIAN,)@!(i<imax) -> dataBuffer=dbBuffer.asDoubleBuffer()@!(i<imax) -> LOOP { -> fc.write(dbBuffer,)@!(i<imax) && dbBuffer.hasRemaining() } -> fc.close()@!(i<imax) } CATCH(Exception) { -> throw new ScanFileHolderException("Error saving file '"+filename+"'",e,)@i<imax } } } CATCH(ScanFileHolderException) {}
results[https://github.com/DawnScience/scisoft-core/blob/dbc9992cd7b52af7f5fa704c4111f14036cda363/uk.ac.diamond.scisoft.analysis/src/uk/ac/diamond/scisoft/analysis/io/NumPyFileSaver.java][saveFile][1] = -> TRY {  -> LOOP { -> CATCH(Exception) { -> throw new ScanFileHolderException("Error saving file '"+filename+"'",e,)@i<imax } -> IF { -> throw new ScanFileHolderException("Dataset null at index "+i+" unsupported",)@dataset==null && i<imax } -> IF { -> throw new ScanFileHolderException("Unsupported data types for NumPy File Saver",)@!(dataset==null) && dataTypeInfo==null && i<imax } -> IF { -> throw new ScanFileHolderException("Number of elements in each item exceeds allowed maximum of 255",)@!(dataset==null) && is>255 && !(dataTypeInfo==null) && i<imax } -> IF { -> throw new ScanFileHolderException("Rank exceeds 255!",)@!(dataset==null) && !(is>255) && !(dataTypeInfo==null) && i<imax } -> CATCH(UnsupportedEncodingException) { -> throw new ScanFileHolderException("Impossible error, US-ASCII is always available?",e,)@!(dataset==null) && !(is>255) && !(dataTypeInfo==null) && i<imax } -> TRY { -> fc=fout.getChannel()@!(dataset==null) && !(is>255) && !(i<imax) && !(dataTypeInfo==null) -> hdrBuffer=ByteBuffer.allocateDirect(hdrSize,)@!(dataset==null) && !(is>255) && !(i<imax) && !(dataTypeInfo==null) -> hdrBuffer.order(ByteOrder.LITTLE_ENDIAN,)@!(dataset==null) && !(is>255) && !(i<imax) && !(dataTypeInfo==null) -> LOOP { -> hdrBuffer.put(NumPyFile.magic[j],)@!(dataset==null) && !(is>255) && !(i<imax) && !(dataTypeInfo==null) && j<NumPyFile.magic.length } -> hdrBuffer.putShort((short) formatBytes.length,)@!(dataset==null) && !(is>255) && !(i<imax) && !(dataTypeInfo==null) -> LOOP { -> hdrBuffer.put(formatBytes[j],)@!(dataset==null) && !(is>255) && !(i<imax) && !(dataTypeInfo==null) && j<formatBytes.length } -> hdrBuffer.rewind()@!(dataset==null) && !(is>255) && !(i<imax) && !(dataTypeInfo==null) -> LOOP { -> fc.write(hdrBuffer,)@!(dataset==null) && !(is>255) && !(i<imax) && !(dataTypeInfo==null) && hdrBuffer.hasRemaining() } -> dbBuffer=RawBinarySaver.saveRawDataset(sdata,dtype,isize,)@!(dataset==null) && !(is>255) && !(i<imax) && !(dataTypeInfo==null) -> dbBuffer.rewind()@!(dataset==null) && !(is>255) && !(i<imax) && !(dataTypeInfo==null) -> LOOP { -> fc.write(dbBuffer,)@!(dataset==null) && !(is>255) && !(i<imax) && dbBuffer.hasRemaining() && !(dataTypeInfo==null) } -> fc.close()@!(dataset==null) && !(is>255) && !(i<imax) && !(dataTypeInfo==null) } CATCH(Exception) { -> throw new ScanFileHolderException("Error saving file '"+filename+"'",e,)@!(dataset==null) && !(is>255) && !(dataTypeInfo==null) && i<imax } } } CATCH(ScanFileHolderException) {}
results[https://github.com/DawnScience/scisoft-core/blob/dbc9992cd7b52af7f5fa704c4111f14036cda363/uk.ac.diamond.scisoft.analysis/src/uk/ac/diamond/scisoft/analysis/io/RawBinarySaver.java][saveFile][1] = -> TRY {  -> LOOP { -> CATCH(Exception) { -> throw new ScanFileHolderException("Error saving file '"+filename+"'",e,)@i<imax } -> IF { -> throw new ScanFileHolderException("Number of elements in each item exceeds allowed maximum of 255",)@is>255 && i<imax } -> CATCH(UnsupportedEncodingException) { -> throw new ScanFileHolderException("Problem dealing with dataset name",e1,)@!(is>255) && i<imax } -> IF { -> throw new ScanFileHolderException("Rank exceeds 255!",)@!(is>255) && i<imax } -> TRY { -> fc=fout.getChannel()@!(is>255) && !(i<imax) -> hdrBuffer=ByteBuffer.allocateDirect(hdrSize,)@!(is>255) && !(i<imax) -> hdrBuffer.order(ByteOrder.LITTLE_ENDIAN,)@!(is>255) && !(i<imax) -> hdrBuffer.putInt(formatTag,)@!(is>255) && !(i<imax) -> hdrBuffer.put((byte) dtype,)@!(is>255) && !(i<imax) -> hdrBuffer.put(isize,)@!(is>255) && !(i<imax) -> hdrBuffer.put(rank,)@!(is>255) && !(i<imax) -> LOOP { -> hdrBuffer.putInt(shape[j],)@!(is>255) && !(i<imax) && j<rank } -> hdrBuffer.putShort((short) name.length,)@!(is>255) && !(i<imax) -> IF { -> hdrBuffer.put(name,)@!(is>255) && !(i<imax) } -> LOOP { -> hdrBuffer.put((byte) 0,)@hdrBuffer.position()<hdrSize && !(is>255) && !(i<imax) } -> hdrBuffer.rewind()@!(is>255) && !(i<imax) -> LOOP { -> fc.write(hdrBuffer,)@!(is>255) && !(i<imax) && hdrBuffer.hasRemaining() } -> dbBuffer=saveRawDataset(sdata,dtype,isize,)@!(is>255) && !(i<imax) -> dbBuffer.rewind()@!(is>255) && !(i<imax) -> LOOP { -> fc.write(dbBuffer,)@!(is>255) && !(i<imax) && dbBuffer.hasRemaining() } -> fc.close()@!(is>255) && !(i<imax) } CATCH(Exception) { -> throw new ScanFileHolderException("Error saving file '"+filename+"'",e,)@!(is>255) && i<imax } } } CATCH(ScanFileHolderException) {}
results[https://github.com/osi/mulgara/blob/b2b416078bbd9ef2b1790d596cd423398e7da326/src/jar/resolver/src/main/java/org/mulgara/resolver/RestoreOperation.java][restoreDatabaseV4][3] = -> TRY {  -> TRY { -> IF { -> throw new QueryException("Unexpected EOF in RDFNODES section while restoring from "+"backup file: "+sourceURI,)@line==null } -> IF { -> throw new QueryException("The system model node \"<#>\" was not found in the RDFNODES "+"section of the backup file: "+sourceURI,)@!(line==null) && systemModelNode==BackupRestoreSession.NONE } -> IF { -> throw new QueryException("The node for EMPTY_GROUP was not found in the RDFNODES "+"section of the backup file: "+sourceURI,)@emptyGroupNode==BackupRestoreSession.NONE && !(line==null) && !(systemModelNode==BackupRestoreSession.NONE) } -> IF { -> throw new QueryException("The node for \""+TKS_INT_MODEL_URI+"\" was not found in the RDFNODES section of the backup file: "+sourceURI,)@tksIntModelNode==BackupRestoreSession.NONE && !(line==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) } -> tplFC=tplRAF.getChannel()@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) -> buffer=ByteBuffer.allocateDirect(8192,)@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) -> tripleBuffer=buffer.asLongBuffer()@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) -> LOOP { -> TRY { -> IF { -> throw new QueryException("Unexpected EOF in TRIPLES section while restoring from "+"backup file: "+sourceURI,)@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !(systemModelNode==BackupRestoreSession.NONE) && (line=br.readLine())==null && !(emptyGroupNode==BackupRestoreSession.NONE) } } } ELSE { -> IF { -> IF { -> buffer.rewind()@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !((line=br.readLine())==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) -> n=tplFC.write(buffer,)@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !((line=br.readLine())==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) -> assert n==buffer.capacity()@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !((line=br.readLine())==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) } } } -> IF { -> buffer.rewind()@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) -> n=tplFC.write(buffer,)@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) -> assert n==buffer.limit()@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) } -> tplFC.position(0,)@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) -> LOOP { -> IF { -> buffer.rewind()@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) && !(!(tripleBuffer.hasRemaining())) -> buffer.hasRemaining()@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) && !(!(tripleBuffer.hasRemaining())) -> LOOP { -> n=tplFC.read(buffer,)@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) && !(!(tripleBuffer.hasRemaining())) -> IF { -> throw new QueryException("Premature EOF on temporary triple file ("+tplFile+") during restore from V4 backup file",)@!(tksIntModelNode==BackupRestoreSession.NONE) && !(line==null) && n==-1 && !(systemModelNode==BackupRestoreSession.NONE) && !(emptyGroupNode==BackupRestoreSession.NONE) && !(tripleBuffer.hasRemaining()) } } } } } FINALLY { -> TRY { -> TRY { -> IF { -> n2nMap.delete()@!(line==null) && n2nMap!=null } FINALLY { } ELSE { -> n2nFile.delete()@!(line==null) } -> IF { -> tplFC.close()@!(line==null) && tplFC!=null } -> IF { -> tplRAF.close()@!(line==null) && tplRAF!=null } -> tplFile.delete()@!(line==null) } -> logger.warn("I/O error on close",e,)@!(line==null) } } } CATCH(Exception) {}
