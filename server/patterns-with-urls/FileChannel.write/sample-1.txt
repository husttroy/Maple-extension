results[https://github.com/jmesnil/hornetq-old/blob/60b8d9bbeea15c813bc75f12a3747a235a603ba6/src/main/org/hornetq/core/journal/impl/NIOSequentialFile.java][doInternalWrite][3] = -> TRY {  -> channel.write(bytes,)@ } CATCH(Exception) {}
results[https://github.com/rhusar/HornetQ-oldmigration/blob/f88499bf9b0fefcf3bbb61a48c1e11d4d8650c34/hornetq-journal/src/main/java/org/hornetq/core/journal/impl/SyncSpeedTest.java][write][4] = -> TRY {  -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/FunkyAndroid/platform_libcore/blob/e69c2998bebbe2bf8e9f01ca6e644fd41c7914ec/harmony-tests/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_forceJ][3] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> writeOnlyFileChannel.write(writeBuffer,)@ -> writeOnlyFileChannel.force(true,)@ } CATCH(Exception) {}
results[https://github.com/molgenis/molgenis_apps-legacy/blob/2b396fcba67293e06043f3e8e12474ea11b1e5b1/apps/designgg/org/molgenis/designgg/Utils.java][setFile][1] = -> TRY {  -> fc=fos.getChannel()@ -> bb=ByteBuffer.wrap(fileContent,)@ -> fc.write(bb,)@ } CATCH(Exception) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/UseCharsets.java][main][1] = -> TRY {  -> outc=outf.getChannel()@ -> outputData=encoder.encode(cb,)@ -> outc.write(outputData,)@ } CATCH(Exception) {}
results[https://github.com/jmesnil/hornetq-old/blob/34ee4acc9b58e80779079d424386f5a9d1b01e2b/src/main/org/hornetq/core/client/impl/LargeMessageBufferImpl.java][cachePackage][5] = -> TRY {  -> cachedChannel.position(cachedChannel.size(),)@ -> cachedChannel.write(ByteBuffer.wrap(body,),)@ } CATCH(Exception) {}
results[https://github.com/bladesilent/Harmony/blob/cf7c74c4f9f9f3ae056c567978156b691b641ae0/classlib/modules/nio/src/test/java/common/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_positionJ_WriteOnly][8] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> writeOnlyFileChannel.position(POSITION,)@ -> writeOnlyFileChannel.write(writeBuffer,)@ -> writeOnlyFileChannel.close()@ } CATCH(Exception) {}
results[https://github.com/codefireXperiment/libcore/blob/e69c2998bebbe2bf8e9f01ca6e644fd41c7914ec/harmony-tests/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_position_WriteOnly][8] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> writeOnlyFileChannel.write(writeBuffer,)@ -> assertEquals(CONTENT_LENGTH,writeOnlyFileChannel.position(),)@ } CATCH(Exception) {}
results[https://github.com/apavlo/h-store/blob/04fb7bb96341aebf73a7353520d6fb0ad4a2d25b/src/frontend/edu/brown/hstore/cmdlog/CommandLogWriter.java][writeHeader][2] = -> TRY { -> this.fstream.write(b.b.asReadOnlyBuffer(),)@ -> this.fstream.force(true,)@ } CATCH(Exception) { -> throw new ServerFaultException(message,e,)@ }
results[https://github.com/zhuowei/MCPELauncher/blob/52b0d745b45573a4050c334f6e51a074cd2fa620/src/net/zhuoweizhang/mcpelauncher/NerdyStuffActivity.java][dumpLib][1] = -> TRY { -> channel=os.getChannel()@ -> channel.write(com.mojang.minecraftpe.MainActivity.minecraftLibBuffer,)@ -> channel.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/spring-projects/spring-batch/blob/7e85b506163b2b15429b4a958f926549a8ab5771/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareBufferedWriterTests.java][testBufferSizeInTransactionWithMultiByteCharacterUTF16BE][5] = -> TRY {  -> bb=ArgumentCaptor.forClass(ByteBuffer.class,)@ -> when(fileChannel.write(bb.capture(),),).thenReturn(6,)@ } CATCH(Exception) {}
results[https://github.com/bcdev/beam-globalbedo/blob/75e85c525bc3d66cb8098cdf5540293496948a03/beam-globalbedo-albedo-inversion/src/test/java/org/esa/beam/globalbedo/inversion/util/IOTest.java][testWriteFloatArray1][1] = -> TRY {  -> bb=ByteBuffer.allocateDirect(dim1*dim2*4,)@ -> floatBuffer=bb.asFloatBuffer()@ -> ch=file_output.getChannel()@ -> ch.write(bb,)@ -> ch.close()@ } CATCH(Exception) {}
results[https://github.com/ewcmsfree/ewcms/blob/2ef6f402907978c26e6faae6b913a95f99a5c036/src/main/java/com/ewcms/plugin/crawler/generate/util/IO.java][writeBytesToFile][2] = -> TRY { -> fc=new FileOutputStream(destination,).getChannel()@ -> fc.write(ByteBuffer.wrap(bytes,),)@ -> fc.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/codefollower/H2-Research/blob/55534e45e48b9b7161a29afc814317a8b4961416/src/test/org/h2/test/db/TestOpenClose.java][testErrorMessageWrongSplit][2] = -> TRY {  -> c=FileUtils.open(fn+".1.part","rw",)@ -> c.position(c.size()*2-1,)@ -> c.write(ByteBuffer.wrap( new byte[],),)@ -> c.close()@ } CATCH(Exception) {}
results[https://github.com/quchunguang/test/blob/5326b1372c4ab1e3aaf3f0d16a07a6342b20d84d/testjava/TIJ4-code/io/ChannelCopy.java][main][2] = -> TRY {  -> buffer=ByteBuffer.allocate(BSIZE,)@ -> LOOP { -> buffer.flip()@in.read(buffer,)!=-1 -> out.write(buffer,)@in.read(buffer,)!=-1 -> buffer.clear()@in.read(buffer,)!=-1 } } CATCH(Exception) {}
results[https://github.com/buzheng/buzheng-study-java/blob/806c68192742caab7d45b6c523cfbe492b123f63/src/main/java/org/buzheng/study/nio/WriteToFile.java][main][1] = -> TRY {  -> channel=fos.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> buffer.put(message.getBytes(),)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/OpenEtna/android_dalvik/blob/88f28cad4d6617b4f82f1cd752a7a9b11a555561/libcore/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_writeLByteBuffer][8] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> result=writeOnlyFileChannel.write(writeBuffer,)@ -> assertEquals(CONTENT_AS_BYTES_LENGTH,result,)@ -> assertEquals(CONTENT_AS_BYTES_LENGTH,writeBuffer.position(),)@ -> writeOnlyFileChannel.close()@ } CATCH(Exception) {}
results[https://github.com/fliuzzi/DataParser/blob/dd44405964ce27cd8a66adbd3f5730f7e26ae90c/src/com/where/atlas/feed/YelpParserUtils.java][storeListing][3] = -> LOOP { -> TRY { -> outputChannel_.write(ByteBuffer.wrap(ir.userId_+","+placeId+","+ir.rating_+newline.getBytes(),),)@ } CATCH(Exception) { -> e.printStackTrace()@ } }
results[https://github.com/apavlo/h-store/blob/32b0e1b5e081bdb8bd71646f470a7ff17c34c055/src/frontend/edu/brown/hstore/wal/WriteAheadLogger.java][write][1] = -> TRY { -> fstream.write(b.b.asReadOnlyBuffer(),)@ -> fstream.force(true,)@ } CATCH(Exception) { -> message="Failed to write log entry for "+ts.toString()@ -> throw new ServerFaultException(message,e,ts.getTransactionId(),)@ }
results[https://github.com/sashakh/waze/blob/34ea3e823616a5ca237ff43ffdf5f7caa29c06ff/src/android/java/src/com/waze/FreeMapCameraPreView.java][SaveToFile][1] = -> TRY { -> fileChannel=fileOS.getChannel()@!(mBufOS.size()<=0) -> fileChannel.write(ByteBuffer.wrap(mBufOS.toByteArray(),),)@!(mBufOS.size()<=0) } CATCH(Exception) { -> WazeLog.e("Error in writing the file to the disk. ",ex,)@!(mBufOS.size()<=0) -> ex.printStackTrace()@!(mBufOS.size()<=0) }
results[https://github.com/coderplay/h2-bitmap/blob/a6164db4e1ea39482dc45713e20b9bcf59c8ed42/h2/src/test/org/h2/test/db/TestOpenClose.java][testErrorMessageWrongSplit][5] = -> TRY {  -> c=FileUtils.open(getBaseDir()+"/openClose2.h2.db.1.part","rw",)@ -> c.position(c.size()*2-1,)@ -> c.write(ByteBuffer.wrap( new byte[],),)@ -> c.close()@ } CATCH(Exception) {}
results[https://github.com/codefollower/H2-Research/blob/55534e45e48b9b7161a29afc814317a8b4961416/my-test/my/test/store/fs/FileUtilsTest.java][test][4] = -> TRY {  -> fc=FileUtils.open(fileName,mode,)@ -> src=ByteBuffer.allocate(1024,)@ -> src.put("ddddddddd".getBytes(),)@ -> src.flip()@ -> fc.write(src,)@ -> fc.close()@ } CATCH(Exception) {}
results[https://github.com/bluespark80/example/blob/25b780a08c881e3ebcbacf85a817729741a549e4/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_writeLByteBuffer_NonZeroPosition][8] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> writeBuffer.position(pos,)@ -> result=writeOnlyFileChannel.write(writeBuffer,)@ -> assertEquals(CONTENT_AS_BYTES_LENGTH-pos,result,)@ -> assertEquals(CONTENT_AS_BYTES_LENGTH,writeBuffer.position(),)@ -> writeOnlyFileChannel.close()@ } CATCH(Exception) {}
results[https://github.com/apache/jackrabbit-oak/blob/76796cc3e097b6cf5214fe0618448a7b672656f3/oak-core/src/test/java/org/apache/jackrabbit/mk/fs/FileSystemTest.java][testSimpleExpandTruncateSize][8] = -> TRY {  -> c=FileUtils.open(f,"rw",)@ -> c.position(4000,)@ -> c.write(ByteBuffer.wrap( new byte[],),)@ -> lock=c.tryLock()@ -> c.truncate(0,)@ -> c.close()@ } CATCH(Exception) {}
results[https://github.com/nroduit/Weasis/blob/189d73780139d9bdbda027a2e096f3655c250c68/weasis-dicom/weasis-dicom-viewer2d/src/main/java/org/weasis/dicom/viewer2d/mpr/SeriesBuilder.java][writToFile][1] = -> TRY { -> byteBuffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> out=os.getChannel()@ -> out.write(byteBuffer,)@ } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> FileUtil.safeClose(os,)@ }
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/WriteSomeBytes.java][main][1] = -> TRY {  -> fc=fout.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.put(message[i],)@i<message.length } -> buffer.flip()@ -> fc.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/spring-projects/spring-batch/blob/7e85b506163b2b15429b4a958f926549a8ab5771/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareBufferedWriterTests.java][testFlushInTransactionForceSync][1] = -> TRY {  -> when(fileChannel.write((ByteBuffer) anyObject(),),).thenReturn(3,)@ -> verify(fileChannel,times(1,),).force(false,)@ } CATCH(Exception) {}
results[https://github.com/spring-projects/spring-batch/blob/7e85b506163b2b15429b4a958f926549a8ab5771/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareBufferedWriterTests.java][testFlushInTransaction][1] = -> TRY {  -> when(fileChannel.write((ByteBuffer) anyObject(),),).thenReturn(3,)@ -> verify(fileChannel,never(),).force(false,)@ } CATCH(Exception) {}
results[https://github.com/taktod/JCaster/blob/80e1b292bcfe7fd113bddf232a8f7bc955b2a5cf/FlvSavePlugin/src/main/java/com/ttProject/jcaster/flvsave/core/FlvSaver.java][<init>][1] = -> TRY {  -> channel=new FileOutputStream(target,).getChannel()@ -> header=new FlvHeader()@ -> header.setAudioFlg(true,)@ -> header.setVideoFlg(true,)@ -> channel.write(header.getBuffer(),)@ } CATCH(Exception) {}
results[https://github.com/zhongl/iPage/blob/0a0c634c5b48191dcc2766b3366aaa556ce888d3/src/test/java/com/github/zhongl/nio/ForceBenchmark.java][forceChannelOnce][1] = -> TRY {  -> channel=new FileOutputStream(file,).getChannel()@ -> LOOP { -> channel.write(ByteBuffer.wrap( new byte[],),)@ } -> channel.force(false,)@ -> channel.close()@ } CATCH(Exception) {}
results[https://github.com/apavlo/h-store/blob/6b97f7c75168d0adf0d76a7091b24295da8d0e57/src/frontend/edu/brown/hstore/wal/CommandLogWriter.java][appendToLog][2] = } ELSE { -> TRY { -> this.fstream.write(b.b.asReadOnlyBuffer(),)@ -> this.fstream.force(true,)@ } CATCH(Exception) { -> message="Failed to write single log entry for "+ts.toString()@ -> throw new ServerFaultException(message,e,ts.getTransactionId(),)@ }
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/FastCopyFile.java][main][1] = -> TRY {  -> fcout=fout.getChannel()@ -> buffer=ByteBuffer.allocateDirect(1024,)@ -> LOOP { -> buffer.clear()@ -> r=fcin.read(buffer,)@ -> buffer.flip()@ -> fcout.write(buffer,)@ } } CATCH(Exception) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/CopyFile.java][main][1] = -> TRY {  -> fcout=fout.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.clear()@ -> r=fcin.read(buffer,)@ -> buffer.flip()@ -> fcout.write(buffer,)@ } } CATCH(Exception) {}
results[https://github.com/RamesesDev/osiris2/blob/ee716ae432471d376fe6a7a2104703a8f0c83fe1/labs/rameses-scheduling/test/test/TestFile.java][testHello][1] = -> TRY {  -> buffer=ByteBuffer.allocate(100,)@ -> buffer.put(data,)@ -> buffer.flip()@ -> writeChannel=fos.getChannel()@ -> writeChannel.write(buffer,)@ -> System.out.println(writeChannel.position(),)@ -> writeChannel.close()@ } CATCH(Exception) {}
results[https://github.com/exoplatform/aio-portal/blob/a01c7972884aa573f857089dd4597800aed7d209/component/xml-parser/src/main/java/org/exoplatform/services/common/DataBuffer.java][save][1] = -> TRY {  -> fchan=output.getChannel()@ -> buff=ByteBuffer.allocateDirect(d.length,)@ -> LOOP { -> buff.put(d[i],)@i<d.length } -> buff.rewind()@ -> fchan.write(buff,)@ -> buff.clear()@ -> fchan.close()@ } CATCH(Exception) {}
results[https://github.com/FunkyAndroid/platform_libcore/blob/e69c2998bebbe2bf8e9f01ca6e644fd41c7914ec/harmony-tests/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_position_ReadWrite][8] = -> TRY {  -> assertEquals(0,readWriteFileChannel.position(),)@ -> readWriteFileChannel.read(readBuffer,)@ -> assertEquals(CONTENT_LENGTH,readWriteFileChannel.position(),)@ -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> readWriteFileChannel.write(writeBuffer,)@ -> assertEquals(CONTENT_LENGTH*2,readWriteFileChannel.position(),)@ } CATCH(Exception) {}
results[https://github.com/bcdev/beam-globalbedo/blob/75e85c525bc3d66cb8098cdf5540293496948a03/beam-globalbedo-albedo-inversion/src/test/java/org/esa/beam/globalbedo/inversion/util/IOTest.java][testWriteFloatArray2][1] = -> TRY {  -> ch=file_output.getChannel()@ -> bb=ByteBuffer.allocate(dim1*dim2*4,)@ -> LOOP { -> LOOP { -> bb.putFloat(index,fArray[i][j],)@i<dim1 && j<dim2 } } -> ch.write(bb,)@ -> ch.close()@ } CATCH(Exception) {}
results[https://github.com/zhongl/iPage/blob/ee506eb85041339dbca97fe78dae21f89eba8764/src/test/java/com/github/zhongl/buffer/FileChannelForceBenchmark.java][benchmark][1] = -> TRY {  -> LOOP { -> channel.position(i*ONE_KILO_BYTES,)@i<size -> channel.write(ByteBuffer.wrap(bytes,).putInt(0,i,),)@i<size -> IF { -> printAverageForceElapse(i+1,)@i+1%FOUR*averageForceElpasePages==0 && i<size } } } CATCH(Exception) {}
results[https://github.com/bobmcwhirter/jboss-messaging/blob/1a7527d4d3b297d4cdc3fb5ff1cfcdb2af2e2ee1/src/main/org/jboss/messaging/core/journal/impl/NIOSequentialFile.java][fill][1] = -> TRY {  -> bb=ByteBuffer.allocateDirect(size,)@ -> LOOP { -> bb.put(fillCharacter,)@ } -> bb.flip()@ -> channel.position(position,)@ -> channel.write(bb,)@ -> channel.force(false,)@ -> channel.position(0,)@ } CATCH(Exception) {}
results[https://github.com/sayornis/USGS-VHP/blob/057838817ad52b988a9abaea23f9affbea0b47a3/Util/src/gov/usgs/util/DriveSwamp.java][run][1] = -> bb=ByteBuffer.allocateDirect(writeSize,)@ -> LOOP { -> bb.put((byte) i,)@i<writeSize } -> LOOP { -> TRY { -> bb.flip()@ -> out.write(bb,)@ } CATCH(Exception) { -> e.printStackTrace()@ } }
results[https://github.com/molgenis/molgenis_apps-legacy/blob/f5e6de5157008d31f4806c56f157367a9bac1ba6/apps/designgg/org/molgenis/designgg/CalculateDesignScreen.java][executeR][1] = -> TRY { -> LOOP { -> fc=fos.getChannel()@!(!(this.workingDir.mkdir())) -> bb=ByteBuffer.wrap(inputAttachements.get(fileName,),)@inputAttachements.keySet() && !(!(this.workingDir.mkdir())) -> fc.write(bb,)@!(!(this.workingDir.mkdir())) } } CATCH(Exception) { -> logger.error(e.getMessage(),)@ -> e.printStackTrace()@ }
results[https://github.com/thyms/Code-Base/blob/bb57a562bb3ccabc067856c4934db81145e561ae/code.base.main/src/main/java/javam/io/RunnerReadingAFile.java][main][1] = -> TRY {  -> targetChannel=new FileOutputStream("src/main/resources/temp/temp_write.txt",).getChannel()@ -> buffer1=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer1.flip()@(read1=sourceChannel.read(buffer1,))!=-1 -> targetChannel.write(buffer1,)@(read1=sourceChannel.read(buffer1,))!=-1 -> buffer1.clear()@(read1=sourceChannel.read(buffer1,))!=-1 } -> targetChannel.close()@ } CATCH(Exception) {}
results[https://github.com/ggrandes/kvstore/blob/07a183ff9010ca688ea2e7cf40bbd2a07a34d1c3/src/main/java/org/kvstore/io/FileStreamStore.java][write][1] = -> TRY { -> IF { -> fcOutput.write( new ByteBuffer[],)@ -> offsetOutputUncommited=offsetOutputCommited=fcOutput.position()@ -> IF { -> fcOutput.force(false,)@ } } } CATCH(Exception) { -> log.error("Exception in write()",e,)@ }
results[https://github.com/alevy/comet/blob/2077d66e96bdbf07bfb5a80b3b65f8521bb50667/dht/org/gudy/azureus2/core3/util/test/SHA1Verification.java][createTestFiles][10] = -> TRY { -> LOOP { -> fc=new RandomAccessFile(file,"rw",).getChannel()@ -> LOOP { -> bb=ByteBuffer.wrap(buffer,)@ -> position+=fc.write(bb,)@position<size } -> fc.close()@ } } CATCH(Exception) { -> Debug.printStackTrace(e,)@ }
results[https://github.com/apache/bookkeeper/blob/16978d671b8d6d9e563edb3a6119a4be574245af/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java][writeJunkJournal][2] = -> TRY {  -> fc=new RandomAccessFile(fn,"rw",).getChannel()@ -> zeros=ByteBuffer.allocate(512,)@ -> fc.write(zeros,4*1024*1024,)@ -> fc.position(0,)@ -> LOOP { -> fc.write(ByteBuffer.wrap("JunkJunkJunk".getBytes(),),)@ } } CATCH(Exception) {}
results[https://github.com/rhusar/HornetQ-oldmigration/blob/ed6a8279f7ba90d6af87b34411eff9423f9c1424/hornetq-core/src/main/java/org/hornetq/core/journal/impl/NIOSequentialFile.java][fill][4] = -> TRY {  -> bb=ByteBuffer.allocate(size,)@ -> LOOP { -> bb.put(fillCharacter,)@ } -> bb.flip()@ -> channel.position(position,)@ -> channel.write(bb,)@ -> channel.force(false,)@ -> channel.position(0,)@ -> fileSize=channel.size()@ } CATCH(Exception) {}
results[https://github.com/twitter/bookkeeper/blob/29eaed884a442a73cd620776085da00395f86b53/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java][writeLedgerDir][2] = -> TRY {  -> LOGFILE_HEADER=ByteBuffer.allocate(1024,)@ -> LOGFILE_HEADER.put("BKLO".getBytes(),)@ -> logfile=new RandomAccessFile(new File(dir,Long.toHexString(logId,)+".log",),"rw",).getChannel()@ -> logfile.write((ByteBuffer) LOGFILE_HEADER.clear(),)@ -> logfile.close()@ } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/53fa8c28b5dfc69a4aefebf16a42c840ddd50b12/test/java/nio/channels/FileChannel/Transfer.java][xferTest02][2] = -> TRY {  -> LOOP { -> srcData[i]=(byte) generator.nextInt()@i<5000 } -> fc1=raf1.getChannel()@ -> LOOP { -> bytesWritten=fc1.write(ByteBuffer.wrap(srcData,),)@bytesWritten<5000 } -> bytesWritten=fc1.transferTo(startPosition,bytesToWrite,fc2,)@ -> fc1.close()@ } CATCH(Exception) {}
results[https://github.com/spring-projects/spring-batch/blob/7e85b506163b2b15429b4a958f926549a8ab5771/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareBufferedWriterTests.java][testWriteOutsideTransactionForceSync][1] = -> TRY {  -> bb=ArgumentCaptor.forClass(ByteBuffer.class,)@ -> when(fileChannel.write(bb.capture(),),).thenReturn(3,)@ -> s=getStringFromByteBuffer(bb.getValue(),)@ -> verify(fileChannel,times(1,),).force(false,)@ } CATCH(Exception) {}
results[https://github.com/spring-projects/spring-batch/blob/7e85b506163b2b15429b4a958f926549a8ab5771/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareBufferedWriterTests.java][testWriteOutsideTransaction][1] = -> TRY {  -> bb=ArgumentCaptor.forClass(ByteBuffer.class,)@ -> when(fileChannel.write(bb.capture(),),).thenReturn(3,)@ -> s=getStringFromByteBuffer(bb.getValue(),)@ -> verify(fileChannel,never(),).force(false,)@ } CATCH(Exception) {}
results[https://github.com/laarid/platform_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/libcore/java/nio/channels/FileChannelTest.java][test_readv][38] = -> TRY {  -> fc=new FileOutputStream(tmp,).getChannel()@ -> fc.write(ByteBuffer.wrap("abcdABCD".getBytes("US-ASCII",),),)@ -> fc.close()@ -> fc=new FileInputStream(tmp,).getChannel()@ -> assertEquals(8,fc.read(buffers,),)@ -> fc.close()@ } CATCH(Exception) {}
results[https://github.com/rhusar/HornetQ-oldmigration/blob/3d3cefd12e3d9c5fb8e5c038f83729c592aa686f/hornetq-core/src/main/java/org/hornetq/core/replication/impl/ReplicationEndpointImpl.java][handleReplicationSynchronization][2] = -> TRY {  -> data=msg.getData()@ -> channel2=journalSyncFile.getChannel()@ -> IF { -> channel2.close()@!(data==null) -> return @data==null } -> channel2.write(ByteBuffer.wrap(data,),)@!(data==null) -> IF { -> return @data==null } -> channel.writeDirect(ByteBuffer.wrap(data,),true,)@!(data==null) } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/53fa8c28b5dfc69a4aefebf16a42c840ddd50b12/test/java/nio/channels/FileChannel/Transfer.java][xferTest03][2] = -> TRY {  -> fc1=raf1.getChannel()@ -> fc1.truncate(0,)@ -> LOOP { -> bytesWritten=fc1.write(ByteBuffer.wrap(srcData,),)@bytesWritten<4 } -> fc1.transferTo(0,srcData.length+1,fc2,)@ -> IF { -> throw new Exception("xferTest03 failed",)@fc2.size()>4 } -> fc1.close()@!(fc2.size()>4) } CATCH(Exception) {}
results[https://github.com/lalalic/Personal/blob/c471fddc9a6c0e1c6dc43fb65f98a1a0e0191320/travel/android-1qiyou/src/com/equ/lbs/LocationUpdater.java][flush][1] = -> TRY { -> IF { -> out=new FileOutputStream(f,true,).getChannel()@out==null||!(out.isOpen()) } -> buffer.flip()@ -> out.write(buffer,)@ -> buffer.clear()@ -> out.force(true,)@ -> out.close()@ } CATCH(Exception) { -> service.notify(e.getMessage(),)@ }
results[https://github.com/monaca/monaca-framework-android/blob/4096a575bd6984bde66e1a81247f3dd00f479884/MonacaFramework/src/fi/iki/elonen/NanoHTTPD.java][saveTmpFile][4] = -> IF { -> TRY { -> src=b.duplicate()@ -> dest=new FileOutputStream(tempFile.getName(),).getChannel()@ -> src.position(offset,).limit(offset+len,)@len>0 -> dest.write(src.slice(),)@ } CATCH(Exception) { -> System.err.println("Error: "+e.getMessage(),)@ } }
results[https://github.com/jmesnil/hornetq-old/blob/4ba2bb971295391b28786aec5ffa06c412a6a183/src/main/org/hornetq/core/journal/impl/SyncSpeedTest.java][run][4] = -> TRY {  -> LOOP { -> channel=rfile.getChannel()@ -> write(bb,channel,fileSize,)@ -> channel.force(true,)@ -> channel.position(0,)@ -> bb1=generateBuffer(recordSize,(byte) 'h',)@ -> LOOP { -> bb1.flip()@ -> channel.write(bb1,)@ -> channel.force(false,)@ } } } CATCH(Exception) {}
results[https://github.com/sayornis/USGS-VHP/blob/057838817ad52b988a9abaea23f9affbea0b47a3/Util/src/gov/usgs/util/DriveSwamp.java][<init>][1] = -> TRY {  -> bb=ByteBuffer.allocateDirect(size,)@ -> LOOP { -> bb.put((byte) i,)@i<size } -> LOOP { -> bb.flip()@ -> out=new FileOutputStream("swamp_"+i+".tmp",).getChannel()@i<numFiles -> LOOP { -> out.write(bb,)@bb.hasRemaining() } } } CATCH(Exception) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/io/FileDescriptor/Finalize.java][doFileChannel][3] = -> TRY {  -> fc2=fis2.getChannel()@ -> bb=ByteBuffer.allocateDirect(1,)@ -> ret=fc2.read(bb,)@ -> System.out.println("read "+ret+" bytes from fc2:",)@ -> fc2.close()@ -> fc2=fos2.getChannel()@ -> bb=ByteBuffer.allocateDirect(data.length,)@ -> bb=bb.put(data,)@ -> bb=(ByteBuffer) bb.flip()@ -> ret=fc2.write(bb,)@ -> System.out.println("Wrote:"+ret+" bytes to fc2",)@ -> fc2.close()@ } CATCH(Exception) {}
results[https://github.com/pescuma/buildhealth/blob/70c213f1a6df19c34e8d753dc2b6dfb5fb3786b7/buildhealth.cli/src/fi/iki/elonen/NanoHTTPD.java][saveTmpFile][9] = -> IF { -> TRY { -> src=b.duplicate()@ -> dest=fileOutputStream.getChannel()@ -> src.position(offset,).limit(offset+len,)@len>0 -> dest.write(src.slice(),)@ } CATCH(Exception) { -> System.err.println("Error: "+e.getMessage(),)@ } FINALLY { -> safeClose(fileOutputStream,)@ } }
results[https://github.com/readium/SDKLauncher-Android/blob/abb09fb67a304bdb92c0ed08c48e37b0fcdf16f9/SDKLauncher-Android/src/fi/iki/elonen/NanoHTTPD.java][saveTmpFile][1] = -> IF { -> TRY { -> src=b.duplicate()@ -> dest=fileOutputStream.getChannel()@ -> src.position(offset,).limit(offset+len,)@len>0 -> dest.write(src.slice(),)@ } CATCH(Exception) { -> Log.e(TAG,""+e.getMessage(),e,)@ } FINALLY { -> safeClose(fileOutputStream,)@ } }
results[https://github.com/VirginiaFIRST/frc2013score/blob/31734c7a5c6cb8a0104dde9a29483a0d544c63c5/src/main/java/FRC_Score_Sys/WebServer/NanoHTTPD.java][saveTmpFile][1] = -> IF { -> TRY { -> src=b.duplicate()@ -> dest=fileOutputStream.getChannel()@ -> src.position(offset,).limit(offset+len,)@len>0 -> dest.write(src.slice(),)@ } CATCH(Exception) { -> logger.error(e.getLocalizedMessage(),)@ } FINALLY { -> safeClose(fileOutputStream,)@ } }
results[https://github.com/svn2github/H2-Mirror/blob/6d2693f380b111ad55032d19d869ed3fcad6cc4a/h2/src/test/org/h2/test/unit/TestRecovery.java][testCorrupt][7] = -> TRY {  -> f=FileUtils.open(getBaseDir()+"/recovery.h2.db","rw",)@ -> LOOP { -> FileUtils.readFully(f,ByteBuffer.wrap(buff,),)@f.position()<f.size() -> IF { -> f.position(f.position()-buff.length,)@f.position()<f.size() -> f.write(ByteBuffer.wrap(buff,),)@f.position()<f.size() && new String(buff,).contains("Hello World1",) } } -> f.close()@ } CATCH(Exception) {}
results[https://github.com/rhusar/HornetQ-oldmigration/blob/0f55e9d4ec2b0f3e3908c1eeb2f8e4eef6b705fc/hornetq-core/src/main/java/org/hornetq/core/replication/ReplicationEndpoint.java][handleReplicationSynchronization][1] = -> TRY {  -> data=msg.getData()@ -> IF { -> return @!(largeMessage instanceof LargeServerMessageInSync) } -> channel2=journalSyncFile.getChannel()@ -> IF { -> channel2.close()@!(data==null) -> return @data==null } -> channel2.write(ByteBuffer.wrap(data,),)@!(data==null) -> IF { -> return @data==null } -> channel.writeDirect(ByteBuffer.wrap(data,),true,)@!(data==null) } CATCH(Exception) {}
results[https://github.com/exoplatform/jcr/blob/043a505f7794acc450a96db2da5a6fb15f379fe0/exo.jcr.component.core/src/main/java/org/exoplatform/services/jcr/impl/core/query/ErrorLog.java][run][1] = -> TRY {  -> IF { -> out=new FileOutputStream(log,).getChannel()@ -> out.position(1024*fileSize-1,)@ -> out.write(ByteBuffer.wrap( new byte[],),)@ -> out.position(0,)@ -> out.force(false,)@ } ELSE { -> out=new FileOutputStream(log,true,).getChannel()@ } } CATCH(Exception) {}
results[https://github.com/nickman/jzab/blob/c88d9b13e40a99a2331adda5fb54c9fe754621ee/agent/src/main/java/org/helios/jzab/agent/net/active/collection/DirectFileActiveCollectionStream.java][flushToFile][1] = -> TRY { -> IF { -> bytesTransferred=fileChannel.transferFrom(buffer,fileChannel.position(),bytesWritten,)@ -> fileChannel.position(fileChannel.position()+bytesTransferred,)@ } ELSE { -> bytesTransferred=fileChannel.write(buffer.toByteBuffer(),)@ } -> IF { -> log.warn("\n\t!!!!!!!!!!!!!!!!!!!!!!!!!!\n\tOi! bytesTransferred!=bytesWritten !  [{}] != [{}]\n\t!!!!!!!!!!!!!!!!!!!!!!!!!!\n",bytesTransferred,bytesWritten,)@bytesTransferred!=bytesWritten } } CATCH(Exception) { -> throw new RuntimeException("Failed to flush buffer to file",e,)@ }
results[https://github.com/MoSync/MoSync/blob/69cab3aefea6d208159ad411ea8bf770aa644eda/runtimes/java/platforms/androidJNI/AndroidProject/src/com/mosync/internal/android/MoSyncSound.java][storeIfBinaryAudioResource][1] = -> audioData=mMoSyncThread.getBinaryResource(soundHandle,)@ -> IF { -> return @null==audioData } -> IF { -> return @!(null==audioData) && !(checkIfMimeAudioType(audioData,offset,)) } -> mimeType=readMimeString(audioData,offset,)@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) -> IF { -> return @mimeType==null && !(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) } -> TRY { -> channel=audioFileOutputStream.getChannel()@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) -> audioData.position(0,)@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) -> channel.write(audioData,)@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) -> channel.close()@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) } CATCH(Exception) { -> Log.e("MoSyncSound.storeIfBinaryAudioResource","Unable to save temporary audio file.",)@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) -> ex.printStackTrace()@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) }
results[https://github.com/wox2/migrace_databaze/blob/fe474e18a720b5bf55f88fc2d35345c3ee57b51f/skola/Fel_bc/2.semestr/OMO/Pecinovsky/MOJJ_Projekty_ASCII/07_Rozhrani_A/Elipsa.java][maWriteStore][2] = -> TRY { -> IF { -> bb=mBinaryResources.get(data,)@!(f.isFile()) -> IF { -> fc=fos.getChannel()@!(f.isFile()) && !(null!=bb) -> bb.position(0,)@null!=bb && !(f.isFile()) -> fc.write(bb,)@null!=bb && !(f.isFile()) -> fc.force(false,)@!(f.isFile()) && !(null!=bb) -> fc.close()@!(f.isFile()) && !(null!=bb) -> return 1@null!=bb && f.isFile() } -> IF { -> return 1@f.isFile() && null!=ubd && !(null!=bb) } -> return STERR_GENERIC@f.isFile() && !(null!=ubd) && !(null!=bb) } } CATCH(Exception) { -> logError("write store exception : "+e.toString(),e,)@ }
results[https://github.com/spring-projects/spring-batch/blob/7e85b506163b2b15429b4a958f926549a8ab5771/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareBufferedWriterTests.java][testCloseOutsideTransaction][1] = -> TRY {  -> byteBufferCaptor=ArgumentCaptor.forClass(ByteBuffer.class,)@ -> when(fileChannel.write(byteBufferCaptor.capture(),),).thenAnswer(new Answer<Integer>(),)@ -> assertEquals("foo",getStringFromByteBuffer(byteBufferCaptor.getAllValues().get(0,),),)@ -> assertEquals("c",getStringFromByteBuffer(byteBufferCaptor.getAllValues().get(1,),),)@ } CATCH(Exception) {}
results[https://github.com/RamesesDev/osiris2/blob/c8c2d2376572d4a3bd23b0ccf6d60d878d3ac47a/common/rameses-common/src/com/rameses/messaging/LogFile.java][write][1] = -> TRY { -> buffer=ByteBuffer.allocate(allocation,)@ -> buffer.put(data,)@ -> buffer.put(delimiter,)@ -> buffer.flip()@ -> writeChannel=new FileOutputStream(file,true,).getChannel()@ -> writeChannel.write(buffer,)@ -> this.writePosition=writeChannel.position()@ } CATCH(Exception) { -> throw new RuntimeException(ex,)@ } FINALLY { -> TRY { -> writeChannel.close()@ } }
results[https://github.com/Unidata/thredds/blob/9ebd106363a0b0259cb8e06956f501404278ffa9/cdm/src/timing/java/ucar/nc2/TimeMMap.java][writeChannelDirect][2] = -> TRY {  -> channel=file.getChannel()@ -> IF { -> System.out.println("Opened file to write:'"+rfilename+"', size="+channel.size()+" fileSize = "+fileSize+" Mb; recSize = "+recordSize+" Kb; nrecs = "+n,)@ } -> buff=ByteBuffer.allocate(recordSizeBytes,)@ -> src=buff.asIntBuffer()@ -> LOOP { -> buff.clear()@ -> channel.write(buff,)@ -> showBufferInfo(" end bb ",buff,)@ -> System.out.println(" channel pos= "+channel.position(),)@ } -> channel.close()@ } CATCH(Exception) {}
results[https://github.com/veltzer/demos/blob/e94e24d62f292fe4b97dd1740c9fa6b5f46e5272/java/src/core/nio/CopyFile.java][main][3] = -> TRY {  -> fcout=fout.getChannel()@ -> IF { -> buffer=ByteBuffer.allocateDirect(size,)@ } ELSE { -> buffer=ByteBuffer.allocate(size,)@ } -> LOOP { -> readCount=fcin.read(buffer,)@ -> IF { -> buffer.flip()@ -> fcout.write(buffer,)@ -> buffer.clear()@ } } } CATCH(Exception) {}
results[https://github.com/RamesesDev/osiris2/blob/ee716ae432471d376fe6a7a2104703a8f0c83fe1/labs/rameses-scheduling/test/com/rameses/concurrent/EventQueue.java][sendMessage][1] = -> TRY { -> IF { -> throw new Exception("File does not exist",)@!(f.exists()) } -> buffer=ByteBuffer.allocate(allocation,)@!(!(f.exists())) -> buffer.put(data,)@!(!(f.exists())) -> buffer.put(delimiter,)@!(!(f.exists())) -> buffer.flip()@!(!(f.exists())) -> writeChannel=new FileOutputStream(f,true,).getChannel()@!(!(f.exists())) -> writeChannel.write(buffer,)@!(!(f.exists())) } CATCH(Exception) { -> throw new RuntimeException(ex,)@ } FINALLY { -> TRY { -> writeChannel.close()@ } }
results[https://github.com/veltzer/demos/blob/5e8fd91dcac8226c5603017b502856ac23643cc9/java/standard/src/core/nio/BufferChannel.java][main][3] = -> TRY { -> buff=ByteBuffer.allocate(1024,)@ -> LOOP { -> buff.put((byte) 'a'+i,)@i<26 } -> System.out.println("pos is: "+buff.position(),)@ -> buff.put((byte) 'a',)@ -> System.out.println("pos is: "+buff.position(),)@ -> buff.put(304,(byte) 'a',)@ -> System.out.println("pos is: "+buff.position(),)@ -> channel=output.getChannel()@ -> buff.flip()@ -> channel.write(buff,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/killme2008/Metamorphosis/blob/91e022ba65d9ecadb509ac4c7141e5677c52de07/metamorphosis-client/src/main/java/com/taobao/metamorphosis/client/consumer/storage/LocalOffsetStorage.java][commitOffset][1] = -> IF { -> return @infoList==null||infoList.isEmpty() } -> TRY { -> channel=out.getChannel()@!(infoList==null||infoList.isEmpty()) -> buf=ByteBuffer.wrap(json.getBytes(),)@!(infoList==null||infoList.isEmpty()) -> LOOP { -> channel.write(buf,)@buf.hasRemaining() && !(infoList==null||infoList.isEmpty()) } -> this.close(channel,)@!(infoList==null||infoList.isEmpty()) } CATCH(Exception) { -> log.error("commitOffset failed ",e,)@!(infoList==null||infoList.isEmpty()) } FINALLY { -> IF { -> this.close(channel,)@channel!=null&&channel.isOpen() && !(infoList==null||infoList.isEmpty()) } -> this.close(out,)@!(infoList==null||infoList.isEmpty()) }
results[https://github.com/ggrandes/kvstore/blob/7ba19b7c23a0ff6db53097f400b61853f951b84c/src/main/java/org/infra/io/FileBlockStore.java][set][1] = -> IF { -> System.out.println("set("+index+","+buf+")",)@ } -> TRY { -> IF { -> System.err.println("ERROR: buffer.capacity="+buf.limit()+" > blocksize="+blockSize,)@buf.limit()>blockSize } -> IF { -> mbb.put(buf,)@mbb!=null } ELSE { -> fileChannel.position(index*blockSize,)@ -> fileChannel.write(buf,)@ } -> bufstack.push(buf,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/RamesesDev/osiris2/blob/c8c2d2376572d4a3bd23b0ccf6d60d878d3ac47a/common/rameses-common/src/com/rameses/messaging/BasicFileEventQueue.java][send][1] = -> TRY { -> buffer=ByteBuffer.allocate(super.getAllocation(),)@ -> buffer.put(data,)@ -> buffer.put(super.getDelimiter(),)@ -> buffer.flip()@ -> writeChannel=new FileOutputStream(reader.getFile(),true,).getChannel()@ -> writeChannel.write(buffer,)@ -> this.position=writeChannel.position()@ } CATCH(Exception) { -> throw new RuntimeException(ex,)@ } FINALLY { -> TRY { -> writeChannel.close()@ } }
results[https://github.com/jeromerobert/jCAE/blob/1d508573646d6b192529200ecf27d9f60135ed30/amibe/src/org/jcae/mesh/xmldata/MeshToSoupConvert.java][processOneShape][1] = -> TRY { -> fcO=new FileOutputStream(rawFile,true,).getChannel()@ -> bbo=ByteBuffer.allocate(bufferSize*80/12,)@ -> bboD=bbo.asDoubleBuffer()@ -> LOOP { -> bbo.clear()@ -> LOOP { -> bbo.position(8*bboD.position(),)@ -> bbo.putInt(iFace,)@ -> bbo.putInt(0,)@ } -> bbo.flip()@ -> fcO.write(bbo,)@ } -> fcO.close()@ } CATCH(Exception) { -> ex.printStackTrace()@ -> throw new RuntimeException(ex,)@ }
results[https://github.com/jacksonicson/twospot/blob/ce6c8f805c0b7fb2754674f923b5809c654e873e/3party/Zookeeper/zookeeper-3.2.1/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/Bookie.java][run][2] = -> TRY { -> logFile=new RandomAccessFile(new File(journalDirectory,Long.toHexString(System.currentTimeMillis(),)+".txn",),"rw",).getChannel()@ -> zeros.clear()@ -> logFile.write(zeros,nextPrealloc,)@ -> LOOP { } ELSE { -> IF { -> logFile.force(false,)@ } -> logFile.write( new ByteBuffer[],)@ -> IF { -> nextPrealloc=logFile.size()/preAllocSize+1*preAllocSize@logFile.position()>nextPrealloc -> zeros.clear()@ -> logFile.write(zeros,nextPrealloc,)@logFile.position()>nextPrealloc } } } CATCH(Exception) { -> LOG.fatal("Bookie thread exiting",e,)@ }
results[https://github.com/agueganno/h2geometry/blob/9c3fcfffdb4dbd9c65267839c27ada28d5c176db/h2/src/test/org/h2/test/unit/TestFileSystem.java][testSimple][7] = -> TRY {  -> channel=FileUtils.open(fsBase+"/test","rw",)@ -> random.nextBytes(buffer,)@ -> channel.write(ByteBuffer.wrap(buffer,),)@ -> assertEquals(10000,channel.size(),)@ -> channel.position(20000,)@ -> assertEquals(20000,channel.position(),)@ -> assertEquals(-1,channel.read(ByteBuffer.wrap(buffer,0,1,),),)@ -> lock=channel.tryLock()@ -> assertEquals(10000,channel.size(),)@ -> channel.close()@ -> channel=FileUtils.open(fsBase+"/test","r",)@ -> FileUtils.readFully(channel,ByteBuffer.wrap(test,0,10000,),)@ -> assertEquals(buffer,test,)@ -> channel.close()@ -> assertEquals(buffer,buffer2,)@ } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/ac3faf88491f55369fb6b83f77fbb75557ed3bf4/test/java/nio/MappedByteBuffer/Basic.java][main][2] = -> TRY {  -> fc=fos.getChannel()@ -> fc.write(ByteBuffer.wrap(srcData,),)@ -> fc.close()@ -> fc=fis.getChannel()@ -> mbb=fc.map(FileChannel.MapMode.READ_ONLY,0,10,)@ -> IF { -> throw new RuntimeException("Incorrect isReadOnly",)@!(mbb.isReadOnly()) } -> mbb=fc.map(FileChannel.MapMode.READ_ONLY,1,10,)@!(!(mbb.isReadOnly())) -> fc.close()@!(!(mbb.isReadOnly())) -> fc=raf.getChannel()@!(!(mbb.isReadOnly())) -> mbb=fc.map(FileChannel.MapMode.READ_ONLY,0,10,)@!(!(mbb.isReadOnly())) -> IF { -> throw new RuntimeException("Incorrect isReadOnly",)@!(mbb.isReadOnly()) } -> fc.close()@!(!(mbb.isReadOnly())) -> fc=raf.getChannel()@!(!(mbb.isReadOnly())) -> mbb=fc.map(FileChannel.MapMode.READ_WRITE,0,10,)@!(!(mbb.isReadOnly())) -> IF { -> throw new RuntimeException("Incorrect isReadOnly",)@!(!(mbb.isReadOnly())) && mbb.isReadOnly() } -> fc.close()@!(!(mbb.isReadOnly())) && !(mbb.isReadOnly()) } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/53fa8c28b5dfc69a4aefebf16a42c840ddd50b12/test/java/nio/channels/FileChannel/Transfer.java][testFileChannel][2] = -> TRY {  -> sourceChannel=fos.getChannel()@ -> sourceChannel.write(ByteBuffer.wrap("Use the source, Luke!".getBytes(),),)@ -> sourceChannel.close()@ -> sourceChannel=fis.getChannel()@ -> oldSourcePosition=sourceChannel.position()@ -> bytesWritten=sinkChannel.transferFrom(sourceChannel,0,10,)@ -> IF { -> throw new RuntimeException("Transfer failed",)@bytesWritten!=10 } -> IF { -> throw new RuntimeException("Source position didn't change",)@!(bytesWritten!=10) && sourceChannel.position()==oldSourcePosition } -> IF { -> throw new RuntimeException("Sink position changed",)@!(bytesWritten!=10) && !(sourceChannel.position()==oldSourcePosition) && sinkChannel.position()!=oldSinkPosition } -> IF { -> throw new RuntimeException("Unexpected sink size",)@!(sinkChannel.position()!=oldSinkPosition) && !(bytesWritten!=10) && !(sourceChannel.position()==oldSourcePosition) && sinkChannel.size()!=10 } -> bytesWritten=sinkChannel.transferFrom(sourceChannel,1000,10,)@!(sinkChannel.position()!=oldSinkPosition) && !(bytesWritten!=10) && !(sourceChannel.position()==oldSourcePosition) && !(sinkChannel.size()!=10) -> IF { -> throw new RuntimeException("Wrote past file size",)@!(sinkChannel.position()!=oldSinkPosition) && !(bytesWritten!=10) && bytesWritten>0 && !(sourceChannel.position()==oldSourcePosition) && !(sinkChannel.size()!=10) } -> sourceChannel.close()@!(sinkChannel.position()!=oldSinkPosition) && !(bytesWritten!=10) && !(bytesWritten>0) && !(sourceChannel.position()==oldSourcePosition) && !(sinkChannel.size()!=10) } CATCH(Exception) {}
results[https://github.com/MoSync/MoSync/blob/dfed6b5d6ba92c529a0963f02cdb765d84c07281/runtimes/java/platforms/androidJNI/AndroidProject/src/com/mosync/internal/android/MoSyncAudio.java][maAudioDataCreateFromResource][1] = -> IF { -> return maAudioDataCreateFromURL(mime,audioStore.mTemporaryFileName,flags,)@audioStore!=null } -> audioData=mMoSyncThread.getBinaryResource(data,)@!(audioStore!=null) -> IF { -> IF { -> audioData.position(offset,)@!(audioStore!=null) && null!=audioData && offset>0 -> audioData=audioData.slice()@!(audioStore!=null) && null!=audioData } -> IF { -> audioData.limit(length,)@!(audioStore!=null) && -1!=length && null!=audioData } } ELSE { -> IF { -> return MA_AUDIO_ERR_INVALID_DATA@!(audioStore!=null) && byteData==null && !(null!=audioData) } -> audioData=ByteBuffer.wrap(byteData,offset,length,)@!(byteData==null) && !(audioStore!=null) && !(null!=audioData) -> IF { -> return MA_AUDIO_ERR_INVALID_DATA@!(byteData==null) && audioData==null && !(audioStore!=null) && !(null!=audioData) } } -> TRY { -> channel=audioFileOutputStream.getChannel()@!(audioStore!=null) && null!=audioData -> savedBytes=channel.write(audioData,)@!(audioStore!=null) && null!=audioData -> channel.close()@!(audioStore!=null) && null!=audioData } CATCH(Exception) { -> e.printStackTrace()@!(audioStore!=null) && null!=audioData } -> return audioCreateFromFile(fileName,flags,savedBytes,)@!(audioStore!=null) && null!=audioData
results[https://github.com/taktod/myLib/blob/26a53fc1f96b2f989a0a4dd9123a0e75dd3923f1/myLib.GPLv3/myLib.xuggle/src/test/java/com/ttProject/xuggle/test/ConvertTest.java][mp3][2] = -> TRY {  -> outputMp3=new FileOutputStream("output.mp3",).getChannel()@ -> IF { -> throw new Exception("変換コーダーが開けませんでした。",)@coder.open(null,null,)<0 } -> packet=IPacket.make()@!(coder.open(null,null,)<0) -> LOOP { -> IF { -> LOOP { -> retval=coder.encodeAudio(packet,samples,samplesConsumed,)@!(buffer.limit()==buffer.position()) && samplesConsumed<samples.getNumSamples() && !(i<samplingRate*length) && !(coder.open(null,null,)<0) -> IF { -> throw new Exception("変換失敗",)@buffer.limit()==buffer.position() && samplesConsumed<samples.getNumSamples() && !(coder.open(null,null,)<0) && i<samplingRate*length && retval<0 } -> IF { -> logger.info(packet,)@!(buffer.limit()==buffer.position()) && !(retval<0) && !(samplesConsumed<samples.getNumSamples()) && !(i<samplingRate*length) && !(coder.open(null,null,)<0) && packet.isComplete() -> outputMp3.write(packet.getData().getByteBuffer(0,packet.getSize(),),)@!(buffer.limit()==buffer.position()) && !(retval<0) && !(samplesConsumed<samples.getNumSamples()) && !(i<samplingRate*length) && !(coder.open(null,null,)<0) && packet.isComplete() } } } } -> IF { -> outputMp3.close()@outputMp3!=null && !(i<samplingRate*length) && !(coder.open(null,null,)<0) } } CATCH(Exception) {}
results[https://github.com/nickman/jzab/blob/220624ec25a0c2efa3727e16eb65ed83a7cecec8/plugins/native/src/main/java/org/helios/jzab/plugin/nativex/NativeLibLoader.java][save][1] = -> IF { -> return @filesToSnipe.isEmpty() } -> TRY { -> fc=raf.getChannel()@!(filesToSnipe.isEmpty()) -> IF { -> fc.truncate(0,)@!(filesToSnipe.isEmpty()) } -> buff=ReadableWritableByteChannelBuffer.newDirectDynamic(size,)@!(filesToSnipe.isEmpty()) -> oos=new ObjectOutputStream(buff.asOutputStream(),)@!(filesToSnipe.isEmpty()) -> buff.asOutputStream().flush()@!(filesToSnipe.isEmpty()) -> LOG.info("Out: [{}]",buff,)@!(filesToSnipe.isEmpty()) -> bt=fc.write(buff.toByteBuffer(),)@!(filesToSnipe.isEmpty()) -> fc.force(true,)@!(filesToSnipe.isEmpty()) -> fc.close()@!(filesToSnipe.isEmpty()) -> LOG.debug("Saved [{}] bytes for [{}] file names",bt,filesToSnipe.size(),)@!(filesToSnipe.isEmpty()) } CATCH(Exception) { -> LOG.error("Failed to save snipe file",e,)@!(filesToSnipe.isEmpty()) } FINALLY { -> TRY { -> IF { -> fc.close()@!(filesToSnipe.isEmpty()) && fc.isOpen() } } }
results[https://github.com/eclipse/e4.xwt/blob/2ccef7eb141655004fe8de6e8cd5951a58d0b263/bundles/org.eclipse.e4.tools.ui.designer/src/org/eclipse/e4/tools/ui/designer/session/FileHelper.java][writeFile][1] = -> TRY { -> channel=new FileOutputStream(fileFullPath,).getChannel()@ -> channel.write(ByteBuffer.wrap(contents_p,),)@ } CATCH(Exception) { -> msg=new StringBuilder("FileHelper.writeFile(..) _ ",)@ -> msg.append("Failed to open channel in write mode for ",)@ -> msg.append(filePath_p,).append(" !",)@ -> E4DesignerPlugin.getDefault().logError(msg.toString(),e,)@ } FINALLY { -> IF { -> TRY { -> channel.close()@channel!=null&&channel.isOpen() } FINALLY { -> msg=new StringBuilder("FileHelper.writeFile(..) _ ",)@ -> msg.append("Failed to close opened channel in write mode ! ",)@ -> msg.append(filePath_p,).append(" may no longer be usable.",)@ -> E4DesignerPlugin.getDefault().logError(msg.toString(),e,)@ } } }
results[https://github.com/taktod/myLib/blob/538b79393865ad209adc3ec2ca4064fac0def6b1/myLib.GPLv3/myLib.xuggle/src/test/java/com/ttProject/xuggle/test/MakePacketFromMyLibMediaFlvTest.java][playTest4][4] = -> TRY {  -> outputTest=new FileOutputStream("mario.aac",).getChannel()@ -> IF { -> throw new Exception("streamCoderを開くのに失敗しました。",)@coder.open(null,null,)<0 } -> LOOP { -> LOOP { -> IF { -> IF { -> throw new RuntimeException("decoderSpecificInfoが決定していません。",)@dsi==null && !(coder.open(null,null,)<0) } -> buffer=aac.getBuffer()@!(coder.open(null,null,)<0) && !(dsi==null) -> outputTest.write(buffer.duplicate(),)@!(coder.open(null,null,)<0) && !(dsi==null) -> size=buffer.remaining()@!(coder.open(null,null,)<0) && !(dsi==null) -> bufData=IBuffer.make(null,buffer.array(),0,size,)@!(coder.open(null,null,)<0) && !(dsi==null) -> LOOP { -> IF { -> throw new Exception("デコード中にエラーが発生",)@bytesDecoded<0 && !(coder.open(null,null,)<0) && !(dsi==null) && offset<packet.getSize() } } } } } -> IF { -> outputTest.close()@outputTest!=null && !(coder.open(null,null,)<0) } } CATCH(Exception) {}
results[https://github.com/picketlink/picketlink/blob/50ca712a772da82a7fdf16de515c85d5b365d9a1/modules/idm/impl/src/main/java/org/picketlink/idm/file/internal/FileDataSource.java][performFlush][1] = -> TRY { -> channel=randomAccessFile.getChannel()@ -> bos=new ByteArrayOutputStream(FLUSH_BYTE_BUFFER,)@ -> oos=new ObjectOutputStream(bos,)@ -> channel.write(ByteBuffer.wrap(bos.toByteArray(),),)@ } CATCH(Exception) { -> throw new IdentityManagementException("Error flushing changes to file system.",e,)@ } FINALLY { -> TRY { -> IF { -> randomAccessFile.close()@randomAccessFile!=null } } } FINALLY { -> TRY { -> IF { -> oos.close()@oos!=null } } } FINALLY { -> TRY { -> IF { -> bos.close()@bos!=null } } }
results[https://github.com/taktod/myLib/blob/f1ebbed65c7f1f2b9167a55be4058fe8495304b3/myLib.xuggle.flv/src/test/java/com/ttProject/xuggle/flv/test/FastEncodeTest.java][test1][1] = -> TRY { -> target=new FileOutputStream("mario_a.flv",).getChannel()@ -> flvHeader=new FlvHeader()@ -> flvHeader.setVideoFlg(true,)@ -> flvHeader.setAudioFlg(false,)@ -> target.write(flvHeader.getBuffer(),)@ -> flvHeader.analyze(source,)@ -> LOOP { -> IF { -> LOOP { -> IF { -> throw new Exception("デコード中に問題が発生しました。",)@bytesDecoded<=0 && tag instanceof VideoTag && (tag=analyzer.analyze(source,))!=null && offset<packet.getSize() } -> IF { -> IF { -> IF { -> throw new Exception("リサンプル失敗",)@picture.isComplete() && !(bytesDecoded<=0) && resampler.resample(newPic,picture,)<0 && tag instanceof VideoTag && (tag=analyzer.analyze(source,))!=null && offset<packet.getSize() && picture.getPixelType()!=IPixelFormat.Type.BGR24 } } } } } } } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> IF { -> decoder.close()@decoder!=null } -> IF { -> TRY { -> source.close()@source!=null } } } FINALLY { -> IF { -> TRY { -> target.close()@target!=null } } }
results[https://github.com/brachior/platform_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/libcore/java/nio/channels/OldFileChannelTest.java][test_forceZ][86] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> writeOnlyFileChannel.write(writeBuffer,)@ -> writeOnlyFileChannel.force(true,)@ -> writeOnlyFileChannel.write(writeBuffer,)@ -> writeOnlyFileChannel.force(false,)@ } CATCH(Exception) {}
results[https://github.com/wf4ever/robundle/blob/f61ef33e15be990336bf3590577a14bce62a0e58/src/test/java/org/purl/wf4ever/robundle/fs/MemoryEfficiencyIT.java][writeGigaFile][1] = -> TRY {  -> TRY { -> bc.position(size,)@ -> src=ByteBuffer.allocateDirect(1024,)@ -> bc.write(src,)@ } } CATCH(Exception) {}
results[https://github.com/bigbrother82/android-test/blob/b99b5cd0be8ab0d9791768c21ffd0d637b564df8/libcore/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_writeLByteBuffer_Null][8] = -> TRY {  -> TRY { -> writeOnlyFileChannel.write(writeBuffer,)@ } -> TRY { -> readWriteFileChannel.write(writeBuffer,)@ } } CATCH(Exception) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/ebeaf6b2911afb8357cc5bff5f85c077dc51da03/test/java/nio/channels/FileChannel/ClosedByInterrupt.java][main][3] = -> TRY {  -> bb=ByteBuffer.wrap(b,)@ -> TRY { -> LOOP { -> fc.write(bb,)@bb.hasRemaining() } } } CATCH(Exception) {}
results[https://github.com/LeeMinWoo/android_dalvik/blob/b99b5cd0be8ab0d9791768c21ffd0d637b564df8/libcore/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_writeLByteBuffer_ReadOnly][8] = -> TRY {  -> writeBuffer=ByteBuffer.allocate(CAPACITY,)@ -> TRY { -> readOnlyFileChannel.write(writeBuffer,)@ } -> TRY { -> readOnlyFileChannel.write(writeBuffer,)@ } } CATCH(Exception) {}
results[https://github.com/agueganno/h2geometry/blob/39f669ba5fbe4691e8ca8c8bbc20a490f53cbc7e/h2/src/tools/org/h2/dev/store/btree/BtreeMapStore.java][writeHeader][5] = -> TRY { -> header=ByteBuffer.wrap("# H2 1.5\n"+"versionRead:1\n"+"versionWrite:1\n"+"blockSize:"+blockSize+"\n"+"rootChunk:"+rootChunkStart+"\n"+"lastMapId:"+lastMapId+"\n"+"version:"+currentVersion+"\n".getBytes("UTF-8",),)@ -> file.position(0,)@ -> file.write(header,)@ -> file.position(blockSize,)@ -> file.write(header,)@ } CATCH(Exception) { -> throw convert(e,)@ }
results[https://github.com/axDev-JDK/jdk/blob/acbdb0ade569a980d025ec2b09f528c0bc1a29cd/test/java/nio/channels/FileChannel/Force.java][writeAfterForce][3] = -> TRY {  -> fc=fis.getChannel()@ -> fc.write(ByteBuffer.wrap(srcData,),)@ -> fc.force(false,)@ -> fc.write(ByteBuffer.wrap(srcData,),)@ -> fc.close()@ } CATCH(Exception) {}
results[https://github.com/caosd/AdPlatform/blob/c63439a8b6385392b68473be09f1d82df1b3557c/project/portal/src/com/stomato/utils/FileUtils.java][writeBytes2File][1] = -> TRY {  -> targetChannel=new FileOutputStream(out,).getChannel()@ -> TRY { -> targetChannel.write(bb,)@ } FINALLY { -> targetChannel.close()@ } } CATCH(Exception) {}
results[https://github.com/coderplay/h2-bitmap/blob/097b9c8bd258e067f70245cba6ae8a7590679642/h2/src/tools/org/h2/dev/store/btree/MVStore.java][writeHeader][1] = -> TRY { -> header=ByteBuffer.allocate(blockSize,)@ -> header.put(h.getBytes("UTF-8",),)@ -> header.rewind()@ -> file.position(0,)@ -> file.write(header,)@ -> file.position(blockSize,)@ -> file.write(header,)@ } CATCH(Exception) { -> throw convert(e,)@ }
results[https://github.com/sdugit/libcore_7025/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/libcore/java/nio/channels/FileChannelTest.java][test_append][38] = -> TRY {  -> fc=fos.getChannel()@ -> fc.write(ByteBuffer.wrap("hello".getBytes("US-ASCII",),),)@ -> fc.position(0,)@ -> assertEquals(0,fc.position(),)@ -> fc.write(ByteBuffer.wrap(" world".getBytes("US-ASCII",),),)@ } CATCH(Exception) {}
results[https://github.com/DuncanCragg/Cyrus/blob/6f7545e1ca8919a6f493cf206ee4438aa318c3ab/src/jungle/platform/Kernel.java][writeFile][2] = -> TRY {  -> channel=os.getChannel()@ -> n=channel.write(bytebuffer,)@ -> fileuser.writable(bytebuffer,n,)@ } CATCH(Exception) {}
results[https://github.com/elka-projekt/cs-voltdb/blob/8a4d82314756569eb9cb9a72dc4b805363e163d8/src/frontend/org/voltdb/SimpleFileSnapshotDataTarget.java][call][1] = -> TRY {  -> TRY { -> TRY { -> LOOP { -> written=m_fc.write(data.b,)@ } } FINALLY { -> data.discard()@ } -> throw Throwables.propagate(t,)@ } } CATCH(Exception) {}
