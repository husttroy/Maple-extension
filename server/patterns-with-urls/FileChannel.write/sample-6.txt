results[https://github.com/rhusar/HornetQ-oldmigration/blob/f88499bf9b0fefcf3bbb61a48c1e11d4d8650c34/hornetq-journal/src/main/java/org/hornetq/core/journal/impl/SyncSpeedTest.java][write][4] = -> TRY {  -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/buzheng/buzheng-study-java/blob/806c68192742caab7d45b6c523cfbe492b123f63/src/main/java/org/buzheng/study/nio/WriteToFile.java][main][1] = -> TRY {  -> channel=fos.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> buffer.put(message.getBytes(),)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/aguocool/workspace/blob/a6e10394d7333dab97fa9fc06b4231af6cbe949c/InnerClass/src/io/ChannelCopy.java][main][2] = -> TRY {  -> buffer=ByteBuffer.allocate(BSIZE,)@ -> LOOP { -> buffer.flip()@in.read(buffer,)!=-1 -> out.write(buffer,)@in.read(buffer,)!=-1 -> buffer.clear()@in.read(buffer,)!=-1 } } CATCH(Exception) {}
results[https://github.com/codefollower/H2-Research/blob/2efda0eb90f9f0163dabacddca5456201e54407f/test/my/test/store/fs/FileUtilsTest.java][test][4] = -> TRY {  -> fc=FileUtils.open(fileName,mode,)@ -> src=ByteBuffer.allocate(1024,)@ -> src.put("ddddddddd".getBytes(),)@ -> src.flip()@ -> fc.write(src,)@ -> fc.close()@ } CATCH(Exception) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/WriteSomeBytes.java][main][1] = -> TRY {  -> fc=fout.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.put(message[i],)@i<message.length } -> buffer.flip()@ -> fc.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/RamesesDev/osiris2/blob/ee716ae432471d376fe6a7a2104703a8f0c83fe1/labs/rameses-scheduling/test/test/TestFile.java][testHello][1] = -> TRY {  -> buffer=ByteBuffer.allocate(100,)@ -> buffer.put(data,)@ -> buffer.flip()@ -> writeChannel=fos.getChannel()@ -> writeChannel.write(buffer,)@ -> System.out.println(writeChannel.position(),)@ -> writeChannel.close()@ } CATCH(Exception) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/FastCopyFile.java][main][1] = -> TRY {  -> fcout=fout.getChannel()@ -> buffer=ByteBuffer.allocateDirect(1024,)@ -> LOOP { -> buffer.clear()@ -> r=fcin.read(buffer,)@ -> buffer.flip()@ -> fcout.write(buffer,)@ } } CATCH(Exception) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/CopyFile.java][main][1] = -> TRY {  -> fcout=fout.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.clear()@ -> r=fcin.read(buffer,)@ -> buffer.flip()@ -> fcout.write(buffer,)@ } } CATCH(Exception) {}
results[https://github.com/bobmcwhirter/jboss-messaging/blob/1a7527d4d3b297d4cdc3fb5ff1cfcdb2af2e2ee1/src/main/org/jboss/messaging/core/journal/impl/NIOSequentialFile.java][fill][1] = -> TRY {  -> bb=ByteBuffer.allocateDirect(size,)@ -> LOOP { -> bb.put(fillCharacter,)@ } -> bb.flip()@ -> channel.position(position,)@ -> channel.write(bb,)@ -> channel.force(false,)@ -> channel.position(0,)@ } CATCH(Exception) {}
results[https://github.com/thyms/Code-Base/blob/bb57a562bb3ccabc067856c4934db81145e561ae/code.base.main/src/main/java/javam/io/RunnerReadingAFile.java][main][1] = -> TRY {  -> targetChannel=new FileOutputStream("src/main/resources/temp/temp_write.txt",).getChannel()@ -> buffer1=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer1.flip()@(read1=sourceChannel.read(buffer1,))!=-1 -> targetChannel.write(buffer1,)@(read1=sourceChannel.read(buffer1,))!=-1 -> buffer1.clear()@(read1=sourceChannel.read(buffer1,))!=-1 } -> targetChannel.close()@ } CATCH(Exception) {}
results[https://github.com/sayornis/USGS-VHP/blob/057838817ad52b988a9abaea23f9affbea0b47a3/Util/src/gov/usgs/util/DriveSwamp.java][run][1] = -> bb=ByteBuffer.allocateDirect(writeSize,)@ -> LOOP { -> bb.put((byte) i,)@i<writeSize } -> LOOP { -> TRY { -> bb.flip()@ -> out.write(bb,)@ } CATCH(Exception) { -> e.printStackTrace()@ } }
results[https://github.com/jmesnil/hornetq-old/blob/60b8d9bbeea15c813bc75f12a3747a235a603ba6/src/main/org/hornetq/core/journal/impl/NIOSequentialFile.java][fill][4] = -> TRY {  -> bb=ByteBuffer.allocate(size,)@ -> LOOP { -> bb.put(fillCharacter,)@ } -> bb.flip()@ -> channel.position(position,)@ -> channel.write(bb,)@ -> channel.force(false,)@ -> channel.position(0,)@ -> fileSize=channel.size()@ } CATCH(Exception) {}
results[https://github.com/lalalic/Personal/blob/c471fddc9a6c0e1c6dc43fb65f98a1a0e0191320/travel/android-1qiyou/src/com/equ/lbs/LocationUpdater.java][flush][1] = -> TRY { -> IF { -> out=new FileOutputStream(f,true,).getChannel()@out==null||!(out.isOpen()) } -> buffer.flip()@ -> out.write(buffer,)@ -> buffer.clear()@ -> out.force(true,)@ -> out.close()@ } CATCH(Exception) { -> service.notify(e.getMessage(),)@ }
results[https://github.com/uditrugman/openjdk8-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/io/FileDescriptor/Finalize.java][doFileChannel][3] = -> TRY {  -> fc2=fis2.getChannel()@ -> bb=ByteBuffer.allocateDirect(1,)@ -> ret=fc2.read(bb,)@ -> System.out.println("read "+ret+" bytes from fc2:",)@ -> fc2.close()@ -> fc2=fos2.getChannel()@ -> bb=ByteBuffer.allocateDirect(data.length,)@ -> bb=bb.put(data,)@ -> bb=(ByteBuffer) bb.flip()@ -> ret=fc2.write(bb,)@ -> System.out.println("Wrote:"+ret+" bytes to fc2",)@ -> fc2.close()@ } CATCH(Exception) {}
results[https://github.com/rhusar/HornetQ-oldmigration/blob/ed6a8279f7ba90d6af87b34411eff9423f9c1424/hornetq-core/src/main/java/org/hornetq/core/journal/impl/SyncSpeedTest.java][run][4] = -> TRY {  -> LOOP { -> channel=rfile.getChannel()@ -> write(bb,channel,fileSize,)@ -> channel.force(true,)@ -> channel.position(0,)@ -> bb1=generateBuffer(recordSize,(byte) 'h',)@ -> LOOP { -> bb1.flip()@ -> channel.write(bb1,)@ -> channel.force(false,)@ } } } CATCH(Exception) {}
results[https://github.com/sayornis/USGS-VHP/blob/057838817ad52b988a9abaea23f9affbea0b47a3/Util/src/gov/usgs/util/DriveSwamp.java][<init>][1] = -> TRY {  -> bb=ByteBuffer.allocateDirect(size,)@ -> LOOP { -> bb.put((byte) i,)@i<size } -> LOOP { -> bb.flip()@ -> out=new FileOutputStream("swamp_"+i+".tmp",).getChannel()@i<numFiles -> LOOP { -> out.write(bb,)@bb.hasRemaining() } } } CATCH(Exception) {}
results[https://github.com/RamesesDev/osiris2/blob/c8c2d2376572d4a3bd23b0ccf6d60d878d3ac47a/common/rameses-common/src/com/rameses/messaging/LogFile.java][write][1] = -> TRY { -> buffer=ByteBuffer.allocate(allocation,)@ -> buffer.put(data,)@ -> buffer.put(delimiter,)@ -> buffer.flip()@ -> writeChannel=new FileOutputStream(file,true,).getChannel()@ -> writeChannel.write(buffer,)@ -> this.writePosition=writeChannel.position()@ } CATCH(Exception) { -> throw new RuntimeException(ex,)@ } FINALLY { -> TRY { -> writeChannel.close()@ } }
results[https://github.com/veltzer/demos/blob/5e8fd91dcac8226c5603017b502856ac23643cc9/java/standard/src/core/nio/CopyFile.java][main][3] = -> TRY {  -> fcout=fout.getChannel()@ -> IF { -> buffer=ByteBuffer.allocateDirect(size,)@ } ELSE { -> buffer=ByteBuffer.allocate(size,)@ } -> LOOP { -> readCount=fcin.read(buffer,)@ -> IF { -> buffer.flip()@ -> fcout.write(buffer,)@ -> buffer.clear()@ } } } CATCH(Exception) {}
results[https://github.com/RamesesDev/osiris2/blob/ee716ae432471d376fe6a7a2104703a8f0c83fe1/labs/rameses-scheduling/test/com/rameses/concurrent/EventQueue.java][sendMessage][1] = -> TRY { -> IF { -> throw new Exception("File does not exist",)@!(f.exists()) } -> buffer=ByteBuffer.allocate(allocation,)@!(!(f.exists())) -> buffer.put(data,)@!(!(f.exists())) -> buffer.put(delimiter,)@!(!(f.exists())) -> buffer.flip()@!(!(f.exists())) -> writeChannel=new FileOutputStream(f,true,).getChannel()@!(!(f.exists())) -> writeChannel.write(buffer,)@!(!(f.exists())) } CATCH(Exception) { -> throw new RuntimeException(ex,)@ } FINALLY { -> TRY { -> writeChannel.close()@ } }
results[https://github.com/veltzer/demos/blob/29edc78c9bddd7f85acc59aa524ccb0be5897580/java/src/extreme/nio/BufferChannel.java][main][3] = -> TRY { -> buff=ByteBuffer.allocate(1024,)@ -> LOOP { -> buff.put((byte) 'a'+i,)@i<26 } -> System.out.println("pos is: "+buff.position(),)@ -> buff.put((byte) 'a',)@ -> System.out.println("pos is: "+buff.position(),)@ -> buff.put(304,(byte) 'a',)@ -> System.out.println("pos is: "+buff.position(),)@ -> channel=output.getChannel()@ -> buff.flip()@ -> channel.write(buff,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/RamesesDev/osiris2/blob/c8c2d2376572d4a3bd23b0ccf6d60d878d3ac47a/common/rameses-common/src/com/rameses/messaging/BasicFileEventQueue.java][send][1] = -> TRY { -> buffer=ByteBuffer.allocate(super.getAllocation(),)@ -> buffer.put(data,)@ -> buffer.put(super.getDelimiter(),)@ -> buffer.flip()@ -> writeChannel=new FileOutputStream(reader.getFile(),true,).getChannel()@ -> writeChannel.write(buffer,)@ -> this.position=writeChannel.position()@ } CATCH(Exception) { -> throw new RuntimeException(ex,)@ } FINALLY { -> TRY { -> writeChannel.close()@ } }
results[https://github.com/jeromerobert/jCAE/blob/1d508573646d6b192529200ecf27d9f60135ed30/amibe/src/org/jcae/mesh/xmldata/MeshToSoupConvert.java][processOneShape][1] = -> TRY { -> fcO=new FileOutputStream(rawFile,true,).getChannel()@ -> bbo=ByteBuffer.allocate(bufferSize*80/12,)@ -> bboD=bbo.asDoubleBuffer()@ -> LOOP { -> bbo.clear()@ -> LOOP { -> bbo.position(8*bboD.position(),)@ -> bbo.putInt(iFace,)@ -> bbo.putInt(0,)@ } -> bbo.flip()@ -> fcO.write(bbo,)@ } -> fcO.close()@ } CATCH(Exception) { -> ex.printStackTrace()@ -> throw new RuntimeException(ex,)@ }
results[https://github.com/alibaba/otter/blob/78e112c7a9337f367accbcebebbe7f2d9a529c9c/shared/common/src/test/java/com/alibaba/otter/shared/common/utils/NioUtilsPerformance.java][channelTest][1] = -> TRY {  -> TRY { -> tChannel=fos.getChannel()@ -> buffer=ByteBuffer.allocate(16*1024,)@ -> LOOP { -> buffer.flip()@sChannel.read(buffer,)>0 -> tChannel.write(buffer,)@sChannel.read(buffer,)>0 -> buffer.clear()@sChannel.read(buffer,)>0 } -> tChannel.close()@ } FINALLY { -> IOUtils.closeQuietly(fis,)@ -> IOUtils.closeQuietly(fos,)@ } } CATCH(Exception) {}
results[https://github.com/apache/bookkeeper/blob/16978d671b8d6d9e563edb3a6119a4be574245af/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java][writePreV2Journal][2] = -> TRY {  -> fc=new RandomAccessFile(fn,"rw",).getChannel()@ -> zeros=ByteBuffer.allocate(512,)@ -> fc.write(zeros,4*1024*1024,)@ -> fc.position(0,)@ -> LOOP { -> packet=ClientUtil.generatePacket(1,i,lastConfirmed,i*data.length,data,).toByteBuffer()@i<=numEntries -> lenBuff=ByteBuffer.allocate(4,)@ -> lenBuff.putInt(packet.remaining(),)@ -> lenBuff.flip()@ -> fc.write(lenBuff,)@ -> fc.write(packet,)@ } } CATCH(Exception) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/522da5a0da834e3796c03025960667f837239b6a/test/java/nio/channels/FileChannel/Truncate.java][appendTest][3] = -> TRY {  -> LOOP { -> TRY { -> fc.truncate(newSize,)@ -> IF { -> throw new RuntimeException("Truncate failed",)@fc.size()!=newSize } -> buf=ByteBuffer.allocate(1,)@!(fc.size()!=newSize) -> buf.put((byte) 'x',)@!(fc.size()!=newSize) -> buf.flip()@!(fc.size()!=newSize) -> fc.write(buf,)@!(fc.size()!=newSize) -> IF { -> throw new RuntimeException("Unexpected size",)@!(fc.size()!=newSize) && fc.size()!=newSize+1 } } } } CATCH(Exception) {}
results[https://github.com/statsbiblioteket/sbutil/blob/2fbcc90095ff654ba5f4af01499df2dceb355ea2/sbutil-common/src/test/java/dk/statsbiblioteket/util/LineReaderTest.java][testNIO][3] = -> TRY {  -> outBuffer=ByteBuffer.allocate(4096,)@ -> outBuffer.put(EXTRA,)@ -> outBuffer.flip()@ -> assertEquals("The limit of the outBuffer should be correct",EXTRA.length,outBuffer.limit(),)@ -> channelOut=output.getChannel()@ -> channelOut.position(INITIAL.length,)@ -> assertEquals("All bytes should be written",EXTRA.length,channelOut.write(outBuffer,),)@ -> channelOut.close()@ -> outBuffer2=ByteBuffer.allocate(4096,)@ -> outBuffer2.put(FIFTH,)@ -> outBuffer2.flip()@ -> assertEquals("The limit of the second outBuffer should be correct",FIFTH.length,outBuffer2.limit(),)@ -> channelOut2=output2.getChannel()@ -> channelOut2.position(4,)@ -> assertEquals("The FIFTH should be written",FIFTH.length,channelOut2.write(outBuffer2,),)@ -> channelOut2.close()@ } CATCH(Exception) {}
results[https://github.com/auxgroup-sanxing/Sesame/blob/061175727614cfcbd9cd7ce5b0536d981b54aa64/sesame-transport/src/main/java/com/sanxing/sesame/transport/util/SesameFileClient.java][copyFile][1] = -> TRY {  -> fcOut=out.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.flip()@fcIn.read(buffer,)!=-1 -> fcOut.write(buffer,)@fcIn.read(buffer,)!=-1 -> buffer.clear()@fcIn.read(buffer,)!=-1 } -> fcOut.close()@ } CATCH(Exception) {}
results[https://github.com/aguocool/workspace/blob/a6e10394d7333dab97fa9fc06b4231af6cbe949c/InnerClass/src/io/BufferToText.java][main][3] = -> TRY {  -> fc=new FileOutputStream("data2.txt",).getChannel()@ -> fc.write(ByteBuffer.wrap("Some text".getBytes(),),)@ -> fc.close()@ -> fc=new FileInputStream("data2.txt",).getChannel()@ -> buff=ByteBuffer.allocate(BSIZE,)@ -> fc.read(buff,)@ -> buff.flip()@ -> System.out.println(buff.asCharBuffer(),)@ -> buff.rewind()@ -> System.out.println("Decoded using "+encoding+": "+Charset.forName(encoding,).decode(buff,),)@ -> fc=new FileOutputStream("data2.txt",).getChannel()@ -> fc.write(ByteBuffer.wrap("Some text".getBytes("UTF-16BE",),),)@ -> fc.close()@ -> fc=new FileInputStream("data2.txt",).getChannel()@ -> buff.clear()@ -> fc.read(buff,)@ -> buff.flip()@ -> System.out.println(buff.asCharBuffer(),)@ -> fc=new FileOutputStream("data2.txt",).getChannel()@ -> buff=ByteBuffer.allocate(24,)@ -> buff.asCharBuffer().put("Some text",)@ -> fc.write(buff,)@ -> fc.close()@ -> fc=new FileInputStream("data2.txt",).getChannel()@ -> buff.clear()@ -> fc.read(buff,)@ -> buff.flip()@ -> System.out.println(buff.asCharBuffer(),)@ } CATCH(Exception) {}
