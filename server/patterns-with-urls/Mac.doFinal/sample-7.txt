results[https://github.com/revetkn/restfb/blob/c7a321c0b3fb5d9082d3935985bcfc5a22086c70/source/library/com/restfb/util/EncodingUtils.java][encodeAppSecretProof] = -> TRY {  -> key=appSecret.getBytes()@ -> mac.init(signingKey,)@ -> raw=mac.doFinal(accessToken.getBytes(),)@ -> out=new String(hex,"UTF-8",)@ } CATCH {}
results[https://github.com/schibsted/sdk-android/blob/aac3d7a5294d3f2e83bc9377cafbca0ee9ca1f38/SPiDSDK/src/com/schibsted/android/sdk/utils/SPiDUtils.java][getHmacSHA256] = -> TRY {  -> mac.init(new SecretKeySpec(key.getBytes(),"HmacSHA256",),)@ -> bs=mac.doFinal(string.getBytes(),)@ } CATCH {}
results[https://github.com/BroadleafCommerce/blc-authorizenet/blob/2e745f5c8d2b85048e31bcf781cc5d085392739e/src/main/java/org/broadleafcommerce/vendor/authorizenet/service/payment/AuthorizeNetCheckoutServiceImpl.java][createTamperProofSeal] = -> TRY {  -> publicKeySpec=new SecretKeySpec(transactionKey.getBytes(),"HmacSHA1",)@ -> sha1Mac.init(publicKeySpec,)@ -> publicBytes=sha1Mac.doFinal(customerOrderString.getBytes(),)@ } CATCH {}
results[https://github.com/RemiNV/edtemps-ecn/blob/e9b803ee13ed8f59f8262f03b409135ed7676558/EdTempsECN/src/org/ecn/edtemps/managers/UtilisateurGestion.java][hmac_sha256] = -> TRY {  -> keySpec=new SecretKeySpec(password.getBytes(),"HmacSHA256",)@ -> mac.init(keySpec,)@ -> result=mac.doFinal(input.getBytes(),)@ } CATCH {}
results[https://github.com/javaswift/joss/blob/36c1ae1ff10a2bce1c76d2e69a0c329cc393df0a/src/main/java/org/javaswift/joss/util/HashSignature.java][getHmacMD5] = -> TRY {  -> keySpec=new SecretKeySpec(key.getBytes(),"HmacSHA1",)@ -> mac.init(keySpec,)@ -> hashBytes=mac.doFinal(input.getBytes(),)@ } CATCH {}
results[https://github.com/nysenate/BillBuzz/blob/6165aab6d00575deb03f9635754d0185b2703640/BBSignup/src/collect/XmlRpc.java][generateServicesHash] = -> TRY {  -> secret=new SecretKeySpec(API_KEY.getBytes(),"HmacSHA256",)@ -> mac.init(secret,)@ -> shaDigest=mac.doFinal(time+";"+BASE_URL+";"+nonce+";"+methodName.getBytes(),)@ } CATCH {}
results[https://github.com/projectrsc/ProjectRSC/blob/be9e2e1854a0e4b93816e52712c9fe37ff7dfc39/ProjectRSC/Development/Server/src/org/darkquest/ls/util/DataConversions.java][hmac] = -> TRY { -> keyBytes=key.getBytes()@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(value.getBytes(),)@ }
results[https://github.com/lovepoetry/mepss/blob/b623eccee70f8f8956835c5c483e89320c996d48/lib/mepss-lib/src/mepss/lib/config/Config.java][computeSignature] = -> TRY {  -> keyBytes=keyString.getBytes()@ -> mac.init(secretKey,)@ -> text=BASE.getBytes()@ -> return Base64.encodeBytes(mac.doFinal(text,),).trim()@ } CATCH {}
results[https://github.com/asktkhr/porunga-youroom/blob/aa965875dd8a08d8accde568194b1f1c7572afd3/src/jp/co/tokaneoka/youroomclient/YouRoomAccess.java][getSignature] = -> TRY {  -> mac=Mac.getInstance(ALGOTITHM,)@ -> key=new SecretKeySpec(keyString.getBytes(),ALGOTITHM,)@ -> mac.init(key,)@ -> digest=mac.doFinal(base.getBytes(),)@ } CATCH {}
results[https://github.com/asktkhr/porunga-youroom/blob/24436efbfb788a40dfbf0281d8529c7de1672c83/src/com/porunga/youroomclient/YouRoomAccess.java][getSignature] = -> TRY {  -> mac=Mac.getInstance(ALGOTITHM,)@ -> key=new SecretKeySpec(keyString.getBytes(),ALGOTITHM,)@ -> mac.init(key,)@ -> digest=mac.doFinal(base.getBytes(),)@ } CATCH {}
