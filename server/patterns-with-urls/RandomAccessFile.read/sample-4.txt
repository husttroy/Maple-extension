results[https://github.com/gurkerl83/millipede-xtreemfs/blob/c57f6e295c1b6dd8e39a55d560c61d658576ed0b/src/servers/src/org/xtreemfs/sandbox/tests/replicationStressTest/ReplicationStressTestReader.java][readFromXtreemFS][2] = -> TRY {  -> in.seek(startOffset,)@ -> in.read(buffer,0,buffer.length,)@ } CATCH(Exception) {}
results[https://github.com/zycgit/hasor/blob/e8656406cd2af1c26ae65a7d48efe2a6cb143894/src/org.eclipse.jetty/src/main/java/org/eclipse/jetty/io/nio/RandomAccessFileBuffer.java][peek][17] = -> TRY { -> _file.seek(index,)@ -> return _file.read(b,offset,length,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/olas/bioclipse.structuredb/blob/c8f31e3b63678031e58ce9e73fc444f93f99321a/cdk-externals/trunk/org.openscience.cdk.extra/src/org/openscience/cdk/io/random/RandomAccessReader.java][readContent][1] = -> TRY {  -> raFile.seek(index[record][0],)@!(record<0||record>=records) -> length=(int) index[record][1]@!(record<0||record>=records) -> raFile.read(b,0,length,)@!(record<0||record>=records) -> return new String(b,0,length,)@!(record<0||record>=records) } CATCH(Exception) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/ba3583c3fdb92050e88960eb18b0e3a6d55424b3/java/servers/test/org/xtreemfs/test/osd/rwre/RWReplicationTest.java][testReplicationWithClient][1] = -> TRY {  -> raf=f.open("rw",0444,)@ -> raf.write(data,0,data.length,)@ -> raf.seek(1024,)@ -> raf.forceReplica(1,)@ -> raf.read(data,0,data.length,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/WSN-2012/BPF-Gateway-Service/blob/724161d929c927e2e9204bbb87342083f517585b/src/DirWatcher/PeriodicFileWatcher.java][onChange][1] = -> TRY { -> raf=new RandomAccessFile(file,"r",)@ -> raf.seek(previousFileSize,)@ -> raf.read(buf,0,(int) raf.length()-previousFileSize,)@ -> Service.send(buf,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/olanto/MYCAT/blob/188206ac8618d132c62a1ac055a9a15cc34c806a/prog/coreidx/src/org/olanto/idxvli/IdxIO.java][loadPosChar][2] = -> TRY { -> pcf.seek(glue.rdnposchar[d],)@ -> length=glue.getLengthOfD(d,)@ -> pcf.read(byteidx,0,length*4,)@ -> byteToint(seq,length*4,byteidx,)@ } CATCH(Exception) { -> System.err.println("IO error LoadPosChar vector",)@ -> e.printStackTrace()@ }
results[https://github.com/olanto/MYCAT/blob/188206ac8618d132c62a1ac055a9a15cc34c806a/prog/coreidx/src/org/olanto/idxvli/IdxIO.java][loadBag][1] = -> TRY { -> bf.seek(glue.rdnbag[d],)@ -> length=bf.readInt()@ -> bf.read(byteidx,0,length*4,)@ -> byteToint(bag,length*4,byteidx,)@ } CATCH(Exception) { -> System.err.println("IO error LoadBag vector",)@ -> e.printStackTrace()@ }
results[https://github.com/DominicWatson/open-bluedragon/blob/e7d33747bc48fd62e7d84a8f88f92e3aa7c05d57/src/com/naryx/tagfusion/cfm/engine/cfMP3Data.java][load][1] = -> TRY { -> mFile=new RandomAccessFile(fileName,"r",)@ -> mFile.seek(mFile.length()-128,)@ -> mFile.read(tmp,0,128,)@ -> mFile.close()@ -> header=new String(tmp,)@ } CATCH(Exception) { -> clear()@ }
results[https://github.com/shantanusharma/snpeff/blob/acd7661d5330b68e088761c4511500ec93bb01e8/SnpEffect/trunk/src/main/java/ca/mcgill/mcb/pcingola/vcf/FileIndexChrPos.java][dump][2] = -> TRY { -> file.seek(start,)@ -> LOOP { -> len=Math.min(BUFF_SIZE,end-curr+1,)@curr<=end -> read=file.read(buff,0,(int) len,)@ -> out=new String(buff,0,read,)@ } } CATCH(Exception) { -> throw new RuntimeException("Error reading file '"+fileName+"' from position "+start+" to "+end,)@ }
results[https://github.com/olanto/MYCAT/blob/3156955fe4b628406620d63b65cfa837041b387a/prog/coreidx/src/org/olanto/idxvli/extra/DocPosChar.java][extract][1] = -> TRY { -> refdoc=new RandomAccessFile(f,"r",)@ -> refdoc.seek(from,)@ -> refdoc.read(byteidx,0,lengthextract,)@ -> plaintext=new String(byteidx,encoding,)@ -> refdoc.close()@ } CATCH(Exception) { -> System.err.println("IO error during open file:"+f,)@ -> e.printStackTrace()@ }
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/ba3583c3fdb92050e88960eb18b0e3a6d55424b3/java/servers/test/org/xtreemfs/common/clients/ReplicatedClientTest.java][testAddRemoveReplica][1] = -> TRY {  -> raf=f.open("rw",0666,)@ -> raf.write(data,0,data.length,)@ -> raf.seek(3*64*1024,)@ -> raf.write(data,0,data.length,)@ -> raf.close()@ -> raf=f.open("r",0666,)@ -> raf.read(data,0,data.length,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/HidemotoNakada/cassandra-udf/blob/7a6fbc1b22a099abe368b786e9933fb5d980c329/test/unit/org/apache/cassandra/streaming/compress/CompressedInputStreamTest.java][testCompressedReadWith][1] = -> TRY {  -> f=new RandomAccessFile(tmp,"r",)@ -> LOOP { -> f.seek(c.offset,)@ -> pos+=f.read(toRead,pos,c.length+4,)@ } -> f.close()@ -> input=new CompressedInputStream(new ByteArrayInputStream(toRead,),info,)@ } CATCH(Exception) {}
results[https://github.com/Metaswitch/fmj/blob/54c77c40135f527cb33dfb7add56a99b47f0a78c/src/net/sf/fmj/media/datasink/file/Handler.java][write][1] = -> TRY { -> IF { -> raFile.seek(inOffset,)@inOffset>=0&&numBytes>0 -> LOOP { -> bytesToRead=(remaining>BUFFER_LEN)?BUFFER_LEN:remaining@remaining>0 -> raFile.read(buffer1,0,bytesToRead,)@ -> qtStrRaFile.write(buffer1,0,bytesToRead,)@ } } } CATCH(Exception) { -> System.err.println("Exception when creating streamable version of media file: "+e.getMessage(),)@ }
results[https://github.com/mammadori/dbpedia/blob/620a509cd2e04dfb8aa896aab719d2f2774e5236/live/src/main/java/org/dbpedia/extraction/live/util/collections/PersistentQueueIterator.java][prefetch][1] = -> TRY { -> IF { -> return null@startIndex==queue.getEndIndex() } -> file=queue.getFile()@!(startIndex==queue.getEndIndex()) -> file.seek(startIndex,)@!(startIndex==queue.getEndIndex()) -> length=file.readInt()@!(startIndex==queue.getEndIndex()) -> file.read(buffer,0,length,)@!(startIndex==queue.getEndIndex()) -> ois=new ObjectInputStream(new ByteArrayInputStream(buffer,),)@!(startIndex==queue.getEndIndex()) } CATCH(Exception) { -> logger.warn(ExceptionUtil.toString(e,),)@ }
results[https://github.com/KKBOX/android_kktoolkit/blob/c09f50cda937b234e6378a09c62eb4a6c066bb35/src/com/kkbox/toolkit/internal/image/KKImageRequest.java][cryptToFile][2] = -> TRY {  -> sourceFile=new RandomAccessFile(sourceFilePath,"r",)@ -> LOOP { -> readLength=sourceFile.read(buffer,0,BUFFER_SIZE,)@ -> IF { -> IF { -> buffer=cipher.doFinal(buffer,)@cipher!=null } -> targetFile.write(buffer,0,readLength,)@readLength!=-1 } } -> sourceFile.close()@ } CATCH(Exception) {}
results[https://github.com/nhnopensource/ngrinder/blob/337fba0646aa287e352ebcbbef1cae4a56b57cdc/ngrinder-controller/src/main/java/org/ngrinder/perftest/service/AgentManager.java][onAgentDownloadRequested][1] = -> updateChunkSize=getUpdateChunkSize()@ -> TRY { -> agentPackageReader=new RandomAccessFile(agentPackageService.createAgentPackage(),"r",)@ -> agentPackageReader.seek(offset,)@ -> count=agentPackageReader.read(buffer,0,updateChunkSize,)@ -> IF { -> bytes=Arrays.copyOf(buffer,count,)@count!=updateChunkSize } } CATCH(Exception) { -> LOGGER.error("Error while reading agent package, its offset is {} and details {}:",offset,e,)@ } FINALLY { -> IOUtils.closeQuietly(agentPackageReader,)@ }
results[https://github.com/baoshujun/love_pig/blob/dd16cb285170aa42a6c1f7e843238e3c25e5a8d9/src/com/lovepig/utils/Utils.java][getId3V1Genre][1] = -> TRY { -> IF { -> return unkown@!(f.exists())||f.length()<TAG_SIZE } ELSE { -> raf=new RandomAccessFile(f,"r",)@!(!(f.exists())||f.length()<TAG_SIZE) -> raf.seek(raf.length()-TAG_SIZE,)@!(!(f.exists())||f.length()<TAG_SIZE) -> raf.read(buf,0,TAG_SIZE,)@!(!(f.exists())||f.length()<TAG_SIZE) -> raf.close()@!(f.exists())||f.length()<TAG_SIZE -> tag=new String(buf,0,TAG_SIZE,"ASCII",)@!(!(f.exists())||f.length()<TAG_SIZE) -> IF { -> return unkown@tag.indexOf("TAG",)!=0||tag.length()!=TAG_SIZE && !(!(f.exists())||f.length()<TAG_SIZE) } } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/WSN-2012/BPF-Gateway-Service/blob/724161d929c927e2e9204bbb87342083f517585b/src/DirWatcher/PeriodicDirWatcher.java][onChange][1] = -> TRY { -> raf=new RandomAccessFile(file,"r",)@ -> IF { -> raf.seek(previousFileSize,)@(int) raf.length()-previousFileSize>0 -> raf.read(buf,0,(int) raf.length()-previousFileSize,)@(int) raf.length()-previousFileSize>0 } ELSE { -> raf.read(buf,)@!((int) raf.length()-previousFileSize>0) } -> IF { -> Service.send(buf,)@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/b6b5f1de67babfe67e831d47995cb374bacfe71f/java/servers/test/org/xtreemfs/test/osd/OSDDrainTest.java][testMultipleMRCs][2] = -> TRY {  -> LOOP { -> raf=files[i].open("rw",0777,)@i<NUMBER_OF_FILES -> raf.write(data,0,data.length,)@ -> raf.flush()@ -> raf.close()@ } -> LOOP { -> raf=files[i].open("r",0777,)@i<NUMBER_OF_FILES -> raf.read(data,0,data.length,)@ -> raf.close()@ -> LOOP { -> assertEquals('f',data[j],)@j<SIZE } } } CATCH(Exception) {}
results[https://github.com/bbockelm/DBS/blob/b1a66324b50cbd4148b035d6e928d4616488e5a2/Servers/JavaServer/src/dbs/test/DBSCLIFile.java][call][1] = -> TRY { -> raf=new RandomAccessFile(fileName,"rw",)@ -> len=raf.length()@ -> raf.read(b,0,(int) len,)@ -> fileStr=new String(b,)@ } CATCH(Exception) { -> System.out.println(ex.getMessage(),)@ -> ex.printStackTrace()@ } FINALLY { -> TRY { -> IF { -> raf.close()@raf!=null } } FINALLY { -> e.printStackTrace()@ } }
results[https://github.com/baoshujun/love_pig/blob/dd16cb285170aa42a6c1f7e843238e3c25e5a8d9/src/com/lovepig/utils/Utils.java][getId3V1Year][1] = -> TRY { -> IF { -> return unkown@!(f.exists())||f.length()<TAG_SIZE } ELSE { -> raf=new RandomAccessFile(f,"r",)@!(!(f.exists())||f.length()<TAG_SIZE) -> raf.seek(raf.length()-TAG_SIZE,)@!(!(f.exists())||f.length()<TAG_SIZE) -> raf.read(buf,0,TAG_SIZE,)@!(!(f.exists())||f.length()<TAG_SIZE) -> raf.close()@!(f.exists())||f.length()<TAG_SIZE -> tag=new String(buf,0,TAG_SIZE,"ASCII",)@!(!(f.exists())||f.length()<TAG_SIZE) -> IF { -> return unkown@tag.indexOf("TAG",)!=0||tag.length()!=TAG_SIZE && !(!(f.exists())||f.length()<TAG_SIZE) } ELSE { -> IF { -> return unkown@tag.substring(93,97,).trim().equals("",) && !(!(f.exists())||f.length()<TAG_SIZE) && !(tag.indexOf("TAG",)!=0||tag.length()!=TAG_SIZE) } -> return tag.substring(93,97,)@!(!(f.exists())||f.length()<TAG_SIZE) && !(tag.substring(93,97,).trim().equals("",)) && !(tag.indexOf("TAG",)!=0||tag.length()!=TAG_SIZE) } } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/splunk/splunk-sdk-java/blob/85c7cfd2cdf7386d44a763840d4f2182e44357c5/examples/export/com/splunk/sdk/export/Program.java][run][2] = -> TRY {  -> IF { -> throw new Error("Export file exists, and no recover option",)@file.exists()&&file.isFile()&&!(recover) } -> IF { -> raf=new RandomAccessFile(file,"rw",)@!(file.exists()&&file.isFile()&&!(recover)) && recover&&file.exists()&&file.isFile() -> fptr=Math.max(file.length()-bufferSize,0,)@!(file.exists()&&file.isFile()&&!(recover)) && recover&&file.exists()&&file.isFile() -> LOOP { -> raf.seek(fptr,)@!(file.exists()&&file.isFile()&&!(recover)) && recover&&file.exists()&&file.isFile() && fptr>0 -> raf.read(buffer,0,bufferSize,)@!(file.exists()&&file.isFile()&&!(recover)) && recover&&file.exists()&&file.isFile() -> eventStart=getEventStart(buffer,format,)@!(file.exists()&&file.isFile()&&!(recover)) && recover&&file.exists()&&file.isFile() } -> fc=raf.getChannel()@!(file.exists()&&file.isFile()&&!(recover)) && recover&&file.exists()&&file.isFile() } ELSE { -> IF { -> throw new Error("Failed to create output file",)@!(file.exists()&&file.isFile()&&!(recover)) && !(recover&&file.exists()&&file.isFile()) && !(file.createNewFile()) } } } CATCH(Exception) {}
results[https://github.com/splunk/splunk-sdk-java/blob/8c19950c11eb76cb58c22f7d84f3554529447fb6/examples/export/Program.java][run][1] = -> TRY {  -> IF { -> throw new Error("Export file exists, and no recover option",)@file.exists()&&file.isFile()&&!(recover) } -> IF { -> raf=new RandomAccessFile(file,"rw",)@!(file.exists()&&file.isFile()&&!(recover)) && recover&&file.exists()&&file.isFile() -> fptr=Math.max(file.length()-bufferSize,0,)@!(file.exists()&&file.isFile()&&!(recover)) && recover&&file.exists()&&file.isFile() -> LOOP { -> raf.seek(fptr,)@!(file.exists()&&file.isFile()&&!(recover)) && recover&&file.exists()&&file.isFile() && fptr>0 -> raf.read(buffer,0,bufferSize,)@!(file.exists()&&file.isFile()&&!(recover)) && recover&&file.exists()&&file.isFile() -> eventTimeOffset=getLastGoodEventOffset(buffer,format,)@!(file.exists()&&file.isFile()&&!(recover)) && recover&&file.exists()&&file.isFile() } -> fc=raf.getChannel()@!(file.exists()&&file.isFile()&&!(recover)) && recover&&file.exists()&&file.isFile() } ELSE { -> IF { -> throw new Error("Failed to create output file",)@!(file.exists()&&file.isFile()&&!(recover)) && !(recover&&file.exists()&&file.isFile()) && !(file.createNewFile()) } } } CATCH(Exception) {}
results[https://github.com/apache/directory-shared/blob/932a3e31310631b0967595f920ced2d2e2e20d24/ldap/model/src/test/java/org/apache/directory/api/ldap/model/ldif/LdifReaderTest.java][testLdifParserLengthAndOffset][1] = -> TRY {  -> data=ldif.getBytes()@ -> ldif1Bytes=new String(data,(int) entry1.getOffset(),entry1.getLengthBeforeParsing(),)@ -> ldif2Bytes=new String(data,(int) entry2.getOffset(),entry2.getLengthBeforeParsing(),)@ -> raf=new RandomAccessFile(file,"r",)@ -> rafEntry1=fileReader.next()@ -> raf.read(data,(int) rafEntry1.getOffset(),data.length,)@ -> reReadeRafEntry1=reader.parseLdif(new String(data,),).get(0,)@ -> assertEquals(rafEntry1.getOffset(),reReadeRafEntry1.getOffset(),)@ -> assertEquals(rafEntry1.getLengthBeforeParsing(),reReadeRafEntry1.getLengthBeforeParsing(),)@ -> raf.readFully(data,0,data.length,)@ -> reReadeRafEntry2=reader.parseLdif(new String(data,),).get(0,)@ } CATCH(Exception) {}
results[https://github.com/pcingola/BigDataScript/blob/e9a93cc941e227476bd580cad2075b845e74f49c/src/ca/mcgill/mcb/pcingola/bigDataScript/exec/TailFile.java][tail][2] = -> IF { -> return ""@linesToRead<1 } -> IF { -> return null@!(linesToRead<1) && fileName==null } -> IF { -> return null@!(linesToRead<1) && !(fileName==null) && f==null||!(f.exists()) } -> IF { -> return ""@!(linesToRead<1) && !(fileName==null) && !(f==null||!(f.exists())) && f.length()<=0 } -> TRY { -> raf=new RandomAccessFile(new File(fileName,),"r",)@!(linesToRead<1) && !(f.length()<=0) && !(fileName==null) && !(f==null||!(f.exists())) -> end=raf.length()@!(linesToRead<1) && !(f.length()<=0) && !(fileName==null) && !(f==null||!(f.exists())) -> LOOP { -> raf.seek(startPoint,)@!(linesToRead<1) && !(f.length()<=0) && !(fileName==null) && !(f==null||!(f.exists())) -> readLen=raf.read(buf,0,(int) readLen,)@!(linesToRead<1) && !(f.length()<=0) && !(fileName==null) && !(f==null||!(f.exists())) -> unparsedSize=(int) readLen@!(linesToRead<1) && !(f.length()<=0) && !(fileName==null) && !(f==null||!(f.exists())) -> LOOP { -> IF { -> IF { -> lines.add(new String(buf,startOfLine,len,)+(latestLine!=null)?latestLine.toString():"",)@!(linesToRead<1) && !(f.length()<=0) && !(fileName==null) && len>=0 && buf[index]=='\n' && !(f==null||!(f.exists())) } } } -> IF { -> latestLine.insert(0,new String(buf,0,unparsedSize,),)@!(linesToRead<1) && !(f.length()<=0) && !(fileName==null) && unparsedSize>0 && !(f==null||!(f.exists())) } } -> raf.close()@!(linesToRead<1) && !(f.length()<=0) && !(fileName==null) && !(f==null||!(f.exists())) } CATCH(Exception) { -> throw new RuntimeException("Error tail on file '"+fileName+"'",e,)@!(linesToRead<1) && !(f.length()<=0) && !(fileName==null) && !(f==null||!(f.exists())) }
results[https://github.com/Falaina/JPCSP-Mirror/blob/48907df9f76a9b130e16a666c4a226d855e41e44/src/jpcsp/MainGUI.java][loadFile][1] = -> TRY { -> raf=new RandomAccessFile(file,"r",)@ -> size=raf.length()@ -> IF { -> LOOP { -> len=raf.read(bytes,offset,Math.min(10*1024,bytes.length-offset,),)@offset<bytes.length } -> readbuffer=ByteBuffer.wrap(bytes,0,offset,)@ } ELSE { -> roChannel=raf.getChannel()@ } -> raf.close()@ } CATCH(GeneralJpcspException) { -> JpcspDialogManager.showError(this,Resource.get("generalError",)+" : "+e.getMessage(),)@ } CATCH(IOException) { -> IF { -> JpcspDialogManager.showError(this,Resource.get("criticalError",)+" : "+Resource.get("wrongLoader",),)@ } ELSE { -> e.printStackTrace()@ -> JpcspDialogManager.showError(this,Resource.get("ioError",)+" : "+e.getMessage(),)@ } } CATCH(Exception) { -> ex.printStackTrace()@ -> IF { -> JpcspDialogManager.showError(this,Resource.get("criticalError",)+" : "+ex.getMessage(),)@ } ELSE { -> JpcspDialogManager.showError(this,Resource.get("criticalError",)+" : Check console for details.",)@ } }
results[https://github.com/mirror/jpcsp/blob/58c58fc587bdb0e70770f0f4afb1798e82427ada/src/jpcsp/MainGUI.java][loadFile][1] = -> TRY { -> raf=new RandomAccessFile(file,"r",)@ -> size=raf.length()@ -> IF { -> LOOP { -> len=raf.read(bytes,offset,Math.min(10*1024,bytes.length-offset,),)@offset<bytes.length } -> readbuffer=ByteBuffer.wrap(bytes,0,offset,)@ } ELSE { -> roChannel=raf.getChannel()@ } -> raf.close()@ } CATCH(GeneralJpcspException) { -> JpcspDialogManager.showError(this,bundle.getString("MainGUI.strGeneralError.text",)+": "+e.getLocalizedMessage(),)@ } CATCH(IOException) { -> IF { -> JpcspDialogManager.showError(this,bundle.getString("MainGUI.strCriticalError.text",)+": "+bundle.getString("MainGUI.strWrongLoader.text",),)@ } ELSE { -> e.printStackTrace()@ -> JpcspDialogManager.showError(this,bundle.getString("ioError",)+": "+e.getLocalizedMessage(),)@ } } CATCH(Exception) { -> ex.printStackTrace()@ -> IF { -> JpcspDialogManager.showError(this,bundle.getString("MainGUI.strCriticalError.text",)+": "+ex.getLocalizedMessage(),)@ } ELSE { -> JpcspDialogManager.showError(this,bundle.getString("MainGUI.strCriticalError.text",)+": "+bundle.getString("MainGUI.strCheckConsole.text",),)@ } }
results[https://github.com/paillardf/PeerSync/blob/b7c920e69db01c5efbe50f8e15e141af6ae014ea/PeerSync/src/com/peersync/network/content/SyncContentProvider.java][processDataRequest][1] = -> Logging.logCheckedFinest(LOG,"   hash: ",req.getHash(),)@ -> Logging.logCheckedFinest(LOG,"   Offset : ",req.getOffset(),)@ -> Logging.logCheckedFinest(LOG,"   Length : ",req.getLength(),)@ -> Logging.logCheckedFinest(LOG,"   QID    : ",req.getQueryID(),)@ -> Logging.logCheckedFinest(LOG,"   PipeAdv: ",req.getResponsePipe(),)@ -> fAv=dataBase.getSharedFileAvailability(req.getHash(),).getFileAvailability()@ -> TRY { -> session=tracker.getSession(req.getResponsePipe(),)@ -> path=dataBase.getSharedFileAvailability(req.getHash(),).getAbsPath()@ -> accessor=new RandomAccessFile(myFile,"r",)@ -> accessor.seek(req.getOffset(),)@ -> accessor.read(data,0,(int) req.getLength(),)@ -> dataencrypted=ContentSecurity.encrypt(data,KeyStoreManager.getInstance().getX509Certificate(peerGroup.getPeerGroupID().toString(),).getPublicKey(),)@ -> resp=new DataResponseMessage(req,fAv,)@ -> IF { -> Log.d("from "+req.getOffset()+" to "+(int) req.getLength(),peerGroup.getPeerGroupID().toString(),)@req.getQueryID()%10==0 } -> accessor.close()@ } CATCH(TooManyClientsException) { -> Logging.logCheckedWarning(LOG,"Too many concurrent clients.  Discarding.",)@ } CATCH(IOException) { -> Logging.logCheckedWarning(LOG,"Exception while handling data request\n",iox,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/int3/doppio/blob/cc9bf5985aa49dcb369a5c03c0620b7ff044c893/test/RAFile.java][main][1] = -> TRY {  -> f=new RandomAccessFile("./test/RAFile.java","r",)@ -> f.seek(20,)@ -> f.read(b,5,5,)@ -> printBytes(b,)@ -> f.seek(0,)@ -> f.read(b,0,10,)@ -> printBytes(b,)@ } CATCH(Exception) {}
results[https://github.com/MiniSEC/adito_reload/blob/621a3b13f8451e076ab5d2645e5aff2fe32ce444/adito/trunk/Alfresco-jLAN/alfresco-jlan/source/java/org/alfresco/jlan/server/filesys/loader/FileSegment.java][readBytes][3] = -> TRY {  -> m_segment.seek(fileOff,)@ -> TRY { -> LOOP { -> rdLen=m_segment.read(buf,bufPos,rdLen,)@totLen<len&&rdLen>0 } } CATCH(Exception) { -> Debug.println("***** FileSegment Read Error *****",)@ -> Debug.println(ex,)@ } } CATCH(IOException) {}
results[https://github.com/beerbong/com_beerbong_zipinst/blob/128f318b3c2321c5a08767ba3f0e94218625b806/src/net/lingala/zip4j/unzip/UnzipEngine.java][getStandardDecrypterHeaderBytes][1] = -> TRY {  -> TRY { -> raf.seek(localFileHeader.getOffsetStartOfData(),)@ -> raf.read(headerBytes,0,12,)@ } CATCH(IOException) { -> throw new ZipException(e,)@ } CATCH(Exception) { -> throw new ZipException(e,)@ } } CATCH(ZipException) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/7a4eb7cf58617a13c17fec12ce7f70c317ed0fa5/java/servers/test/org/xtreemfs/common/clients/ClientTest.java][testData][1] = -> TRY {  -> ra=f.open("rw",0555,)@ -> ra.seek(2,)@ -> wbytes=ra.write(data,0,data.length,)@ -> ra.seek(0,)@ -> rbytes=ra.read(data,0,data.length,)@ -> assertEquals(2048,rbytes,)@ -> ra.seek(2,)@ -> rbytes=ra.read(data,0,data.length,)@ -> assertEquals(2048,rbytes,)@ -> ra.seek(4,)@ -> rbytes=ra.read(data,0,data.length,)@ -> assertEquals(2048-2,rbytes,)@ -> ra.close()@ } CATCH(Exception) {}
results[https://github.com/alibaba/otter/blob/78e112c7a9337f367accbcebebbe7f2d9a529c9c/node/etl/src/main/java/com/alibaba/otter/node/etl/common/pipe/impl/http/AbstractHttpPipe.java][decodeFile][1] = -> TRY { -> raf=new RandomAccessFile(file,"rw",)@ -> keyLength=ByteUtils.stringToBytes(key,).length@ -> crcLength=ByteUtils.stringToBytes(crc,).length@ -> raf.seek(pos,)@ -> raf.read(keyBytes,0,keyLength,)@ -> keystr=ByteUtils.bytesToString(keyBytes,)@ -> raf.seek(pos+keyLength,)@!(!(key.equals(keystr,))) -> raf.read(crcBytes,0,crcLength,)@!(!(key.equals(keystr,))) -> crcStr=ByteUtils.bytesToString(crcBytes,)@!(!(key.equals(keystr,))) -> raf.setLength(pos,)@!(!(key.equals(keystr,))) && !(!(crc.equals(crcStr,))) } CATCH(Exception) { -> throw new PipeException("read_encrypted_error",e,)@ } FINALLY { -> IOUtils.closeQuietly(raf,)@ }
results[https://github.com/vprithvi/xtorrent/blob/4e843d4bf147778cb63534798a76cb38bff23be4/src/Connect.java][makeChunk][1] = -> IF { -> TRY { -> ramFile=new RandomAccessFile(peerProcess.theFile,"r",)@ -> ramFile.seek((long) peerProcess.pieceSize*chunkNo,)@ -> IF { -> ramFile.read(outChunks,0,(int) peerProcess.pieceSize*chunkNo+1-ramFile.length(),)@peerProcess.pieceSize*chunkNo+1>ramFile.length() } ELSE { -> ramFile.read(outChunks,0,peerProcess.pieceSize,)@!(peerProcess.pieceSize*chunkNo+1>ramFile.length()) } -> ramFile.close()@ } CATCH(Exception) { -> peerProcess.logger.println(e.toString(),)@ } }
results[https://github.com/tkruse/seda/blob/c5bdf2736b915ba26991fbc84b78d7bcb9668e1c/src/seda/apps/Haboob/bottleneck/BottleneckDirectControl.java][doBottleneck][2] = -> IF { -> TRY { -> LOOP { -> raf=new RandomAccessFile(RANDOM_FILE,"r",)@ -> LOOP { -> raf.read(data,0,NUM_BYTES_TO_READ,)@i<NUM_BYTES_TO_READ } -> raf.close()@ } } CATCH(Exception) { -> System.err.println("Warning: Bottleneck processing got exception: "+e,)@ } } -> IF { -> TRY { -> LOOP { -> r.nextBytes(data,)@ } } CATCH(Exception) { -> System.err.println("Warning: Bottleneck processing got exception: "+e,)@ } }
results[https://github.com/Ineedajob/RSBot/blob/45d336918ce97f3e2509bd6419699e7cc983d742/src/org/rsbot/client/RandomAccessFile.java][read][1] = -> TRY {  -> TRY { -> return raf.read()@!(data!=null) } CATCH(Exception) { -> e.printStackTrace()@ } } CATCH(IOException) {}
results[https://github.com/skriptkid/SKBot/blob/ad206ce0cb6e560a16ee359676fc1013f6974289/src/org/rsbot/client/RandomAccessFile.java][read][1] = -> TRY {  -> TRY { -> IF { -> return raf.read()@!(data!=null) && raf!=null } } CATCH(Exception) { -> e.printStackTrace()@ } } CATCH(IOException) {}
results[https://github.com/int3/doppio/blob/0b8cab9856fd70fa85c9c089c5dc68f69a6ff41d/classes/test/RAFile.java][main][1] = -> TRY {  -> f=new RandomAccessFile("./classes/test/RAFile.java","r",)@ -> System.out.println(f.getFilePointer(),)@ -> System.out.println(f.length(),)@ -> f.seek(20,)@ -> System.out.println(f.getFilePointer(),)@ -> f.read(b,5,5,)@ -> printBytes(b,)@ -> System.out.println(f.getFilePointer(),)@ -> f.seek(0,)@ -> f.read(b,0,10,)@ -> printBytes(b,)@ -> System.out.println(f.getFilePointer(),)@ -> f.seek(5,)@ -> f.read(b,0,10,)@ -> printBytes(b,)@ -> System.out.println(f.getFilePointer(),)@ -> f.close()@ } CATCH(Exception) {}
results[https://github.com/ruytoor/M1S2/blob/ea2486d9d3cd06f9723f50c1ce56d153888606d6/TI/workspace/IJ/plugins/Input-Output/DM3_Reader.java][readStringData][4] = -> TRY {  -> IF { -> return new String("",)@stringSize<=0 } -> f.read(temp,0,stringSize,)@!(stringSize<=0) -> IF { -> TRY { -> rString=new String(temp,"UTF-16LE",)@!(stringSize<=0) } CATCH(Exception) { -> LOOP { -> rString+=new Character((char) temp[i+1]&0xFF<<8|temp[i]&0xFF,)@i<stringSize && !(stringSize<=0) } } } ELSE { -> TRY { -> rString=new String(temp,"UTF-16BE",)@!(stringSize<=0) } CATCH(Exception) { -> LOOP { -> rString+=new Character((char) temp[i]&0xFF<<8|temp[i+1]&0xFF,)@i<stringSize && !(stringSize<=0) } } } } CATCH(IOException) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/e36781ae7f99da152b83b57db6e49175764785f8/servers/test/org/xtreemfs/test/io/RandomAccessFileTest.java][testReadAndWrite][1] = -> TRY {  -> randomAccessFile=new RandomAccessFile("rw",mrc1Address,volumeName+"/myDir/test1.txt",testEnv.getRpcClient(),userID,groupIDs,)@ -> result=randomAccessFile.write(bytesIn,0,length,)@ -> assertEquals(length,result,)@ -> result=randomAccessFile.read(bytesOut,0,length,)@ -> assertEquals(0,result,)@ -> randomAccessFile.seek(0,)@ -> result=randomAccessFile.read(bytesOut,0,length,)@ -> assertEquals(length,result,)@ -> assertEquals(new String(bytesIn,),new String(bytesOut,),)@ -> randomAccessFile.seek(0,)@ -> randomAccessFile.write(bytesIn,0,bytesIn.length,)@ -> randomAccessFile.seek(0,)@ -> result=randomAccessFile.read(bytesOut,0,4,)@ -> assertEquals(new String(bytesOut,),new String("Hell",),)@ -> randomAccessFile.seek(1,)@ -> result=randomAccessFile.read(bytesOut,0,4,)@ -> assertEquals(new String(bytesOut,),new String("ello",),)@ } CATCH(Exception) {}
results[https://github.com/freenet/plugin-Spider-staging/blob/1c121ff6e01d3293dc12bac6f33900372c4d4af9/src/plugins/XMLSpider/org/garret/perst/CompressedReadWriteFile.java][read][7] = -> TRY { -> IF { -> IF { -> IF { -> return 0@pagePos==0 && pageAddr!=0 } } -> dataFile.seek(pagePos>>>Page.pageSizeLog,)@!(pagePos==0) && pageAddr!=0 -> size=(int) pagePos&Page.pageSize-1+1@!(pagePos==0) && pageAddr!=0 -> rc=dataFile.read(compressionBuf,0,size,)@!(pagePos==0) && pageAddr!=0 -> IF { -> throw new StorageError(StorageError.FILE_ACCESS_ERROR,)@!(pagePos==0) && pageAddr!=0 && rc!=size } -> crypt(compressionBuf,size,)@!(rc!=size) && !(pagePos==0) && pageAddr!=0 -> IF { -> inflater.setInput(compressionBuf,0,size,)@size<Page.pageSize && !(rc!=size) && !(pagePos==0) && pageAddr!=0 -> rc=inflater.inflate(buf,)@!(rc!=size) && !(pagePos==0) && pageAddr!=0 -> Assert.that(rc==Page.pageSize,)@!(rc!=size) && !(pagePos==0) && pageAddr!=0 } ELSE { -> System.arraycopy(compressionBuf,0,buf,0,rc,)@!(rc!=size) && !(pagePos==0) && pageAddr!=0 } -> return rc@!(rc!=size) && !(pagePos==0) && pageAddr!=0 } ELSE { -> dataFile.seek(0,)@pageAddr!=0 -> return dataFile.read(buf,0,buf.length,)@!(pageAddr!=0) } } CATCH(Exception) { -> throw new StorageError(StorageError.FILE_ACCESS_ERROR,x,)@ }
results[https://github.com/reppie/xchange/blob/92e64eae053d857ba59d0fe99baefb3ff93a9b48/projects/xchange/xchange/Download.java][getLocalBlock][1] = -> TRY {  -> IF { -> IF { -> blockSize=(int) file.length()-start@end>file.length() && file.exists() } -> raf=new RandomAccessFile(file,"r",)@file.exists() -> raf.seek(start,)@file.exists() -> raf.read(b,0,blockSize,)@file.exists() -> raf.close()@file.exists() -> Debug.print("block_size = "+blockSize,)@file.exists() -> return blockSize@file.exists() } ELSE { -> IF { -> IF { -> IF { -> blockSize=(int) tmpFile.length()-start@tmpFile.exists() && end>tmpFile.length() && (char) t=='1' && file.exists() } -> raf=new RandomAccessFile(tmpFile,"r",)@tmpFile.exists() && (char) t=='1' && file.exists() -> raf.seek(start,)@tmpFile.exists() && (char) t=='1' && file.exists() -> raf.read(b,0,blockSize,)@tmpFile.exists() && (char) t=='1' && file.exists() -> raf.close()@tmpFile.exists() && (char) t=='1' && file.exists() -> IF { -> System.out.println("block_size = "+blockSize,)@tmpFile.exists() && (char) t=='1' && file.exists() } -> return blockSize@tmpFile.exists() && (char) t=='1' && !(file.exists()) } ELSE { -> return 0@tmpFile.exists() && !((char) t=='1') && !(file.exists()) } } ELSE { -> return 0@!(tmpFile.exists()) && !(file.exists()) } } } CATCH(Exception) {}
results[https://github.com/reppie/xchange/blob/58c588c3a92013b6d8263d8c5e72848c42b34023/source/src/xchange/Xchange.java][getLocalBlock][2] = -> TRY {  -> IF { -> IF { -> block_size=(int) file.length()-start@end>file.length() && file.exists() } -> raf=new RandomAccessFile(file,"r",)@file.exists() -> raf.seek(start,)@file.exists() -> raf.read(b,0,block_size,)@file.exists() -> raf.close()@file.exists() -> IF { -> System.out.println("block_size = "+block_size,)@file.exists() } -> return block_size@file.exists() } ELSE { -> IF { -> IF { -> IF { -> block_size=(int) tmpFile.length()-start@tmpFile.exists() && end>tmpFile.length() && (char) t=='1' && file.exists() } -> raf=new RandomAccessFile(tmpFile,"r",)@tmpFile.exists() && (char) t=='1' && file.exists() -> raf.seek(start,)@tmpFile.exists() && (char) t=='1' && file.exists() -> raf.read(b,0,block_size,)@tmpFile.exists() && (char) t=='1' && file.exists() -> raf.close()@tmpFile.exists() && (char) t=='1' && file.exists() -> IF { -> System.out.println("block_size = "+block_size,)@tmpFile.exists() && (char) t=='1' && file.exists() } -> return block_size@tmpFile.exists() && (char) t=='1' && !(file.exists()) } ELSE { -> return 0@tmpFile.exists() && !((char) t=='1') && !(file.exists()) } } ELSE { -> return 0@!(tmpFile.exists()) && !(file.exists()) } } } CATCH(Exception) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/e848cab95ca6d8821dfe79364e2581b1c670bddd/servers/src/org/xtreemfs/sandbox/tests/ReplicationStressTest.java][readFile][1] = -> TRY {  -> TRY { -> originalFile=new java.io.RandomAccessFile(tmpDir+tmpFilename,"r",)@ -> raf=new RandomAccessFile("r",mrcAddress,VOLUME_NAME+DIR_PATH+fileName,client,userCredentials,)@ -> filesize=raf.length()@ -> LOOP { -> TRY { -> raf.seek(startOffset,)@!(startOffsets.size() > 0) -> raf.read(result,0,result.length,)@!(startOffsets.size() > 0) } CATCH(Exception) { -> Logging.logMessage(Logging.LEVEL_ERROR,this,"File "+fileName+" cannot be read.",)@!(startOffsets.size() > 0) -> throw e@startOffsets.size() > 0 } -> originalFile.seek(startOffset,)@!(startOffsets.size() > 0) -> originalFile.read(expectedResult,)@!(startOffsets.size() > 0) -> IF { -> expectedResult=Arrays.copyOf(expectedResult,(int) filesize-startOffset,)@startOffset+partSize>filesize && !(startOffsets.size() > 0) -> expectedResult=Arrays.copyOf(expectedResult,partSize,)@startOffset+partSize>filesize && !(startOffsets.size() > 0) } -> IF { -> System.out.println("first 128 bytes read:\t"+Arrays.toString(Arrays.copyOfRange(result,0,128,),),)@!(startOffsets.size() > 0) && !(Arrays.equals(result,expectedResult,)) -> System.out.println("first 128 bytes expected:\t"+Arrays.toString(Arrays.copyOfRange(expectedResult,0,128,),),)@!(startOffsets.size() > 0) && !(Arrays.equals(result,expectedResult,)) -> System.out.println("last 128 bytes read:\t"+Arrays.toString(Arrays.copyOfRange(result,result.length-128,result.length,),),)@!(startOffsets.size() > 0) && !(Arrays.equals(result,expectedResult,)) -> System.out.println("last 128 bytes expected:\t"+Arrays.toString(Arrays.copyOfRange(expectedResult,result.length-128,result.length,),),)@!(startOffsets.size() > 0) && !(Arrays.equals(result,expectedResult,)) } } } FINALLY { -> IF { -> originalFile.close()@originalFile!=null && !(startOffsets.size() > 0) } } } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/3e3e391a959df5a1d0406a67c6b39efd11897d97/test/java/io/RandomAccessFile/ParameterCheck.java][doTest][3] = -> TRY {  -> TRY { -> LOOP { -> fout.write(i,)@i<32 } -> raf=new RandomAccessFile(fn,"rw",)@ -> LOOP { -> TRY { -> IF { -> raf.readFully(b,off[i],len[i],)@i<numCases } -> IF { -> raf.read(b,off[i],len[i],)@i<numCases } -> IF { -> raf.write(b,off[i],len[i],)@i<numCases } -> raf.seek(0,)@ } CATCH(IndexOutOfBoundsException) { -> IF { -> printErr(method,numGood,i,"java.lang.IndexOutOfBoundsException",)@i<numCases && results[i] } } CATCH(OutOfMemoryError) { -> printErr(method,numGood,i,"java.lang.OutOfMemoryError",)@i<numCases } } ELSE { -> printErr(method,numGood,i,"No java.lang.IndexOutOfBoundsException",)@i<numCases && !(results[i]) } -> raf.seek(0,)@ -> TRY { -> IF { -> raf.readFully(null,1,2,)@ } -> IF { -> raf.read(null,1,2,)@ } -> IF { -> raf.write(null,1,2,)@ } } } FINALLY { -> IF { -> raf.close()@raf!=null } -> fn.delete()@ } } CATCH(Exception) {}
results[https://github.com/commoncrawl/commoncrawl-crawler/blob/610763c29278e496ed21540f1a11aeb50fa0fade/src/org/commoncrawl/service/crawler/CrawlLog.java][transferLocalCheckpointLog][1] = -> TRY {  -> buffer=new CustomByteArrayOutputStream(1<<17,)@ -> TRY { -> reader.seek(0L,)@ -> header=readLogFileHeader(reader,)@ -> LOOP { -> IF { -> TRY { -> urlDataLen=reader.readInt()@!(inputStream.getFilePointer()<header._fileSize) && seekToNextSyncBytesPos(syncBytesBuffer,reader,header._fileSize,) -> urlDataCRC=reader.readLong()@!(inputStream.getFilePointer()<header._fileSize) && seekToNextSyncBytesPos(syncBytesBuffer,reader,header._fileSize,) -> IF { -> buffer=new CustomByteArrayOutputStream(urlDataLen/65536+1*65536,)@!(inputStream.getFilePointer()<header._fileSize) && urlDataLen>buffer.getBuffer().length && !(seekToNextSyncBytesPos(syncBytesBuffer,reader,header._fileSize,)) } -> reader.read(buffer.getBuffer(),0,urlDataLen,)@!(inputStream.getFilePointer()<header._fileSize) && seekToNextSyncBytesPos(syncBytesBuffer,reader,header._fileSize,) -> crc.update(buffer.getBuffer(),0,urlDataLen,)@!(inputStream.getFilePointer()<header._fileSize) && !(seekToNextSyncBytesPos(syncBytesBuffer,reader,header._fileSize,)) } ELSE { -> bufferReader=new DataInputStream(new ByteArrayInputStream(buffer.getBuffer(),0,urlDataLen,),)@computedValue!=urlDataCRC && !(inputStream.getFilePointer()<header._fileSize) && !(seekToNextSyncBytesPos(syncBytesBuffer,reader,header._fileSize,)) -> CATCH(IOException) { -> throw new URLWriterException()@!(computedValue!=urlDataCRC) && inputStream.getFilePointer()<header._fileSize && seekToNextSyncBytesPos(syncBytesBuffer,reader,header._fileSize,) } -> LOG.error("Caught URLRewriter Exception! - Throwing to outer layer!",)@!(inputStream.getFilePointer()<header._fileSize) && !(seekToNextSyncBytesPos(syncBytesBuffer,reader,header._fileSize,)) -> throw e@inputStream.getFilePointer()<header._fileSize && seekToNextSyncBytesPos(syncBytesBuffer,reader,header._fileSize,) } CATCH(Exception) { -> LOG.error("Ignoring Error Processing CrawlLog Entry at Position:"+lastReadPosition+" Exception:"+CCStringUtils.stringifyException(e,),)@!(inputStream.getFilePointer()<header._fileSize) && !(seekToNextSyncBytesPos(syncBytesBuffer,reader,header._fileSize,)) } } } } CATCH(EOFException) { -> LOG.error("Caught EOF Exception during read of local CrawlLog:"+crawlLogPath.getAbsolutePath()+" Checkpoint Id:"+checkpointId+" FilePosition:"+lastReadPosition,)@ } CATCH(IOException) { -> LOG.error(CCStringUtils.stringifyException(e,),)@ } FINALLY { -> IF { -> inputStream.close()@inputStream!=null } } } CATCH(IOException) {}
results[https://github.com/bergerkiller/MyWorlds/blob/a7211f683044b3643d3227613c8a96c8cfb189bb/src/main/java/com/bergerkiller/bukkit/mw/WorldManager.java][repairRegion][1] = -> TRY { -> raf=new RandomAccessFile(chunkfile,"rw",)@ -> LOOP { -> locations[i]=raf.readInt()@i<1024 } -> LOOP { -> TRY { -> raf.seek(seekindex,)@ -> length=raf.readInt()@ -> IF { -> MyWorlds.plugin.log(Level.WARNING,"Invalid length: "+length+" > 4096 * "+size,)@length>4096*size } ELSE { -> IF { -> version=raf.readByte()@ -> raf.read(data,0,length-1,)@size>0&&length>0 && !(length>4096*size) -> bais=new ByteArrayInputStream(data,0,length-1,)@size>0&&length>0 && !(length>4096*size) -> IF { -> TRY { } ELSE { -> IF { -> IF { -> raf.seek(seekindex,)@ -> raf.writeInt(newdata.length+1,)@ -> raf.writeByte(2,)@ -> raf.write(newdata,0,newdata.length,)@ } } } CATCH(ZipException) { -> MyWorlds.plugin.log(Level.WARNING,"Chunk at position "+chunkX+"/"+chunkZ+" is not in a valid ZIP format (it's corrupted, and thus lost)",)@ } CATCH(Exception) { -> MyWorlds.plugin.log(Level.WARNING,"Failed to properly read chunk at position "+chunkX+"/"+chunkZ+":",)@ -> ex.printStackTrace()@ } } } } } CATCH(Exception) { -> ex.printStackTrace()@ } } -> IF { -> IF { -> raf.seek(0,)@backupfolder.exists()||backupfolder.mkdirs()&&StreamUtil.tryCopyFile(chunkfile,backupfile,) -> LOOP { -> raf.writeInt(location,)@backupfolder.exists()||backupfolder.mkdirs()&&StreamUtil.tryCopyFile(chunkfile,backupfile,) } } ELSE { -> return -2@!(backupfolder.exists()||backupfolder.mkdirs()&&StreamUtil.tryCopyFile(chunkfile,backupfile,)) } } -> raf.close()@ -> e.printStackTrace()@ } CATCH(IOException) { -> e.printStackTrace()@ } -> TRY { -> IF { -> raf.close()@raf!=null } }
