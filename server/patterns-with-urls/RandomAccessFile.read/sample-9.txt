results[https://github.com/entwinemedia/weblounge/blob/f4a41c055bb430da5f03547f6b909280db0703db/src/main/java/ch/o2it/weblounge/contentrepository/impl/index/URIIndex.java][getId] = -> TRY {  -> idx.seek(startOfEntry,)@ -> bytesRead=idx.read(bytes,)@ -> IF { -> throw new IllegalStateException("No data at address "+entry,)@bytesRead<bytesPerId||bytes[1]=='\n' } -> return new String(bytes,"utf-8",)@!(bytesRead<bytesPerId||bytes[1]=='\n') } CATCH {}
results[https://github.com/entwinemedia/weblounge/blob/870c68499819e3e0173fcf63337fc38a7ac28b38/src/main/java/ch/entwine/weblounge/contentrepository/impl/index/URIIndex.java][getId] = -> TRY {  -> idx.seek(startOfEntry,)@ -> bytesRead=idx.read(bytes,)@ -> IF { -> throw new IllegalStateException("No data at address "+entry,)@bytesRead<bytesPerId||bytes[1]=='\n' } -> return new String(bytes,"utf-8",)@!(bytesRead<bytesPerId||bytes[1]=='\n') } CATCH {}
results[https://github.com/Silverpeas/silverpeasmobile/blob/42ef7e500ec01fca3262be122756420fed50dc5a/web/src/main/java/com/silverpeas/mobile/server/helpers/RotationSupport.java][<init>] = -> TRY {  -> file=new RandomAccessFile(f,mode,)@ -> file.seek(0,)@ -> file.read(type,)@ -> IF { -> throw new IOException("Not a JPEG file: "+f.getName(),)@type[0]!=-1||type[1]!=-40 } } CATCH {}
results[https://github.com/Unidata/thredds/blob/5e8f3706c8c725025e35a18443af7658cba605b6/cdm/src/main/java/ucar/nc2/iosp/hdf5/FractalHeap.java][readDirectBlock] = -> TRY {  -> raf.seek(pos,)@ -> raf.read(heapname,)@ -> magic=new String(heapname,)@ -> IF { -> throw new IllegalStateException(magic+" should equal FHDB",)@!(magic.equals("FHDB",)) } -> version=raf.readByte()@!(!(magic.equals("FHDB",))) } CATCH {}
results[https://github.com/asascience/THREDDS/blob/4fe470a13f665406e678cf70338c8c90841f1b5d/cdm/src/main/java/ucar/nc2/iosp/hdf4/H4header.java][read] = -> TRY {  -> raf.seek(offset,)@ -> raf.read(b,)@ -> LOOP { -> IF { -> text[count]=new String(b,start,i-start,"UTF-8",)@i<length && b[i]==0 } } } CATCH {}
results[https://github.com/watermint/SourceColon/blob/554ff455cb58b23c6fc53c44c6aaf8625ff5ccef/src/org/opensolaris/opengrok/web/EftarFileReader.java][getTag] = -> TRY {  -> IF { -> return null@tagOffset==0 } -> f.seek(offset+tagOffset,)@!(tagOffset==0) -> len=f.read(tagString,)@!(tagOffset==0) -> IF { -> throw new EOFException()@!(tagOffset==0) && len==-1 } -> return new String(tagString,0,len,)@!(tagOffset==0) && !(len==-1) } CATCH {}
results[https://github.com/bloodfire91/cnt4007c/blob/2e362bea81aef1f90b9b31cabae5a9a1cf06bb8f/FileHandler.java][getPiece] = -> TRY { -> outputFile.seek(index*pieceSize,)@ -> readSize=outputFile.read(data,)@ -> IF { -> System.arraycopy(smallerData,0,data,0,smallerData.length,)@ } }
results[https://github.com/illumos/opengrok/blob/b091018b9ae371d161bd76b7c78cf475a0882692/src/org/opensolaris/opengrok/web/EftarFileReader.java][getTag] = -> TRY {  -> IF { -> return null@tagOffset==0 } -> f.seek(offset+tagOffset,)@!(tagOffset==0) -> len=f.read(tagString,)@!(tagOffset==0) -> IF { -> throw new EOFException()@!(tagOffset==0) && len==-1 } -> return new String(tagString,0,len,)@!(tagOffset==0) && !(len==-1) } CATCH {}
results[https://github.com/crosswire/jsword/blob/b4941af12cd77920103aba9fd5aefec2bce995b3/jsword/src/limbo/org/crosswire/jsword/book/search/ser/SerIndex.java][find] = -> TRY { -> dataRaf.seek(section.offset,)@ -> read=dataRaf.read(blob,)@ -> IF { -> throw new IOException()@read!=blob.length } -> return PassageKeyFactory.fromBinaryRepresentation(blob,)@!(read!=blob.length) }
results[https://github.com/Unidata/thredds/blob/7dfcc094154e74ed6df4a5237c238c122e9ba535/cdm/src/main/java/ucar/nc2/iosp/hdf4/H4header.java][read] = -> TRY {  -> raf.seek(offset,)@ -> raf.read(b,)@ -> LOOP { -> IF { -> text[count]=new String(b,start,i-start,CDM.utf8Charset,)@i<length && b[i]==0 } } } CATCH {}
