results[https://github.com/Silverpeas/silverpeasmobile/blob/42ef7e500ec01fca3262be122756420fed50dc5a/web/src/main/java/com/silverpeas/mobile/server/helpers/RotationSupport.java][<init>] = -> TRY {  -> file=new RandomAccessFile(f,mode,)@ -> file.seek(0,)@ -> file.read(type,)@ -> IF { -> throw new IOException("Not a JPEG file: "+f.getName(),)@type[0]!=-1||type[1]!=-40 } } CATCH {}
results[https://github.com/jamesblackburn/cdt-core/blob/00c1fdc489bd9f8b293ca7f7bc4ea2b4b791820a/utils/org/eclipse/cdt/utils/som/AR.java][<init>] = -> TRY {  -> file=new RandomAccessFile(filename,"r",)@ -> file.read(ar_magic,)@ -> IF { -> file.close()@!(!(isARHeader(ar_magic,))) -> throw new IOException(CCorePlugin.getResourceString("Util.exception.invalidArchive",),)@!(isARHeader(ar_magic,)) } } CATCH {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/ba6e9e97c84948700e301eb25dc16e8a36b52524/test/java/util/zip/EntryCount64k.java][usesZip64] = -> TRY {  -> raf=new RandomAccessFile(zipFile,"r",)@ -> raf.seek(raf.length()-buf.length,)@ -> raf.read(buf,)@ -> LOOP { -> IF { -> return true@buf[i+0]=='P'&&buf[i+1]=='K'&&buf[i+2]==6&&buf[i+3]==6 && i<buf.length-4 } } } CATCH {}
results[https://github.com/yukuku/androidbible/blob/b826f38dffaae116b4f764128bbb9a68ff941637/Alkitab/src/yuku/alkitab/base/storage/YesReader.java][init] = -> TRY {  -> IF { -> f=new RandomAccessFile(nf,"r",)@f==null -> f.seek(0,)@f==null -> f.read(buf,)@f==null -> IF { -> throw new RuntimeException("Header ga betul. Ketemunya: "+Arrays.toString(buf,),)@!(Arrays.equals(buf, new byte[],)) && f==null } -> teks_dasarOffset=f.getFilePointer()@!(!(Arrays.equals(buf, new byte[],))) && f==null -> Log.d(TAG,"teks_dasarOffset = "+teks_dasarOffset,)@!(!(Arrays.equals(buf, new byte[],))) && !(f==null) } } CATCH {}
results[https://github.com/exoplatform/jcr/blob/9e848d9d63d57cfcda5c72be66f11261c32cfba8/exo.jcr.component.core/src/main/java/org/exoplatform/services/jcr/impl/core/query/IndexRetrieveImpl.java][execute] = -> TRY {  -> filePath=(String) args[0]@ -> offset=(Integer) args[1]@ -> file=new RandomAccessFile(new File(indexDirectory,filePath,),"r",)@ -> file.seek(offset,)@ -> len=file.read(buffer,)@ -> IF { -> return null@len==-1 } ELSE { -> System.arraycopy(buffer,0,data,0,len,)@!(len==-1) -> return data@!(len==-1) } } CATCH {}
results[https://github.com/yukuku/androidbible/blob/5f14030373434a9ef692f8090590bb214cfddb92/Alkitab/src/yuku/alkitab/base/storage/YesPembaca.java][init] = -> TRY {  -> IF { -> f=new RandomAccessFile(nf,"r",)@f==null -> f.seek(0,)@f==null -> f.read(buf,)@f==null -> IF { -> throw new RuntimeException("Header ga betul. Ketemunya: "+Arrays.toString(buf,),)@!(Arrays.equals(buf, new byte[],)) && f==null } -> teks_dasarOffset=f.getFilePointer()@!(!(Arrays.equals(buf, new byte[],))) && f==null -> Log.d(TAG,"teks_dasarOffset = "+teks_dasarOffset,)@!(!(Arrays.equals(buf, new byte[],))) && !(f==null) } } CATCH {}
results[https://github.com/yukuku/androidbible/blob/c56b17fe7f4a054a98de36a7414740e05c9cface/Alkitab/src/yuku/alkitab/model/YesPembaca.java][init] = -> TRY {  -> IF { -> f=new RandomAccessFile(nf,"r",)@f==null -> f.seek(0,)@f==null -> f.read(buf,)@f==null -> IF { -> throw new RuntimeException("Header ga betul. Ketemunya: "+Arrays.toString(buf,),)@!(Arrays.equals(buf, new byte[],)) && f==null } -> teks_dasarOffset=f.getFilePointer()@!(!(Arrays.equals(buf, new byte[],))) && f==null -> Log.d(TAG,"teks_dasarOffset = "+teks_dasarOffset,)@!(!(Arrays.equals(buf, new byte[],))) && !(f==null) } } CATCH {}
results[https://github.com/rgov/wage/blob/0351d85a6bf37fb78aea322562f98e3c88b35cf9/engine/src/info/svitkine/alexei/wage/WBGameFinder.java][accept] = -> IF { -> return true@file.isDirectory() } -> model=new ResourceModel(file.getName(),)@!(file.isDirectory()) -> TRY { -> raf=new RandomAccessFile(file.getPath()+"/rsrc","r",)@!(file.isDirectory()) -> model.read(raf,)@!(file.isDirectory()) -> IF { -> return true@model.getResourceType("ASCN",)!=null && !(file.isDirectory()) } }
results[https://github.com/NIF-au/TissueStack/blob/e69e8403aa21d31094d336184063d244bfaf4e12/src/java/main/java/au/edu/uq/cai/TissueStack/utils/ImageUtils.java][isRawFormat] = -> IF { -> return false@!(potentialRawFile.isFile())||!(potentialRawFile.exists()) } -> IF { -> return false@potentialRawFile.length()<RAW_HEADER.length() && !(!(potentialRawFile.isFile())||!(potentialRawFile.exists())) } -> TRY { -> raf=new RandomAccessFile(potentialRawFile,"r",)@!(potentialRawFile.length()<RAW_HEADER.length()) && !(!(potentialRawFile.isFile())||!(potentialRawFile.exists())) -> raf.read(content,)@!(potentialRawFile.length()<RAW_HEADER.length()) && !(!(potentialRawFile.isFile())||!(potentialRawFile.exists())) -> header=new String(content,)@!(potentialRawFile.length()<RAW_HEADER.length()) && !(!(potentialRawFile.isFile())||!(potentialRawFile.exists())) } -> IF { -> return false@!(potentialRawFile.length()<RAW_HEADER.length()) && header==null||!(header.equals(RAW_HEADER,)) && !(!(potentialRawFile.isFile())||!(potentialRawFile.exists())) }
results[https://github.com/flaptor/flaptor-util/blob/6ff60f4588c0d22d504460087260a1aadb2a8512/src/com/flaptor/util/IOUtil.java][tail] = -> TRY {  -> TRY { -> raFile=new RandomAccessFile(file,"r",)@ -> position=raFile.length()-numBytes@ -> raFile.seek(position,)@ -> raFile.read(ret,)@ } FINALLY { -> IF { -> raFile.close()@raFile!=null } } } CATCH {}
