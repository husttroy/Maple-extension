results[https://github.com/Atlee/P2PChineseCheckers/blob/f41b6a178f303487cf0b7e87921a5e2dcd0f7719/ChineseCheckers/src/hub/PasswordStore.java][getPasswordFile] = -> TRY {  -> f=new File(PASSWORD_FILE_NAME,)@ -> IF { -> f.createNewFile()@!(f.exists()) -> raf=new RandomAccessFile(f,"rw",)@!(f.exists()) -> raf.close()@ } } CATCH {}
results[https://github.com/Atlee/P2PChineseCheckers/blob/5d328c45bbf76f032cf445f6424fd7e7a6ba3eb3/ChineseCheckers/src/test/PasswordStore.java][getPasswordFile] = -> TRY {  -> f=new File(PASSWORD_FILE_NAME,)@ -> IF { -> f.createNewFile()@!(f.exists()) -> raf=new RandomAccessFile(f,"rw",)@!(f.exists()) -> raf.writeInt(0,)@ -> raf.close()@ } } CATCH {}
results[https://github.com/apache/flex-falcon/blob/e5b9f4ba0f4f146a63e65f0c67bf35e6749c35c5/compiler.jx/src/org/apache/flex/compiler/internal/codegen/js/goog/JSGoogPublisher.java][writeFile] = -> TRY {  -> tgtFile=new File(path,)@ -> IF { -> tgtFile.createNewFile()@!(tgtFile.exists()) } -> fw=new FileWriter(tgtFile,append,)@ -> fw.write(content,)@ -> fw.close()@ } CATCH {}
results[https://github.com/pchaigno/Hydra/blob/8b985b280fa668852e9c145ffdd05e5349461394/src/core/SaveFileThread.java][saveFile] = -> TRY {  -> f=new File(this.savePath+this.piece,)@ -> IF { -> f.createNewFile()@!(f.exists()) } -> fileStream=new FileOutputStream(f,)@ -> Transfert.copyStream(this.incomingStream,fileStream,)@ -> fileStream.close()@ } CATCH {}
results[https://github.com/ist-dsi/tools/blob/33f4aeee41f41eb22b9913457843291bee32348d/fenix-tools/src/pt/utl/ist/fenix/tools/html/PropertyBeutifier.java][writeProperties] = -> TRY {  -> file=new File(filename,)@ -> IF { -> file.createNewFile()@!(file.exists()) } -> fileOutputStream=new FileOutputStream(file,false,)@ -> properties.store(fileOutputStream,null,)@ -> fileOutputStream.close()@ } CATCH {}
results[https://github.com/wox2/migrace_databaze/blob/fb25813836953fe7831a153ee10fbc2d8a2e74ec/skola/Fel_bc/1.semestr/Algoritmizace/Java/Programy1250/Kap13/03/Test.java][uloz] = -> TRY {  -> f=new File(soubor,)@ -> IF { -> f.createNewFile()@!(f.exists()) } -> fos=new FileOutputStream(f,)@ -> oos=new ObjectOutputStream(fos,)@ -> oos.writeObject(co,)@ -> oos.close()@ } CATCH {}
results[https://github.com/pchaigno/Hydra/blob/aa653547e9ace515295b9e1c0c43d7120bce4531/src/core/DownloadPieceOfFileThread.java][saveFile] = -> TRY {  -> f=new File(this.file.getDownloadPath()+".part"+this.piece,)@ -> IF { -> f.createNewFile()@!(f.exists()) } -> fileStream=new FileOutputStream(f,)@ -> endOfFile=Transfer.copyStream(incomingStream,fileStream,)@ -> fileStream.close()@ } CATCH {}
results[https://github.com/apache/flex-falcon/blob/8b7687df201628e3c9ff073df9b7d87af47018e5/compiler.jx/src/org/apache/flex/compiler/internal/js/codegen/goog/JSGoogPublisher.java][writeFile] = -> TRY {  -> tgtFile=new File(path,)@ -> IF { -> tgtFile.createNewFile()@!(tgtFile.exists()) } -> fw=new FileWriter(tgtFile,append,)@ -> fw.write(content,)@ -> fw.close()@ } CATCH {}
results[https://github.com/pchaigno/Hydra/blob/aba28922f797ed707a97107dde7aa6a90de84168/src/core/PieceOfFileThread.java][saveFile] = -> TRY {  -> f=new File(this.file.getAbsolutePath()+".part"+this.piece,)@ -> IF { -> f.createNewFile()@!(f.exists()) } -> fileStream=new FileOutputStream(f,)@ -> endOfFile=Transfer.copyStream(incomingStream,fileStream,)@ -> fileStream.close()@ } CATCH {}
results[https://github.com/jbosstools/jbosstools-base/blob/7e3f1c7715f6067584c98751e1fdcc80240f05fe/common/plugins/org.jboss.tools.common.core/src/org/jboss/tools/common/xml/XMLUtilities.java][serialize] = -> TRY {  -> f=new File(filename,)@ -> IF { -> f.createNewFile()@!(f.exists()&&!(f.canWrite())) && !(f.exists()) } -> fw=new FileWriter(f,)@!(f.exists()&&!(f.canWrite())) -> serialize(element,new BufferedWriter(fw,),)@!(f.exists()&&!(f.canWrite())) -> fw.close()@!(f.exists()&&!(f.canWrite())) } CATCH {}
