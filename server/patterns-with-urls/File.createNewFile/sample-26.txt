results[https://github.com/jim618/multibit/blob/0c0b1d80c53edff7ff3c17d39678a388fed6a1c7/src/main/java/org/multibit/file/FileHandler.java][writeFile] = -> TRY {  -> IF { -> destinationFile.createNewFile()@!(destinationFile.exists()) } -> TRY { -> fileOutputStream=new FileOutputStream(destinationFile,)@ -> fileOutputStream.write(sourceBytes,)@ } FINALLY { -> IF { -> fileOutputStream.flush()@fileOutputStream!=null -> fileOutputStream.close()@fileOutputStream!=null } } } CATCH {}
results[https://github.com/zanyking/ZMonitor/blob/aaf86af4decb0781ea63e2edcdfdcbeb734a2b28/obsolete/zmonitor-demos/src/test/FileWrite_TEST.java][writeLog] = -> TRY {  -> IF { -> file.createNewFile()@!(file.exists()) } -> TRY { -> writer=new OutputStreamWriter(new FileOutputStream(file,true,),"utf-8",)@ -> writer.write(log,)@ } FINALLY { -> IF { -> writer.close()@writer!=null } } } CATCH {}
results[https://github.com/zanyking/ZMonitor/blob/188d806c4c64f152a6c8b3fea8ced612baa484b4/zmonitor-demos/src/test/FileWrite_TEST.java][writeLog] = -> TRY {  -> IF { -> file.createNewFile()@!(file.exists()) } -> TRY { -> writer=new OutputStreamWriter(new FileOutputStream(file,true,),"utf-8",)@ -> writer.write(log,)@ } FINALLY { -> IF { -> writer.close()@writer!=null } } } CATCH {}
results[https://github.com/zinkem/projectbulletspray/blob/417ea50601c82f9a24747e8bb498e86cfd716f45/src/pbs/PBSGame.java][saveHighScore] = -> TRY { -> file=new File("highscores.dat",)@ -> IF { -> file.createNewFile()@!(file.exists()) } -> writer=new PrintWriter(new FileWriter(file,),)@ -> writer.println(highScore,)@ } FINALLY { -> IF { -> writer.close()@writer!=null } }
results[https://github.com/eclipse/ptp/blob/76e904fbaee6d7473b45debd32a678205da0bcac/rdt/org.eclipse.ptp.rdt.core/miners/org/eclipse/ptp/internal/rdt/core/miners/StandaloneLogService.java][setLogFileName] = -> IF { -> TRY { -> logFile=new File(logFileName,)@logFileName!=null&&logFileName.length()>0 -> IF { -> logFile.createNewFile()@!(logFile.exists()) } -> log_out=new FileOutputStream(logFileName,)@logFileName!=null&&logFileName.length()>0 -> IF { -> this.log_ps.close()@this.log_ps!=null } -> this.log_ps=new PrintStream(log_out,)@ } }
results[https://github.com/rolandschulz/PTP/blob/c754673e2e881d332ca0c193d80c370e1e520e56/rdt/org.eclipse.ptp.rdt.core/miners/org/eclipse/ptp/internal/rdt/core/miners/StandaloneLogService.java][setLogFileName] = -> IF { -> TRY { -> logFile=new File(logFileName,)@logFileName!=null&&logFileName.length()>0 -> IF { -> logFile.createNewFile()@!(logFile.exists()) } -> log_out=new FileOutputStream(logFileName,)@logFileName!=null&&logFileName.length()>0 -> IF { -> this.log_ps.close()@this.log_ps!=null } -> this.log_ps=new PrintStream(log_out,)@ } }
results[https://github.com/metaborg/spoofax/blob/5f37669e6b1800bbb97b71c7a2bad2ca8269eb80/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/statistics/StreakManifest.java][load] = -> TRY { -> IF { -> manifestFile.createNewFile()@!(manifestFile.exists()) } -> fis=new FileInputStream(manifestFile,)@ -> props=new Properties()@ -> props.load(fis,)@ } FINALLY { -> TRY { -> IF { -> fis.close()@fis!=null } } }
results[https://github.com/jclouds/legacy-jclouds-karaf/blob/8816d9984aa08260d1b6dd6f3b0aff18c244fc86/services/src/main/java/org/jclouds/karaf/services/modules/PropertiesCredentialStore.java][load] = -> f=new File(PROPERTIES_FILE_PATH,)@ -> TRY { -> IF { -> f.createNewFile()@!(f.exists()) } -> fis=new FileInputStream(f,)@ -> properties.load(fis,)@ } FINALLY { -> IF { -> TRY { -> fis.close()@fis!=null } } }
results[https://github.com/Paxle/Paxle/blob/46f62b5b95c05616bcb6f9c08d07789b80bc1cdc/bundles/SEProviderRssSearch/src/main/java/org/paxle/se/provider/rsssearch/impl/RssSearchProviderManager.java][setUrls] = -> TRY {  -> IF { -> this.providerFile.createNewFile()@!(this.providerFile.exists()) } -> TRY { -> pr=new PrintWriter(this.providerFile,)@ -> LOOP { -> pr.println(url,)@ } } FINALLY { -> IF { -> pr.close()@pr!=null } } } CATCH {}
results[https://github.com/jclouds/jclouds-karaf/blob/79d1b8fe882a6d20347ac1e124038605d625104e/services/src/main/java/org/jclouds/karaf/services/modules/PropertiesCredentialStore.java][load] = -> f=new File(PROPERTIES_FILE_PATH,)@ -> TRY { -> IF { -> f.createNewFile()@!(f.exists()) } -> fis=new FileInputStream(f,)@ -> properties.load(fis,)@ } FINALLY { -> IF { -> TRY { -> fis.close()@fis!=null } } }
