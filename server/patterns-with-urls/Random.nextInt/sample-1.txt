results[https://github.com/uditrugman/openjdk8-jdk/blob/249ff22f64878a7eac7a4f62f92e7b706ed76c58/test/java/nio/channels/AsynchronousChannelGroup/Basic.java][testShutdownWithChannels][36] = -> TRY {  -> rand.nextInt(2,)@ } CATCH(Exception) {}
results[https://github.com/DavidTPate/diablo3_builder/blob/b4285ddee467f45fc5ce2e5766a2636331e0066b/d3_android/libs/ActionBarSherlock/samples/roboguice/src/com/actionbarsherlock/sample/roboguice/activity/FightForcesOfEvilActivity.java][call][58] = -> TRY {  -> Thread.sleep(random.nextInt(5*1000,),)@ } CATCH(Exception) {}
results[https://github.com/ebollens/ccnmp/blob/44ef033538bd9c9fc4404ca0129d14c3eae551b8/Java_CCN/org/ccnx/ccn/test/io/CCNFileStreamTestRepo.java][setUpBeforeClass][2] = -> TRY {  -> baseName=ContentName.fromNative("/test/CCNFileStreamTestRepo-"+random.nextInt(10000,),)@ } CATCH(Exception) {}
results[https://github.com/Netflix/ribbon/blob/b40cbc0a67c0109f9ccabcc224e08ff9832ad723/ribbon-httpasyncclient/src/test/java/com/netflix/httpasyncclient/HttpAsyncClienTest.java][init][18] = -> TRY {  -> port=new Random().nextInt(1000,)+4000@ } CATCH(Exception) {}
results[https://github.com/madiator/HadoopUSC/blob/a02dd094e1b13bf15a6409f0cd287febe1ba0212/src/test/org/apache/hadoop/hdfs/server/namenode/TestPersistTxId.java][testMultipleNameNodeCrashWithCheckpoint][2] = -> TRY {  -> restarts=random.nextInt(10,)@ -> System.out.println("Number of restarts : "+restarts,)@ } CATCH(Exception) {}
results[https://github.com/lucidimagination/google-enterprise-connector-manager/blob/ba6f91f1a6247f8374349bfb22a926aa219f8f05/projects/sharepoint-proto/source/java/com/google/enterprise/connector/sp2cloud/DoclistPusherTest.java][setUp][15] = -> TRY {  -> generator=new Random()@ -> rootFolderId="root_"+generator.nextInt(Integer.MAX_VALUE,)@ } CATCH(Exception) {}
results[https://github.com/madiator/HadoopUSC/blob/a02dd094e1b13bf15a6409f0cd287febe1ba0212/src/test/org/apache/hadoop/hdfs/TestTotalFiles.java][concatFiles][2] = -> TRY {  -> index=random.nextInt(files.length-1,)@ -> srcs=Arrays.copyOfRange(files,index+1,files.length,)@ } CATCH(Exception) {}
results[https://github.com/spring-projects/spring-integration-samples/blob/e98088824969b9fbf8c8d4374ff5d15cf226b28f/cookbooks/async-gateway/src/main/java/org/springframework/integration/samples/async/gateway/MathService.java][multiplyByTwo][3] = -> TRY {  -> sleep=random.nextInt(10,)*500@ -> Thread.sleep(sleep,)@ } CATCH(Exception) {}
results[https://github.com/apache/hadoop-common/blob/d4d1db5f4e194fa57f4c89838283b2a1b17e44ed/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestRetryCache.java][call][5] = -> TRY {  -> randomPause=(pause==0)?pause:r.nextInt(pause,)@ -> return testServer.echo(input,failureOutput,randomPause,success,)@ } CATCH(Exception) {}
results[https://github.com/burris/dwr/blob/ffc44a3ef0467e9c1d57d412a249c58aa7e01258/ui/gi/demo/java/com/example/dwr/ticketcenter/CallCenter.java][run][2] = -> TRY { -> random.nextInt(5,)@ } CATCH(Exception) { -> log.warn("Random event failure",ex,)@ }
results[https://github.com/ncats/bard/blob/b3409ad25e7834427cb5c0e452d53b9e3da3308d/src/gov/nih/ncgc/bard/tools/SearchDoS.java][call][1] = -> TRY { -> s.top=100+rand.nextInt(500,)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/chenatu/ccnx-underlay/blob/493267acc2ebbcfbacf50aff2f8657c39fce8ac0/javasrc/src/org/ccnx/ccn/test/security/crypto/CCNMerkleTreeTest.java][testTree][4] = -> TRY {  -> version=_rand.nextInt(1000,)@ -> theName=VersioningProfile.addVersion(theName,version,)@ } CATCH(Exception) {}
results[https://github.com/chenatu/ccnx-underlay/blob/493267acc2ebbcfbacf50aff2f8657c39fce8ac0/javasrc/src/org/ccnx/ccn/test/profiles/security/access/group/MLACTestRepo.java][createMixedGroup][2] = -> TRY {  -> firstGroupName="group-"+rnd.nextInt(10000,)@ -> mixedGroup=_gm0.createGroup(firstGroupName,groupMembers,0,)@ } CATCH(Exception) {}
results[https://github.com/treasure-data/td-import-java/blob/157770d267248136b5c0b1ff358bb8bbfbaf60f9/src/test/java/com/treasure_data/td_import/model/TestColumnSampling.java][createResources][1] = -> TRY {  -> numRows=rand.nextInt(100,)+1@ -> sampling=new ColumnSampling(numRows,)@ } CATCH(Exception) {}
results[https://github.com/rolandschulz/PTP/blob/ba30e66ef56a2a54c2cf08b788a38039340b6948/rdt/org.eclipse.ptp.rdt.sync.core.tests/src/org/eclipse/ptp/rdt/sync/core/tests/TemporaryGitRemoteSyncConnection.java][create][2] = -> TRY {  -> n=random.nextInt(1000000,)@ -> fRemoteConnection=connMgr.newConnection("test_connection"+n,)@ } CATCH(Exception) {}
results[https://github.com/ryuhyoseok/HYOSEOKTAJO/blob/035fbc2d68d188023fad45cbe949058af932a903/core/src/test/java/tajo/engine/planner/physical/TestBSTIndexExec.java][testEqual][2] = -> TRY {  -> this.rndKey=rnd.nextInt(250,)@ -> tupleCount=this.randomValues.get(rndKey,)@ } CATCH(Exception) {}
results[https://github.com/simonchengjmj/data-reporting-platform/blob/b0227b23d02f484af8f97398a9c3ff8cc9d53960/reporting-ui/src/java/com/where/rpt/api/cache/MemcachedCache.java][getCacheClient][1] = -> TRY { -> c=clients[random.nextInt(numClients,)]@ } CATCH(Exception) { -> this.logger.error("unable to get memcached client from clients list!",e,)@ }
results[https://github.com/xxiaozaichu/xutils/blob/5f091427660ce2e14f843d5d014732fe837d99f0/xutils/src/test/java/zcu/xutil/sql/TestMiniDataSource.java][pauseRandom][1] = -> TRY {  -> return pause(random.nextInt(maxPauseTime,),)@ } CATCH(Exception) {}
results[https://github.com/exoplatform/jcr/blob/9aea3a86a294ae66f1bc942cefd92d6ed5c1f54e/exo.jcr.component.core/src/test/java/org/exoplatform/services/jcr/impl/core/query/TestTwoWayRangeIterator.java][testRandomSkipBack][15] = -> TRY {  -> LOOP { -> skip=random.nextInt(TEST_NODES_COUNT-10,)@ } } CATCH(Exception) {}
results[https://github.com/sidseth/h2-container-reuse/blob/dc7603f49414f6d06eafdb28432b225ce411d927/hadoop-tools/hadoop-gridmix/src/test/java/org/apache/hadoop/mapred/gridmix/TestRecordFactory.java][testZero][66] = -> TRY {  -> r=new Random()@ -> targetBytes=r.nextInt(1<<20,)@ -> testFactory(targetBytes,0,)@ } CATCH(Exception) {}
results[https://github.com/jFastCGI/jfastcgi/blob/c9d61db49cee72d17c85b26c90bcc810159001a9/src/net/jr/fastcgi/impl/PoolFactory.java][makeObject][7] = -> TRY {  -> index=random.nextInt(addresses.size()-1,)@ -> desc=addresses.get(index,)@ } CATCH(Exception) {}
results[https://github.com/digitalabs/IBPMiddleware/blob/37e107c7d68d30de5b14cfc246742074491274aa/src/test/java/org/generationcp/middleware/manager/test/TestOntologyDataManagerImpl.java][testAddTerm][1] = -> TRY {  -> name="Test Method "+new Random().nextInt(10000,)@ -> term=manager.addTerm(name,definition,cvId,)@ } CATCH(Exception) {}
results[https://github.com/bcopeland/hbase-thrift/blob/34825d8145abd49b15267a33c49b274ae1a9801d/src/test/java/org/apache/hadoop/hbase/TestAcidGuarantees.java][doAnAction][12] = -> TRY {  -> targetRow=targetRows[rand.nextInt(targetRows.length,)]@ -> p=new Put(targetRow,)@ -> rand.nextBytes(data,)@ } CATCH(Exception) {}
results[https://github.com/wolfgang/tdg/blob/fb132bb0b654f65e15dd56ec5165d11ce8a4dc13/rl/src/unittests/player/PlayerSpawnerTest.java][getRandomSpawnPosition][1] = -> TRY {  -> when(random.nextInt(2,),).thenReturn(0,1,)@ } CATCH(Exception) {}
results[https://github.com/anteoc/hadoop-fork/blob/949886907ccf9ce02d48cabc55b294edd6788a34/hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/QuasiMonteCarlo.java][run][9] = -> TRY {  -> rand=new Random().nextInt(Integer.MAX_VALUE,)@ -> tmpDir=new Path(TMP_DIR_PREFIX+"_"+now+"_"+rand,)@ } CATCH(Exception) {}
results[https://github.com/adinauer/fhbay/blob/d74e6e74b48148cb3f2499fbc292db9164f4aa35/fhbay-server/src/main/java/sve2/fhbay/beans/ArticleProcessorBean.java][onMessage][3] = -> TRY { -> Thread.sleep(5000+random.nextInt(3000,),)@ } CATCH(Exception) { -> throw new EJBException(e,)@ }
results[https://github.com/wolfgang/tdg/blob/6ee8088e66e0c94af5949eb99ca43b89e6d1ffa3/eta/src/unittests/enemy/EnemyGeneratorTest.java][generate_maxEnemies_1_random_0_chooseFirstInPool][7] = -> TRY {  -> when(random.nextInt(2,),).thenReturn(0,)@ } CATCH(Exception) {}
results[https://github.com/seratch/junithelper/blob/5bf8a4f175ce283948ad94a2b316af0299bae597/core/src/test/java/org/junithelper/core/generator/SourceCodeAppenderTest.java][appendTabs_A$StringBuilder$int_intIsRandom][2] = -> TRY {  -> times=new Random().nextInt(10,)@ -> target.appendTabs(buf,times,)@ } CATCH(Exception) {}
results[https://github.com/seratch/junithelper/blob/5bf8a4f175ce283948ad94a2b316af0299bae597/core/src/test/java/org/junithelper/core/generator/TestMethodGeneratorImplTest.java][appendMockVerifying_A$StringBuilder$int_intIsRandom][4] = -> TRY {  -> depth=new Random().nextInt(10,)@ -> target.appendMockVerifying(buf,depth,)@ } CATCH(Exception) {}
results[https://github.com/chenatu/ccnx-underlay/blob/493267acc2ebbcfbacf50aff2f8657c39fce8ac0/javasrc/src/org/ccnx/ccn/test/profiles/security/access/group/KeyDirectoryTestRepo.java][testGetUnwrappedKeySuperseded][5] = -> TRY {  -> supersededKeyDirectoryName=ContentName.fromNative(keyDirectoryBase+rand.nextInt(10000,)+"/superseded",)@ -> versionSupersededKeyDirectoryName=VersioningProfile.addVersion(supersededKeyDirectoryName,)@ } CATCH(Exception) {}
results[https://github.com/Omertron/api-themoviedb/blob/88f120923e3f321716173f2080b8b4e5647c8730/src/test/java/com/omertron/themoviedbapi/TheMovieDbApiTest.java][testMovieLists][1] = -> TRY {  -> name="test list "+new Random().nextInt(100,)@ -> listId=tmdb.createList(SESSION_ID_APITESTS,name,"api testing only",)@ } CATCH(Exception) {}
results[https://github.com/teodormacicas/jboss_benchmarkIO/blob/9274ff22fe772787ac69d15b13557fed44bcaadf/src/main/java/org/jboss/nio2/client/JioClient.java][connect][3] = -> TRY {  -> Thread.sleep(new Random().nextInt(5*NB_CLIENTS,),)@ } CATCH(Exception) {}
results[https://github.com/digitalabs/IBPMiddleware/blob/f20ebbc05238dc7addf56fda4879b8e719d71ae2/src/test/java/org/generationcp/middleware/service/test/TestOntologyServiceImpl.java][testDeleteProperty][1] = -> TRY {  -> name="Test Property"+new Random().nextInt(10000,)@ -> property=ontologyService.addProperty(name,definition,isA,)@ } CATCH(Exception) {}
results[https://github.com/digitalabs/IBPMiddleware/blob/37e107c7d68d30de5b14cfc246742074491274aa/src/test/java/org/generationcp/middleware/manager/test/TestOntologyDataManagerImpl.java][testFindMethodById][6] = -> TRY {  -> name="Test Method "+new Random().nextInt(10000,)@ -> term=manager.addMethod(name,definition,)@ } CATCH(Exception) {}
results[https://github.com/mdaniel/svn-caucho-com-resin/blob/2524aa8387fc983c2f3aa4cf9601aba53ba931f0/doc/unused/examples/jms-php-queue-receive/WEB-INF/classes/example/AdProducer.java][onMessage][2] = -> TRY { -> ad=_ads[_random.nextInt(_ads.length,)]@ -> _producer.put(ad,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/stratosphere/stratosphere/blob/7922332797406d982a19288f22ea55fcf746f8e5/pact/pact-runtime/src/test/java/eu/stratosphere/pact/runtime/iterative/concurrent/SuperstepBarrierTest.java][run][4] = -> TRY { -> Thread.sleep(random.nextInt(10,),)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/seratch/junithelper/blob/5bf8a4f175ce283948ad94a2b316af0299bae597/core/src/test/java/org/junithelper/core/generator/TestMethodGeneratorImplTest.java][appendMockChecking_A$StringBuilder$int_intIsRandom][4] = -> TRY {  -> depth=new Random().nextInt(10,)@ -> target.appendMockChecking(buf,depth,)@ } CATCH(Exception) {}
results[https://github.com/Themis-J/Themis/blob/c7a9a05bbd8ba2d0465e2175c18fe1506744515d/dealer/src/test-integeration/java/com/jdc/themis/dealer/service/rest/DealerUserRestServiceTest.java][addManagerUser][2] = -> TRY {  -> r=new Random()@ -> username="test"+r.nextInt(10000,)@ -> requestEntity=new StringRequestEntity("{"+"\"username\": \""+username+"\","+"\"password\": \"testpwd\", "+"\"userRole\": 3"+"}","application/json","UTF-8",)@ } CATCH(Exception) {}
results[https://github.com/wensby/ai-project/blob/2edd3a762360c0f10502f41d2a401ec79e74e63a/src/Database.java][rand_getOnePositive][2] = -> TRY {  -> rand=new Random()@ -> index=rand.nextInt(Util.TOTAL_DATABASE_REC_LOG_TRAIN_POS_LENGTH,)+1@ -> result=stat.executeQuery("SELECT * FROM rec_log_train_pos WHERE autoID = "+index,)@ } CATCH(Exception) {}
results[https://github.com/teodormacicas/jboss_benchmarkIO/blob/3b5cf678a9f99cac1aadbc492bb1b383c42679d8/src/main/java/org/jboss/nio2/client/TestClient.java][runit][2] = -> TRY {  -> random=new Random()@ -> sleep(4*DEFAULT_DELAY+random.nextInt(NB_CLIENTS,),)@ } CATCH(Exception) {}
results[https://github.com/binwiederhier/syncany/blob/9a240e0a75c09c812b934c0a3ae50e6f2da69b52/syncany-plugins/syncany-plugin-ftp/src/test/java/org/syncany/tests/connection/plugins/ftp/EmbeddedTestFtpServer.java][startServer][1] = -> TRY {  -> PORT=PORT+new Random().nextInt(10000,)@ -> factory.setPort(PORT,)@ } CATCH(Exception) {}
results[https://github.com/seratch/junithelper/blob/f007690c3d4689c3b465115e29994410958704e6/junithelper-core/src/test/java/org/junithelper/core/generator/TestMethodGeneratorImplTest.java][appendTestingPatternExplicitComment_A$StringBuilder$String$int_intIsRandom][4] = -> TRY {  -> depth=new Random().nextInt(10,)@ -> target.appendTestingPatternExplicitComment(buf,value,depth,)@ } CATCH(Exception) {}
results[https://github.com/cmeiklejohn/flume-ng/blob/60da3d8606415202f966017a18084cb59d3e64d1/flume-ng-sdk/src/test/java/org/apache/flume/api/TestThriftRpcClient.java][setUp][1] = -> TRY {  -> port=random.nextInt(40000,)+1024@ -> props.setProperty("hosts.h1","0.0.0.0:"+String.valueOf(port,),)@ } CATCH(Exception) {}
results[https://github.com/netbout/netbout/blob/8d3f0afc91f6fa99bd22f8e6ccd2a473fdb0455b/netbout/netbout-inf/src/test/java/com/netbout/inf/ray/imap/dir/CatalogTest.java][registersValueAndFindsItThen][3] = -> TRY {  -> total=new Random().nextInt(500,)+100@ -> items=new ArrayList<Catalog.Item>(total+1,)@ } CATCH(Exception) {}
results[https://github.com/cmeiklejohn/flume-ng/blob/5294ee61e71e24b33ab3e4b94bd3b1c03a35475d/flume-ng-core/src/test/java/org/apache/flume/sink/TestThriftSink.java][setUp][1] = -> TRY {  -> port=random.nextInt(50000,)+1024@ -> context.put("port",String.valueOf(port,),)@ } CATCH(Exception) {}
results[https://github.com/rhusar/HornetQ-oldmigration/blob/a8897c8a8d5b12ac29d1c423510841c42e6406cb/tests/stress-tests/src/test/java/org/hornetq/tests/stress/paging/MultipleConsumersPageStressTest.java][getNumberOfMessages][3] = -> TRY {  -> numberOfMessages=random.nextInt(20,)@ -> IF { -> return 1@numberOfMessages<=0 } } CATCH(Exception) {}
results[https://github.com/apache/incubator-marmotta/blob/582abb5b0db790244b5ade0db134b1cf01860536/libraries/ldpath/ldpath-functions-text/src/test/java/org/apache/marmotta/ldpath/model/tests/functions/text/StringTestTest.java][setUp][1] = -> TRY {  -> textLen=text.length()@ -> Assert.assertTrue(textLen>4,)@ -> testWindow=1+rnd.nextInt(textLen/4,)@ } CATCH(Exception) {}
results[https://github.com/ebollens/ccnmp/blob/c2cf8ec319ea988deb0f8acbf52ae1c1bf4519dd/Java_CCN/test/ccn/data/content/LinkObjectTestRepo.java][setUpBeforeClass][2] = -> TRY {  -> random=new Random()@ -> baseName=ContentName.fromNative("/libraryTest/LinkObjectTestRepo-"+random.nextInt(10000,),)@ } CATCH(Exception) {}
results[https://github.com/l1j/en/blob/ee2da6598936cc910641aab11a9a76033c805699/src/l1j/server/server/clientpackets/C_FishClick.java][<init>][1] = -> TRY {  -> IF { -> chance=_random.nextInt(200,)+1@ } } CATCH(Exception) {}
results[https://github.com/Presage/Presage2/blob/eb00d5a1d7204a90a788498c7adff5b8d51d764f/core/src/test/java/uk/ac/imperial/presage2/core/simulator/MultiThreadedSimulatorTest.java][setUp][1] = -> TRY {  -> this.simulatorUnderTest=new MultiThreadedSimulator(scenario,time,eventBus,new Random().nextInt(5,)+1,)@ } CATCH(Exception) {}
results[https://github.com/resthub/resthub-spring-stack/blob/f8d318d8c6bed903a769a5cfe5988ffecf3cc1a0/resthub-apps/booking/booking-tapestry5/src/test/java/org/resthub/booking/dao/TestBookingDao.java][createTestRessource][4] = -> TRY {  -> username="user"+new Random().nextInt(100,)@ -> user.setUsername(username,)@ } CATCH(Exception) {}
results[https://github.com/digitalabs/IBPMiddleware/blob/f20ebbc05238dc7addf56fda4879b8e719d71ae2/src/test/java/org/generationcp/middleware/service/test/TestOntologyServiceImpl.java][testDeleteScale][1] = -> TRY {  -> name="Test Scale "+new Random().nextInt(10000,)@ -> scale=ontologyService.addScale(name,definition,)@ } CATCH(Exception) {}
results[https://github.com/quchunguang/test/blob/5326b1372c4ab1e3aaf3f0d16a07a6342b20d84d/testjava/TIJ4-code/generics/coffee/CoffeeGenerator.java][next][2] = -> TRY { -> return (Coffee) types[rand.nextInt(types.length,)].newInstance()@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/gitmo/WM/blob/76d11ab1b4448a1604d0a5e7ab5f3bbf89f2d3ec/src/main/java/dbs/project/dev/TournamentGenerator.java][generateTournament][1] = -> TRY {  -> random=new Random()@ -> year=random.nextInt(50,)@ -> tournamentYear.set(Calendar.YEAR,1970+year,)@ } CATCH(Exception) {}
results[https://github.com/wolfgang/tdg/blob/5ac42561005858657015f26ab3893dfb8a730db8/rl/src/unittests/gen/RandomHelperTest.java][nextIntBetween][1] = -> TRY {  -> when(random.nextInt(11,),).thenReturn(0,1,2,3,10,)@ } CATCH(Exception) {}
results[https://github.com/geosolutions-it/destination/blob/de5d7cee6041da238a30ae5f56f47cbd2e4716a1/geobatch/ingestion-logic/src/test/java/it/geosolutions/geobatch/destination/ingestion/gate/GateIngestionMemoryTest.java][createFakeGate][1] = -> TRY {  -> FAKE_GATE_ID=new Long(RANDOM.nextInt(1000,),)@ -> transitDao.createGate(FAKE_GATE_ID,FAKE_GATE_KEY,)@ } CATCH(Exception) {}
results[https://github.com/droolsjbpm/jbpm/blob/4ad2e932535be5749f1fb69423670f47ee9b227b/jbpm-human-task/src/test/java/org/jbpm/task/service/test/impl/TestServerUtil.java][pause][1] = -> TRY {  -> sleep=random.nextInt(sleepMax,)@ -> logger.trace("Sleeping "+(double) sleep/1000,)@ -> Thread.sleep(sleep,)@ } CATCH(Exception) {}
results[https://github.com/ebollens/ccnmp/blob/c2cf8ec319ea988deb0f8acbf52ae1c1bf4519dd/Java_CCN/test/ccn/data/content/CollectionObjectTestRepo.java][setUpBeforeClass][2] = -> TRY {  -> baseName=ContentName.fromNative("/libraryTest/CollectionObjectTestRepo-"+new Random().nextInt(10000,),)@ } CATCH(Exception) {}
results[https://github.com/gf-metro/jaxws/blob/3c981bcf41a11f02a49a65d04c59c940f9a68e56/jaxws-ri/tests/unit-rearch/src/server/misc/client/LifeCycleTest.java][invoke][3] = -> TRY {  -> rand=new Random(System.currentTimeMillis(),).nextInt(1000,)@ } CATCH(Exception) {}
results[https://github.com/seratch/junithelper/blob/f007690c3d4689c3b465115e29994410958704e6/junithelper-core/src/test/java/org/junithelper/core/generator/TestMethodGeneratorImplTest.java][appendBDDMockitoComment_A$StringBuilder$String$int_intIsRandom][4] = -> TRY {  -> depth=new Random().nextInt(10,)@ -> target.appendBDDMockitoComment(buf,value,depth,)@ } CATCH(Exception) {}
results[https://github.com/runeaa/Spillprosjekt/blob/c8052d11644201936025a0b52d5ff3b20dbeb931/src/Main/GameMenu.java][startMusic][1] = -> TRY {  -> rn=new Random()@ -> songnr=rn.nextInt(13,)@ -> song=musicFiles.get(songnr,)@ } CATCH(Exception) {}
results[https://github.com/apavlo/h-store/blob/04fb7bb96341aebf73a7353520d6fb0ad4a2d25b/tests/frontend/edu/brown/benchmark/seats/TestSEATSSuite.java][testNewReservation][1] = -> TRY {  -> rng=new Random()@ -> seatnum=rng.nextInt(SEATSConstants.FLIGHTS_NUM_SEATS,)@ -> params=r_idc_idf_idseatnum100dattrsnew TimestampType()@ } CATCH(Exception) {}
results[https://github.com/wolfgang/tdg/blob/f61034a18a4a1fcdc4ac673e04f14380d19a18cd/rl/src/unittests/gen/RoomFinderTest.java][findRandomRoomFromRepository][1] = -> TRY {  -> when(random.nextInt(3,),).thenReturn(0,1,2,)@ } CATCH(Exception) {}
results[https://github.com/apache/hive/blob/40dddac20214108da43a07eaa117514c3dc6d7f1/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezSessionPool.java][run][1] = -> TRY { -> Thread.sleep(random.nextInt(9,)%10*1000,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/JGI-Bioinformatics/biopig/blob/fa49788ccfcd7164e05c22e461b6d40e7ea73aee/kmer/src/gov/jgi/meta/kmer/KmerCount.java][setup][1] = -> rand=new Random()@ -> TRY { -> randomNum=rand.nextInt(max-min+1,)+min@ } CATCH(Exception) { -> System.out.println("ERROR: "+e,)@ }
results[https://github.com/chamborghini/x4java/blob/e10f42d75a456a08632b75b5d04eb9caeb698109/core/src/main/org/chamborghini/tij/chap15/part03/CoffeeGeneratorX01.java][next][2] = -> TRY { -> return (Coffee) types[rand.nextInt(types.length,)].newInstance()@ } CATCH(Exception) { -> throw new RuntimeException()@ }
results[https://github.com/os890/wink_patches/blob/2a05120fa34ca68001b2b2def9918b01b6166340/wink-providers/wink-jackson-provider/src/test/java/org/apache/wink/providers/jackson/internal/JacksonSerializationConfiguration2Test.java][testGETStaticTyping][1] = -> TRY {  -> r=new Random()@ -> num=r.nextInt(2,)@ -> request.setQueryString("num="+num,)@ } CATCH(Exception) {}
results[https://github.com/Presage/Presage2/blob/09f7e6df0660b9472470117920e1537f2f8b5c86/src/test/java/uk/ac/imperial/presage2/core/simulator/MultiThreadedSimulatorTest.java][setUp][1] = -> TRY {  -> this.simulatorUnderTest=new MultiThreadedSimulator(scenario,time,new Random().nextInt(5,)+1,)@ } CATCH(Exception) {}
results[https://github.com/hxzon/java-lib-hxzon/blob/ba161a9baa38c5e6c049557fb7be97745d192917/code/java/java nio/niosrc/com/ronsoft/books/nio/channels/PipeTest.java][doSomeWork][1] = -> TRY {  -> product=rand.nextInt(products.length,)@ -> buffer.put(products[product].getBytes("US-ASCII",),)@ } CATCH(Exception) {}
results[https://github.com/NCIP/lexevs/blob/9f630d706a6fd62ab01ab2bfdb9f8bbae2a7743a/lgConverter/src/edu/mayo/informatics/lexgrid/convert/directConversions/UmlsCommon/LoadRRFToDB.java][validateRRF][1] = -> TRY {  -> r=new Random()@ -> return createAndLoadTables(rrfLocation,skipNonLexGridFiles,false,"jdbc:hsqldb:mem:"+r.nextInt(100,),"org.hsqldb.jdbcDriver","sa","",md,true,)@ } CATCH(Exception) {}
results[https://github.com/cloudera/llama/blob/a3c2919fed9461f56aaea1f4f63bde9b19fa7b3a/llama-am-mock/src/main/java/com/cloudera/llama/am/mock/MockLlamaAM.java][call][1] = -> TRY {  -> IF { -> delay=minWait+RANDOM.nextInt(maxWait,)@ -> scheduler.schedule(mocker,delay,TimeUnit.MILLISECONDS,)@ } } CATCH(Exception) {}
results[https://github.com/simonAllier/diversify-statements/blob/30b04acd2e6c48ad80d33686d6c790a31249b5a4/src/main/java/fr/inria/diversify/transformation/query/AbstractTransformationQuery.java][getTransformation][1] = -> TRY {  -> IF { -> r=new Random()@ -> i=r.nextInt(3,)@ } } CATCH(Exception) {}
results[https://github.com/weishengshui/posserver/blob/c619fb3b16815b7df4a206e4d3714ef22472e9ba/main/src/test/java/com/chinarewards/qqgbpvn/main/ProtcolOnMinaTest.java][messageReceived][1] = -> TRY {  -> randomGenerator=new Random()@ -> result=randomGenerator.nextInt(2,)@ -> ret=new InitMsgResult(result,challenge,)@ -> System.out.println("Result is "+result,)@ } CATCH(Exception) {}
results[https://github.com/makersoft/mybatis-shards/blob/afd5305813fb000a30da3f04e4c3c2892f4177d5/src/test/java/org/makersoft/shards/unit/persistence/UserMapperTests.java][testFindByGender][1] = -> TRY {  -> LOOP { -> age=random.nextInt(30,)@ -> user=this.insertUser(username,password,age,gender,)@ } } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/nio/channels/AsynchronousSocketChannel/StressLoopback.java][main][2] = -> TRY {  -> count=2+rand.nextInt(9,)@ -> IF { -> throw new RuntimeException("Test failed - see log for details",)@failed } } CATCH(Exception) {}
results[https://github.com/jrecursive/mecha/blob/a68398e165c672aa50086571a7ed1b0b81c611f8/src/java/mecha/util/ConsistentHash.java][main][2] = -> TRY {  -> r=new Random(42,)@ -> LOOP { -> z=r.nextInt(300023,)@ } } CATCH(Exception) {}
results[https://github.com/lintool/Ivory/blob/387c7d16a1701cb03104a5224f3ea72c9bcb2d88/src/java/integration/ivory/integration/local/VerifyLocalTrec45PositionalIndexIP.java][runBuildIndex][1] = -> TRY {  -> index=this.getClass().getCanonicalName()+"-index-"+RANDOM.nextInt(10000,)@ -> runBuildIndex(index,args,)@ } CATCH(Exception) {}
results[https://github.com/itm/testbed-runtime/blob/2ab503d707186297ca84b7f87781bacada64eebd/iwsn/iwsn-server/src/test/java/de/uniluebeck/itm/tr/iwsn/overlay/ConnectivityTests.java][testConnectivity][3] = -> TRY {  -> LOOP { -> Thread.sleep(random.nextInt(5,),)@ } } CATCH(Exception) {}
results[https://github.com/seratch/junithelper/blob/6b421217d176314b786c93343509c88a9713ad5a/junithelper-core/src/test/java/org/junithelper/core/util/AssertionTest.java][mustBeLessThan_A$int$int_intIsRandom][1] = -> TRY {  -> arg=new Random().nextInt(10,)@ -> Assertion.on("test",).mustBeLessThan(arg,upperLimit,)@ } CATCH(Exception) {}
results[https://github.com/notclive/Multicomp/blob/c4b0ebb91cf2d07a8ddc9126d0a09b51cad199cc/ConfigurationVariantGenerator/src/test/java/uk/co/notclive/multicomp/variant/generator/AnnotationRewriterTest.java][setUp][2] = -> TRY {  -> when(random.nextInt(anyInt(),),).thenReturn(2,)@ } CATCH(Exception) {}
results[https://github.com/CruGlobal/MissionHub-Android/blob/03ca1413f15b19a02066cba04a60020c15d163f9/app/src/com/missionhub/android/util/ErrbitNotifier.java][writeExceptionToDisk][1] = -> TRY { -> random=new Random().nextInt(99999,)@ -> filename=filePath+versionName+"-"+String.valueOf(random,)+".xml"@ } CATCH(Exception) { -> Log.v(LOG_TAG,"Exception caught:",ex,)@ }
results[https://github.com/mohaine/BrewCtrl/blob/c67ae56040ea52f9cd06f67467566fe2ec093252/BrewCtrl/src/com/mohaine/brewcontroller/serial/Buffer_UT.java][testBuffer_Offset][5] = -> TRY {  -> r=new Random()@ -> LOOP { -> count=r.nextInt(10,)@ } } CATCH(Exception) {}
results[https://github.com/tdunning/mahout/blob/7fe72ce60bc3800a00dad94e814afd298415bd32/examples/src/test/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosToolTest.java][testGatherInfos][1] = -> TRY {  -> nbattrs=rng.nextInt(maxattr,)+1@ -> numRate=rng.nextFloat()@ -> catRate=rng.nextFloat()*1f-numRate@ -> descriptors=randomDescriptors(nbattrs,numRate,catRate,)@ } CATCH(Exception) {}
results[https://github.com/kingargyle/exist-1.4.x/blob/09d678fd8a58728dd51005c63b942f1ab6541ebc/test/src/org/exist/xmldb/concurrent/action/AttributeUpdateAction.java][execute][1] = -> TRY {  -> attrSize=rand.nextInt(5,)@ -> LOOP { -> xupdate=XUPDATE_START+xmlGenerator.generateText(attrSize,)+XUPDATE_END@ } } CATCH(Exception) {}
results[https://github.com/disy/jSCSI/blob/31d1cd077c6c467f92fded1f84daff4a627e259e/jSCSI-deprecated/test/org/jscsi/Raid1DeviceTest.java][testRandomReadWrite][1] = -> TRY {  -> address=randomGenerator.nextInt((int) device.getBlockCount(),)@ -> device.write(address,testData,)@ -> device.read(address,result,)@ } CATCH(Exception) {}
results[https://github.com/apache/incubator-tajo/blob/e2f4798b09b2efccfe14a6eac46055d3b6c72ffb/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/planner/physical/TestBSTIndexExec.java][testEqual][1] = -> TRY {  -> IF { -> return @conf.getBoolean("tajo.storage.manager.v2",false,) } -> this.rndKey=rnd.nextInt(250,)@!(conf.getBoolean("tajo.storage.manager.v2",false,)) -> tupleCount=this.randomValues.get(rndKey,)@!(conf.getBoolean("tajo.storage.manager.v2",false,)) } CATCH(Exception) {}
results[https://github.com/chenatu/ccnx-underlay/blob/493267acc2ebbcfbacf50aff2f8657c39fce8ac0/javasrc/src/org/ccnx/ccn/test/profiles/versioning/VersioningInterestManagerTestRepo.java][sendStreamLeft][2] = -> TRY {  -> LOOP { -> t+=_rnd.nextInt(100000,)+10@ -> version=new CCNTime(t,)@ } } CATCH(Exception) {}
results[https://github.com/cbeust/testng/blob/4aaa9e77e51b5665a68850db9b424a41e4604402/src/test/java/test/tmp/AssertEqualsTest.java][f1][1] = -> TRY { -> sleepTime=new Random().nextInt(500,)@ -> Thread.sleep(sleepTime,)@ } CATCH(Exception) { -> log("  *** INTERRUPTED",)@ }
results[https://github.com/pingtimeout/tyrion/blob/d915ae79ce858cba208ab847aeda561ac9a1837d/samples/src/MultiThreadedHelloWorld.java][call][1] = -> TRY {  -> LOOP { -> token=tokens[random.nextInt(tokens.length,)]@ -> helloWorld.append(token,)@ } } CATCH(Exception) {}
results[https://github.com/porcelli/OpenSpotLight/blob/e627536d02348983e5776efc379d8aac1bdc19d3/osl-common/src/test/java/org/openspotlight/common/task/test/TaskManagerTest.java][run][1] = -> TRY {  -> IF { -> Thread.sleep(random.nextInt(100,),)@ } } CATCH(Exception) {}
results[https://github.com/pedropaulovc/USP-2013/blob/bf74b04cd3358e55f1253f63d0ec3d7dc815ce91/workspace/WorkflowSim/src/org/workflowsim/failure/FailureGenerator.java][generate][1] = -> TRY { -> LOOP { -> randomValue=generator.nextInt(1000,)@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/bsmedberg/pig/blob/ef2150aaa8546aeb13aa2f1d537d3c08eaec9464/test/org/apache/pig/test/TestCounters.java][testMapOnlyMultiQueryStores][1] = -> TRY {  -> LOOP { -> t=r.nextInt(100,)@ -> pw.println(t,)@ } } CATCH(Exception) {}
results[https://github.com/f2prateek/android-device-frame-generator/blob/8c8bc42c39ec350e9623256d68d2adc61e3d9538/app/src/instrumentTest/java/com/f2prateek/dfg/MainActivityTest.java][testDeviceIsSaved][1] = -> TRY {  -> device=new Random().nextInt(pager.getAdapter().getCount(),)@ } CATCH(Exception) {}
results[https://github.com/aldaris/opensso/blob/75138862bb8921e873d7887b760723a39be2c439/qatest/source/com/sun/identity/qatest/setup/ClientConfigCreator.java][getUnusedPort][1] = -> TRY {  -> LOOP { -> rnd=new Random()@ -> rNum=rnd.nextInt(1000,)@ } } CATCH(Exception) {}
results[https://github.com/twitter/bookkeeper/blob/9de53ceebfaab862343aa20819f2ac109cb4789c/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java][testAttachExistingSubscriptionsWhenARegionDown][1] = -> TRY {  -> r=new Random()@ -> regionId=r.nextInt(numRegions,)@ -> stopRegion(regionId,)@ -> startRegion(regionId,)@ } CATCH(Exception) {}
results[https://github.com/shantanusharma/weka/blob/40eaf8512d660b0739c97912d86e5af1dde35d52/weka/core/neighboursearch/balltrees/MedianDistanceFromArbitraryPoint.java][splitNode][1] = -> TRY {  -> m_Rand=new Random(m_RandSeed,)@ -> ridx=node.m_Start+m_Rand.nextInt(node.m_NumInstances,)@ -> randomInst=(Instance) m_Instances.instance(m_Instlist[ridx],).copy()@ } CATCH(Exception) {}
results[https://github.com/datasalt/pangool/blob/8731e8dd743882bb108a41d4ae47051bf8096162/core/src/test/java/com/datasalt/pangool/BaseTest.java][fillEnum][1] = -> TRY {  -> values=(Enum[]) field.getObjectClass().getEnumConstants()@ -> tuple.set(index,values[(isRandom)?random.nextInt(values.length,):0],)@ } CATCH(Exception) {}
results[https://github.com/CVi/Fellesprosjekt/blob/45602d8db99de83c2ee0313086bf6778942fd484/Fellesprosjektet/src/org/vikenpedia/fellesprosjekt/test/TestInvitation.java][testZZGoCrazy][1] = -> TRY { -> r=new Random()@ -> n=r.nextInt(500,)+500@ } CATCH(Exception) { -> e.printStackTrace()@ -> fail("Exception thrown",)@ }
results[https://github.com/onsip/jitsi/blob/0dfbcdbbed9cc45546ecc1644270c0c169a97b69/src/net/java/sip/communicator/impl/provdisc/dhcp/DHCPTransaction.java][schedule][1] = -> TRY {  -> rand=new Random().nextInt(2,)-1@ -> timer.schedule(new RetransmissionHandler(),interval+rand*1000,)@ } CATCH(Exception) {}
results[https://github.com/b3log/b3log-solo/blob/5163832f9b0f48fdb5a165dc37ba690d31c7a952/core/src/main/java/org/b3log/solo/processor/CaptchaProcessor.java][get][1] = -> TRY { -> random=new Random()@ -> index=random.nextInt(CAPTCHA_COUNT,)@ } CATCH(Exception) { -> LOGGER.log(Level.ERROR,e.getMessage(),e,)@ }
