results[https://github.com/pbeaman/persistit/blob/10b259d3c0b72a7c5882268df9128b9cdf51d5a4/src/test/java/com/persistit/VolumeTest.java][testCreateOpenVolume][1] = -> TRY {  -> raf=new RandomAccessFile(file,"rw",)@ -> raf.write( new byte[],)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/ntietz/virtualdisk/blob/061bcb45ac6ccda6e3ab82c1ea5e28f2998d71fb/src/edu/kent/cs/virtualdisk/datanode/Drive.java][write][1] = -> TRY { -> out=new RandomAccessFile(f,"rw",)@ -> out.seek(physicalOffset*blockSize,)@ -> out.write(block,)@ -> out.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/ottomata/flume-ng/blob/112e80a22a11f8a9dcee4cc13066c1615a4752c3/flume-ng-channels/flume-file-channel/src/test/java/org/apache/flume/channel/file/TestFileChannelRestart.java][testCorruptInflights][2] = -> TRY {  -> writer=new RandomAccessFile(inflight,"rw",)@ -> writer.write(new Random().nextInt(),)@ -> writer.close()@ } CATCH(Exception) {}
results[https://github.com/angusmacdonald/h2o/blob/d526c604cf8fa3349a5839da4d2990f767e5607c/src/test/org/h2/test/db/TestCsv.java][testNull][1] = -> TRY {  -> file=new RandomAccessFile(f,"rw",)@ -> file.write(csvContent.getBytes("UTF-8",),)@ -> file.close()@ -> assertEquals(csvContent+"\\N",data.trim(),)@ } CATCH(Exception) {}
results[https://github.com/cmeiklejohn/flume-ng/blob/7a6e3db005dfc7848eeb62b6e66b91dc00a7f726/flume-ng-channels/flume-file-channel/src/test/java/org/apache/flume/channel/file/TestFileChannelRestart.java][testCorruptCheckpointVersionMostSignificant4Bytes][2] = -> TRY {  -> writer=new RandomAccessFile(checkpoint,"rw",)@ -> writer.seek(EventQueueBackingStoreFile.INDEX_VERSION*Serialization.SIZE_OF_LONG,)@ -> writer.write( new byte[],)@ -> writer.getFD().sync()@ -> writer.close()@ } CATCH(Exception) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/io/FileDescriptor/Finalize.java][doRandomAccessFile][3] = -> TRY {  -> raf=new RandomAccessFile(inFile,"r",)@ -> fd=raf.getFD()@ -> raf.close()@ -> raf=new RandomAccessFile(outFile,"rw",)@ -> fd=raf.getFD()@ -> raf.write(data,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/squirrely/arinc_838/blob/6ddac2c8ccfb523cf469bf7702d80d654efd0ee7/src/main/java/edu/cmu/sv/arinc838/writer/XdfWriter.java][write][1] = -> TRY {  -> randAccessFile=new RandomAccessFile(file,"rw",)@ -> randAccessFile.readFully(contents,)@ -> randAccessFile.seek(0,)@ -> randAccessFile.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n".getBytes(),)@ -> randAccessFile.write(contents,)@ -> randAccessFile.close()@ } CATCH(Exception) {}
results[https://github.com/unidevel/android/blob/6429d3139f76f08bf17fe8529e0a9f3718b0c800/MiBoxServer/src/com/unidevel/mibox/server/handler/SendFileHandler.java][handleRequest][1] = -> TRY { -> f=new RandomAccessFile(file,"rw",)@ -> IF { -> f.seek(request.offset,)@ } -> f.write(request.block,)@ -> f.close()@ } CATCH(Exception) { -> result.failedMessage=e.getMessage()@ }
results[https://github.com/mendhak/gpslogger/blob/9a4155fd518d43adadd6155850d7816ebdbd3ae8/GPSLogger/src/com/mendhak/gpslogger/loggers/Gpx10FileLogger.java][run][1] = -> TRY { -> trackPoint=GetTrackPointXml(loc,dateTimeString,)@ -> raf=new RandomAccessFile(gpxFile,"rw",)@ -> raf.seek(startPosition,)@ -> raf.write(trackPoint.getBytes(),)@ -> raf.close()@ } CATCH(Exception) { -> Utilities.LogError("Gpx10FileLogger.Write",e,)@ }
results[https://github.com/jbosstm/narayana/blob/bc9a3668c4ed6e8c52f6b2c3d4596e115c12ccf8/qa/tests/src/org/jboss/jbossts/qa/PerfProfileIOClients/WriteSync.java][main][1] = -> TRY { -> randomAccessFile=new RandomAccessFile(file,"rw",)@ -> fileDescriptor=randomAccessFile.getFD()@ -> LOOP { -> randomAccessFile.write(block,)@ } -> randomAccessFile.close()@ } CATCH(Exception) { -> System.err.println("WriteSync.main: "+exception,)@ -> System.out.println("Failed",)@ }
results[https://github.com/bitronix/btm/blob/c8f9d2e94e02a4a5acf7b73314d72bbd22494f0f/test/bitronix/tm/journal/DiskForceTest.java][testRandomAccessFile][4] = -> TRY {  -> raf=new RandomAccessFile("test.dat","rw",)@ -> LOOP { -> raf.write(buffer,)@ -> raf.seek(0L,)@ -> raf.getFD().sync()@ } -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/reppie/xchange/blob/7807f15f1bf440b9dc7081d30011d86f81737509/projects/xchange/xchange/XStorageServer.java][transferBlock][1] = -> TRY {  -> raf=new RandomAccessFile(new File("xchange/shared/"+fileName+".!xch",),"rw",)@ -> LOOP { -> temp=inputStream.read(buffer,offset,currentBlockSize-offset,)@offset<currentBlockSize&&temp!=-1&&blockNr!=maxBlockNumber+1 } -> raf.seek(currentBlockSize*blockNr,)@ -> raf.write(buffer,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/jbosstm/narayana/blob/bc9a3668c4ed6e8c52f6b2c3d4596e115c12ccf8/qa/tests/src/org/jboss/jbossts/qa/PerfProfileIOClients/OpenWriteSyncClose.java][main][1] = -> TRY { -> LOOP { -> randomAccessFile=new RandomAccessFile(file,"rw",)@ -> fileDescriptor=randomAccessFile.getFD()@ -> randomAccessFile.write(block,)@ -> randomAccessFile.close()@ } } CATCH(Exception) { -> System.err.println("OpenWriteSyncClose.main: "+exception,)@ -> System.out.println("Failed",)@ }
results[https://github.com/zhoulzhou/IPCPlayer/blob/ccacfcc74df9cb2a338a39ea7bde0e991d9bbe50/src/com/example/ipcplayer/activity/FileActivity.java][write][1] = -> TRY { -> IF { -> raf=new RandomAccessFile(targetFile,"rw",)@ -> raf.seek(targetFile.length(),)@ -> raf.write(content.getBytes(),)@ -> raf.close()@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/jbosstm/narayana/blob/bc9a3668c4ed6e8c52f6b2c3d4596e115c12ccf8/qa/tests/src/org/jboss/jbossts/qa/PerfProfileIOClients/WriteSyncSeek.java][main][1] = -> TRY { -> randomAccessFile=new RandomAccessFile(file,"rw",)@ -> fileDescriptor=randomAccessFile.getFD()@ -> LOOP { -> randomAccessFile.write(block,)@ -> randomAccessFile.seek(0,)@ } -> randomAccessFile.close()@ } CATCH(Exception) { -> System.err.println("WriteSyncSeek.main: "+exception,)@ -> System.out.println("Failed",)@ }
results[https://github.com/nourlcn/hadoop-1.0/blob/54aaa5f358494a5fb4166d254d8a823bf8a9bc15/src/test/org/apache/hadoop/dfs/TestFsck.java][testCorruptBlock][2] = -> TRY {  -> LOOP { -> IF { -> raFile=new RandomAccessFile(blockFile,"rw",)@blockFile.exists() -> channel=raFile.getChannel()@ -> raFile.seek(rand,)@ -> raFile.write(badString.getBytes(),)@ -> raFile.close()@ } } } CATCH(Exception) {}
results[https://github.com/asascience/THREDDS/blob/c776d816ad599ceb460e316f7f9e1c522afde02d/grib/src/test/java/ucar/nc2/iosp/grib/TestIndexUpdating.java][switchToCompleteGrib][2] = -> TRY { -> input.read(extra,)@ -> output=new RandomAccessFile(dataFile.getPath(),"rw",)@ -> output.seek(output.length(),)@ -> output.write(extra,)@ -> output.close()@ } CATCH(Exception) { -> fail("Failed to add file ["+input.getLocation()+"] to  file ["+dataFile.getPath()+"]: "+e.getMessage(),)@ }
results[https://github.com/johnugeorge/distributed/blob/597f43e6a7d9d4b546ca76b399858e0e0894cbab/Fast_Copy_HDFS/src/test/org/apache/hadoop/hdfs/MiniDFSCluster.java][corruptBlockOnDataNode][28] = -> TRY {  -> IF { -> return false@i<0||i>=dataNodes.size() } -> LOOP { -> IF { -> raFile=new RandomAccessFile(blockFile,"rw",)@!(i<0||i>=dataNodes.size()) && blockFile.exists() -> channel=raFile.getChannel()@!(i<0||i>=dataNodes.size()) -> raFile.seek(rand,)@!(i<0||i>=dataNodes.size()) -> raFile.write(badString.getBytes(),)@!(i<0||i>=dataNodes.size()) -> raFile.close()@!(i<0||i>=dataNodes.size()) } } } CATCH(Exception) {}
results[https://github.com/darrenjl/pdfrun/blob/62949f216d617d721af93b6cb40ac1958eedb55f/OpenGPSTracker/external_sources/httpcore-4.1.1/httpcore-nio/src/test/java/org/apache/http/impl/nio/codecs/TestIdentityDecoder.java][testDecodingFileWithOffsetAndBufferedSessionData][6] = -> TRY {  -> testfile=new RandomAccessFile(fileHandle,"rw",)@ -> beginning="beginning; ".getBytes("US-ASCII",)@ -> testfile.write(beginning,)@ -> testfile.close()@ -> testfile=new RandomAccessFile(fileHandle,"rw",)@ -> fchannel=testfile.getChannel()@ -> LOOP { -> IF { -> testfile.setLength(pos,)@testfile.length()<pos } } -> assertEquals(testfile.length()-7-beginning.length,metrics.getBytesTransferred(),)@ } CATCH(Exception) {}
results[https://github.com/elka-projekt/cs-voltdb/blob/9e9337e1b8ee2c4c6377d58f3af453090c057ff4/tests/frontend/org/voltdb/regressionsuites/TestSaveRestoreSysprocSuite.java][corruptTestFiles][1] = -> TRY {  -> r.nextBytes(corruptValue,)@ -> raf=new java.io.RandomAccessFile(tmp_files[tmpIndex],"rw",)@ -> corruptPosition=r.nextInt((int) raf.length(),)@ -> raf.seek(corruptPosition,)@ -> currentValue=raf.readByte()@ -> LOOP { -> r.nextBytes(corruptValue,)@currentValue==corruptValue[0] } -> System.out.println("Corrupting file "+tmp_files[tmpIndex].getName()+" at byte "+corruptPosition+" with value "+corruptValue[0],)@ -> raf.seek(corruptPosition,)@ -> raf.write(corruptValue,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/crissii/water-esb-new/blob/5bd3b0433d9d39d7169035f6a3648b66d543f0e2/modules/transport/src/main/java/com/sunsharing/transport/exchage/protocol/FilePakageSave.java][lastCheck][1] = -> TRY { -> raf=new RandomAccessFile(path+getServerTempFileName()+".log","rw",)@ -> raf.seek(FileSend.beginFileSize+getCurrentPakage()-1,)@ -> raf.write(b,)@ -> raf.seek(FileSend.beginFileSize,)@ -> raf.read(b,)@ -> IF { -> raf.close()@ } } CATCH(Exception) { -> logger.error("异常",e,)@ } FINALLY { -> lock.unlock()@ -> TRY { -> raf.close()@ } }
results[https://github.com/CIIR/Proteus/blob/d22628d2d69aeb93439c654bb892b296771ab419/galago-for-proteus/core/src/main/java/org/lemurproject/galago/core/tools/App.java][run][1] = -> TRY {  -> indexReaderWriter=new RandomAccessFile(filename,"rw",)@ -> length=indexReaderWriter.length()@ -> indexReaderWriter.seek(footerOffset,)@ -> vocabularyOffset=indexReaderWriter.readLong()@ -> manifestOffset=indexReaderWriter.readLong()@ -> blockSize=indexReaderWriter.readInt()@ -> magicNumber=indexReaderWriter.readLong()@ -> indexReaderWriter.seek(manifestOffset,)@ -> indexReaderWriter.read(xmlData,)@ -> newParameters=Parameters.parse(xmlData,)@ -> indexReaderWriter.seek(manifestOffset,)@ -> xmlData=newParameters.toString().getBytes("UTF-8",)@ -> indexReaderWriter.write(xmlData,)@ -> indexReaderWriter.writeLong(vocabularyOffset,)@ -> indexReaderWriter.writeLong(manifestOffset,)@ -> indexReaderWriter.writeInt(blockSize,)@ -> indexReaderWriter.writeLong(magicNumber,)@ -> indexReaderWriter.close()@ } CATCH(Exception) {}
results[https://github.com/dongaihua/highlight-elasticsearch/blob/1f289df12875b703683cbd95fde6e66e2685d444/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/fs/FsAppendBenchmark.java][main][6] = -> TRY {  -> raf=new RandomAccessFile("work/test.log","rw",)@ -> raf.setLength(0,)@ -> new Random().nextBytes(data,)@ -> IF { -> channel=raf.getChannel()@ -> LOOP { -> channel.write(ByteBuffer.wrap(data,),position,)@position<DATA } } ELSE { -> LOOP { -> raf.write(data,)@ } -> raf.getFD().sync()@ } -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/ferquies/2dam/blob/3449ac78542b4597a76f1860dc4ce81472854e44/AD/Tema 2/h2/src/tools/org/h2/build/code/CheckTextFiles.java][checkOrFixFile][8] = -> TRY {  -> LOOP { } ELSE { -> IF { -> IF { -> IF { -> return @ch<32 && i<data.length && !(ch>127) && ch=='\n' } } ELSE { -> IF { -> IF { -> return @ch<32 && !(ch=='\n') && i<data.length && ch=='\r' && !(ch>127) } -> IF { -> return @ch<32 && !(ch=='\n') && i<data.length && ch=='\r' && !(ch>127) } } ELSE { -> IF { } ELSE { -> IF { -> return @ch<32 && !(ch=='\r') && ch=='\t' && !(ch=='\n') && !(fix) && i<data.length && !(ch>127) } } ELSE { -> return @ch<32 && !(ch=='\t') && !(ch=='\r') && !(ch=='\n') && i<data.length && !(ch>127) } } } } } -> IF { -> changed=out.toByteArray()@!(i<data.length) -> IF { -> f=new RandomAccessFile(file,"rw",)@!(i<data.length) -> f.write(changed,)@!(i<data.length) && !(Arrays.equals(data,changed,)) -> f.setLength(changed.length,)@!(i<data.length) -> f.close()@!(i<data.length) } } } CATCH(Exception) {}
results[https://github.com/coderplay/h2-bitmap/blob/f970ad38130cf0863d35f848a69e6146ae0d1830/h2/src/tools/org/h2/tools/code/CheckTextFiles.java][checkOrFixFile][5] = -> TRY {  -> LOOP { -> IF { -> return @ch>127 && i<data.length } ELSE { -> IF { -> IF { -> IF { -> return @ch<32 && lastWasWhitespace&&!(allowTrailingSpaces) && i<data.length && !(ch>127) && ch=='\n' } } ELSE { -> IF { -> IF { -> return @ch<32 && !(ch=='\n') && i<data.length && ch=='\r' && !(ch>127) } -> IF { -> return @ch<32 && lastWasWhitespace&&!(allowTrailingSpaces) && !(ch=='\n') && i<data.length && ch=='\r' && !(ch>127) } } ELSE { -> IF { } ELSE { -> IF { -> return @ch<32 && !(ch=='\r') && !(ch=='\n') && ch=='\t' && !(fix) && i<data.length && !(ch>127) } } ELSE { -> return @ch<32 && !(ch=='\t') && !(ch=='\r') && !(ch=='\n') && i<data.length && !(ch>127) } } } } } } -> IF { -> return @!(i<data.length) && lastWasWhitespace&&!(allowTrailingSpaces) } -> IF { -> changed=out.toByteArray()@!(i<data.length) && !(lastWasWhitespace&&!(allowTrailingSpaces)) -> IF { -> f=new RandomAccessFile(file,"rw",)@!(i<data.length) && !(lastWasWhitespace&&!(allowTrailingSpaces)) -> f.write(changed,)@!(i<data.length) && ByteUtils.compareNotNull(data,changed,)!=0 && !(lastWasWhitespace&&!(allowTrailingSpaces)) -> f.setLength(changed.length,)@!(i<data.length) && !(lastWasWhitespace&&!(allowTrailingSpaces)) -> f.close()@!(i<data.length) && !(lastWasWhitespace&&!(allowTrailingSpaces)) } } } CATCH(Exception) {}
results[https://github.com/binwiederhier/syncany/blob/c7eb5a4a5d05cbecec59b5b768a6b57afda8eecf/tests/org/syncany/tests/crypto/CipherUtilTest.java][testIsEncryptedFileTrue][2] = -> TRY {  -> testFileRaf=new RandomAccessFile(testFile,"rw",)@ -> testFileRaf.write(MultiCipherOutputStream.STREAM_MAGIC,)@ -> testFileRaf.write(MultiCipherOutputStream.STREAM_VERSION,)@ -> testFileRaf.close()@ } CATCH(Exception) {}
results[https://github.com/picketbox/picketbox-container/blob/bee25bb1ba4e6b5d72633aa88f20fb383e7a1784/security-jboss-sx/jbosssx/src/main/java/org/jboss/security/plugins/FilePassword.java][encode][1] = -> TRY {  -> cipherSpec=new PBEParameterSpec(salt,count,)@ -> encode=cipher.doFinal(secret,)@ -> passwordFile.write(salt,)@ -> passwordFile.writeInt(count,)@ -> passwordFile.write(encode,)@ -> passwordFile.close()@ } CATCH(Exception) {}
results[https://github.com/kennethso168/AdvancedPowerMenu/blob/2e9dff3f7d33614dd80d6ac901c7d45b9eff25ad/src/hk/kennethso168/xposed/advancedrebootmenu/DualBoot.java][setDualSystemBootmode][1] = -> TRY { -> file=new RandomAccessFile("/dev/block/platform/msm_sdcc.1/by-name/misc","rw",)@ -> file.seek(0x1000,)@ -> file.write(bootmode.getBytes(),)@ -> file.write( new byte[],)@ -> file.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/thihy/lucene/blob/0666c43457bc16b46de89efc433cf4c6481ef948/solr/core/src/test/org/apache/solr/search/TestRecovery.java][testCorruptLog][3] = -> TRY {  -> TRY { -> raf=new RandomAccessFile(new File(logDir,files[files.length-1],),"rw",)@ -> len=raf.length()@ -> raf.seek(0,)@ -> raf.write( new byte[],)@ -> raf.close()@ } } CATCH(Exception) {}
results[https://github.com/dilipgudlur/Localization/blob/bafab77e22e196d06b30d09c5f42961cfb62f3b4/src/edu/cmu/pandaa/stream/RawAudioFileStream.java][updateWavLength][1] = -> TRY {  -> raf=new RandomAccessFile(fileName,"rw",)@ -> raf.seek(update_pos1,)@ -> raf.write(DataConversionUtil.intToByteArray(byteCount+update_pos2-update_pos1,),)@ -> raf.seek(update_pos2,)@ -> raf.write(DataConversionUtil.intToByteArray(byteCount,),)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/kelemen/netbeans-gradle-project/blob/374250866837fd15cf57dcb4be7a1a86fe6eb33d/src/test/java/org/netbeans/gradle/project/StringAsFileRefTest.java][testModifiedContent][3] = -> TRY {  -> fileContent=new RandomAccessFile(fileRef1.getFile(),"rw",)@ -> TRY { -> fileContent.setLength(0,)@ -> fileContent.write(modContent,)@ } FINALLY { -> fileContent.close()@ } } CATCH(Exception) {}
results[https://github.com/benschi11/Alt_F4/blob/568ce9cfa1ef6ec36a888acfed52dcdd2cd0c15f/expleo/app/models/Helper.java][copy][2] = -> TRY {  -> datei=new RandomAccessFile(source.getAbsolutePath(),"r",)@ -> neudatei=new RandomAccessFile(dest.getAbsolutePath(),"rw",)@ -> LOOP { -> neudatei.write(datei.read(),)@neudatei.length()<datei.length() } -> datei.close()@ -> neudatei.close()@ } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/0a0f1b3dfb3e04b4f5fc44ad0d5990fe34238495/test/java/io/File/Basic.java][main][3] = -> TRY {  -> IF { -> raf=new RandomAccessFile(bigFile,"rw",)@ -> TRY { -> raf.seek(big,)@ -> raf.write('x',)@ } FINALLY { -> raf.close()@ } } } CATCH(Exception) {}
results[https://github.com/camptocamp/secureOWS/blob/36abae7e77d3c056352799f286899453ecac360b/owsproxyserver/src/org/deegree/portal/portlet/enterprise/PrintListener.java][forwardPDF][1] = -> TRY {  -> TRY { -> raf=new RandomAccessFile(s,"rw",)@ -> raf.write((byte[]) result,)@ -> raf.close()@ } CATCH(Exception) { -> e.printStackTrace()@ -> LOG.logError("could not write temporary pdf file: "+s,e,)@ -> throw new PortalException("could not write temporary pdf file: "+s,e,)@ } } CATCH(PortalException) {}
results[https://github.com/xperimental/javadrone/blob/9ada31fb4e9125fc1efd1d6b1c754d2118d69222/ardrone/src/main/java/com/codeminders/ardrone/util/MJPEGGenerator.java][finishAVI][6] = -> TRY {  -> size=aviFile.length()@ -> raf=new RandomAccessFile(aviFile,"rw",)@ -> raf.seek(4,)@ -> raf.write(intBytes(swapInt((int) size-8,),),)@ -> raf.seek(aviMovieOffset+4,)@ -> raf.write(intBytes(swapInt((int) size-8-aviMovieOffset-indexlistBytes.length,),),)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/dkomanov/fizteh-java-2013/blob/613cef52894d7d1182cce65d000778793c53fe5d/src/ru/fizteh/fivt/students/adanilyak/tools/tlWorkWithDatFiles.java][writeIntoFile][1] = -> TRY {  -> dataBaseFileWriter=new RandomAccessFile(dataBaseFile,"rw",)@ -> dataBaseFileWriter.setLength(0,)@ -> LOOP { -> bufferKey=key.getBytes("UTF-8",)@ -> dataBaseFileWriter.writeInt(bufferKey.length,)@ -> bufferValue=value.getBytes("UTF-8",)@ -> dataBaseFileWriter.writeInt(bufferValue.length,)@ -> dataBaseFileWriter.write(bufferKey,)@ -> dataBaseFileWriter.write(bufferValue,)@ } -> dataBaseFileWriter.close()@ } CATCH(Exception) {}
results[https://github.com/dgarnier/MDSplus/blob/b2517b54103142bfb18e3e5177d94263560e7c10/javatraverser/LoadFile.java][main][2] = -> TRY { -> serialized=ba.getByteArray()@ } CATCH(Exception) { -> System.err.println("Error reading data in"+nodeName+": "+exc,)@ -> System.exit(0,)@ } -> TRY { -> raf=new RandomAccessFile(fileName,"rw",)@ -> raf.write(serialized,)@ -> raf.close()@ } CATCH(Exception) { -> System.err.println("Cannot read file "+fileName+": "+exc,)@ -> System.exit(0,)@ }
results[https://github.com/eclipse/virgo.eclipse-mirror/blob/914e48f69b696ad823f14fa7ebe73cac23b92558/hotfix/source/openejb-core/src.original/main/java/org/apache/openejb/core/managed/RAFPassivater.java][passivate][12] = -> TRY {  -> TRY { -> ras=new RandomAccessFile(System.getProperty("java.io.tmpdir",File.separator+"tmp",)+File.separator+"passivation"+fileID+".ser","rw",)@ -> LOOP { -> bytes=Serializer.serialize(obj,)@ -> filepointer=ras.getFilePointer()@ -> ras.write(bytes,)@ } -> ras.close()@ } CATCH(Exception) { -> throw new org.apache.openejb.SystemException(e,)@ } } CATCH(org.apache.openejb.SystemException) {}
results[https://github.com/utyman/Base-de-Datos-TP1/blob/2a163d7829fcd02f2bd7da648e8b1406eef9d1e6/TP2/sources/UBADB-Original/src/main/java/ubadb/components/diskManager/DiskManagerImpl.java][createNewPage][3] = -> TRY {  -> TRY { -> checkPageSize(pageContents,)@ -> file=getFile(tableId,)@ -> offset=file.length()@ -> file.seek(offset,)@ -> file.write(pageContents,)@ -> file.close()@ -> return new Page(new PageId(newPageNumber,tableId,),pageContents,)@ } CATCH(Exception) { -> throw new DiskManagerException("Cannot create a new page on disk",e,)@ } } CATCH(DiskManagerException) {}
results[https://github.com/apache/tomee/blob/fb67de3145cd7967a59aab5ab5c7a298b7968e24/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/RAFPassivater.java][passivate][2] = -> TRY {  -> TRY { -> ras=new RandomAccessFile(System.getProperty("java.io.tmpdir",File.separator+"tmp",)+File.separator+"passivation"+fileID+".ser","rw",)@ -> LOOP { -> bytes=Serializer.serialize(obj,)@ -> filepointer=ras.getFilePointer()@ -> ras.write(bytes,)@ } -> ras.close()@ } CATCH(Exception) { -> throw new SystemException(e,)@ } } CATCH(SystemException) {}
results[https://github.com/kelemen/netbeans-gradle-project/blob/d5770675a5f9fa9964cba6be8c0a92b48e5e88af/netbeans-gradle-default-models/src/test/java/org/netbeans/gradle/model/util/TemporaryFileManagerTest.java][testModifiedContent][1] = -> TRY {  -> TRY { -> fileContent=new RandomAccessFile(fileRef1.getFile(),"rw",)@ -> TRY { -> fileContent.setLength(0,)@ -> fileContent.write(modContent,)@ } FINALLY { -> fileContent.close()@ } -> fileRef1.getFile().delete()@ } } CATCH(Exception) {}
results[https://github.com/apurtell/hadoop/blob/86771aef24fed2c7e72236af8e201c262b90ad2e/src/test/hdfs/org/apache/hadoop/hdfs/server/namenode/TestFsck.java][testCorruptBlock][41] = -> TRY {  -> TRY { -> IF { -> raFile=new RandomAccessFile(blockFile,"rw",)@blockFile!=null&&blockFile.exists() -> channel=raFile.getChannel()@ -> raFile.seek(rand,)@ -> raFile.write(badString.getBytes(),)@ -> raFile.close()@ } } FINALLY { -> IF { -> cluster.shutdown()@cluster!=null } } } CATCH(Exception) {}
results[https://github.com/genepi/pig-gene/blob/9f53e4a3dfdbfb2cfcbea8ea494e3065f7f12b89/AuswertTestdat/lib/hadoop_src/test/org/apache/hadoop/hdfs/server/namenode/TestFsck.java][testCorruptBlock][33] = -> TRY {  -> TRY { -> LOOP { -> IF { -> raFile=new RandomAccessFile(blockFile,"rw",)@blockFile.exists() -> channel=raFile.getChannel()@ -> raFile.seek(rand,)@ -> raFile.write(badString.getBytes(),)@ -> raFile.close()@ } } } FINALLY { -> IF { -> cluster.shutdown()@cluster!=null } } } CATCH(Exception) {}
results[https://github.com/chris-martin/h2/blob/2c08fe1e6440d2205fc27170319a0ddb7ec2d583/h2/src/test/org/h2/test/poweroff/TestWrite.java][testFile][8] = -> TRY {  -> file=new RandomAccessFile("test.txt",mode,)@ -> file.setLength(0,)@ -> fd=file.getFD()@ -> file.write(data,)@ -> IF { -> LOOP { -> file.seek(0,)@ -> file.write(data,)@ } } ELSE { -> LOOP { -> file.seek(0,)@ -> file.write(data,)@ } } -> file.close()@ } CATCH(Exception) {}
results[https://github.com/utyman/Base-de-Datos-TP1/blob/a2b0936ae9ab77daed619e441037d1ba006e42cb/TP2/sources/UBADB/src/main/java/ubadb/components/diskManager/DiskManagerImpl.java][writeExistingPage][3] = -> TRY {  -> TRY { -> file=getFile(page.getPageId().getTableId(),)@ -> offset=calculatePageOffset(page.getPageId(),)@ -> checkPageIsExisting(offset,file.length(),)@ -> checkPageSize(page.getPageContents(),)@ -> file.seek(offset,)@ -> file.write(page.getPageContents(),)@ -> file.close()@ } CATCH(Exception) { -> throw new DiskManagerException("Cannot write to page to disk",e,)@ } } CATCH(DiskManagerException) {}
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/HttpCore-4.2/httpcore-nio/src/test/java/org/apache/http/impl/nio/codecs/TestLengthDelimitedDecoder.java][testDecodingFileWithOffsetAndBufferedSessionData][1] = -> TRY {  -> beginning="beginning; ".getBytes("US-ASCII",)@ -> testfile=new RandomAccessFile(this.tmpfile,"rw",)@ -> TRY { -> testfile.write(beginning,)@ } FINALLY { -> testfile.close()@ } -> testfile=new RandomAccessFile(this.tmpfile,"rw",)@ -> TRY { -> fchannel=testfile.getChannel()@ -> LOOP { -> IF { -> testfile.setLength(pos,)@testfile.length()<pos } } } FINALLY { -> testfile.close()@ } } CATCH(Exception) {}
results[https://github.com/ttron/lab/blob/2139f978c863b2de04fa565a8df4d2fdbf2ceb8d/HttpCore-4.3/httpcore-nio/src/test/java/org/apache/http/impl/nio/codecs/TestLengthDelimitedDecoder.java][testDecodingFileWithOffsetAndBufferedSessionData][2] = -> TRY {  -> beginning=EncodingUtils.getAsciiBytes("beginning; ",)@ -> testfile=new RandomAccessFile(this.tmpfile,"rw",)@ -> TRY { -> testfile.write(beginning,)@ } FINALLY { -> testfile.close()@ } -> testfile=new RandomAccessFile(this.tmpfile,"rw",)@ -> TRY { -> fchannel=testfile.getChannel()@ -> LOOP { -> IF { -> testfile.setLength(pos,)@testfile.length()<pos } } } FINALLY { -> testfile.close()@ } } CATCH(Exception) {}
results[https://github.com/Androxyde/Flashtool/blob/58f33d33feddcf72686f5093787c8b62b26fbd9d/src/flashsystem/SinFile.java][dumpImageV1_2][1] = -> TRY {  -> TRY { -> fout=OS.generateEmptyFile(getImageFileName(),sinheader.getOutfileLength(),(byte) 0xFF,)@ -> LOOP { -> findata.read(data,)@ -> b.validate(data,)@ -> fout.seek((blocks.size()==1)?0:b.getOffset(),)@i<blocks.size() -> fout.write(data,)@ } -> fout.close()@ } CATCH(Exception) { -> MyLogger.getLogger().error("Error while extracting data : "+e.getMessage(),)@ -> MyLogger.initProgress(0,)@ -> e.printStackTrace()@ } } CATCH(IOException) {}
results[https://github.com/mpatric/mp3agic/blob/7bcc62d40eaed06c66387f3613eaceef85d2d814/test-src/com/mpatric/mp3agic/app/Mp3RetagTest.java][testShouldRenameOneFileToBackupAndOtherFileToOriginalName][1] = -> TRY {  -> TRY { -> TRY { -> raFile=new RandomAccessFile(filename,"rw",)@ -> raFile.write( new byte[],)@ } FINALLY { -> IF { -> raFile.close()@raFile!=null } } -> TRY { -> raFile=new RandomAccessFile(filename+".retag","rw",)@ -> raFile.write( new byte[],)@ } FINALLY { -> IF { -> raFile.close()@raFile!=null } } -> deleteFile(filename,)@ -> deleteFile(filename+".bak",)@ } } CATCH(Exception) {}
results[https://github.com/eclipse/jgit/blob/767be14f34b07e5acb8f332032fd97dd3e19a059/org.eclipse.jgit.test/tst/org/eclipse/jgit/api/HugeFileTest.java][testAddHugeFile][3] = -> TRY {  -> rf=new RandomAccessFile(file,"rw",)@ -> rf.setLength(4429185024L,)@ -> rf.close()@ -> rf=new RandomAccessFile(file,"rw",)@ -> rf.write(0,)@ -> rf.close()@ -> rf=new RandomAccessFile(file,"rw",)@ -> rf.write('a',)@ -> rf.close()@ -> rf=new RandomAccessFile(file,"rw",)@ -> rf.setLength(134217728L,)@ -> rf.write(0,)@ -> rf.close()@ -> rf=new RandomAccessFile(file,"rw",)@ -> rf.write('a',)@ -> rf.close()@ -> rf=new RandomAccessFile(file,"rw",)@ -> rf.setLength(3429185024L,)@ -> rf.write(0,)@ -> rf.close()@ -> rf=new RandomAccessFile(file,"rw",)@ -> rf.write('a',)@ -> rf.close()@ } CATCH(Exception) {}
results[https://github.com/RyosukeMiyahara/JAVA_TRAINING/blob/e8fadc3ec73b509745bbb298a9fbae2eac74a04e/JAVATRAINING_ROOT/JPL/ch20/ex20_08/ParsentParse.java][createParseTableFile][1] = -> TRY { -> input=new RandomAccessFile("JPL/ch20/ex20_08/test_input.txt","r",)@ -> output=new RandomAccessFile("JPL/ch20/ex20_08/test_output.txt","rw",)@ } CATCH(Exception) { -> System.out.println(e,)@ } -> TRY { -> LOOP { -> IF { -> output.write(Byte.valueOf(String.valueOf(input.getFilePointer(),),),)@(current=input.read())!=-1 } } } CATCH(Exception) { -> System.out.println(e,)@ } -> TRY { -> input.close()@ -> output.close()@ } CATCH(Exception) { -> System.out.println(e,)@ }
results[https://github.com/apache/httpcore/blob/aa003275e01090cc62f54e550c3d6b2e9f99118c/httpcore-nio/src/test/java/org/apache/http/impl/nio/codecs/TestIdentityDecoder.java][testDecodingFileWithOffsetAndBufferedSessionData][2] = -> TRY {  -> beginning=EncodingUtils.getAsciiBytes("beginning; ",)@ -> testfile=new RandomAccessFile(this.tmpfile,"rw",)@ -> TRY { -> testfile.write(beginning,)@ } FINALLY { -> testfile.close()@ } -> testfile=new RandomAccessFile(this.tmpfile,"rw",)@ -> TRY { -> fchannel=testfile.getChannel()@ -> LOOP { -> IF { -> testfile.setLength(pos,)@testfile.length()<pos } } -> Assert.assertEquals(testfile.length()-7-beginning.length,metrics.getBytesTransferred(),)@ } FINALLY { -> testfile.close()@ } } CATCH(Exception) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/545cb5012cfeafb13506fc1ac1e5e8d8f32a7df1/src/servers/src/org/xtreemfs/sandbox/tests/ReplicationStressTest/ReplicationStressTest.java][writeTmpFileToDisk][1] = -> TRY {  -> TRY { -> out=new java.io.RandomAccessFile(tmpDir+tmpFilename,"rw",)@ -> IF { -> data=generateData((int) filesize,)@filesize<=PART_SIZE -> out.write(data,)@ } ELSE { -> LOOP { -> data=generateData(PART_SIZE,)@out.getFilePointer()+PART_SIZE<filesize && !(filesize<=PART_SIZE) -> out.write(data,)@out.getFilePointer()+PART_SIZE<filesize } -> IF { -> data=generateData((int) filesize-out.getFilePointer(),)@out.getFilePointer()<filesize && !(filesize<=PART_SIZE) -> out.write(data,)@out.getFilePointer()<filesize } } } FINALLY { -> IF { -> out.close()@out!=null } } } CATCH(Exception) {}
results[https://github.com/motionbox/jmonkeyengine/blob/49bb819b1fb40224f776a1255b86f37cfe0e9a03/engine/src/desktop/com/jme3/app/state/MjpegFileWriter.java][finishAVI][2] = -> TRY {  -> fileSize=(int) aviFile.length()@ -> listSize=(int) fileSize-8-aviMovieOffset-indexlistBytes.length@ -> raf=new RandomAccessFile(aviFile,"rw",)@ -> raf.write(new RIFFHeader(fileSize,).toBytes(),)@ -> raf.write(new AVIMainHeader().toBytes(),)@ -> raf.write(new AVIStreamList().toBytes(),)@ -> raf.write(new AVIStreamHeader().toBytes(),)@ -> raf.write(new AVIStreamFormat().toBytes(),)@ -> raf.write(new AVIJunk().toBytes(),)@ -> raf.write(new AVIMovieList(listSize,).toBytes(),)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/sleepsort/lucene-solr/blob/cb3f7d3dda3cc8e115a30558084cc948bea632b8/solr/core/src/test/org/apache/solr/search/TestRecovery.java][testRecoveryMultipleLogs][5] = -> TRY {  -> TRY { -> raf=new RandomAccessFile(new File(logDir,fname,),"rw",)@ -> raf.seek(raf.length(),)@ -> raf.writeLong(0xffffffffffffffffL,)@ -> raf.writeChars("This should be appended to a good log file, representing a bad partially written record.",)@ -> raf.seek(0,)@ -> raf.readFully(content,)@ -> raf.close()@ -> findReplace("AAAAAA".getBytes("UTF-8",),"aaaaaa".getBytes("UTF-8",),content,)@ -> findReplace("BBBBBB".getBytes("UTF-8",),"bbbbbb".getBytes("UTF-8",),content,)@ -> findReplace("CCCCCC".getBytes("UTF-8",),"cccccc".getBytes("UTF-8",),content,)@ -> raf=new RandomAccessFile(new File(logDir,fname2,),"rw",)@ -> raf.write(content,)@ -> raf.close()@ } } CATCH(Exception) {}
results[https://github.com/acidrain42/misc/blob/88500e747b0a44bc4efd362a397e6e67c41e502d/mp3player/src/org/acidrain/id3/ID3v1.java][ecrireTag][1] = -> tag="TAG".getBytes()@ -> TRY { -> file=new RandomAccessFile(chanson,"rws",)@ -> IF { -> file.seek(file.length()-128,)@ } ELSE { -> file.seek(file.length(),)@ } -> titre=arrangerLongueur(this.titre,30,)@ -> artiste=arrangerLongueur(this.artiste,30,)@ -> album=arrangerLongueur(this.album,30,)@ -> annee=arrangerLongueur(this.annee,4,)@ -> commentaire=arrangerLongueur(this.commentaire,28,)@ -> piste[1]=(byte) this.piste@ -> genre[0]=(byte) this.genre@ -> file.write(tag,)@ -> file.write(titre,)@ -> file.write(artiste,)@ -> file.write(album,)@ -> file.write(annee,)@ -> file.write(commentaire,)@ -> file.write(piste,)@ -> file.write(genre,)@ -> file.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/rajivm/peerbox/blob/f41f9064a79250bb9bf392587f838ae27e83c7ac/src/org/peerbox/network/http/HttpResponseHandler.java][messageReceived][1] = -> TRY {  -> IF { -> IF { -> return @!(e.getMessage() instanceof HttpResponse) } -> IF { -> IF { -> content=response.getContent()@!(!(e.getMessage() instanceof HttpResponse)) && response.getStatus().getCode()==200 && !(response.isChunked()) -> IF { -> downloadFile.write(content.array(),)@!(!(e.getMessage() instanceof HttpResponse)) && content.readable() -> downloadFile.close()@!(!(e.getMessage() instanceof HttpResponse)) } } } } ELSE { -> chunk=(HttpChunk) e.getMessage()@ -> IF { -> downloadFile.close()@ } ELSE { -> downloadFile.write(chunk.getContent().array(),)@!(chunk.isLast()) } } } CATCH(Exception) {}
results[https://github.com/LSTS/neptus/blob/4d58343c2f0b754328d5bc72f465001d443238c5/plugins-dev/ipcam/pt/lsts/neptus/plugins/ipcam/MJPEGCreator.java][finishAVI][1] = -> TRY {  -> size=aviFile.length()@ -> NeptusLog.pub().info("<###>   adding file size ("+size+") to file",)@ -> raf=new RandomAccessFile(aviFile,"rw",)@ -> raf.seek(4,)@ -> raf.write(intBytes(swapInt((int) size-8,),),)@ -> raf.seek(aviMovieOffset+4,)@ -> raf.write(intBytes(swapInt((int) size-8-aviMovieOffset-indexlistBytes.length,),),)@ -> IF { -> NeptusLog.pub().info("<###>   adding frame count ("+numFrames+") to file",)@ -> raf.seek(48,)@ -> raf.write(intBytes(swapInt((int) numFrames,),),)@ -> raf.seek(140,)@ -> raf.write(intBytes(swapInt((int) numFrames,),),)@ } -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/ferquies/2dam/blob/3449ac78542b4597a76f1860dc4ce81472854e44/AD/Tema 2/h2/src/tools/org/h2/build/i18n/PropertiesToUTF8.java][convert][13] = -> TRY {  -> LOOP { -> IF { -> html=HtmlConverter.convertStringToHtml(utf8,)@ -> out=new RandomAccessFile("_"+name.substring(4,),"rw",)@name.startsWith("utf8",) -> out.write(html.getBytes(),)@ -> out.setLength(out.getFilePointer(),)@ -> out.close()@ } ELSE { -> utf8=HtmlConverter.convertHtmlToString(html,)@ -> out=new FileOutputStream("_utf8"+f.getName(),)@ -> w=new OutputStreamWriter(out,"UTF-8",)@ -> out.close()@ } -> java=StringUtils.javaEncode(utf8,)@ -> java=StringUtils.replaceAll(java,"\\r","\r",)@ -> java=StringUtils.replaceAll(java,"\\n","\n",)@ -> out=new RandomAccessFile("_java."+name,"rw",)@ -> out.write(java.getBytes(),)@ -> out.setLength(out.getFilePointer(),)@ -> out.close()@ } } CATCH(Exception) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/e848cab95ca6d8821dfe79364e2581b1c670bddd/servers/src/org/xtreemfs/sandbox/tests/ReplicationStressTest.java][writeTmpFileToDisk][1] = -> TRY {  -> TRY { -> out=new java.io.RandomAccessFile(tmpDir+tmpFilename,"rw",)@ -> IF { -> data=generateData((int) filesize,)@filesize<=PART_SIZE -> out.write(data,)@ } ELSE { -> LOOP { -> IF { -> data=generateData(PART_SIZE,)@!(filesize<=PART_SIZE) && part+PART_SIZE<filesize -> out.write(data,)@ } ELSE { -> out.seek(out.getFilePointer()+PART_SIZE,)@!(filesize<=PART_SIZE) && part+PART_SIZE<filesize } } -> IF { -> data=generateData((int) filesize-part,)@!(filesize<=PART_SIZE) && part<filesize -> out.write(data,)@ } } } FINALLY { -> IF { -> out.close()@out!=null } } } CATCH(Exception) {}
results[https://github.com/crissii/water-esb-new/blob/026f654d5ac5917a70b779b012b807ea9702a550/modules/transport/src/main/java/com/sunsharing/transport/exchage/protocol/FileSend.java][createEmptyFile][1] = -> TRY { -> raf=new RandomAccessFile(filePath+fileName,"rw",)@ -> raf.setLength(fileLen,)@ } CATCH(Exception) { -> logger.error("",e,)@ } FINALLY { -> TRY { -> raf.close()@ } } -> TRY { -> raf=new RandomAccessFile(filePath+fileName+".log","rw",)@ -> raf.setLength(beginFileSize+pakage,)@ -> raf.seek(0,)@ -> StringUtils.putString(bytes,this.fileName,0,)@ -> StringUtils.putString(bytes,this.filePath,100,)@ -> StringUtils.putInt(bytes,pakage,300,)@ -> StringUtils.putLong(bytes,fileLen,304,)@ -> StringUtils.putString(bytes,lastmodify,312,)@ -> StringUtils.putString(bytes,retryIp+":"+retryPort,326,)@ -> raf.write(bytes,)@ -> raf.close()@ } CATCH(Exception) { -> logger.error("",e,)@ } FINALLY { -> TRY { -> raf.close()@ } }
results[https://github.com/dkomanov/fizteh-java-2013/blob/24181fc416b2c251dfd1ffe7b1891f09204b52cb/src/ru/fizteh/fivt/students/dmitryIvanovsky/fileMap/FileMap.java][closeTableFile][1] = -> TRY {  -> IF { -> return @curMap==null||curMap.isEmpty() } -> TRY { -> dbFile=new RandomAccessFile(randomFile,"rw",)@!(curMap==null||curMap.isEmpty()) -> dbFile.setLength(0,)@!(curMap==null||curMap.isEmpty()) -> dbFile.seek(0,)@!(curMap==null||curMap.isEmpty()) -> LOOP { -> dbFile.write(key.getBytes(StandardCharsets.UTF_8,),)@!(curMap==null||curMap.isEmpty()) -> dbFile.writeByte(0,)@!(curMap==null||curMap.isEmpty()) -> dbFile.writeInt(len,)@!(curMap==null||curMap.isEmpty()) -> point=dbFile.getFilePointer()@!(curMap==null||curMap.isEmpty()) -> dbFile.seek(len,)@!(curMap==null||curMap.isEmpty()) -> value=parent.serialize(this,valueStoreable,)@!(curMap==null||curMap.isEmpty()) -> dbFile.write(value.getBytes(StandardCharsets.UTF_8,),)@!(curMap==null||curMap.isEmpty()) -> len+=value.getBytes(StandardCharsets.UTF_8,).length@!(curMap==null||curMap.isEmpty()) -> dbFile.seek(point,)@!(curMap==null||curMap.isEmpty()) } } FINALLY { -> TRY { -> dbFile.close()@!(curMap==null||curMap.isEmpty()) } FINALLY { -> IF { -> error.addSuppressed(e,)@error!=null && !(curMap==null||curMap.isEmpty()) } } } } CATCH(Exception) {}
results[https://github.com/acidrain42/misc/blob/77a4a749cb62bc8e2d409bcb2093002a2df1a7d3/mp3player/src/org/acidrain/id3/ID3v2.java][ecrireTag][1] = -> LOOP { -> IF { -> donnees[noFrame]=createFrame(key,infosPrincipales.get(key,),)@!(infosPrincipales.get(key,).equals("",)) } } -> header[3]=(byte) 4@ -> header[4]=(byte) 0@ -> header[5]=(byte) 0@ -> header[6]=(byte) tagSize>>21&0x7F@ -> header[7]=(byte) tagSize>>14&0x7F@ -> header[8]=(byte) tagSize>>7&0x7F@ -> header[9]=(byte) tagSize&0x7F@ -> TRY { -> IF { -> file=new RandomAccessFile(chanson,"rws",)@ -> file.write(header,)@ -> LOOP { -> file.write(donnees[i][0],)@i<nbFrames -> file.write(donnees[i][1],)@i<nbFrames } -> LOOP { -> file.write(buffer,)@ } -> file.close()@ } ELSE { -> fos.write(header,)@ -> LOOP { -> fos.write(donnees[i][0],)@i<nbFrames -> fos.write(donnees[i][1],)@i<nbFrames } -> LOOP { -> fos.write(buffer,)@ } -> LOOP { -> fos.write(buffer,)@fis.read(buffer,)>0 } } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/mendhak/gpslogger/blob/51a691a8d68188ed818ce89bbf4bbcb46de32188/GPSLogger/src/com/mendhak/gpslogger/loggers/Kml22FileLogger.java][run][1] = -> TRY { -> IF { -> raf=new RandomAccessFile(kmlFile,"rw",)@ -> raf.seek(kmlFile.length()-18,)@ -> raf.write(placemarkHead+placemarkTail.getBytes(),)@ -> raf.close()@ } -> coords=new StringBuilder()@ -> coords.append("\n<when>",)@ -> coords.append(dateTimeString,)@ -> coords.append("</when>\n<gx:coord>",)@ -> coords.append(String.valueOf(loc.getLongitude(),),)@ -> coords.append(" ",)@ -> coords.append(String.valueOf(loc.getLatitude(),),)@ -> coords.append(" ",)@ -> coords.append(String.valueOf(loc.getAltitude(),),)@ -> coords.append("</gx:coord>\n",)@ -> coords.append(placemarkTail,)@ -> raf=new RandomAccessFile(kmlFile,"rw",)@ -> raf.seek(kmlFile.length()-42,)@ -> raf.write(coords.toString().getBytes(),)@ -> raf.close()@ } CATCH(Exception) { -> Utilities.LogError("Kml22FileLogger.Write",e,)@ }
results[https://github.com/mendhak/gpslogger/blob/51a691a8d68188ed818ce89bbf4bbcb46de32188/GPSLogger/src/com/mendhak/gpslogger/loggers/Kml22FileLogger.java][run][1] = -> IF { -> return @!(kmlFile.exists()) } -> TRY { -> descriptionNode=new StringBuilder()@!(!(kmlFile.exists())) -> descriptionNode.append("<Placemark><name>",)@!(!(kmlFile.exists())) -> descriptionNode.append(description,)@!(!(kmlFile.exists())) -> descriptionNode.append("</name><Point><coordinates>",)@!(!(kmlFile.exists())) -> descriptionNode.append(String.valueOf(loc.getLongitude(),),)@!(!(kmlFile.exists())) -> descriptionNode.append(",",)@!(!(kmlFile.exists())) -> descriptionNode.append(String.valueOf(loc.getLatitude(),),)@!(!(kmlFile.exists())) -> descriptionNode.append(",",)@!(!(kmlFile.exists())) -> descriptionNode.append(String.valueOf(loc.getAltitude(),),)@!(!(kmlFile.exists())) -> descriptionNode.append("</coordinates></Point></Placemark>\n",)@!(!(kmlFile.exists())) -> restOfFile=new StringBuilder()@!(!(kmlFile.exists())) -> LOOP { -> IF { -> restOfFile.append(currentLine,)@!(!(kmlFile.exists())) && (currentLine=bf.readLine())!=null -> restOfFile.append("\n",)@!(!(kmlFile.exists())) } } -> raf=new RandomAccessFile(kmlFile,"rw",)@!(!(kmlFile.exists())) -> raf.seek(255,)@!(!(kmlFile.exists())) -> raf.write(descriptionNode.toString().getBytes(),)@!(!(kmlFile.exists())) -> raf.write(restOfFile.toString().getBytes(),)@!(!(kmlFile.exists())) -> raf.close()@!(!(kmlFile.exists())) } CATCH(Exception) { -> Utilities.LogError("Kml22FileLogger.Annotate",e,)@!(!(kmlFile.exists())) }
results[https://github.com/silid/project-x-cvs/blob/0d0af55356ebfa4205f1ed8ada2230d41172a701/src/net/sourceforge/dvb/projectx/thirdparty/TS.java][finishTF5X00header][1] = -> TRY { -> ts=new RandomAccessFile(name,"rw",)@ -> ts.seek(0x08,)@ -> ts.writeShort(minutes,)@ -> IF { -> ts.seek(0x1C,)@ -> ts.write(service_name,)@service_name!=null } -> ts.seek(0x42+event_info_offset,)@ -> ts.writeShort(minutes,)@ -> ts.seek(0x4C+event_info_offset,)@ -> ts.writeShort((short) event[2],)@ -> ts.writeByte((byte) datum.get(Calendar.HOUR_OF_DAY,),)@ -> ts.writeByte((byte) datum.get(Calendar.MINUTE,),)@ -> ts.seek(0x48+event_info_offset,)@ -> ts.writeShort((short) event[3],)@ -> ts.writeByte((byte) datum.get(Calendar.HOUR_OF_DAY,),)@ -> ts.writeByte((byte) datum.get(Calendar.MINUTE,),)@ -> IF { -> ts.seek(0x51+event_info_offset,)@ -> ts.write(event_name,)@event_name!=null } ELSE { -> ts.seek(0x51+event_info_offset,)@ -> ts.writeUTF(eventname,)@ -> ts.seek(0x52+event_info_offset,)@ -> val=ts.read()@ -> ts.seek(0x51+event_info_offset,)@ -> ts.writeShort(val<<8,)@ } -> IF { -> ts.seek(0xE0+event_info_offset,)@ -> ts.write(event_text,)@event_text!=null } -> ts.close()@ } CATCH(Exception) { -> Common.setExceptionMessage(e,)@ }
results[https://github.com/crissii/water-esb-new/blob/300201139e5b58e682455f55cc92c4721e835e06/modules/messagecenter/src/main/java/com/sunsharing/msgcenter/db/DBUtils.java][updateSendOrConsume][1] = -> TRY { -> IF { -> send=newMsg.addSend(appId,)@ } ELSE { -> send=newMsg.addConsumer(appId,)@ } -> content=newMsg.genneral()@ -> IF { -> return @send.getBytes().length>100 } -> TRY { -> raf1=new RandomAccessFile(new File(path,),"rw",)@!(send.getBytes().length>100) -> IF { -> raf1.seek(newMsg.getStartIndex()+176,)@!(send.getBytes().length>100) } ELSE { -> raf1.seek(newMsg.getStartIndex()+76,)@!(send.getBytes().length>100) } -> raf1.write(send.getBytes(),)@!(send.getBytes().length>100) -> raf1.seek(newMsg.getStartIndex()+newMsg.getSaveLen()-8,)@!(send.getBytes().length>100) -> raf1.write(content,content.length-8,8,)@!(send.getBytes().length>100) } CATCH(Exception) { -> logger.error("写消息文件出错",e,)@!(send.getBytes().length>100) } FINALLY { -> TRY { -> raf1.close()@!(send.getBytes().length>100) } } } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> writeLock.unlock()@ }
results[https://github.com/crissii/water-esb-new/blob/0b0c1276dff75debf6cbb07bdf250384821f38c4/modules/transport/src/main/java/com/sunsharing/transport/exchage/FileChunckDecode.java][decode][1] = -> TRY {  -> pro=ProFatory.createPro(buffer,)@ -> IF { -> raf=new RandomAccessFile(path+fs.getServerTempFileName(),"rw",)@pro instanceof FilePakageSave -> raf.seek(fs.getFromIndex(),)@pro instanceof FilePakageSave } } ELSE { -> currentChunkSize=(FilePakageSave) pro.getToIndex()-(FilePakageSave) pro.getFromIndex()@!(buffer.readable()) -> maxCanRead=buffer.readableBytes()@!(!(buffer.readable())) -> currentChunkSize=Math.min(maxCanRead,currentChunkSize,)@!(buffer.readable()) -> TRY { -> raf.write(buffer.readBytes((int) currentChunkSize,).array(),)@!(!(buffer.readable())) -> fs.increate(currentChunkSize,)@!(buffer.readable()) } CATCH(Exception) { -> logger.error("接收错误",e,)@!(buffer.readable()) -> throw new RuntimeException("接收文件包出错",)@!(!(buffer.readable())) } -> IF { -> raf.close()@!(buffer.readable()) && !(fs.isLast()) -> TRY { -> md5=FileMd5.getFileMD5String(new File(path+(FilePakageSave) pro.getServerTempFileName(),),(FilePakageSave) pro.getFromIndex(),currentChunkSize,)@!(buffer.readable()) && !(fs.isLast()) -> IF { -> throw new RuntimeException("校验MD5出错,文件名:"+(FilePakageSave) pro.getFileName()+",包序号:"+(FilePakageSave) pro.getCurrentPakage(),)@!(!(buffer.readable())) && !(md5.equals((FilePakageSave) pro.getMd5(),)) && fs.isLast() } -> return reset(pro,)@!(!(buffer.readable())) && fs.isLast() && !(!(md5.equals((FilePakageSave) pro.getMd5(),))) } CATCH(Exception) { -> logger.error(e.getMessage(),e,)@!(buffer.readable()) && !(fs.isLast()) -> return null@!(!(buffer.readable())) && fs.isLast() } } } CATCH(Exception) {}
results[https://github.com/dkomanov/fizteh-java-2013/blob/bfc80eb74b06b37097db5b8153dd802d2c2b4237/src/ru/fizteh/fivt/students/mikhaylova_daria/db/FileMap.java][writeFile][1] = -> TRY {  -> TRY { -> TRY { -> fileDataBase=new RandomAccessFile(file,"rw",)@ -> fileDataBase.setLength(0,)@ -> offset=fileDataBase.getFilePointer()@ -> LOOP { -> fileDataBase.write(key.getBytes("UTF8",),)@ -> fileDataBase.write("\0".getBytes(),)@ -> offset=fileDataBase.getFilePointer()@ -> fileDataBase.seek(fileDataBase.getFilePointer()+4,)@ -> currentOffsetOfValue=fileDataBase.getFilePointer()@ } -> LOOP { -> value=table.manager.serialize(table,fileMapInitial.get(key,),)@fileMapInitial.keySet() -> fileDataBase.write(value.getBytes("UTF8",),)@ -> currentPosition=fileDataBase.getFilePointer()@ -> currentOffsetOfValue=currentPosition-value.getBytes("UTF8",).length@ -> fileDataBase.seek(offsets.get(key,),)@ -> fileDataBase.writeInt(lastOffsetInt,)@ -> fileDataBase.seek(currentPosition,)@ } } FINALLY { -> TRY { -> IF { -> fileDataBase.close()@fileDataBase!=null } } FINALLY { -> IF { -> e.addSuppressed(th,)@e!=null } } } -> myWriteLock.unlock()@ } } CATCH(Exception) {}
results[https://github.com/agueganno/h2geometry/blob/9c3fcfffdb4dbd9c65267839c27ada28d5c176db/h2/src/test/org/h2/test/unit/TestFileSystem.java][testRandomAccess][4] = -> TRY {  -> ra=new RandomAccessFile(file,"rw",)@ -> TRY { -> LOOP { -> pos=(int) Math.min(pos,ra.length(),)@ -> ra.seek(pos,)@ -> random.nextBytes(buffer,)@ -> f.write(ByteBuffer.wrap(buffer,),)@ -> ra.write(buffer,0,buffer.length,)@ -> IF { -> ra.setLength(pos,)@pos<ra.length() } -> assertEquals(ra.getFilePointer(),f.position(),)@ -> len=(int) Math.min(len,ra.length()-ra.getFilePointer(),)@ -> ra.readFully(b1,0,len,)@ -> assertEquals(ra.getFilePointer(),f.position(),)@ -> trace("length "+ra.length(),)@ -> buff.append("length "+ra.length()+"\n",)@ -> assertEquals(ra.length(),f.size(),)@ -> ra.close()@ -> ra=new RandomAccessFile(file,"rw",)@ -> assertEquals(ra.length(),f.size(),)@ } } CATCH(Throwable) { -> e.printStackTrace()@ -> fail("Exception: "+e+"\n"+buff.toString(),)@ } FINALLY { -> f.close()@ -> ra.close()@ -> file.delete()@ -> FileUtils.delete(s,)@ } } CATCH(Exception) {}
results[https://github.com/apache/jackrabbit-oak/blob/76796cc3e097b6cf5214fe0618448a7b672656f3/oak-core/src/test/java/org/apache/jackrabbit/mk/fs/FileSystemTest.java][testRandomAccess][1] = -> TRY {  -> ra=new RandomAccessFile(file,"rw",)@ -> TRY { -> LOOP { -> pos=(int) Math.min(pos,ra.length(),)@ -> ra.seek(pos,)@ -> random.nextBytes(buffer,)@ -> f.write(ByteBuffer.wrap(buffer,),)@ -> ra.write(buffer,0,buffer.length,)@ -> IF { -> ra.setLength(pos,)@pos<ra.length() } -> assertEquals("truncate "+pos,ra.getFilePointer(),f.position(),)@ -> len=(int) Math.min(len,ra.length()-ra.getFilePointer(),)@ -> ra.readFully(b1,0,len,)@ -> trace("getFilePointer "+ra.getFilePointer(),)@ -> buff.append("getFilePointer "+ra.getFilePointer()+"\n",)@ -> assertEquals(ra.getFilePointer(),f.position(),)@ -> trace("length "+ra.length(),)@ -> buff.append("length "+ra.length()+"\n",)@ -> assertEquals(ra.length(),f.size(),)@ -> ra.close()@ -> ra=new RandomAccessFile(file,"rw",)@ -> assertEquals(ra.length(),f.size(),)@ } } CATCH(Throwable) { -> e.printStackTrace()@ -> fail("Exception: "+e+"\n"+buff.toString(),)@ } FINALLY { -> f.close()@ -> ra.close()@ -> file.delete()@ -> FileUtils.delete(s,)@ } } CATCH(Exception) {}
results[https://github.com/silid/project-x-cvs/blob/8d747133aa7330e7f410061cbe621ee8b9f85371/src/net/sourceforge/dvb/projectx/parser/StreamProcessAudio.java][fillWaveHeader][1] = -> TRY { } ELSE { } ELSE { -> IF { -> rifffile=new RandomAccessFile(FileName_Ch1,"rw",)new RandomAccessFile(FileName_Ch2,"rw",)@ -> audio.setExtraWaveLength(rifffile[0].length(),tmp_value,1,)@ -> audio.setExtraWaveLength(rifffile[1].length(),tmp_value,2,)@ -> rifffile[0].seek(0,)@ -> rifffile[1].seek(0,)@ -> rifffile[0].write(audio.getExtraWaveHeader(1,false,),)@ -> IF { -> rifffile[1].write(audio.getExtraWaveHeader(2,false,),)@ } -> rifffile[0].close()@ -> rifffile[1].close()@ } ELSE { -> IF { -> rifffile=new RandomAccessFile(FileName_Ch1,"rw",)@ -> audio.setExtraWaveLength(rifffile.length(),tmp_value,1,)@ -> rifffile.seek(0,)@ -> rifffile.write(audio.getExtraWaveHeader(1,false,),)@ -> rifffile.close()@ } ELSE { -> IF { -> audio.fillRiffHeader(FileName_Ch1,)@ } ELSE { -> IF { -> audio.fillStdRiffHeader(FileName_Ch1,tmp_value,)@ } ELSE { -> IF { -> audio.fillStdRiffHeader(FileName_Ch1,tmp_value,)@ } } } } } } CATCH(Exception) { -> Common.setExceptionMessage(e,)@ }
results[https://github.com/androidarmv6/android_bionic/blob/a22eaf5ddc389a6366abe51f460ad09e9897c5a0/libc/tools/zoneinfo/ZoneCompactor.java][<init>][23] = -> TRY {  -> allData=new ByteArrayOutputStream()@ -> LOOP { } ELSE { -> IF { -> data=copyFile(sourceFile,allData,)@ } } -> f=new RandomAccessFile(new File(outputDirectory,"tzdata",),"rw",)@ -> f.setLength(0,)@ -> f.write(toAscii( new byte[],version,),)@ -> index_offset_offset=(int) f.getFilePointer()@ -> f.writeInt(0,)@ -> data_offset_offset=(int) f.getFilePointer()@ -> f.writeInt(0,)@ -> zonetab_offset_offset=(int) f.getFilePointer()@ -> f.writeInt(0,)@ -> index_offset=(int) f.getFilePointer()@ -> LOOP { -> zoneName=it.next()@it.hasNext() -> IF { -> throw new RuntimeException("zone filename too long: "+zoneName.length(),)@it.hasNext() && zoneName.length()>=MAXNAME } -> f.write(toAscii( new byte[],zoneName,),)@!(zoneName.length()>=MAXNAME) && !(it.hasNext()) -> f.writeInt(starts.get(zoneName,),)@!(zoneName.length()>=MAXNAME) && !(it.hasNext()) -> f.writeInt(lengths.get(zoneName,),)@!(zoneName.length()>=MAXNAME) && !(it.hasNext()) -> f.writeInt(offsets.get(zoneName,),)@!(zoneName.length()>=MAXNAME) && !(it.hasNext()) } -> data_offset=(int) f.getFilePointer()@!(it.hasNext()) -> f.write(allData.toByteArray(),)@!(it.hasNext()) -> zonetab_offset=(int) f.getFilePointer()@!(it.hasNext()) -> LOOP { -> IF { -> f.writeBytes(s,)@!(it.hasNext()) && !(s.startsWith("#",)) && (s=reader.readLine())!=null -> f.write('\n',)@!(it.hasNext()) } } -> f.seek(index_offset_offset,)@!(it.hasNext()) -> f.writeInt(index_offset,)@!(it.hasNext()) -> f.seek(data_offset_offset,)@!(it.hasNext()) -> f.writeInt(data_offset,)@!(it.hasNext()) -> f.seek(zonetab_offset_offset,)@!(it.hasNext()) -> f.writeInt(zonetab_offset,)@!(it.hasNext()) -> f.close()@!(it.hasNext()) } CATCH(Exception) {}
