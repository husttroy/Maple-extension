results[https://github.com/dukeboard/kevoree-extra/blob/2f6312dfc5b28f7d8e86d175168a94784238b867/org.kevoree.extra.freePastry/src/main/java/org/mpisws/p2p/filetransfer/FileTransferImpl.java][doWork][1] = -> TRY {  -> file.write(writeMe,)@ } CATCH(Exception) {}
results[https://github.com/uvalbbu/dalvik_test/blob/e8c1e814814d5a97b0ded2de31d350928182dec5/luni/src/test/java/tests/api/java/io/FileTest.java][test_length][14] = -> TRY {  -> raf=new RandomAccessFile(f,"rwd",)@ -> raf.write(0x41,)@ } CATCH(Exception) {}
results[https://github.com/olanto/MYCAT/blob/5dc5e6c732963894f519ce37837be54b15cf2a76/prog/coreidx/src/org/olanto/idxvli/util/BytesAndFiles.java][writeBytes][1] = -> TRY { -> r.seek(pos,)@ -> r.write(b,)@ } CATCH(Exception) { -> error("IO error instoreNBytes",e,)@ }
results[https://github.com/pbeaman/persistit/blob/10b259d3c0b72a7c5882268df9128b9cdf51d5a4/src/test/java/com/persistit/VolumeTest.java][testCreateOpenVolume][1] = -> TRY {  -> raf=new RandomAccessFile(file,"rw",)@ -> raf.write( new byte[],)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/mammadori/dbpedia/blob/620a509cd2e04dfb8aa896aab719d2f2774e5236/live/src/main/java/org/dbpedia/extraction/live/util/collections/PersistentQueue.java][push][1] = -> TRY {  -> data=baos.toByteArray()@ -> file.seek(endIndex,)@ -> file.writeInt(data.length,)@ -> file.write(data,)@ } CATCH(Exception) {}
results[https://github.com/cmeiklejohn/flume-ng/blob/7a6e3db005dfc7848eeb62b6e66b91dc00a7f726/flume-ng-channels/flume-file-channel/src/test/java/org/apache/flume/channel/file/TestFileChannelRestart.java][doTestCorruptInflights][2] = -> TRY {  -> writer=new RandomAccessFile(inflight,"rw",)@ -> writer.write(new Random().nextInt(),)@ -> writer.close()@ } CATCH(Exception) {}
results[https://github.com/ntietz/virtualdisk/blob/061bcb45ac6ccda6e3ab82c1ea5e28f2998d71fb/src/edu/kent/cs/virtualdisk/datanode/Drive.java][write][1] = -> TRY { -> out=new RandomAccessFile(f,"rw",)@ -> out.seek(physicalOffset*blockSize,)@ -> out.write(block,)@ -> out.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/vizanto/caffeine-hx/blob/09c2b5b2dac7635b3e334bf22c85f807eab2f631/projects/memedb/src/java/memedb/state/FileSystemState.java][deleteDatabase][12] = -> TRY { -> i=dataFile.getFilePointer()@ -> baos=new ByteArrayOutputStream()@ -> dos=new DataOutputStream(baos,)@ -> dataFile.write(baos.toByteArray(),)@ } CATCH(Exception) { -> throw new RuntimeException("FileSystemState.deleteDocument",)@ }
results[https://github.com/angusmacdonald/h2o/blob/d526c604cf8fa3349a5839da4d2990f767e5607c/src/test/org/h2/test/db/TestCsv.java][testNull][1] = -> TRY {  -> file=new RandomAccessFile(f,"rw",)@ -> file.write(csvContent.getBytes("UTF-8",),)@ -> file.close()@ -> assertEquals(csvContent+"\\N",data.trim(),)@ } CATCH(Exception) {}
results[https://github.com/cmeiklejohn/flume-ng/blob/7a6e3db005dfc7848eeb62b6e66b91dc00a7f726/flume-ng-channels/flume-file-channel/src/test/java/org/apache/flume/channel/file/TestFileChannelRestart.java][testCorruptCheckpointVersionMostSignificant4Bytes][2] = -> TRY {  -> writer=new RandomAccessFile(checkpoint,"rw",)@ -> writer.seek(EventQueueBackingStoreFile.INDEX_VERSION*Serialization.SIZE_OF_LONG,)@ -> writer.write( new byte[],)@ -> writer.getFD().sync()@ -> writer.close()@ } CATCH(Exception) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/io/FileDescriptor/Finalize.java][doRandomAccessFile][3] = -> TRY {  -> raf=new RandomAccessFile(inFile,"r",)@ -> fd=raf.getFD()@ -> raf.close()@ -> raf=new RandomAccessFile(outFile,"rw",)@ -> fd=raf.getFD()@ -> raf.write(data,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/squirrely/arinc_838/blob/6ddac2c8ccfb523cf469bf7702d80d654efd0ee7/src/main/java/edu/cmu/sv/arinc838/writer/XdfWriter.java][write][1] = -> TRY {  -> randAccessFile=new RandomAccessFile(file,"rw",)@ -> randAccessFile.readFully(contents,)@ -> randAccessFile.seek(0,)@ -> randAccessFile.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n".getBytes(),)@ -> randAccessFile.write(contents,)@ -> randAccessFile.close()@ } CATCH(Exception) {}
results[https://github.com/unidevel/android/blob/6429d3139f76f08bf17fe8529e0a9f3718b0c800/MiBoxServer/src/com/unidevel/mibox/server/handler/SendFileHandler.java][handleRequest][1] = -> TRY { -> f=new RandomAccessFile(file,"rw",)@ -> IF { -> f.seek(request.offset,)@ } -> f.write(request.block,)@ -> f.close()@ } CATCH(Exception) { -> result.failedMessage=e.getMessage()@ }
results[https://github.com/mendhak/gpslogger/blob/9a4155fd518d43adadd6155850d7816ebdbd3ae8/GPSLogger/src/com/mendhak/gpslogger/loggers/Gpx10FileLogger.java][run][1] = -> TRY { -> trackPoint=GetTrackPointXml(loc,dateTimeString,)@ -> raf=new RandomAccessFile(gpxFile,"rw",)@ -> raf.seek(startPosition,)@ -> raf.write(trackPoint.getBytes(),)@ -> raf.close()@ } CATCH(Exception) { -> Utilities.LogError("Gpx10FileLogger.Write",e,)@ }
results[https://github.com/olanto/MYCAT/blob/3156955fe4b628406620d63b65cfa837041b387a/prog/coreidx/src/org/olanto/idxvli/util/StringTable_HomeHash_OnDisk.java][initFirstTime][1] = -> TRY { -> intTobyte(initblock,initblock.length*4,b,)@ -> hdoc.seek(0,)@ -> LOOP { -> hdoc.write(b,)@ } } CATCH(Exception) { -> error("IO error in initFirstTime()",e,)@ }
results[https://github.com/bitronix/btm/blob/c8f9d2e94e02a4a5acf7b73314d72bbd22494f0f/test/bitronix/tm/journal/DiskForceTest.java][testRandomAccessFile][4] = -> TRY {  -> raf=new RandomAccessFile("test.dat","rw",)@ -> LOOP { -> raf.write(buffer,)@ -> raf.seek(0L,)@ -> raf.getFD().sync()@ } -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/olanto/MYCAT/blob/5dc5e6c732963894f519ce37837be54b15cf2a76/prog/coreidx/src/org/olanto/idxvli/util/BytesAndFiles.java][writeString][1] = -> bw=convertString2Bytes(w,encode,)@ -> IF { -> writeString("!",pos,encode,maxLengthString,r,)@bw.length>maxLengthString -> return STATUS_ERROR@bw.length>maxLengthString } -> TRY { -> r.seek(pos,)@!(bw.length>maxLengthString) -> r.writeInt(bw.length,)@!(bw.length>maxLengthString) -> r.write(bw,)@!(bw.length>maxLengthString) } CATCH(Exception) { -> error("IO error writeString",e,)@!(bw.length>maxLengthString) }
results[https://github.com/jbosstm/narayana/blob/bc9a3668c4ed6e8c52f6b2c3d4596e115c12ccf8/qa/tests/src/org/jboss/jbossts/qa/PerfProfileIOClients/OpenWriteSyncClose.java][main][1] = -> TRY { -> LOOP { -> randomAccessFile=new RandomAccessFile(file,"rw",)@ -> fileDescriptor=randomAccessFile.getFD()@ -> randomAccessFile.write(block,)@ -> randomAccessFile.close()@ } } CATCH(Exception) { -> System.err.println("OpenWriteSyncClose.main: "+exception,)@ -> System.out.println("Failed",)@ }
results[https://github.com/jbosstm/narayana/blob/bc9a3668c4ed6e8c52f6b2c3d4596e115c12ccf8/qa/tests/src/org/jboss/jbossts/qa/PerfProfileIOClients/WriteSync.java][main][1] = -> TRY { -> randomAccessFile=new RandomAccessFile(file,"rw",)@ -> fileDescriptor=randomAccessFile.getFD()@ -> LOOP { -> randomAccessFile.write(block,)@ } -> randomAccessFile.close()@ } CATCH(Exception) { -> System.err.println("WriteSync.main: "+exception,)@ -> System.out.println("Failed",)@ }
results[https://github.com/h4ck3rm1k3/josm-older/blob/ef68e88d161f6fff0db41914a5d3996dff6a0a4c/src/org/openstreetmap/josm/io/CacheFiles.java][saveData][1] = -> TRY { -> f=getPath(ident,)@ -> IF { -> f.delete()@f.exists() } -> new RandomAccessFile(f,"rws",).write(data,)@ } CATCH(Exception) { -> System.out.println(e.getMessage(),)@ }
results[https://github.com/reppie/xchange/blob/7807f15f1bf440b9dc7081d30011d86f81737509/projects/xchange/xchange/XStorageServer.java][transferBlock][1] = -> TRY {  -> raf=new RandomAccessFile(new File("xchange/shared/"+fileName+".!xch",),"rw",)@ -> LOOP { -> temp=inputStream.read(buffer,offset,currentBlockSize-offset,)@offset<currentBlockSize&&temp!=-1&&blockNr!=maxBlockNumber+1 } -> raf.seek(currentBlockSize*blockNr,)@ -> raf.write(buffer,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/zhoulzhou/IPCPlayer/blob/ccacfcc74df9cb2a338a39ea7bde0e991d9bbe50/src/com/example/ipcplayer/activity/FileActivity.java][write][1] = -> TRY { -> IF { -> raf=new RandomAccessFile(targetFile,"rw",)@ -> raf.seek(targetFile.length(),)@ -> raf.write(content.getBytes(),)@ -> raf.close()@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/YongJiang/org.eclipse.birt.engine/blob/2b34d30e3b98aa443ae8478138a77951d5bbb6c0/tests/org.eclipse.birt.report.engine.tests/test/org/eclipse/birt/report/engine/ir/EngineIRReaderTest.java][writeGolden][1] = -> TRY {  -> out=new ByteArrayOutputStream()@ -> new EngineIRWriter().write(out,report,)@ -> out.close()@ -> IF { -> rf=new RandomAccessFile(file,"rw",)@!(file.exists()) -> rf.write(out.toByteArray(),)@ } } CATCH(Exception) {}
results[https://github.com/jbosstm/narayana/blob/bc9a3668c4ed6e8c52f6b2c3d4596e115c12ccf8/qa/tests/src/org/jboss/jbossts/qa/PerfProfileIOClients/WriteSyncSeek.java][main][1] = -> TRY { -> randomAccessFile=new RandomAccessFile(file,"rw",)@ -> fileDescriptor=randomAccessFile.getFD()@ -> LOOP { -> randomAccessFile.write(block,)@ -> randomAccessFile.seek(0,)@ } -> randomAccessFile.close()@ } CATCH(Exception) { -> System.err.println("WriteSyncSeek.main: "+exception,)@ -> System.out.println("Failed",)@ }
results[https://github.com/kambatla/hadoop-1/blob/54aaa5f358494a5fb4166d254d8a823bf8a9bc15/src/test/org/apache/hadoop/dfs/TestFsck.java][testCorruptBlock][2] = -> TRY {  -> LOOP { -> IF { -> raFile=new RandomAccessFile(blockFile,"rw",)@blockFile.exists() -> channel=raFile.getChannel()@ -> raFile.seek(rand,)@ -> raFile.write(badString.getBytes(),)@ -> raFile.close()@ } } } CATCH(Exception) {}
results[https://github.com/benschi11/Alt_F4/blob/568ce9cfa1ef6ec36a888acfed52dcdd2cd0c15f/expleo/app/models/Helper.java][copy][2] = -> TRY {  -> datei=new RandomAccessFile(source.getAbsolutePath(),"r",)@ -> neudatei=new RandomAccessFile(dest.getAbsolutePath(),"rw",)@ -> LOOP { -> neudatei.write(datei.read(),)@neudatei.length()<datei.length() } -> datei.close()@ -> neudatei.close()@ } CATCH(Exception) {}
results[https://github.com/cmeiklejohn/flume-ng/blob/c57ebd1d2296fd1c0c8f84eecb16799de2a73e35/flume-ng-channels/flume-file-channel/src/test/java/org/apache/flume/channel/file/TestLogFile.java][testOperationRecordUpdater][1] = -> TRY {  -> tempFile=new RandomAccessFile(temp,"rw",)@ -> LOOP { -> tempFile.write(LogFile.OP_RECORD,)@ } -> tempFile.seek(0,)@ -> tempFile.seek(0,)@ -> LOOP { -> tempFile.seek(i,)@i<5000 -> Assert.assertEquals(LogFile.OP_NOOP,tempFile.readByte(),)@ } } CATCH(Exception) {}
results[https://github.com/asascience/THREDDS/blob/c776d816ad599ceb460e316f7f9e1c522afde02d/grib/src/test/java/ucar/nc2/iosp/grib/TestIndexUpdating.java][gribAppend][2] = -> TRY { -> input.read(extra,)@ -> output=new RandomAccessFile(dataFile.getPath(),"rw",)@ -> output.seek(output.length(),)@ -> output.write(extra,)@ -> output.close()@ } CATCH(Exception) { -> fail("Failed to add file ["+input.getLocation()+"] to  file ["+dataFile.getPath()+"]: "+e.getMessage(),)@ }
results[https://github.com/madiator/HadoopUSC/blob/205614a2a9393d036ef68387b707680bb053cc1d/trunk/src/test/org/apache/hadoop/hdfs/MiniDFSCluster.java][corruptBlockOnDataNode][28] = -> TRY {  -> IF { -> return false@i<0||i>=dataNodes.size() } -> LOOP { -> IF { -> raFile=new RandomAccessFile(blockFile,"rw",)@!(i<0||i>=dataNodes.size()) && blockFile.exists() -> channel=raFile.getChannel()@!(i<0||i>=dataNodes.size()) -> raFile.seek(rand,)@!(i<0||i>=dataNodes.size()) -> raFile.write(badString.getBytes(),)@!(i<0||i>=dataNodes.size()) -> raFile.close()@!(i<0||i>=dataNodes.size()) } } } CATCH(Exception) {}
results[https://github.com/nickman/jzab/blob/c88d9b13e40a99a2331adda5fb54c9fe754621ee/agent/src/main/java/org/helios/jzab/agent/net/active/collection/FileActiveCollectionStream.java][rewritePayloadLength][1] = -> TRY { -> raf=new RandomAccessFile(tmpFile,"rw",)@ -> raf.seek(lengthPosition,)@ -> raf.write(encodeLittleEndianLongBytes(byteCount,),)@ } CATCH(Exception) { -> throw new RuntimeException("Failed to rewritePayloadLength on file ["+tmpFile+"]",e,)@ } FINALLY { -> IF { -> TRY { -> raf.close()@raf!=null } } }
results[https://github.com/crissii/water-esb-new/blob/82254f76ee0b672f5bd7ec01b3ace2197ea613c5/modules/messagecenter/src/main/java/com/sunsharing/msgcenter/msg/process/MsgSaveProcess.java][process][1] = -> TRY { -> raf1=new RandomAccessFile(currentFile,"rw",)@ -> raf1.seek(currentFile.length(),)@ -> raf1.write(request.msg.genneral(),)@ } CATCH(Exception) { -> logger.error("写消息文件出错",e,)@ -> throw new RuntimeException("写文件出错",)@ } FINALLY { -> TRY { -> raf1.close()@ } }
results[https://github.com/darrenjl/pdfrun/blob/62949f216d617d721af93b6cb40ac1958eedb55f/OpenGPSTracker/external_sources/httpcore-4.1.1/httpcore-nio/src/test/java/org/apache/http/impl/nio/codecs/TestLengthDelimitedDecoder.java][testDecodingFileWithOffsetAndBufferedSessionData][6] = -> TRY {  -> testfile=new RandomAccessFile(fileHandle,"rw",)@ -> beginning="beginning; ".getBytes("US-ASCII",)@ -> testfile.write(beginning,)@ -> testfile.close()@ -> testfile=new RandomAccessFile(fileHandle,"rw",)@ -> fchannel=testfile.getChannel()@ -> LOOP { -> IF { -> testfile.setLength(pos,)@testfile.length()<pos } } -> assertEquals(testfile.length()-7-beginning.length,metrics.getBytesTransferred(),)@ } CATCH(Exception) {}
results[https://github.com/elka-projekt/cs-voltdb/blob/9e9337e1b8ee2c4c6377d58f3af453090c057ff4/tests/frontend/org/voltdb/regressionsuites/TestSaveRestoreSysprocSuite.java][corruptTestFiles][1] = -> TRY {  -> r.nextBytes(corruptValue,)@ -> raf=new java.io.RandomAccessFile(tmp_files[tmpIndex],"rw",)@ -> corruptPosition=r.nextInt((int) raf.length(),)@ -> raf.seek(corruptPosition,)@ -> currentValue=raf.readByte()@ -> LOOP { -> r.nextBytes(corruptValue,)@currentValue==corruptValue[0] } -> System.out.println("Corrupting file "+tmp_files[tmpIndex].getName()+" at byte "+corruptPosition+" with value "+corruptValue[0],)@ -> raf.seek(corruptPosition,)@ -> raf.write(corruptValue,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/arekinath/jop/blob/586695f6179c699de64e0c734f2ff22dcabb21d4/java/pcsim/src/simhw/BaseSim.java][<init>][2] = -> IF { -> TRY { -> flash=new RandomAccessFile(fname,"rw",)@!(fname.exists()) -> LOOP { -> flash.write(0xff,)@ } } CATCH(Exception) { -> e.printStackTrace()@ } } ELSE { -> TRY { -> flash=new RandomAccessFile(fname,"rw",)@!(!(fname.exists())) } CATCH(FileNotFoundException) { -> e.printStackTrace()@ } }
results[https://github.com/crissii/water-esb-new/blob/5bd3b0433d9d39d7169035f6a3648b66d543f0e2/modules/transport/src/main/java/com/sunsharing/transport/exchage/protocol/FilePakageSave.java][lastCheck][1] = -> TRY { -> raf=new RandomAccessFile(path+getServerTempFileName()+".log","rw",)@ -> raf.seek(FileSend.beginFileSize+getCurrentPakage()-1,)@ -> raf.write(b,)@ -> raf.seek(FileSend.beginFileSize,)@ -> raf.read(b,)@ -> IF { -> raf.close()@ } } CATCH(Exception) { -> logger.error("异常",e,)@ } FINALLY { -> lock.unlock()@ -> TRY { -> raf.close()@ } }
results[https://github.com/havlenapetr/android_packages_apps_Gallery3D/blob/3c02f2877dc2f8f0b5c01d03fa2b487c040e4000/src/com/cooliris/media/DiskCache.java][put][7] = -> IF { -> TRY { -> chunkFile=getChunkFile(record.chunk,)@!(record!=null&&data.length<=record.sizeOnDisk) -> IF { -> chunkFile.seek(record.offset,)@!(record!=null&&data.length<=record.sizeOnDisk) && chunkFile!=null -> chunkFile.write(data,)@!(record!=null&&data.length<=record.sizeOnDisk) && chunkFile!=null -> return @chunkFile!=null && record!=null&&data.length<=record.sizeOnDisk } } CATCH(Exception) { -> Log.e(TAG,"Unable to read from chunk file",)@!(record!=null&&data.length<=record.sizeOnDisk) } } -> chunkFile=getChunkFile(chunk,)@!(record!=null&&data.length<=record.sizeOnDisk) -> IF { -> TRY { -> offset=(int) chunkFile.length()@!(record!=null&&data.length<=record.sizeOnDisk) && chunkFile!=null -> chunkFile.seek(offset,)@!(record!=null&&data.length<=record.sizeOnDisk) && chunkFile!=null -> chunkFile.write(data,)@!(record!=null&&data.length<=record.sizeOnDisk) && chunkFile!=null } CATCH(IOException) { -> Log.e(TAG,"Unable to write new entry to chunk file",)@!(record!=null&&data.length<=record.sizeOnDisk) } }
results[https://github.com/elasticsearch/elasticsearch/blob/1f289df12875b703683cbd95fde6e66e2685d444/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/fs/FsAppendBenchmark.java][main][6] = -> TRY {  -> raf=new RandomAccessFile("work/test.log","rw",)@ -> raf.setLength(0,)@ -> new Random().nextBytes(data,)@ -> IF { -> channel=raf.getChannel()@ -> LOOP { -> channel.write(ByteBuffer.wrap(data,),position,)@position<DATA } } ELSE { -> LOOP { -> raf.write(data,)@ } -> raf.getFD().sync()@ } -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/crissii/water-esb-new/blob/026f654d5ac5917a70b779b012b807ea9702a550/modules/transport/src/main/java/com/sunsharing/transport/exchage/protocol/FileLogInfo.java][initLog][1] = -> TRY { -> raf=new RandomAccessFile(fileLog,"rw",)@ -> raf.read(fileNameArr,)@ -> raf.read(filePathArr,)@ -> this.totalPakage=raf.readInt()@ -> this.fileLen=raf.readLong()@ -> raf.read(last,)@ -> raf.read(retry,)@ -> raf.read(pakageState,)@ -> IF { -> raf.seek(FileSend.beginFileSize,)@ -> raf.write(pakageState,)@ } } CATCH(Exception) { -> logger.error("读取Log文件出错",e,)@ -> throw new RuntimeException("读取Log文件出错",)@ } FINALLY { -> TRY { -> raf.close()@ } }
results[https://github.com/CIIR/Proteus/blob/d22628d2d69aeb93439c654bb892b296771ab419/galago-for-proteus/core/src/main/java/org/lemurproject/galago/core/tools/App.java][run][1] = -> TRY {  -> indexReaderWriter=new RandomAccessFile(filename,"rw",)@ -> length=indexReaderWriter.length()@ -> indexReaderWriter.seek(footerOffset,)@ -> vocabularyOffset=indexReaderWriter.readLong()@ -> manifestOffset=indexReaderWriter.readLong()@ -> blockSize=indexReaderWriter.readInt()@ -> magicNumber=indexReaderWriter.readLong()@ -> indexReaderWriter.seek(manifestOffset,)@ -> indexReaderWriter.read(xmlData,)@ -> newParameters=Parameters.parse(xmlData,)@ -> indexReaderWriter.seek(manifestOffset,)@ -> xmlData=newParameters.toString().getBytes("UTF-8",)@ -> indexReaderWriter.write(xmlData,)@ -> indexReaderWriter.writeLong(vocabularyOffset,)@ -> indexReaderWriter.writeLong(manifestOffset,)@ -> indexReaderWriter.writeInt(blockSize,)@ -> indexReaderWriter.writeLong(magicNumber,)@ -> indexReaderWriter.close()@ } CATCH(Exception) {}
results[https://github.com/frostwire/frostwire-android/blob/1c169f39ddd65545c8391442fc7a5dd456e7ba12/vuze/azureus2/src/org/gudy/azureus2/core3/ipfilter/impl/IpFilterManagerImpl.java][addDescription][9] = -> IF { -> return null@rafDescriptions==null } -> TRY { -> IF { -> return null@description==null||description.length==0 && !(rafDescriptions==null) } -> start=(int) rafDescriptions.getFilePointer()@!(description==null||description.length==0) && !(rafDescriptions==null) -> len=(int) rafDescriptions.length()@!(description==null||description.length==0) && !(rafDescriptions==null) -> IF { -> return null@!(description==null||description.length==0) && len+61>=0x1FFFFFF && !(rafDescriptions==null) } -> IF { -> rafDescriptions.seek(len,)@!(len+61>=0x1FFFFFF) && start!=len && !(description==null||description.length==0) && !(rafDescriptions==null) -> start=(int) rafDescriptions.getFilePointer()@!(len+61>=0x1FFFFFF) && start!=len && !(description==null||description.length==0) && !(rafDescriptions==null) } -> IF { -> rafDescriptions.write(description,)@!(len+61>=0x1FFFFFF) && !(description==null||description.length==0) && !(rafDescriptions==null) } ELSE { -> rafDescriptions.write(description,0,61,)@!(len+61>=0x1FFFFFF) && !(description==null||description.length==0) && !(rafDescriptions==null) } -> end=(int) rafDescriptions.getFilePointer()@!(len+61>=0x1FFFFFF) && !(description==null||description.length==0) && !(rafDescriptions==null) } CATCH(Exception) { -> e.printStackTrace()@!(rafDescriptions==null) }
results[https://github.com/NCIP/cagrid-grid-incubation/blob/b4240fd15c8e4540e7d4d77c616c6b51f6a69828/grid-incubation/incubator/projects/TideDataTransfer/projects/tide/src/org/cagrid/tide/tools/client/retriever/common/CurrentWriter.java][run][1] = -> LOOP { -> IF { -> TRY { -> raf.seek(current.getOffset(),)@ -> it=currentCurrentCollector.getCurrentByteArrayData(this.currentCurrentCollectorIndex,).iterator()@ -> LOOP { -> raf.write(it.next(),)@it.hasNext() } } CATCH(IOException) { -> e.printStackTrace()@ } } } -> TRY { -> IF { -> throw new Exception("File download was corrupted!",)@!(mis.getMD5().asHex().equals(tide.getTideInformation().getMd5Sum(),)) } } CATCH(Exception) { -> e.printStackTrace()@ -> IF { -> callback.failedWriter(this,)@callback!=null } }
results[https://github.com/bndtools/bnd/blob/e4431d098cde2fd3477c3a3e121622cebf1aec73/aQute.libg/src/aQute/libg/cafs/CAFS.java][<init>][1] = -> TRY {  -> IF { } ELSE { -> throw new IllegalArgumentException("CAFS requires a directory with create=false",)@!(home.isDirectory()) } -> store=new RandomAccessFile(new File(home,STOREFILE,),"rw",)@!(!(home.isDirectory())) -> channel=store.getChannel()@!(!(home.isDirectory())) -> IF { -> IF { -> store.write(CAFS,)@!(!(home.isDirectory())) && store.length()<0x100 -> LOOP { -> store.writeInt(0,)@!(!(home.isDirectory())) && store.length()<0x100 } } ELSE { -> throw new IllegalArgumentException("Invalid store file, length is too short "+store,)@!(!(home.isDirectory())) && store.length()<0x100 } -> System.err.println(store.length(),)@!(!(home.isDirectory())) && store.length()<0x100 } -> store.seek(0,)@!(!(home.isDirectory())) && !(store.length()<0x100) -> IF { -> throw new IllegalArgumentException("Not a valid signature: CAFS at start of file",)@!(verifySignature(store,CAFS,)) && !(!(home.isDirectory())) && !(store.length()<0x100) } } CATCH(Exception) {}
results[https://github.com/apache/activemq-apollo/blob/fdd8f2c6b3010fd2b7365c07ee5e27aaaf5f2dfc/kahadb/src/main/java/org/apache/kahadb/page/PageFile.java][redoRecoveryUpdates][1] = -> TRY {  -> IF { -> recoveryFile.write( new byte[],)@recoveryFile.length()==0 -> recoveryFile.setLength(recoveryFileSizeForPages(recoveryFileMinPageCount,),)@recoveryFile.length()==0 -> return 0@recoveryFile.length()==0 } -> recoveryFile.seek(0,)@!(recoveryFile.length()==0) -> recoveryFile.seek(RECOVERY_FILE_HEADER_SIZE,)@!(recoveryFile.length()==0) -> TRY { -> LOOP { -> offset=recoveryFile.readLong()@!(recoveryFile.length()==0) && !(i<pageCounter) -> IF { -> return nextTxId@i<pageCounter && !(recoveryFile.length()==0) && recoveryFile.read(data,0,pageSize,)!=pageSize } } } CATCH(Exception) { -> LOG.debug("Redo buffer was not fully intact: ",e,)@!(recoveryFile.length()==0) } -> IF { -> return nextTxId@!(recoveryFile.length()==0) && checksum.getValue()!=expectedChecksum && !(i<pageCounter) } -> LOOP { -> writeFile.seek(e.getKey(),)@!(checksum.getValue()!=expectedChecksum) && !(recoveryFile.length()==0) && !(i<pageCounter) -> writeFile.write(e.getValue(),)@!(checksum.getValue()!=expectedChecksum) && !(recoveryFile.length()==0) && !(i<pageCounter) } -> IOHelper.sync(writeFile.getFD(),)@!(checksum.getValue()!=expectedChecksum) && !(recoveryFile.length()==0) && !(i<pageCounter) } CATCH(IOException) {}
results[https://github.com/stephenc/java-iso-tools/blob/abd074d949c1c09b7fae5860267fe740fe0d431e/sabre/src/main/java/de/tu_darmstadt/informatik/rbg/bstickler/udflib/UDFImageBuilder.java][recursiveWriteFilesystemWithMetadata][2] = -> TRY {  -> IF { -> LOOP { -> nextFreeBlocks=recursiveWriteFilesystemWithMetadata(myRandomAccessFile,partitionStartingBlock,metadataPartitionStartingBlock,blockSize,serialNumberForTags,childUDFImageBuilderFiles[i],nextFreeBlocks[0],nextFreeBlocks[1],myExtendedFileEntry,childFileUniqueID,descriptorVersion,)@i<childUDFImageBuilderFiles.length } -> IF { -> LOOP { -> childFileIdentifierDescriptorBytes=childFileIdentifierDescriptors.get(i,).getBytes()@i<childFileIdentifierDescriptors.size() -> System.arraycopy(childFileIdentifierDescriptorBytes,0,myExtendedFileEntry.AllocationDescriptors,pos,childFileIdentifierDescriptorBytes.length,)@ } } ELSE { -> myRandomAccessFile.seek(currentRealPosition,)@ -> LOOP { -> childFileIdentifierDescriptorBytes=childFileIdentifierDescriptors.get(i,).getBytes()@i<childFileIdentifierDescriptors.size() -> myRandomAccessFile.write(childFileIdentifierDescriptorBytes,)@ } } } ELSE { -> IF { } ELSE { -> myRandomAccessFile.seek(nextFreeBlocks[1]*blockSize,)@!(fileSize<=blockSize-ExtendedFileEntry.fixedPartLength) -> writeFileData(myRandomAccessFile,currentUDFImageBuilderFile.getSourceFile(),)@currentUDFImageBuilderFile.getFileType()==UDFImageBuilderFile.FileType.File && !(currentUDFImageBuilderFile.getFileType()==UDFImageBuilderFile.FileType.Directory) } } -> myRandomAccessFile.seek(currentMetadataBlock*blockSize,)@ -> myExtendedFileEntry.write(myRandomAccessFile,blockSize,)@ } CATCH(Exception) {}
results[https://github.com/stephenc/java-iso-tools/blob/abd074d949c1c09b7fae5860267fe740fe0d431e/sabre/src/main/java/de/tu_darmstadt/informatik/rbg/bstickler/udflib/UDFImageBuilder.java][recursiveWriteFilesystem][2] = -> TRY {  -> IF { -> LOOP { -> nextFreeBlock=recursiveWriteFilesystem(myRandomAccessFile,partitionStartingBlock,blockSize,serialNumberForTags,childUDFImageBuilderFiles[i],nextFreeBlock,myFileEntry,childFileUniqueID,writeExtendedFileEntries,descriptorVersion,)@i<childUDFImageBuilderFiles.length } -> IF { -> LOOP { -> childFileIdentifierDescriptorBytes=childFileIdentifierDescriptors.get(i,).getBytes()@i<childFileIdentifierDescriptors.size() -> System.arraycopy(childFileIdentifierDescriptorBytes,0,myFileEntry.AllocationDescriptors,pos,childFileIdentifierDescriptorBytes.length,)@ } } ELSE { -> myRandomAccessFile.seek(currentRealPosition,)@ -> LOOP { -> childFileIdentifierDescriptorBytes=childFileIdentifierDescriptors.get(i,).getBytes()@i<childFileIdentifierDescriptors.size() -> myRandomAccessFile.write(childFileIdentifierDescriptorBytes,)@ } } } ELSE { -> IF { } ELSE { -> myRandomAccessFile.seek(nextFreeBlock*blockSize,)@!(writeExtendedFileEntries&&fileSize<=blockSize-ExtendedFileEntry.fixedPartLength||!(writeExtendedFileEntries)&&fileSize<=blockSize-FileEntry.fixedPartLength) -> writeFileData(myRandomAccessFile,currentUDFImageBuilderFile.getSourceFile(),)@currentUDFImageBuilderFile.getFileType()==UDFImageBuilderFile.FileType.File && !(currentUDFImageBuilderFile.getFileType()==UDFImageBuilderFile.FileType.Directory) } } -> myRandomAccessFile.seek(currentBlock*blockSize,)@ -> myFileEntry.write(myRandomAccessFile,blockSize,)@ } CATCH(Exception) {}
results[https://github.com/apache/activemq/blob/4bace216b91c9f8244976305f462fd212b0e20c3/kahadb/src/main/java/org/apache/kahadb/page/PageFile.java][redoRecoveryUpdates][1] = -> TRY {  -> IF { -> recoveryFile.write( new byte[],)@recoveryFile.length()==0 -> recoveryFile.setLength(recoveryFileSizeForPages(recoveryFileMinPageCount,),)@recoveryFile.length()==0 -> return 0@recoveryFile.length()==0 } -> recoveryFile.seek(0,)@!(recoveryFile.length()==0) -> nextTxId=recoveryFile.readLong()@!(recoveryFile.length()==0) -> expectedChecksum=recoveryFile.readLong()@!(recoveryFile.length()==0) -> pageCounter=recoveryFile.readInt()@!(recoveryFile.length()==0) -> recoveryFile.seek(RECOVERY_FILE_HEADER_SIZE,)@!(recoveryFile.length()==0) -> TRY { -> LOOP { -> offset=recoveryFile.readLong()@!(recoveryFile.length()==0) && !(i<pageCounter) -> IF { -> return nextTxId@i<pageCounter && !(recoveryFile.length()==0) && recoveryFile.read(data,0,pageSize,)!=pageSize } } } CATCH(Exception) { -> LOG.debug("Redo buffer was not fully intact: ",e,)@!(recoveryFile.length()==0) } -> IF { -> return nextTxId@!(recoveryFile.length()==0) && checksum.getValue()!=expectedChecksum && !(i<pageCounter) } -> LOOP { -> writeFile.seek(toOffset(e.getKey(),),)@!(checksum.getValue()!=expectedChecksum) && !(recoveryFile.length()==0) && !(i<pageCounter) -> writeFile.write(e.getValue(),)@!(checksum.getValue()!=expectedChecksum) && !(recoveryFile.length()==0) && !(i<pageCounter) } -> writeFile.getFD().sync()@!(checksum.getValue()!=expectedChecksum) && !(recoveryFile.length()==0) && !(i<pageCounter) } CATCH(IOException) {}
results[https://github.com/yudis/h2database/blob/1696ecce545a223354ad0a050f15f8a2684b4848/h2/src/tools/org/h2/build/code/CheckTextFiles.java][checkOrFixFile][8] = -> TRY {  -> LOOP { } ELSE { -> IF { -> IF { -> IF { -> return @ch<32 && i<data.length && !(ch>127) && ch=='\n' } } ELSE { -> IF { -> IF { -> return @ch<32 && !(ch=='\n') && i<data.length && ch=='\r' && !(ch>127) } -> IF { -> return @ch<32 && !(ch=='\n') && i<data.length && ch=='\r' && !(ch>127) } } ELSE { -> IF { } ELSE { -> IF { -> return @ch<32 && !(ch=='\r') && !(ch=='\n') && ch=='\t' && !(fix) && i<data.length && !(ch>127) } } ELSE { -> return @ch<32 && !(ch=='\t') && !(ch=='\r') && !(ch=='\n') && i<data.length && !(ch>127) } } } } } -> IF { -> changed=out.toByteArray()@!(i<data.length) -> IF { -> f=new RandomAccessFile(file,"rw",)@!(i<data.length) -> f.write(changed,)@!(i<data.length) && Utils.compareNotNull(data,changed,)!=0 -> f.setLength(changed.length,)@!(i<data.length) -> f.close()@!(i<data.length) } } } CATCH(Exception) {}
results[https://github.com/agueganno/h2geometry/blob/7039650e92a55e7967710e8a93403406b1b13297/h2/src/tools/org/h2/tools/code/CheckTextFiles.java][checkOrFixFile][5] = -> TRY {  -> LOOP { -> IF { -> return @ch>127 && i<data.length } ELSE { -> IF { -> IF { -> IF { -> return @ch<32 && lastWasWhitespace&&!(allowTrailingSpaces) && i<data.length && !(ch>127) && ch=='\n' } } ELSE { -> IF { -> IF { -> return @ch<32 && !(ch=='\n') && i<data.length && ch=='\r' && !(ch>127) } -> IF { -> return @ch<32 && lastWasWhitespace&&!(allowTrailingSpaces) && !(ch=='\n') && i<data.length && ch=='\r' && !(ch>127) } } ELSE { -> IF { } ELSE { -> IF { -> return @ch<32 && !(ch=='\r') && !(ch=='\n') && ch=='\t' && !(fix) && i<data.length && !(ch>127) } } ELSE { -> return @ch<32 && !(ch=='\t') && !(ch=='\r') && !(ch=='\n') && i<data.length && !(ch>127) } } } } } } -> IF { -> return @!(i<data.length) && lastWasWhitespace&&!(allowTrailingSpaces) } -> IF { -> changed=out.toByteArray()@!(i<data.length) && !(lastWasWhitespace&&!(allowTrailingSpaces)) -> IF { -> f=new RandomAccessFile(file,"rw",)@!(i<data.length) && !(lastWasWhitespace&&!(allowTrailingSpaces)) -> f.write(changed,)@!(i<data.length) && ByteUtils.compareNotNull(data,changed,)!=0 && !(lastWasWhitespace&&!(allowTrailingSpaces)) -> f.setLength(changed.length,)@!(i<data.length) && !(lastWasWhitespace&&!(allowTrailingSpaces)) -> f.close()@!(i<data.length) && !(lastWasWhitespace&&!(allowTrailingSpaces)) } } } CATCH(Exception) {}
results[https://github.com/binwiederhier/syncany/blob/c7eb5a4a5d05cbecec59b5b768a6b57afda8eecf/tests/org/syncany/tests/crypto/CipherUtilTest.java][testIsEncryptedFileTrue][2] = -> TRY {  -> testFileRaf=new RandomAccessFile(testFile,"rw",)@ -> testFileRaf.write(MultiCipherOutputStream.STREAM_MAGIC,)@ -> testFileRaf.write(MultiCipherOutputStream.STREAM_VERSION,)@ -> testFileRaf.close()@ } CATCH(Exception) {}
results[https://github.com/cmeiklejohn/flume-ng/blob/c57ebd1d2296fd1c0c8f84eecb16799de2a73e35/flume-ng-channels/flume-file-channel/src/test/java/org/apache/flume/channel/file/TestLogFile.java][testPutGetCorruptEvent][1] = -> TRY {  -> writer=new RandomAccessFile(dataFile,"rw",)@ -> writer.seek(offset+1500,)@ -> writer.write((byte) 45,)@ -> writer.write((byte) 12,)@ -> writer.getFD().sync()@ } CATCH(Exception) {}
results[https://github.com/picketbox/picketbox-container/blob/bee25bb1ba4e6b5d72633aa88f20fb383e7a1784/security-jboss-sx/jbosssx/src/main/java/org/jboss/security/plugins/FilePassword.java][encode][1] = -> TRY {  -> cipherSpec=new PBEParameterSpec(salt,count,)@ -> encode=cipher.doFinal(secret,)@ -> passwordFile.write(salt,)@ -> passwordFile.writeInt(count,)@ -> passwordFile.write(encode,)@ -> passwordFile.close()@ } CATCH(Exception) {}
results[https://github.com/kennethso168/AdvancedPowerMenu/blob/2e9dff3f7d33614dd80d6ac901c7d45b9eff25ad/src/hk/kennethso168/xposed/advancedrebootmenu/DualBoot.java][setDualSystemBootmode][1] = -> TRY { -> file=new RandomAccessFile("/dev/block/platform/msm_sdcc.1/by-name/misc","rw",)@ -> file.seek(0x1000,)@ -> file.write(bootmode.getBytes(),)@ -> file.write( new byte[],)@ -> file.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/jrecursive/mecha/blob/a68398e165c672aa50086571a7ed1b0b81c611f8/src/java/mecha/db/Slab.java][append][2] = -> TRY {  -> key=raf.length()@ -> raf.seek(key,)@ -> IF { -> cRec=compress(record,)@ } -> rLen_b[3]=(byte) 0xFF&rLen>>24@ -> rLen_b[2]=(byte) 0xFF&rLen>>16@ -> rLen_b[1]=(byte) 0xFF&rLen>>8@ -> rLen_b[0]=(byte) 0xFF&rLen@ -> raf.write(rLen_b,)@ -> raf.write(cRec,)@ } CATCH(Exception) {}
results[https://github.com/dilipgudlur/Localization/blob/bafab77e22e196d06b30d09c5f42961cfb62f3b4/src/edu/cmu/pandaa/stream/RawAudioFileStream.java][updateWavLength][1] = -> TRY {  -> raf=new RandomAccessFile(fileName,"rw",)@ -> raf.seek(update_pos1,)@ -> raf.write(DataConversionUtil.intToByteArray(byteCount+update_pos2-update_pos1,),)@ -> raf.seek(update_pos2,)@ -> raf.write(DataConversionUtil.intToByteArray(byteCount,),)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/thihy/lucene/blob/0666c43457bc16b46de89efc433cf4c6481ef948/solr/core/src/test/org/apache/solr/search/TestRecovery.java][testCorruptLog][3] = -> TRY {  -> TRY { -> raf=new RandomAccessFile(new File(logDir,files[files.length-1],),"rw",)@ -> len=raf.length()@ -> raf.seek(0,)@ -> raf.write( new byte[],)@ -> raf.close()@ } } CATCH(Exception) {}
results[https://github.com/kelemen/netbeans-gradle-project/blob/ae0ef05f682ebf16aacde6f3a76cab91b95b1efb/netbeans-gradle-plugin/src/test/java/org/netbeans/gradle/project/StringAsFileRefTest.java][testModifiedContent][3] = -> TRY {  -> fileContent=new RandomAccessFile(fileRef1.getFile(),"rw",)@ -> TRY { -> fileContent.setLength(0,)@ -> fileContent.write(modContent,)@ } FINALLY { -> fileContent.close()@ } } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/0a0f1b3dfb3e04b4f5fc44ad0d5990fe34238495/test/java/io/File/Basic.java][main][3] = -> TRY {  -> IF { -> raf=new RandomAccessFile(bigFile,"rw",)@ -> TRY { -> raf.seek(big,)@ -> raf.write('x',)@ } FINALLY { -> raf.close()@ } } } CATCH(Exception) {}
results[https://github.com/camptocamp/secureOWS/blob/36abae7e77d3c056352799f286899453ecac360b/owsproxyserver/src/org/deegree/portal/portlet/enterprise/PrintListener.java][forwardPDF][1] = -> TRY {  -> TRY { -> raf=new RandomAccessFile(s,"rw",)@ -> raf.write((byte[]) result,)@ -> raf.close()@ } CATCH(Exception) { -> e.printStackTrace()@ -> LOG.logError("could not write temporary pdf file: "+s,e,)@ -> throw new PortalException("could not write temporary pdf file: "+s,e,)@ } } CATCH(PortalException) {}
results[https://github.com/xperimental/javadrone/blob/9ada31fb4e9125fc1efd1d6b1c754d2118d69222/ardrone/src/main/java/com/codeminders/ardrone/util/MJPEGGenerator.java][finishAVI][6] = -> TRY {  -> size=aviFile.length()@ -> raf=new RandomAccessFile(aviFile,"rw",)@ -> raf.seek(4,)@ -> raf.write(intBytes(swapInt((int) size-8,),),)@ -> raf.seek(aviMovieOffset+4,)@ -> raf.write(intBytes(swapInt((int) size-8-aviMovieOffset-indexlistBytes.length,),),)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/crosswire/jsword/blob/e897c811d7271fdeac686bc56fef6278335b8905/jsword/java/jsword/org/crosswire/jsword/book/basic/SerSearcher.java][foundPassage][1] = -> TRY {  -> IF { -> return @word==null } -> TRY { -> buffer=PassageUtil.toBinaryRepresentation(ref,)@!(word==null) -> section=new Section(ref_dat.getFilePointer(),buffer.length,)@!(word==null) -> ref_dat.write(buffer,)@!(word==null) } CATCH(Exception) { -> throw new BookException("ser_write",ex,)@!(word==null) } } CATCH(BookException) {}
results[https://github.com/crosswire/jsword/blob/316131fb7513b384641240cc20757008bce1e77c/jsword/java/jsword/org/crosswire/jsword/book/search/ser/SerIndex.java][recordFoundPassage][5] = -> TRY {  -> IF { -> return @word==null } -> TRY { -> buffer=PassageKeyFactory.toBinaryRepresentation(ref,)@!(word==null) -> section=new Section(dataRaf.getFilePointer(),buffer.length,)@!(word==null) -> dataRaf.write(buffer,)@!(word==null) } CATCH(Exception) { -> throw new BookException(Msg.WRITE_ERROR,ex,)@!(word==null) } } CATCH(BookException) {}
results[https://github.com/HidemotoNakada/cassandra-udf/blob/7a6fbc1b22a099abe368b786e9933fb5d980c329/test/unit/org/apache/cassandra/db/compaction/BlacklistingCompactionsTest.java][testBlacklisting][2] = -> TRY {  -> LOOP { -> TRY { -> raf=new RandomAccessFile(sstable.getFilename(),"rw",)@ -> assertNotNull(raf,)@ -> raf.write(0xFFFFFF,)@ } FINALLY { -> FileUtils.closeQuietly(raf,)@ } } } CATCH(Exception) {}
results[https://github.com/dkomanov/fizteh-java-2013/blob/613cef52894d7d1182cce65d000778793c53fe5d/src/ru/fizteh/fivt/students/adanilyak/tools/tlWorkWithDatFiles.java][writeIntoFile][1] = -> TRY {  -> dataBaseFileWriter=new RandomAccessFile(dataBaseFile,"rw",)@ -> dataBaseFileWriter.setLength(0,)@ -> LOOP { -> bufferKey=key.getBytes("UTF-8",)@ -> dataBaseFileWriter.writeInt(bufferKey.length,)@ -> bufferValue=value.getBytes("UTF-8",)@ -> dataBaseFileWriter.writeInt(bufferValue.length,)@ -> dataBaseFileWriter.write(bufferKey,)@ -> dataBaseFileWriter.write(bufferValue,)@ } -> dataBaseFileWriter.close()@ } CATCH(Exception) {}
results[https://github.com/chgenly/experiment/blob/781c161ac3edca8aa8bbf8219710d40948a85d2e/DataExtractionOSM/src/rtree/Node.java][writeLastElement][1] = -> TRY {  -> TRY { -> IF { -> bs=new ByteArrayOutputStream(elementSize,)@ -> ds=new DataOutputStream(bs,)@ -> bs.flush()@ -> file.write(bs.toByteArray(),)@ } } CATCH(Exception) { -> throw new NodeWriteException("Node.writeLastElement: Can't write element to file",)@ } } CATCH(NodeWriteException) {}
results[https://github.com/dgarnier/MDSplus/blob/b2517b54103142bfb18e3e5177d94263560e7c10/javatraverser/LoadFile.java][main][2] = -> TRY { -> serialized=ba.getByteArray()@ } CATCH(Exception) { -> System.err.println("Error reading data in"+nodeName+": "+exc,)@ -> System.exit(0,)@ } -> TRY { -> raf=new RandomAccessFile(fileName,"rw",)@ -> raf.write(serialized,)@ -> raf.close()@ } CATCH(Exception) { -> System.err.println("Cannot read file "+fileName+": "+exc,)@ -> System.exit(0,)@ }
results[https://github.com/DominicWatson/open-bluedragon/blob/e6f8c79b8566bcc77e4999e1d740c35b8fcc0b7d/src/com/naryx/tagfusion/cfm/file/vfs/cfVFSData.java][write][2] = -> TRY {  -> IF { -> bufferedOutputStream.write(b,)@bufferedOutputStream!=null } ELSE { -> IF { -> randomAccessContent.write(b,)@randomAccessContent!=null } ELSE { -> IF { -> randomAccessFile.write(b,)@randomAccessFile!=null } } } } CATCH(Exception) {}
results[https://github.com/utyman/Base-de-Datos-TP1/blob/2a163d7829fcd02f2bd7da648e8b1406eef9d1e6/TP2/sources/UBADB-Original/src/main/java/ubadb/components/diskManager/DiskManagerImpl.java][createNewPage][3] = -> TRY {  -> TRY { -> checkPageSize(pageContents,)@ -> file=getFile(tableId,)@ -> offset=file.length()@ -> file.seek(offset,)@ -> file.write(pageContents,)@ -> file.close()@ -> return new Page(new PageId(newPageNumber,tableId,),pageContents,)@ } CATCH(Exception) { -> throw new DiskManagerException("Cannot create a new page on disk",e,)@ } } CATCH(DiskManagerException) {}
results[https://github.com/apache/openejb/blob/7f55df27c43f89ac1944b50434ffcb32bb865d8b/openejb/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/RAFPassivater.java][passivate][12] = -> TRY {  -> TRY { -> ras=new RandomAccessFile(System.getProperty("java.io.tmpdir",File.separator+"tmp",)+File.separator+"passivation"+fileID+".ser","rw",)@ -> LOOP { -> bytes=Serializer.serialize(obj,)@ -> filepointer=ras.getFilePointer()@ -> ras.write(bytes,)@ } -> ras.close()@ } CATCH(Exception) { -> throw new org.apache.openejb.SystemException(e,)@ } } CATCH(org.apache.openejb.SystemException) {}
results[https://github.com/apache/tomee/blob/fb67de3145cd7967a59aab5ab5c7a298b7968e24/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/RAFPassivater.java][passivate][2] = -> TRY {  -> TRY { -> ras=new RandomAccessFile(System.getProperty("java.io.tmpdir",File.separator+"tmp",)+File.separator+"passivation"+fileID+".ser","rw",)@ -> LOOP { -> bytes=Serializer.serialize(obj,)@ -> filepointer=ras.getFilePointer()@ -> ras.write(bytes,)@ } -> ras.close()@ } CATCH(Exception) { -> throw new SystemException(e,)@ } } CATCH(SystemException) {}
results[https://github.com/kelemen/netbeans-gradle-project/blob/d5770675a5f9fa9964cba6be8c0a92b48e5e88af/netbeans-gradle-default-models/src/test/java/org/netbeans/gradle/model/util/TemporaryFileManagerTest.java][testModifiedContent][1] = -> TRY {  -> TRY { -> fileContent=new RandomAccessFile(fileRef1.getFile(),"rw",)@ -> TRY { -> fileContent.setLength(0,)@ -> fileContent.write(modContent,)@ } FINALLY { -> fileContent.close()@ } -> fileRef1.getFile().delete()@ } } CATCH(Exception) {}
results[https://github.com/freenet/contrib-official/blob/ffdc0d106578fd7070c60ffcb9b0396b5f1ae551/bdb/test/com/sleepycat/je/log/FileEdgeCaseTest.java][corruptSecondEntry][1] = -> TRY {  -> file=new RandomAccessFile(firstFile,FileManager.FileMode.READWRITE_MODE.getModeValue(),)@ -> TRY { -> file.seek(FileManager.firstLogEntryOffset(),)@ -> file.write(junk,)@ } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> file.close()@ } } CATCH(IOException) {}
results[https://github.com/Wilby89/OCMJD/blob/85ec792ede36524e4bfef9e2c5bb4628084753ea/src/suncertify/db/DataDBAccess.java][create][1] = -> TRY {  -> logger.entering("DataDBAccess","create",data,)@ -> IF { -> throw new IllegalArgumentException("Corrupt or invalid data",)@data==null } -> TRY { -> fileObject.seek(offset+position*maxRecord,)@!(data==null) -> fileObject.writeByte(VALID,)@!(data==null) -> fileObject.write(getDataAsByteArray(data,),)@!(data==null) } CATCH(Exception) { -> throw new RuntimeException(ex,)@!(data==null) } } CATCH(DuplicateKeyException,RecordNotFoundException) {}
results[https://github.com/apurtell/hadoop/blob/86771aef24fed2c7e72236af8e201c262b90ad2e/src/test/hdfs/org/apache/hadoop/hdfs/server/namenode/TestFsck.java][testCorruptBlock][41] = -> TRY {  -> TRY { -> IF { -> raFile=new RandomAccessFile(blockFile,"rw",)@blockFile!=null&&blockFile.exists() -> channel=raFile.getChannel()@ -> raFile.seek(rand,)@ -> raFile.write(badString.getBytes(),)@ -> raFile.close()@ } } FINALLY { -> IF { -> cluster.shutdown()@cluster!=null } } } CATCH(Exception) {}
results[https://github.com/genepi/pig-gene/blob/9f53e4a3dfdbfb2cfcbea8ea494e3065f7f12b89/AuswertTestdat/lib/hadoop_src/test/org/apache/hadoop/hdfs/server/namenode/TestFsck.java][testCorruptBlock][33] = -> TRY {  -> TRY { -> LOOP { -> IF { -> raFile=new RandomAccessFile(blockFile,"rw",)@blockFile.exists() -> channel=raFile.getChannel()@ -> raFile.seek(rand,)@ -> raFile.write(badString.getBytes(),)@ -> raFile.close()@ } } } FINALLY { -> IF { -> cluster.shutdown()@cluster!=null } } } CATCH(Exception) {}
results[https://github.com/svn2github/H2-Mirror/blob/6d2693f380b111ad55032d19d869ed3fcad6cc4a/h2/src/test/org/h2/test/poweroff/TestWrite.java][testFile][8] = -> TRY {  -> file=new RandomAccessFile("test.txt",mode,)@ -> file.setLength(0,)@ -> fd=file.getFD()@ -> file.write(data,)@ -> IF { -> LOOP { -> file.seek(0,)@ -> file.write(data,)@ } } ELSE { -> LOOP { -> file.seek(0,)@ -> file.write(data,)@ } } -> file.close()@ } CATCH(Exception) {}
results[https://github.com/crissii/water-esb-new/blob/da59bef65ccc847cf2b9c15d59d8481a86e40ba1/modules/messagecenter/src/main/java/com/sunsharing/msgcenter/db/MetadataUtils.java][saveMetadata][1] = -> TRY { -> raf1=new RandomAccessFile(currentFile,"rw",)@ -> IF { -> StringUtils.putInt(arr,4,0,)@ -> raf1.write(arr,)@ } ELSE { -> raf1.seek(len,)@!(len==0) } -> StringUtils.putString(topicByte,topic,0,)@ -> raf1.write(topicByte,)@ -> raf1.write(metadata,)@ } CATCH(Exception) { -> logger.error("写消息文件出错",e,)@ -> throw new RuntimeException("写文件出错",)@ } FINALLY { -> TRY { -> raf1.close()@ } }
results[https://github.com/utyman/Base-de-Datos-TP1/blob/a2b0936ae9ab77daed619e441037d1ba006e42cb/TP2/sources/UBADB/src/main/java/ubadb/components/diskManager/DiskManagerImpl.java][writeExistingPage][3] = -> TRY {  -> TRY { -> file=getFile(page.getPageId().getTableId(),)@ -> offset=calculatePageOffset(page.getPageId(),)@ -> checkPageIsExisting(offset,file.length(),)@ -> checkPageSize(page.getPageContents(),)@ -> file.seek(offset,)@ -> file.write(page.getPageContents(),)@ -> file.close()@ } CATCH(Exception) { -> throw new DiskManagerException("Cannot write to page to disk",e,)@ } } CATCH(DiskManagerException) {}
results[https://github.com/chgenly/experiment/blob/781c161ac3edca8aa8bbf8219710d40948a85d2e/DataExtractionOSM/src/rtree/Node.java][deleteElement][1] = -> TRY {  -> IF { -> throw new IllegalValueException("Node.deleteElement: index out of bound",)@index>totalElements-1 } -> TRY { -> IF { -> bs=new ByteArrayOutputStream(NODE_SIZE,)@!(index>totalElements-1) -> ds=new DataOutputStream(bs,)@!(index>totalElements-1) } -> IF { -> bs.flush()@!(index>totalElements-1) -> file.write(bs.toByteArray(),)@!(index>totalElements-1) } } CATCH(Exception) { -> e.printStackTrace()@!(index>totalElements-1) -> throw new NodeWriteException("Node.deleteElement Can't delete element. Rtree may be corrupted.",)@!(index>totalElements-1) } } CATCH(IllegalValueException,NodeWriteException) {}
results[https://github.com/lietou/insight/blob/8daf9f2df8d649e00141a67b8dcf9e8125ac23bb/cat-core/src/main/java/com/dianping/cat/storage/internal/AbstractBucket.java][storeById][2] = -> TRY { -> buf=ChannelBuffers.dynamicBuffer(8192,)@ -> encode(data,buf,)@ -> length=buf.readInt()@ -> first=attributes.getBytes("utf-8",)@ -> num=String.valueOf(length,).getBytes("utf-8",)@ -> offset=m_out.getFilePointer()@ -> m_out.write(first,)@ -> m_out.write(num,)@ -> m_out.write('\n',)@ -> m_out.write(buf.array(),buf.readerIndex(),length,)@ -> m_out.write('\n',)@ -> m_out.getChannel().force(true,)@ } CATCH(Exception) { -> m_logger.error(String.format("Error when writing to file(%s)!",m_file,),e,)@ }
results[https://github.com/fiji/TrakEM2/blob/4385e2726cb403d36531a40a97435f094bfcb70f/TrakEM2_/src/main/java/ini/trakem2/io/RawMipMaps.java][save][2] = -> IF { -> return false@!(ImageSaver.checkPath(path,)) } -> TRY { -> ra=new RandomAccessFile(new File(path,),"rw",)@!(!(ImageSaver.checkPath(path,))) -> h[0]=(byte) width>>24&0xff@!(!(ImageSaver.checkPath(path,))) -> h[1]=(byte) width>>16&0xff@!(!(ImageSaver.checkPath(path,))) -> h[2]=(byte) width>>8&0xff@!(!(ImageSaver.checkPath(path,))) -> h[3]=(byte) width&0xff@!(!(ImageSaver.checkPath(path,))) -> h[4]=(byte) height>>24&0xff@!(!(ImageSaver.checkPath(path,))) -> h[5]=(byte) height>>16&0xff@!(!(ImageSaver.checkPath(path,))) -> h[6]=(byte) height>>8&0xff@!(!(ImageSaver.checkPath(path,))) -> h[7]=(byte) height&0xff@!(!(ImageSaver.checkPath(path,))) -> h[8]=(byte) b.length@!(!(ImageSaver.checkPath(path,))) -> ra.write(h,)@!(!(ImageSaver.checkPath(path,))) -> LOOP { -> ra.write(b[i],)@i<b.length && !(!(ImageSaver.checkPath(path,))) } } CATCH(Exception) { -> IJError.print(e,)@!(!(ImageSaver.checkPath(path,))) } FINALLY { -> IF { -> TRY { -> ra.close()@null!=ra && !(!(ImageSaver.checkPath(path,))) } FINALLY { -> IJError.print(e,)@!(!(ImageSaver.checkPath(path,))) } } }
results[https://github.com/cmeiklejohn/flume-ng/blob/6ca616800ec897551fbb14959ce3a5f0c1d69aed/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/FlumeEventQueue.java][serializeAndWrite][1] = -> TRY {  -> IF { -> file=new RandomAccessFile(inflightEventsFile,"rw",)@ -> fileChannel=file.getChannel()@!(fileChannel.isOpen()) } -> IF { -> file.setLength(0L,)@ } -> TRY { -> file.setLength(expectedFileSize,)@ -> Preconditions.checkState(file.length()==expectedFileSize,"Expected File size of inflight events file does not match the "+"current file size. Checkpoint is incomplete.",)@ -> file.seek(0,)@ -> checksum=digest.digest(buffer.array(),)@ -> file.write(checksum,)@ } CATCH(IOException) { -> LOG.error("Error while writing checkpoint to disk.",ex,)@ } } CATCH(Exception) {}
results[https://github.com/ottomata/flume-ng/blob/1a2e0d7a7629eb32821c780d48a2c17f4e76a59e/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/FlumeEventQueue.java][serializeAndWrite][1] = -> TRY {  -> IF { -> file.setLength(0L,)@ } -> IF { -> file=new RandomAccessFile(inflightEventsFile,"rw",)@ -> fileChannel=file.getChannel()@!(fileChannel.isOpen()) } -> TRY { -> file.setLength(expectedFileSize,)@ -> Preconditions.checkState(file.length()==expectedFileSize,"Expected File size of inflight events file does not match the "+"current file size. Checkpoint is incomplete.",)@ -> file.seek(0,)@ -> checksum=digest.digest(buffer.array(),)@ -> file.write(checksum,)@ } CATCH(IOException) { -> LOG.error("Error while writing checkpoint to disk.",ex,)@ } } CATCH(Exception) {}
results[https://github.com/ttron/lab/blob/2139f978c863b2de04fa565a8df4d2fdbf2ceb8d/HttpCore-4.3/httpcore-nio/src/test/java/org/apache/http/impl/nio/codecs/TestLengthDelimitedDecoder.java][testDecodingFileWithOffsetAndBufferedSessionData][2] = -> TRY {  -> beginning=EncodingUtils.getAsciiBytes("beginning; ",)@ -> testfile=new RandomAccessFile(this.tmpfile,"rw",)@ -> TRY { -> testfile.write(beginning,)@ } FINALLY { -> testfile.close()@ } -> testfile=new RandomAccessFile(this.tmpfile,"rw",)@ -> TRY { -> fchannel=testfile.getChannel()@ -> LOOP { -> IF { -> testfile.setLength(pos,)@testfile.length()<pos } } } FINALLY { -> testfile.close()@ } } CATCH(Exception) {}
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/HttpCore-4.2/httpcore-nio/src/test/java/org/apache/http/impl/nio/codecs/TestLengthDelimitedDecoder.java][testDecodingFileWithOffsetAndBufferedSessionData][1] = -> TRY {  -> beginning="beginning; ".getBytes("US-ASCII",)@ -> testfile=new RandomAccessFile(this.tmpfile,"rw",)@ -> TRY { -> testfile.write(beginning,)@ } FINALLY { -> testfile.close()@ } -> testfile=new RandomAccessFile(this.tmpfile,"rw",)@ -> TRY { -> fchannel=testfile.getChannel()@ -> LOOP { -> IF { -> testfile.setLength(pos,)@testfile.length()<pos } } } FINALLY { -> testfile.close()@ } } CATCH(Exception) {}
results[https://github.com/StigLau/vdvil/blob/16ad8c66e9eb5b405b6c27e0f3a25e467575aa4b/audio-renderer/src/main/java/no/bouvet/kpro/renderer/audio/WaveFileTarget.java][<init>][2] = -> TRY {  -> _raf=new RandomAccessFile(file,"rw",)@ -> _raf.write( new byte[],)@ -> _raf.writeInt(0,)@ -> _raf.write( new byte[],)@ -> _raf.write( new byte[],)@ -> _raf.writeInt(swap32(16,),)@ -> _raf.writeShort(swap16(1,),)@ -> _raf.writeShort(swap16(2,),)@ -> _raf.writeInt(swap32(OldRenderer.RATE,),)@ -> _raf.writeInt(swap32(OldRenderer.RATE*4,),)@ -> _raf.writeShort(swap16(4,),)@ -> _raf.writeShort(swap16(16,),)@ -> _raf.write( new byte[],)@ -> _raf.writeInt(0,)@ } CATCH(Exception) {}
results[https://github.com/Androxyde/Flashtool/blob/58f33d33feddcf72686f5093787c8b62b26fbd9d/src/flashsystem/SinFile.java][dumpImageV1_2][1] = -> TRY {  -> TRY { -> fout=OS.generateEmptyFile(getImageFileName(),sinheader.getOutfileLength(),(byte) 0xFF,)@ -> LOOP { -> findata.read(data,)@ -> b.validate(data,)@ -> fout.seek((blocks.size()==1)?0:b.getOffset(),)@i<blocks.size() -> fout.write(data,)@ } -> fout.close()@ } CATCH(Exception) { -> MyLogger.getLogger().error("Error while extracting data : "+e.getMessage(),)@ -> MyLogger.initProgress(0,)@ -> e.printStackTrace()@ } } CATCH(IOException) {}
results[https://github.com/mpatric/mp3agic/blob/7bcc62d40eaed06c66387f3613eaceef85d2d814/test-src/com/mpatric/mp3agic/app/Mp3RetagTest.java][testShouldRenameOneFileToBackupAndOtherFileToOriginalName][1] = -> TRY {  -> TRY { -> TRY { -> raFile=new RandomAccessFile(filename,"rw",)@ -> raFile.write( new byte[],)@ } FINALLY { -> IF { -> raFile.close()@raFile!=null } } -> TRY { -> raFile=new RandomAccessFile(filename+".retag","rw",)@ -> raFile.write( new byte[],)@ } FINALLY { -> IF { -> raFile.close()@raFile!=null } } -> deleteFile(filename,)@ -> deleteFile(filename+".bak",)@ } } CATCH(Exception) {}
results[https://github.com/chgenly/experiment/blob/781c161ac3edca8aa8bbf8219710d40948a85d2e/DataExtractionOSM/src/rtree/Node.java][writeLastElements][1] = -> TRY {  -> TRY { -> IF { -> bs=new ByteArrayOutputStream(Node.NODE_SIZE,)@ -> ds=new DataOutputStream(bs,)@ } -> IF { -> bs.flush()@ -> file.write(bs.toByteArray(),)@ } } CATCH(Exception) { -> e.printStackTrace()@ -> TRY { -> writeNodeHeader(nodeIndex,totalElements+elmts.length,parent,elementSize,elementType,)@ } CATCH(Exception) { -> throw new NodeWriteException(ex.getMessage(),)@ } -> throw new NodeWriteException("Node.writeLastElement: Can't write element to file",)@ } } CATCH(NodeWriteException) {}
results[https://github.com/eclipse/jgit/blob/767be14f34b07e5acb8f332032fd97dd3e19a059/org.eclipse.jgit.test/tst/org/eclipse/jgit/api/HugeFileTest.java][testAddHugeFile][3] = -> TRY {  -> rf=new RandomAccessFile(file,"rw",)@ -> rf.setLength(4429185024L,)@ -> rf.close()@ -> rf=new RandomAccessFile(file,"rw",)@ -> rf.write(0,)@ -> rf.close()@ -> rf=new RandomAccessFile(file,"rw",)@ -> rf.write('a',)@ -> rf.close()@ -> rf=new RandomAccessFile(file,"rw",)@ -> rf.setLength(134217728L,)@ -> rf.write(0,)@ -> rf.close()@ -> rf=new RandomAccessFile(file,"rw",)@ -> rf.write('a',)@ -> rf.close()@ -> rf=new RandomAccessFile(file,"rw",)@ -> rf.setLength(3429185024L,)@ -> rf.write(0,)@ -> rf.close()@ -> rf=new RandomAccessFile(file,"rw",)@ -> rf.write('a',)@ -> rf.close()@ } CATCH(Exception) {}
results[https://github.com/ttron/lab/blob/2139f978c863b2de04fa565a8df4d2fdbf2ceb8d/HttpCore-4.3/httpcore-nio/src/test/java/org/apache/http/impl/nio/codecs/TestIdentityDecoder.java][testDecodingFileWithOffsetAndBufferedSessionData][2] = -> TRY {  -> beginning=EncodingUtils.getAsciiBytes("beginning; ",)@ -> testfile=new RandomAccessFile(this.tmpfile,"rw",)@ -> TRY { -> testfile.write(beginning,)@ } FINALLY { -> testfile.close()@ } -> testfile=new RandomAccessFile(this.tmpfile,"rw",)@ -> TRY { -> fchannel=testfile.getChannel()@ -> LOOP { -> IF { -> testfile.setLength(pos,)@testfile.length()<pos } } -> Assert.assertEquals(testfile.length()-7-beginning.length,metrics.getBytesTransferred(),)@ } FINALLY { -> testfile.close()@ } } CATCH(Exception) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/545cb5012cfeafb13506fc1ac1e5e8d8f32a7df1/src/servers/src/org/xtreemfs/sandbox/tests/ReplicationStressTest/ReplicationStressTest.java][writeTmpFileToDisk][1] = -> TRY {  -> TRY { -> out=new java.io.RandomAccessFile(tmpDir+tmpFilename,"rw",)@ -> IF { -> data=generateData((int) filesize,)@filesize<=PART_SIZE -> out.write(data,)@ } ELSE { -> LOOP { -> data=generateData(PART_SIZE,)@out.getFilePointer()+PART_SIZE<filesize && !(filesize<=PART_SIZE) -> out.write(data,)@out.getFilePointer()+PART_SIZE<filesize } -> IF { -> data=generateData((int) filesize-out.getFilePointer(),)@out.getFilePointer()<filesize && !(filesize<=PART_SIZE) -> out.write(data,)@out.getFilePointer()<filesize } } } FINALLY { -> IF { -> out.close()@out!=null } } } CATCH(Exception) {}
results[https://github.com/RyosukeMiyahara/JAVA_TRAINING/blob/e8fadc3ec73b509745bbb298a9fbae2eac74a04e/JAVATRAINING_ROOT/JPL/ch20/ex20_08/ParsentParse.java][createParseTableFile][1] = -> TRY { -> input=new RandomAccessFile("JPL/ch20/ex20_08/test_input.txt","r",)@ -> output=new RandomAccessFile("JPL/ch20/ex20_08/test_output.txt","rw",)@ } CATCH(Exception) { -> System.out.println(e,)@ } -> TRY { -> LOOP { -> IF { -> output.write(Byte.valueOf(String.valueOf(input.getFilePointer(),),),)@(current=input.read())!=-1 } } } CATCH(Exception) { -> System.out.println(e,)@ } -> TRY { -> input.close()@ -> output.close()@ } CATCH(Exception) { -> System.out.println(e,)@ }
results[https://github.com/motionbox/jmonkeyengine/blob/49bb819b1fb40224f776a1255b86f37cfe0e9a03/engine/src/desktop/com/jme3/app/state/MjpegFileWriter.java][finishAVI][2] = -> TRY {  -> fileSize=(int) aviFile.length()@ -> listSize=(int) fileSize-8-aviMovieOffset-indexlistBytes.length@ -> raf=new RandomAccessFile(aviFile,"rw",)@ -> raf.write(new RIFFHeader(fileSize,).toBytes(),)@ -> raf.write(new AVIMainHeader().toBytes(),)@ -> raf.write(new AVIStreamList().toBytes(),)@ -> raf.write(new AVIStreamHeader().toBytes(),)@ -> raf.write(new AVIStreamFormat().toBytes(),)@ -> raf.write(new AVIJunk().toBytes(),)@ -> raf.write(new AVIMovieList(listSize,).toBytes(),)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/thihy/lucene/blob/0666c43457bc16b46de89efc433cf4c6481ef948/solr/core/src/test/org/apache/solr/search/TestRecovery.java][testRecoveryMultipleLogs][5] = -> TRY {  -> TRY { -> raf=new RandomAccessFile(new File(logDir,fname,),"rw",)@ -> raf.seek(raf.length(),)@ -> raf.writeLong(0xffffffffffffffffL,)@ -> raf.writeChars("This should be appended to a good log file, representing a bad partially written record.",)@ -> raf.seek(0,)@ -> raf.readFully(content,)@ -> raf.close()@ -> findReplace("AAAAAA".getBytes("UTF-8",),"aaaaaa".getBytes("UTF-8",),content,)@ -> findReplace("BBBBBB".getBytes("UTF-8",),"bbbbbb".getBytes("UTF-8",),content,)@ -> findReplace("CCCCCC".getBytes("UTF-8",),"cccccc".getBytes("UTF-8",),content,)@ -> raf=new RandomAccessFile(new File(logDir,fname2,),"rw",)@ -> raf.write(content,)@ -> raf.close()@ } } CATCH(Exception) {}
results[https://github.com/acidrain42/misc/blob/88500e747b0a44bc4efd362a397e6e67c41e502d/mp3player/src/org/acidrain/id3/ID3v1.java][ecrireTag][1] = -> tag="TAG".getBytes()@ -> TRY { -> file=new RandomAccessFile(chanson,"rws",)@ -> IF { -> file.seek(file.length()-128,)@ } ELSE { -> file.seek(file.length(),)@ } -> titre=arrangerLongueur(this.titre,30,)@ -> artiste=arrangerLongueur(this.artiste,30,)@ -> album=arrangerLongueur(this.album,30,)@ -> annee=arrangerLongueur(this.annee,4,)@ -> commentaire=arrangerLongueur(this.commentaire,28,)@ -> piste[1]=(byte) this.piste@ -> genre[0]=(byte) this.genre@ -> file.write(tag,)@ -> file.write(titre,)@ -> file.write(artiste,)@ -> file.write(album,)@ -> file.write(annee,)@ -> file.write(commentaire,)@ -> file.write(piste,)@ -> file.write(genre,)@ -> file.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/rajivm/peerbox/blob/f41f9064a79250bb9bf392587f838ae27e83c7ac/src/org/peerbox/network/http/HttpResponseHandler.java][messageReceived][1] = -> TRY {  -> IF { -> IF { -> return @!(e.getMessage() instanceof HttpResponse) } -> IF { -> IF { -> content=response.getContent()@!(!(e.getMessage() instanceof HttpResponse)) && response.getStatus().getCode()==200 && !(response.isChunked()) -> IF { -> downloadFile.write(content.array(),)@!(!(e.getMessage() instanceof HttpResponse)) && content.readable() -> downloadFile.close()@!(!(e.getMessage() instanceof HttpResponse)) } } } } ELSE { -> chunk=(HttpChunk) e.getMessage()@ -> IF { -> downloadFile.close()@ } ELSE { -> downloadFile.write(chunk.getContent().array(),)@!(chunk.isLast()) } } } CATCH(Exception) {}
results[https://github.com/LSTS/neptus/blob/4d58343c2f0b754328d5bc72f465001d443238c5/plugins-dev/ipcam/pt/lsts/neptus/plugins/ipcam/MJPEGCreator.java][finishAVI][1] = -> TRY {  -> size=aviFile.length()@ -> NeptusLog.pub().info("<###>   adding file size ("+size+") to file",)@ -> raf=new RandomAccessFile(aviFile,"rw",)@ -> raf.seek(4,)@ -> raf.write(intBytes(swapInt((int) size-8,),),)@ -> raf.seek(aviMovieOffset+4,)@ -> raf.write(intBytes(swapInt((int) size-8-aviMovieOffset-indexlistBytes.length,),),)@ -> IF { -> NeptusLog.pub().info("<###>   adding frame count ("+numFrames+") to file",)@ -> raf.seek(48,)@ -> raf.write(intBytes(swapInt((int) numFrames,),),)@ -> raf.seek(140,)@ -> raf.write(intBytes(swapInt((int) numFrames,),),)@ } -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/hongxucn/platform_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/libcore/java/io/OldRandomAccessFileTest.java][test_read_write][40] = -> TRY {  -> testBuf=testString.getBytes()@ -> raf=new java.io.RandomAccessFile(fileName,"rw",)@ -> LOOP { -> TRY { -> raf.write(testBuf[i],)@i<testString.length() } CATCH(Exception) { -> fail("Test 1: Unexpected exception while writing: "+e.getMessage(),)@ } } -> raf.seek(0,)@ -> LOOP { -> assertEquals(String.format("Test 2: Incorrect value written or read at index %d; ",i,),testBuf[i],raf.read(),)@i<testString.length() } -> assertTrue("Test 3: End of file indicator (-1) expected.",raf.read()==-1,)@ -> raf.close()@ -> TRY { -> raf.write(42,)@ } -> TRY { -> raf.read()@ } } CATCH(IOException) {}
results[https://github.com/snowfix/android_dalvik/blob/f6c387128427e121477c1b32ad35cdcaa5101ba3/libcore/luni/src/test/java/tests/api/java/io/RandomAccessFileTest.java][test_write$B][42] = -> TRY {  -> raf=new java.io.RandomAccessFile(fileName,"rw",)@ -> TRY { -> raf.write(nullByteArray,)@ } -> TRY { -> raf.write(testString.getBytes(),)@ } CATCH(Exception) { -> fail("Test 2: Unexpected exception: "+e.getMessage(),)@ } -> raf.close()@ -> TRY { -> raf.write( new byte[],)@ } CATCH(IOException) { -> fail("Test 3: Unexpected IOException: "+e.getMessage(),)@ } -> TRY { -> raf.write(testString.getBytes(),)@ } -> assertEquals("Incorrect bytes written",testString,new String(rbuf,0,testLength,),)@ } CATCH(IOException) {}
results[https://github.com/georgeparisis/dhtbd/blob/a188954ca82546b9d2ab5f16ff51d436fb65b300/original/blast_pastry/src/blast/storage/ExternalFileStorage.java][doWork][1] = -> TRY {  -> IF { -> storage.seek(fileIndex.longValue(),)@ -> storage.write(nullArray,0,wStartCopy*BlastImpl.sectorSize,)@ -> storage.write(data,wIndex*BlastImpl.sectorSize,wCopyLength*BlastImpl.sectorSize,)@ -> storage.write(nullArray,0,BlastImpl.chunk_size-wStartCopy-wCopyLength*BlastImpl.sectorSize,)@ } ELSE { -> storage.seek(val.fileOffset.longValue()+wStartCopy*BlastImpl.sectorSize,)@ -> storage.write(data,wIndex*BlastImpl.sectorSize,wCopyLength*BlastImpl.sectorSize,)@ } } CATCH(Exception) {}
