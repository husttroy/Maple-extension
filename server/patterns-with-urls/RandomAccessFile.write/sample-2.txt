results[https://github.com/fqrouter/fqrouter/blob/72ced9aa6d25026d12fa1eb8aba9d08d4724cc15/android/src/fq/router/life/DownloadService.java][write][1] = -> TRY {  -> randomAccessFile.seek(offset,)@ -> randomAccessFile.write(buffer,0,length,)@ } CATCH(Exception) {}
results[https://github.com/fqrouter/fqrouter/blob/189077cdd078cf81df978cc424058174271c4799/android/src/fq/router/utils/Downloader.java][write][1] = -> TRY {  -> randomAccessFile.seek(offset,)@ -> randomAccessFile.write(buffer,0,length,)@ } CATCH(Exception) {}
results[https://github.com/jmcc0nn3ll/jetty-project/blob/149cb6c90c1e6bb89d913de2bb4862d0c69e6a1a/modules/server/jetty/src/main/java/org/mortbay/io/nio/RandomAccessFileBuffer.java][poke][17] = -> TRY { -> _file.seek(index,)@ -> _file.write(b,offset,length,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/fa671d8195f7c24010dd16b9d8139026a8bac791/java/servers/test/org/xtreemfs/test/common/monitoring/OSDMonitoringTest.java][testNumOpenFiles][1] = -> TRY {  -> raf=f.open("rw",0777,)@ -> raf.write(data,0,data.length,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/StigLau/vdvil/blob/16ad8c66e9eb5b405b6c27e0f3a25e467575aa4b/audio-renderer/src/main/java/no/bouvet/kpro/renderer/audio/WaveFileTarget.java][write][1] = -> TRY { -> _raf.write(buffer,offset<<2,duration<<2,)@ } CATCH(Exception) { -> log.debug("Exception writing: "+e.toString(),)@ }
results[https://github.com/olanto/MYCAT/blob/188206ac8618d132c62a1ac055a9a15cc34c806a/prog/coreidx/src/org/olanto/idxvli/IdxIO.java][savePosChar][2] = -> TRY { -> pcf.seek(lastposchar,)@ -> intTobyte(poschar,length*4,byteidx,)@ -> pcf.write(byteidx,0,length*4,)@ } CATCH(Exception) { -> System.err.println("IO error in saveseq doc="+d,)@ -> e.printStackTrace()@ }
results[https://github.com/cnfree/sanguo/blob/3dabef06edf43caae99a817e51b4d76049ecf471/org.sf.feeling.sanguo.patch_1.9a/src/org/sf/feeling/sanguo/patch/util/UpdateUtil.java][download][1] = -> TRY {  -> oSavedFile=new RandomAccessFile(file,"rw",)@ -> LOOP { -> oSavedFile.write(b,0,nRead,)@(nRead=input.read(b,0,1024,))>0&&nStartPos<nEndPos } -> oSavedFile.close()@ } CATCH(Exception) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/ba3583c3fdb92050e88960eb18b0e3a6d55424b3/java/servers/test/org/xtreemfs/test/osd/rwre/RWReplicationTest.java][testReplicationWithClient][1] = -> TRY {  -> raf=f.open("rw",0444,)@ -> raf.write(data,0,data.length,)@ -> raf.seek(1024,)@ -> raf.forceReplica(1,)@ -> raf.read(data,0,data.length,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/mcm46/lab2/blob/87a713453f5a521d08c163334654fca4402e4a23/Lab3/virtualdisk/VirtualDisk.java][formatStore][1] = -> setBuffer((byte) 0,b,Constants.BLOCK_SIZE,)@ -> LOOP { -> TRY { -> _file.seek(seekLen,)@ -> _file.write(b,0,Constants.BLOCK_SIZE,)@ } CATCH(Exception) { -> System.out.println("Error in format: WRITE operation failed at the device block "+i,)@i<Constants.NUM_OF_BLOCKS } }
results[https://github.com/olanto/MYCAT/blob/188206ac8618d132c62a1ac055a9a15cc34c806a/prog/coreidx/src/org/olanto/idxvli/IdxIO.java][saveBag][1] = -> TRY { -> bf.seek(lastbag,)@ -> bf.writeInt(length,)@ -> intTobyte(bag,length*4,byteidx,)@ -> bf.write(byteidx,0,length*4,)@ } CATCH(Exception) { -> System.err.println("IO error in savebag doc="+d,)@ -> e.printStackTrace()@ }
results[https://github.com/reppie/xchange/blob/7807f15f1bf440b9dc7081d30011d86f81737509/projects/xchange/StorageServer.java][handlePost][1] = -> TRY {  -> outputStream=new RandomAccessFile(createFile(fileName,blockNr,),"rw",)@ -> LOOP { -> temp=in.read(buffer,offset,currentBlockSize-offset,)@offset<currentBlockSize&&temp!=-1 } -> outputStream.write(buffer,0,offset,)@ -> outputStream.close()@ } CATCH(Exception) {}
results[https://github.com/molgenis/systemsgenetics/blob/a99c65688df938089f7c486cf98bb85180a4de4a/genetica-libraries/src/main/java/umcg/genetica/io/bin/RandomAccessFile.java][testBlocks][4] = -> LOOP { -> data[i]=(byte) i%256@i<data.length } -> TRY { -> outFile=new RandomAccessFile(filename,RandomAccessFile.WRITE|RandomAccessFile.CREATE,bufferSize,)@ -> LOOP { -> blockSize=(i<data.length/2)?3:13@i<data.length -> blockSize=(i+blockSize>=data.length)?data.length-i:blockSize@i<data.length -> outFile.write(data,i,blockSize,)@i<data.length } -> outFile.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/jiangchao1987/pokr/blob/2922cc7f9035b36b821e5d95d4186287b7cc8543/src/main/java/com/yanchuanli/games/pokr/test/http/ForkJoinDownloader.java][download][2] = -> TRY { -> LOOP { -> outputStream=new RandomAccessFile(file,"rw",)@ -> outputStream.seek(startPosition,)@startPosition<endPosition-1 -> LOOP { -> outputStream.write(buffer,0,count,)@(count=inputStream.read(buffer,0,buffer.length,))>0 } -> outputStream.close()@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/Najon/Grabber/blob/61d221bffb6b21453a6ebe42bd3fd36c74ed0079/org/esgi/java/grabber/resource/Ressource.java][save][1] = -> TRY { -> file=new RandomAccessFile(localFile,"rw",)@ -> LOOP { -> file.write(buffer,0,len,)@-1!=(len=datas.read(buffer,)) -> LOOP { -> listener.incDownloaded(this,len,)@-1!=(len=datas.read(buffer,)) } } -> file.close()@ } CATCH(Exception) { -> System.out.println("Opening Fail on : "+localFile+"("+urlString+")"+domain+relativePath,)@ }
results[https://github.com/KKBOX/android_kktoolkit/blob/c09f50cda937b234e6378a09c62eb4a6c066bb35/src/com/kkbox/toolkit/internal/image/KKImageRequest.java][cryptToFile][2] = -> TRY {  -> targetFile=new RandomAccessFile(targetFilePath,"rw",)@ -> LOOP { -> readLength=sourceFile.read(buffer,0,BUFFER_SIZE,)@ -> IF { -> IF { -> buffer=cipher.doFinal(buffer,)@cipher!=null } -> targetFile.write(buffer,0,readLength,)@readLength!=-1 } } -> targetFile.close()@ } CATCH(Exception) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/7a4eb7cf58617a13c17fec12ce7f70c317ed0fa5/java/servers/test/org/xtreemfs/common/clients/ClientTest.java][testData][1] = -> TRY {  -> ra=f.open("rw",0555,)@ -> ra.seek(2,)@ -> wbytes=ra.write(data,0,data.length,)@ -> assertEquals(2048,wbytes,)@ -> ra.seek(0,)@ -> rbytes=ra.read(data,0,data.length,)@ -> ra.seek(2,)@ -> rbytes=ra.read(data,0,data.length,)@ -> ra.seek(4,)@ -> rbytes=ra.read(data,0,data.length,)@ -> ra.close()@ } CATCH(Exception) {}
results[https://github.com/wangkenan/d9game/blob/d0dd2cde11083a3b836c9de9f65b1fbb2f058157/src/me/key/appmarket/tool/DownloadService.java][quiesceDownFile][1] = -> TRY { -> IF { -> ranFile=new RandomAccessFile(tempFile,"rwd",)@ -> ranFile.setLength(flieLength,)@ -> LOOP { -> read=bis.read(buffer,)@read!=-1 -> IF { -> ranFile.write(buffer,0,read,)@read!=-1 } } -> ranFile.close()@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/firefoxmmx2/jdy/blob/63b14c7b7d0a4058c39369d51e3b4aeabf3e1e5b/src/com/aisino2/basicsystem/action/QyxxExpImpAction.java][writeXmlFile][2] = -> TRY { -> os=new RandomAccessFile(fileName,"rw",)@ -> os.write(bytetemp,0,bytetemp.length,)@ } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> TRY { -> IF { -> os.close()@os!=null } } FINALLY { -> e.printStackTrace()@ } }
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/b6b5f1de67babfe67e831d47995cb374bacfe71f/java/servers/test/org/xtreemfs/test/osd/OSDDrainTest.java][testRemoveOSD][2] = -> TRY {  -> LOOP { -> raf=files[i].open("rw",0777,)@i<NUMBER_OF_FILES -> raf.write(data,0,data.length,)@ -> raf.flush()@ -> raf.close()@ } -> LOOP { -> raf=files[i].open("r",0777,)@i<NUMBER_OF_FILES -> raf.read(data,0,data.length,)@ -> raf.close()@ -> LOOP { -> assertEquals('f',data[j],)@j<SIZE } } } CATCH(Exception) {}
results[https://github.com/quickbundle/qb-core/blob/bab5ebedd4e85b87e435b0812852aca5d591859d/java-lib/quickbundle-tools/src/main/java/org/quickbundle/tools/helper/io/RmFileCombination.java][CombFile][1] = -> TRY { -> raf=new RandomAccessFile(srcDirectory+fileRealName,"rw",)@ -> LOOP { -> raf.seek(alreadyWrite,)@ -> LOOP { -> raf.write(bt,0,len,)@(len=fis.read(bt,))>0 } } -> raf.close()@ } CATCH(Exception) { -> e.printStackTrace()@ -> TRY { -> IF { -> raf.close()@raf!=null } } }
results[https://github.com/jlaloi/TrayPass/blob/556095551986a13d43eb30e85447bbce42eb01ec/src/traypass/tools/ToolDownload.java][downloadFile][1] = -> TRY { -> LOOP { -> file.seek(pos,)@ -> file.write(buf,0,len,)@(len=inputStream.read(buf,))>0 } } CATCH(Exception) { -> logger.error(e,)@ } FINALLY { -> IF { -> TRY { -> inputStream.close()@inputStream!=null } FINALLY { -> logger.error(ioe,)@ } } }
results[https://github.com/jlaloi/TrayPass/blob/f9a5711e925b0f3674a827ffacfef2c5db8f0e50/src/main/java/traypass/tools/ToolDownload.java][downloadFile][1] = -> TRY { -> LOOP { -> file.seek(pos,)@ -> file.write(buf,0,len,)@(len=inputStream.read(buf,))>0 } } CATCH(Exception) { -> logger.error("Error",e,)@ } FINALLY { -> IF { -> TRY { -> inputStream.close()@inputStream!=null } FINALLY { -> logger.error("Error",ioe,)@ } } }
results[https://github.com/allankin/gproject/blob/21bcea6156c5283254a036e48c5bd18d69857c2e/TXL/source/client/txl-android/src/txl/upgrade/ResourceManager.java][run][1] = -> TRY { -> IF { -> IF { -> IF { -> IF { -> threadfile=new RandomAccessFile(saveFile,"rwd",)@ -> threadfile.seek(startPos,)@ -> LOOP { -> threadfile.write(buffer,0,offset,)@(offset=inStream.read(buffer,))!=-1 } -> threadfile.close()@ } } } } } CATCH(Exception) { -> Tool.sendUpgradeMessage(ctx,TxlConstants.MSG_CHECK_UPGRADE_ERROR,)@ -> e.printStackTrace()@ }
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/e36781ae7f99da152b83b57db6e49175764785f8/servers/test/org/xtreemfs/test/io/RandomAccessFileTest.java][testReadAndWriteObject][1] = -> TRY {  -> randomAccessFile=new RandomAccessFile("rw",mrc1Address,volumeName+"/myDir/test4.txt",testEnv.getRpcClient(),userID,groupIDs,)@ -> bytesIn=new String("Hallo",).getBytes()@ -> data=ReusableBuffer.wrap(bytesIn,)@ -> randomAccessFile.writeObject(0,0,data,)@ -> result=randomAccessFile.readObject(0,0,length,)@ -> assertEquals(new String(bytesIn,),new String(result.array(),),)@ -> bytesRead=randomAccessFile.checkObject(0l,)@ -> bytesIn=content.getBytes()@ -> randomAccessFile.write(bytesIn,0,length,)@ -> res=randomAccessFile.checkObject(0l,)@ -> res=randomAccessFile.checkObject(1l,)@ } CATCH(Exception) {}
results[https://github.com/lietou/insight/blob/8daf9f2df8d649e00141a67b8dcf9e8125ac23bb/cat-core/src/main/java/com/dianping/cat/storage/internal/AbstractBucket.java][storeById][2] = -> TRY { -> buf=ChannelBuffers.dynamicBuffer(8192,)@ -> encode(data,buf,)@ -> length=buf.readInt()@ -> first=attributes.getBytes("utf-8",)@ -> num=String.valueOf(length,).getBytes("utf-8",)@ -> offset=m_out.getFilePointer()@ -> m_out.write(first,)@ -> m_out.write(num,)@ -> m_out.write('\n',)@ -> m_out.write(buf.array(),buf.readerIndex(),length,)@ -> m_out.write('\n',)@ -> m_out.getChannel().force(true,)@ } CATCH(Exception) { -> m_logger.error(String.format("Error when writing to file(%s)!",m_file,),e,)@ }
results[https://github.com/frostwire/frostwire-android/blob/08b4ce8de0ba4b471334495ef59bed41e3a3eebf/common/vuze/azureus2/src/org/gudy/azureus2/core3/ipfilter/impl/IpFilterManagerImpl.java][addDescription][9] = -> IF { -> return null@rafDescriptions==null } -> TRY { -> IF { -> return null@description==null||description.length==0 && !(rafDescriptions==null) } -> start=(int) rafDescriptions.getFilePointer()@!(description==null||description.length==0) && !(rafDescriptions==null) -> len=(int) rafDescriptions.length()@!(description==null||description.length==0) && !(rafDescriptions==null) -> IF { -> return null@!(description==null||description.length==0) && len+61>=0x1FFFFFF && !(rafDescriptions==null) } -> IF { -> rafDescriptions.seek(len,)@!(len+61>=0x1FFFFFF) && start!=len && !(description==null||description.length==0) && !(rafDescriptions==null) -> start=(int) rafDescriptions.getFilePointer()@!(len+61>=0x1FFFFFF) && start!=len && !(description==null||description.length==0) && !(rafDescriptions==null) } -> IF { -> rafDescriptions.write(description,)@!(len+61>=0x1FFFFFF) && !(description==null||description.length==0) && !(rafDescriptions==null) } ELSE { -> rafDescriptions.write(description,0,61,)@!(len+61>=0x1FFFFFF) && !(description==null||description.length==0) && !(rafDescriptions==null) } -> end=(int) rafDescriptions.getFilePointer()@!(len+61>=0x1FFFFFF) && !(description==null||description.length==0) && !(rafDescriptions==null) } CATCH(Exception) { -> e.printStackTrace()@!(rafDescriptions==null) }
results[https://github.com/marytts/marytts/blob/b443b5a4b029ca3b7101a926ce81635a1beff664/src/main/java/marytts/tools/install/ComponentDescription.java][run][2] = -> TRY { -> file=new RandomAccessFile(archiveFile,"rw",)@ -> file.seek(downloaded,)@ -> LOOP { -> read=stream.read(buffer,0,len,)@ -> file.write(buffer,0,read,)@ } } CATCH(Exception) { -> e.printStackTrace()@ -> error()@ } FINALLY { -> IF { -> TRY { -> file.close()@file!=null } } } FINALLY { -> IF { -> TRY { -> stream.close()@stream!=null } } }
results[https://github.com/NineWorlds/serenity-android/blob/ade5503f6d03ef26a50806611c73626e63e068b6/serenity-app/src/main/java/com/castillo/dd/Download.java][run][1] = -> TRY { -> IF { -> file=new RandomAccessFile(destination+"/"+fileName,"rw",)@ -> file.seek(downloaded,)@ -> LOOP { -> read=stream.read(buffer,)@ -> file.write(buffer,0,read,)@ } } } CATCH(Exception) { -> error()@ } FINALLY { -> IF { -> TRY { -> file.close()@file!=null } } } FINALLY { -> IF { -> TRY { -> stream.close()@stream!=null } } }
results[https://github.com/tengcomplex/rssamantha/blob/6752da4fc9c033465b7158c90f60b0006285fb02/src/com/drinschinz/rssamantha/Download.java][run][1] = -> TRY { -> file=new RandomAccessFile(targetfolder+getFileName(url.getFile(),),"rw",)@ -> file.seek(downloaded,)@ -> LOOP { -> read=stream.read(buffer,)@ -> file.write(buffer,0,read,)@ } } CATCH(Exception) { -> error()@ } FINALLY { -> IF { -> TRY { -> file.close()@file!=null } } } FINALLY { -> IF { -> TRY { -> stream.close()@stream!=null } } }
results[https://github.com/walkerart/services2.4/blob/dac6a8e8009c05593a6b6f584842f13f8f862014/services/common/src/main/java/org/collectionspace/services/common/Download.java][run][3] = -> TRY { -> file=new RandomAccessFile(javaFile,"rw",)@ -> file.seek(downloaded,)@ -> LOOP { -> read=stream.read(buffer,)@ -> file.write(buffer,0,read,)@ } } CATCH(Exception) { -> e.printStackTrace()@ -> error()@ } FINALLY { -> IF { -> TRY { -> file.close()@file!=null } FINALLY { -> e.printStackTrace()@ } } -> IF { -> TRY { -> stream.close()@stream!=null } FINALLY { -> e.printStackTrace()@ } } }
results[https://github.com/Ramblurr/Anki-Android/blob/23a390f0a8d2fea7462bb8ab81bc69299706d7f2/src/com/ichi2/anki/services/DownloadManagerService.java][doInBackground][1] = -> TRY { -> file=new RandomAccessFile(mDestination+"/tmp/"+download.getTitle()+"."+download.getId()+".shared.zip.tmp","rw",)@ -> LOOP { -> read=is.read(buffer,)@ -> file.write(buffer,0,read,)@ -> download.setDownloaded(download.getDownloaded()+read,)@download.getStatus()==Download.STATUS_DOWNLOADING } } CATCH(Exception) { -> e.printStackTrace()@ -> Log.i(AnkiDroidApp.TAG,"Exception Error = "+e.getMessage(),)@ -> download.setStatus(Download.STATUS_ERROR,)@ -> publishProgress()@ } FINALLY { -> IF { -> TRY { -> file.close()@file!=null } } } FINALLY { -> IF { -> TRY { -> is.close()@is!=null } } }
results[https://github.com/nkr1pt/popkorn-core/blob/94272f7ce3a3a8471e46c4c28d177a0972dcac6a/src/main/java/nkr1pt/popkorn/core/download/Downloader.java][download][1] = -> TRY { -> IF { -> throw new IOException(item.getAbsolutePath()+" could not be created.",)@outputFile==null } -> raf=new RandomAccessFile(outputFile,"rw",)@!(outputFile==null) -> raf.seek(item.getDownloaded(),)@!(outputFile==null) -> IF { -> LOOP { -> raf.write(buffer,0,read,)@(read=instream.read(buffer,))!=-1 && !(outputFile==null) } } } CATCH(Exception) { -> event=eventFactory.newEvent(EventType.DOWNLOAD_FAILED,item,this,)@ -> event.setException(e,)@ -> eventBus.fireEvent(event,)@ } FINALLY { -> TRY { -> IF { -> instream.close()@instream!=null } } FINALLY { -> IF { -> raf.close()@raf!=null } -> LOGGER.log(Level.SEVERE,ex.getMessage(),)@ -> StackTraceLogger.logStackTrace(LOGGER,Level.SEVERE,ex,)@ } }
results[https://github.com/nkr1pt/popkorn-core/blob/e00e2190c97f2c2e57853ebf44abc599bb1d3ddd/src/main/java/nkr1pt/popkorn/download/Downloader.java][download][1] = -> TRY { -> IF { -> throw new IOException(item.getAbsolutePath()+" could not be created.",)@outputFile==null } -> raf=new RandomAccessFile(outputFile,"rw",)@!(outputFile==null) -> raf.seek(item.getDownloaded(),)@!(outputFile==null) -> IF { -> LOOP { -> raf.write(buffer,0,read,)@(read=instream.read(buffer,))!=-1 && !(outputFile==null) } } } CATCH(Exception) { -> event=eventFactory.newEvent(EventType.DOWNLOAD_FAILED,item,)@ -> event.setException(e,)@ -> eventBus.fireEvent(event,)@ } FINALLY { -> TRY { -> IF { -> instream.close()@instream!=null } } FINALLY { -> IF { -> raf.close()@raf!=null } -> logger.log(Level.SEVERE,ex.getMessage(),)@ -> StackTraceLogger.logStackTrace(logger,Level.SEVERE,ex,)@ } }
results[https://github.com/fiji/TrakEM2/blob/ed7034647ee28fb59e0a2afd59e87fa40cac25f1/ini/trakem2/io/RagMipMaps.java][save][2] = -> IF { -> return false@!(ImageSaver.checkPath(path,)) } -> TRY { -> ra=new RandomAccessFile(new File(path,),"rw",)@!(!(ImageSaver.checkPath(path,))) -> h[0]=(byte) width>>24&0xff@!(!(ImageSaver.checkPath(path,))) -> h[1]=(byte) width>>16&0xff@!(!(ImageSaver.checkPath(path,))) -> h[2]=(byte) width>>8&0xff@!(!(ImageSaver.checkPath(path,))) -> h[3]=(byte) width&0xff@!(!(ImageSaver.checkPath(path,))) -> h[4]=(byte) height>>24&0xff@!(!(ImageSaver.checkPath(path,))) -> h[5]=(byte) height>>16&0xff@!(!(ImageSaver.checkPath(path,))) -> h[6]=(byte) height>>8&0xff@!(!(ImageSaver.checkPath(path,))) -> h[7]=(byte) height&0xff@!(!(ImageSaver.checkPath(path,))) -> h[8]=(byte) b.length@!(!(ImageSaver.checkPath(path,))) -> ra.write(h,)@!(!(ImageSaver.checkPath(path,))) -> IF { -> LOOP { -> ra.write(b[i],)@i<b.length && !(!(ImageSaver.checkPath(path,))) } } ELSE { -> LOOP { -> ra.write(b[i],)@i<b.length-1 && !(!(ImageSaver.checkPath(path,))) } -> ba=new ByteArrayOutputStream(b.length,)@!(!(ImageSaver.checkPath(path,))) -> def=new DeflaterOutputStream(ba,new Deflater(4,false,),1024,)@!(!(ImageSaver.checkPath(path,))) -> def.write(b[b.length-1],)@!(!(ImageSaver.checkPath(path,))) -> ra.write((byte[]) ImageSaver.Bbuf.get(ba,),0,ba.size(),)@!(!(ImageSaver.checkPath(path,))) } } CATCH(Exception) { -> IJError.print(e,)@!(!(ImageSaver.checkPath(path,))) } FINALLY { -> IF { -> TRY { -> ra.close()@null!=ra && !(!(ImageSaver.checkPath(path,))) } FINALLY { -> IJError.print(e,)@!(!(ImageSaver.checkPath(path,))) } } }
results[https://github.com/socialpercon/anki/blob/f32b758df664833130d5d75006a09df0fae43d71/src/com/ichi2/anki/services/DownloadManagerService.java][doInBackground][1] = -> TRY { -> file=new RandomAccessFile(mDestination+"/tmp/"+download.getFilename()+".anki.tmp","rw",)@ -> LOOP { -> read=iis.read(buffer,)@ -> file.write(buffer,0,read,)@ -> download.setDownloaded(download.getDownloaded()+read,)@download.getStatus()==Download.STATUS_DOWNLOADING } } CATCH(Exception) { -> e.printStackTrace()@ -> Log.i(AnkiDroidApp.TAG,"Exception Error = "+e.getMessage(),)@ -> download.setStatus(Download.STATUS_ERROR,)@ -> publishProgress()@ } FINALLY { -> Log.i(AnkiDroidApp.TAG,"finally",)@ -> IF { -> TRY { -> Log.i(AnkiDroidApp.TAG,"closing file",)@ } FINALLY { -> file.close()@file!=null -> Log.i(AnkiDroidApp.TAG,"exception closing file",)@ } } -> IF { -> TRY { -> Log.i(AnkiDroidApp.TAG,"closing iis",)@ } FINALLY { -> iis.close()@iis!=null -> Log.i(AnkiDroidApp.TAG,"closed iis",)@ -> Log.i(AnkiDroidApp.TAG,"exception closing iis: "+e.getMessage(),)@ } } }
results[https://github.com/Ramblurr/Anki-Android/blob/23a390f0a8d2fea7462bb8ab81bc69299706d7f2/src/com/ichi2/anki/services/DownloadManagerService.java][doInBackground][1] = -> TRY { -> file=new RandomAccessFile(mDestination+"/tmp/"+download.getTitle()+".anki.tmp","rw",)@ -> LOOP { -> read=iis.read(buffer,)@ -> file.write(buffer,0,read,)@ -> download.setDownloaded(download.getDownloaded()+read,)@download.getStatus()==Download.STATUS_DOWNLOADING } } CATCH(Exception) { -> e.printStackTrace()@ -> Log.i(AnkiDroidApp.TAG,"Exception Error = "+e.getMessage(),)@ -> download.setStatus(Download.STATUS_ERROR,)@ -> publishProgress()@ } FINALLY { -> Log.i(AnkiDroidApp.TAG,"finally",)@ -> IF { -> TRY { -> Log.i(AnkiDroidApp.TAG,"closing file",)@ } FINALLY { -> file.close()@file!=null -> Log.i(AnkiDroidApp.TAG,"exception closing file",)@ } } -> IF { -> TRY { -> Log.i(AnkiDroidApp.TAG,"closing iis",)@ } FINALLY { -> iis.close()@iis!=null -> Log.i(AnkiDroidApp.TAG,"closed iis",)@ -> Log.i(AnkiDroidApp.TAG,"exception closing iis: "+e.getMessage(),)@ } } }
results[https://github.com/heyongjian/joy_launcher/blob/ca1531bb74df7487f0d8c6b676b48a80863af5fc/src/com/joy/launcher2/download/DownloadManager.java][run][1] = -> TRY { -> randomAccessFile=new RandomAccessFile(file,"rwd",)@!(is==null) -> randomAccessFile.seek(startPos,)@!(is==null) -> LOOP { -> IF { -> return @(len=is.read(b,))!=-1 && !(is==null) } -> randomAccessFile.write(b,0,len,)@(len=is.read(b,))!=-1 && !(is==null) } } CATCH(Exception) { -> Log.i(TAG,"DownLoadTask error "+e,)@ } FINALLY { -> IF { -> Log.i(TAG,"download over",)@ } -> callback.downloadUpdate()@ -> IF { -> IF { -> Log.i(TAG,"download finsh",)@ } -> DownLoadDBHelper.getInstances().update(downinfo,)@downinfo.getCompletesize()>=downinfo.getFilesize() -> IF { -> callback.downloadSucceed()@callback!=null } } ELSE { -> callback.downloadFailed()@ } -> map.remove(String.valueOf(downinfo.getId(),),)@ -> IF { -> TRY { -> is.close()@is!=null } } } FINALLY { -> IF { -> TRY { -> randomAccessFile.close()@randomAccessFile!=null } } }
results[https://github.com/heyongjian/joy_launcher/blob/580c9c30881fa6f93f29f5f313a0c767364be686/src/com/joy/launcher2/push/PushDownloadManager.java][run][1] = -> TRY { -> randomAccessFile=new RandomAccessFile(file,"rwd",)@ -> randomAccessFile.seek(startPos,)@ -> IF { -> return @is==null } -> LOOP { -> IF { -> return @(len=is.read(b,))!=-1 && !(is==null) } -> randomAccessFile.write(b,0,len,)@(len=is.read(b,))!=-1 && !(is==null) -> IF { -> Log.e(TAG,"-----下载  未完成----"+len,)@(len=is.read(b,))!=-1 && !(is==null) } } } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> Log.e(TAG,"---over----",)@ -> PushDownLoadDBHelper.getInstances().update(downinfo,)@ -> IF { -> Log.i(TAG,"----finsh----",)@ -> IF { -> callback.downloadSucceed()@callback!=null } } ELSE { -> callback.downloadFailed()@ } -> callback.downloadUpdate()@ -> map.remove(String.valueOf(downinfo.getId(),),)@ -> IF { -> TRY { -> is.close()@is!=null } } } FINALLY { -> IF { -> TRY { -> randomAccessFile.close()@randomAccessFile!=null } } }
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/b6b5f1de67babfe67e831d47995cb374bacfe71f/java/servers/test/org/xtreemfs/test/osd/OSDDrainTest.java][testHandleNonExistingFile][1] = -> TRY {  -> raf1=file1.open("rw",0777,)@ -> raf2=file2.open("rw",0777,)@ -> raf1.write(data,0,data.length,)@ -> raf2.write(data,0,data.length,)@ -> raf2.close()@ -> raf1.close()@ } CATCH(Exception) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/ba3583c3fdb92050e88960eb18b0e3a6d55424b3/java/servers/test/org/xtreemfs/common/clients/ReplicatedClientTest.java][testAddRemoveReplica][1] = -> TRY {  -> raf=f.open("rw",0666,)@ -> raf.write(data,0,data.length,)@ -> raf.seek(3*64*1024,)@ -> raf.write(data,0,data.length,)@ -> raf.close()@ -> raf=f.open("r",0666,)@ -> raf.read(data,0,data.length,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/ba3583c3fdb92050e88960eb18b0e3a6d55424b3/java/servers/test/org/xtreemfs/test/osd/CleanupTest.java][setupTestVolume][1] = -> TRY {  -> raf=f.open("rw",511,)@ -> raf.write( new byte[],0,1024*10,)@ -> raf.close()@ -> raf=f.open("rw",511,)@ -> raf.write( new byte[],0,1024*10,)@ -> raf.close()@ -> raf=f.open("rw",511,)@ -> raf.write( new byte[],0,1024*10,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/f45afdb4161c526597f3a49b5b9715dd5de13979/servers/test/org/xtreemfs/test/scrubber/ScrubberTest.java][setUp][1] = -> TRY {  -> randomAccessFile1=new RandomAccessFile("r",mrc1Address,volumeName+"/anotherDir/test11.txt",testEnv.getRpcClient(),Scrubber.credentials,)@ -> randomAccessFile2=new RandomAccessFile("r",mrc1Address,volumeName+"/test10.txt",testEnv.getRpcClient(),Scrubber.credentials,)@ -> randomAccessFile2.forceFileSize(10,)@ -> bytesIn=content.getBytes()@ -> randomAccessFile1.write(bytesIn,0,length,)@ -> randomAccessFile1.close()@ -> randomAccessFile2.write(bytesIn,0,65536,)@ } CATCH(Exception) {}
results[https://github.com/sunqimin09/FirstApp/blob/d35d5ba76a130d8d59bae70cdcd01f9d586e87ac/AppVideo/src/com/example/appvideo/play/BBVideoPlayer.java][prepareVideo][1] = -> TRY {  -> raf=new RandomAccessFile(cacheFile,"rws",)@!(videoTotalSize==-1) -> raf.setLength(videoTotalSize,)@!(videoTotalSize==-1) -> raf.seek(0,)@!(videoTotalSize==-1) -> LOOP { -> TRY { -> raf.write(buf,0,size,)@!(videoTotalSize==-1) && (size=is.read(buf,))!=-1&&!(isready) } CATCH(Exception) { -> e.printStackTrace()@!(videoTotalSize==-1) } } -> raf.close()@!(videoTotalSize==-1) } CATCH(IOException) {}
results[https://github.com/eea/eionet.datadict/blob/ae904adb63da7b394910877c9921a903944d3ae7/src/main/java/eionet/meta/ImgUpload.java][writeToFile][2] = -> TRY {  -> LOOP { -> line=new String(buf,0,i,)@(i=in.readLine(buf,0,buf.length,))!=-1 -> raFile.write(buf,0,i,)@(i=in.readLine(buf,0,buf.length,))!=-1 } -> raFile.close()@ } CATCH(Exception) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/ba3583c3fdb92050e88960eb18b0e3a6d55424b3/java/servers/test/org/xtreemfs/test/scrubber/ScrubberTest.java][setUp][1] = -> TRY {  -> randomAccessFile1=vol.getFile("/anotherDir/test11.txt",).open("rw",0777,)@ -> randomAccessFile2=vol.getFile("/test10.txt",).open("rw",0777,)@ -> randomAccessFile2.forceFileSize(10,)@ -> bytesIn=content.getBytes()@ -> randomAccessFile1.write(bytesIn,0,length,)@ -> randomAccessFile1.close()@ -> assertEquals(length,randomAccessFile1.getFile().length(),)@ -> randomAccessFile2.write(bytesIn,0,65536,)@ -> assertEquals(10,randomAccessFile2.getFile().length(),)@ } CATCH(Exception) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/6138abcd95bc08f8c6cc147dbfd9ca789043a171/servers/test/org/xtreemfs/test/osd/CleanupTest.java][setupTestVolume][2] = -> TRY {  -> raf=new RandomAccessFile("rw",env.getMRCAddress(),"test/test1",env.getRpcClient(),uc,)@ -> raf.write( new byte[],0,1024*10,)@ -> raf.close()@ -> raf=new RandomAccessFile("rw",env.getMRCAddress(),"test/test2",env.getRpcClient(),uc,)@ -> raf.write( new byte[],0,1024*10,)@ -> raf.close()@ -> raf=new RandomAccessFile("rw",env.getMRCAddress(),"test/test3",env.getRpcClient(),uc,)@ -> raf.write( new byte[],0,1024*10,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/sunqimin09/FirstApp/blob/8259be7412e263da384e3b1a840eb3cc114c8c7b/NewJingBaoAndroidApp/src/cn/com/bjnews/thinker/img/FileHelper.java][unZipFile][1] = -> TRY {  -> LOOP { } ELSE { -> m_randFile=new RandomAccessFile(file,"rw",)@ -> LOOP { -> TRY { -> m_randFile.seek(begin,)@ } CATCH(Exception) { -> log.e("exception, ex: "+ex.toString(),)@ } -> m_randFile.write(data,0,count,)@(count=is.read(data,0,FILE_BUFFER_SIZE,))!=-1 } -> m_randFile.close()@ } } CATCH(Exception) {}
results[https://github.com/firefoxmmx2/jdy/blob/63b14c7b7d0a4058c39369d51e3b4aeabf3e1e5b/src/com/aisino2/publicsystem/action/QyzlxxAction.java][uptempfile][7] = -> TRY {  -> TRY { -> bytetemp=base64Decoder.decodeBuffer(base64codecon,)@ -> os=new RandomAccessFile(serviceFile+"\\"+fileTempName,"rw",)@ -> os.write(bytetemp,0,bytetemp.length,)@ } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> TRY { -> IF { -> os.close()@os!=null } } FINALLY { -> e.printStackTrace()@ } } } CATCH(Exception) {}
results[https://github.com/reppie/xchange/blob/92e64eae053d857ba59d0fe99baefb3ff93a9b48/projects/xchange/xchange/Download.java][run][1] = -> LOOP { -> IF { -> return @i<fileInfo.nr_of_blocks } -> TRY { -> getRemoteBlock(fileInfo.name,i,fileInfo.ip,size,)@i<fileInfo.nr_of_blocks } CATCH(Exception) { -> e.printStackTrace()@!(i<fileInfo.nr_of_blocks) -> System.err.println("ERROR : unable to read block from socket",)@!(i<fileInfo.nr_of_blocks) -> return @i<fileInfo.nr_of_blocks } -> TRY { -> IF { -> return @!(file.exists()) && i<fileInfo.nr_of_blocks } -> raf=new RandomAccessFile(file,"rw",)@!(i<fileInfo.nr_of_blocks) && !(!(file.exists())) -> raf.seek(i*Xchange.BLOCKSIZE,)@!(!(file.exists())) && i<fileInfo.nr_of_blocks -> raf.write(this.b,0,size,)@!(i<fileInfo.nr_of_blocks) && !(!(file.exists())) -> raf.close()@!(i<fileInfo.nr_of_blocks) && !(!(file.exists())) -> IF { -> return @!(!(file.exists())) && !(infoFile.exists()) && i<fileInfo.nr_of_blocks } } CATCH(Exception) { -> e.printStackTrace()@!(i<fileInfo.nr_of_blocks) } }
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/e36781ae7f99da152b83b57db6e49175764785f8/servers/test/org/xtreemfs/test/io/RandomAccessFileTest.java][testReadAndWrite][1] = -> TRY {  -> randomAccessFile=new RandomAccessFile("rw",mrc1Address,volumeName+"/myDir/test1.txt",testEnv.getRpcClient(),userID,groupIDs,)@ -> LOOP { -> bytesIn[i]=(byte) i%25+65@i<3*randomAccessFile.getStripeSize()+2 } -> result=randomAccessFile.write(bytesIn,0,length,)@ -> assertEquals(length,result,)@ -> result=randomAccessFile.read(bytesOut,0,length,)@ -> assertEquals(0,result,)@ -> randomAccessFile.seek(0,)@ -> result=randomAccessFile.read(bytesOut,0,length,)@ -> assertEquals(length,result,)@ -> assertEquals(new String(bytesIn,),new String(bytesOut,),)@ -> bytesIn="Hello World".getBytes()@ -> randomAccessFile.seek(0,)@ -> randomAccessFile.write(bytesIn,0,bytesIn.length,)@ -> randomAccessFile.seek(0,)@ -> result=randomAccessFile.read(bytesOut,0,4,)@ -> randomAccessFile.seek(1,)@ -> result=randomAccessFile.read(bytesOut,0,4,)@ } CATCH(Exception) {}
results[https://github.com/firefoxmmx2/jdy/blob/63b14c7b7d0a4058c39369d51e3b4aeabf3e1e5b/src/com/aisino2/publicsystem/action/PmtAction.java][insert][2] = -> TRY {  -> TRY { -> TRY { -> bytetemp=base64Decoder.decodeBuffer(setPmt.getPmtStringContent(),)@ -> os=new RandomAccessFile(serviceFile+"\\"+fileName,"rw",)@ -> os.write(bytetemp,0,bytetemp.length,)@ } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> TRY { -> IF { -> os.close()@os!=null } } FINALLY { -> e.printStackTrace()@ } } -> e.printStackTrace()@ } } CATCH(Exception) {}
results[https://github.com/alibaba/otter/blob/78e112c7a9337f367accbcebebbe7f2d9a529c9c/node/etl/src/main/java/com/alibaba/otter/node/etl/common/pipe/impl/http/AbstractHttpPipe.java][encryptFile][1] = -> TRY { -> encryptedData=EncryptUtils.encrypt(file.getPath().getBytes("UTF-8",),)@ } -> TRY { -> raf=new RandomAccessFile(file,"rw",)@ -> keyLength=ByteUtils.stringToBytes(encryptedData.getKey(),).length@ -> crcLength=ByteUtils.stringToBytes(encryptedData.getCrc(),).length@ -> raf.setLength(totalLength,)@ -> raf.seek(origLength,)@ -> raf.write(ByteUtils.stringToBytes(encryptedData.getKey(),),0,keyLength,)@ -> raf.seek(origLength+keyLength,)@ -> raf.write(ByteUtils.stringToBytes(encryptedData.getCrc(),),0,crcLength,)@ } CATCH(Exception) { -> throw new PipeException("write_encrypted_error",e,)@ } FINALLY { -> IOUtils.closeQuietly(raf,)@ }
results[https://github.com/Metaswitch/fmj/blob/54c77c40135f527cb33dfb7add56a99b47f0a78c/src/net/sf/fmj/media/datasink/file/Handler.java][write][1] = -> TRY { -> IF { -> LOOP { -> bytesToRead=(remaining>BUFFER_LEN)?BUFFER_LEN:remaining@remaining>0 -> raFile.read(buffer1,0,bytesToRead,)@ -> qtStrRaFile.write(buffer1,0,bytesToRead,)@ } } ELSE { -> IF { -> qtStrRaFile.seek(0,)@ -> qtStrRaFile.seek(numBytes-1,)@!(inOffset>=0&&numBytes>0) && inOffset<0&&numBytes>0 -> qtStrRaFile.writeByte(0,)@ -> qtStrRaFile.seek(0,)@ } } } CATCH(Exception) { -> System.err.println("Exception when creating streamable version of media file: "+e.getMessage(),)@ }
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/e848cab95ca6d8821dfe79364e2581b1c670bddd/servers/src/org/xtreemfs/sandbox/tests/ReplicationStressTest.java][writeFile][1] = -> TRY {  -> TRY { -> raf=new RandomAccessFile("rw",mrcClient.getDefaultServerAddress(),VOLUME_NAME+DIR_PATH+fileName,client,userCredentials,)@ -> IF { -> in.read(data,)@ -> raf.write(data,0,data.length,)@ } ELSE { -> LOOP { -> in.read(data,)@ -> raf.write(data,0,data.length,)@ } -> IF { -> in.read(data,)@ -> raf.write(data,0,data.length,)@ } } -> mrcFilesize=(int) raf.length()@ } FINALLY { -> IF { -> in.close()@in!=null } } } CATCH(Exception) {}
results[https://github.com/georgeparisis/dhtbd/blob/a188954ca82546b9d2ab5f16ff51d436fb65b300/original/blast_pastry/src/blast/storage/ExternalFileStorage.java][doWork][1] = -> TRY {  -> IF { -> storage.seek(fileIndex.longValue(),)@ -> storage.write(nullArray,0,wStartCopy*BlastImpl.sectorSize,)@ -> storage.write(data,wIndex*BlastImpl.sectorSize,wCopyLength*BlastImpl.sectorSize,)@ -> storage.write(nullArray,0,BlastImpl.chunk_size-wStartCopy-wCopyLength*BlastImpl.sectorSize,)@ } ELSE { -> storage.seek(val.fileOffset.longValue()+wStartCopy*BlastImpl.sectorSize,)@ -> storage.write(data,wIndex*BlastImpl.sectorSize,wCopyLength*BlastImpl.sectorSize,)@ } } CATCH(Exception) {}
results[https://github.com/redlinesmedia/em-server/blob/3c9c2a94eb970e4f378d5073945a546a116b9c20/src/org/openedit/logger/LuceneLogSearcher.java][moveRecent][1] = -> TRY {  -> TRY { -> IF { -> archiveout=new RandomAccessFile(archive,"rw",)@!(archive.exists())||archive.length()==0 -> archiveout.write("<log>\n".getBytes(),)@ } ELSE { -> archiveout=new RandomAccessFile(archive,"rws",)@!(!(archive.exists())||archive.length()==0) -> archiveout.seek(archive.length()-"</log>".length(),)@!(!(archive.exists())||archive.length()==0) } -> LOOP { -> iRead=finalreader.read(bytes,)@ -> IF { -> archiveout.write(bytes,0,iRead,)@iRead!=-1 } } -> archiveout.write("</log>".getBytes(),)@ } FINALLY { -> FileUtils.safeClose(finalreader,)@ -> IF { -> archiveout.close()@archiveout!=null } } } CATCH(Exception) {}
results[https://github.com/dongaihua/highlight-elasticsearch/blob/b55fd0c0fc990687dab1484e1046a82a5999d850/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsImmutableBlobContainer.java][run][6] = -> TRY { -> raf=new RandomAccessFile(file,"rw",)@ -> raf.setLength(0,)@ } CATCH(Exception) { -> listener.onFailure(e,)@ } -> TRY { -> TRY { -> LOOP { -> raf.write(buffer,0,bytesRead,)@(bytesRead=is.read(buffer,))!=-1 } } FINALLY { -> TRY { -> is.close()@!(bytesWritten!=sizeInBytes) } } FINALLY { -> TRY { -> raf.close()@!(bytesWritten!=sizeInBytes) } } } CATCH(Exception) { -> TRY { -> IF { -> file.delete()@file.exists() } } } CATCH(Exception) { -> listener.onFailure(e,)@ }
results[https://github.com/angusmacdonald/h2o/blob/7763bd04c5ea5e21f6e794c198fd802ac04e43e4/src/test/org/h2/test/unit/TestFileSystem.java][testRandomAccess][1] = -> TRY {  -> ra=new RandomAccessFile(file,"rw",)@ -> LOOP { -> pos=(int) Math.min(pos,ra.length(),)@ -> ra.seek(pos,)@ -> random.nextBytes(buffer,)@ -> f.write(buffer,0,buffer.length,)@ -> ra.write(buffer,0,buffer.length,)@ -> ra.setLength(pos,)@ -> IF { -> ra.seek(0,)@ra.getFilePointer()>pos } -> len=(int) Math.min(len,ra.length()-ra.getFilePointer(),)@ -> ra.readFully(b1,0,len,)@ -> assertEquals(ra.getFilePointer(),f.getFilePointer(),)@ -> trace("length "+ra.length(),)@ -> assertEquals(ra.length(),f.length(),)@ -> ra.close()@ -> ra=new RandomAccessFile(file,"rw",)@ -> assertEquals(ra.length(),f.length(),)@ } -> ra.close()@ } CATCH(Exception) {}
results[https://github.com/exoplatform/jcr/blob/117b213fd7de4383b99b46c735e1b01846611eee/component/ftp/src/main/java/org/exoplatform/services/ftp/command/CmdStor.java][run][1] = -> TRY {  -> TRY { -> IF { -> IF { -> return @resourceNode==null } } ELSE { -> IF { -> IF { -> return @restOffset>resourceNode.getProperty(FtpConst.NodeTypes.JCR_DATA,).getLength()+1 && !(resourceNode==null) } } } -> IF { -> IF { -> return @resourceNode==null && !(created) } -> IF { -> return @resourceNode==null && !(!(created)) && nodeInputStream==null } -> LOOP { -> readed=nodeInputStream.read(buffer,)@!(nodeInputStream==null) && resourceNode==null && !(!(created)) -> cacheOutStream.write(buffer,0,readed,)@!(nodeInputStream==null) && resourceNode==null && !(!(created)) } -> cacheFilePoint=new RandomAccessFile(cacheFile,"rw",)@!(nodeInputStream==null) && resourceNode==null && !(!(created)) -> cacheFilePoint.seek(restOffset,)@!(nodeInputStream==null) && resourceNode==null && !(!(created)) -> LOOP { -> readed=socketInputStream.read(buffer,)@!(nodeInputStream==null) && resourceNode==null && !(!(created)) -> cacheFilePoint.write(buffer,0,readed,)@!(nodeInputStream==null) && resourceNode==null && !(!(created)) } -> cacheFilePoint.close()@!(nodeInputStream==null) && resourceNode==null && !(!(created)) } } CATCH(Exception) { -> exc.printStackTrace()@ -> log.info("Unhandled exception. "+exc.getMessage(),exc,)@ } } CATCH(IOException) {}
results[https://github.com/cmeiklejohn/flume-ng/blob/c57ebd1d2296fd1c0c8f84eecb16799de2a73e35/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/Serialization.java][copyFile][1] = -> TRY {  -> TRY { -> out=new RandomAccessFile(to,"rw",)@ -> LOOP { -> read=in.read(buf,)@ -> out.write(buf,0,read,)@ } -> out.getFD().sync()@ } CATCH(Exception) { -> LOG.error("Error while attempting to copy "+from.toString()+" to "+to.toString()+".",ex,)@ -> Throwables.propagate(ex,)@ } FINALLY { -> TRY { -> IF { -> in.close()@in!=null } } FINALLY { -> LOG.error("Error while closing input file.",ex,)@ } -> TRY { -> IF { -> out.close()@out!=null } } FINALLY { -> LOG.error("Error while closing output file.",ex,)@ -> Throwables.propagate(ex,)@ } -> IF { -> Throwables.propagate(th,)@th!=null } } } CATCH(IOException) {}
results[https://github.com/codefireX/platform_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/libcore/java/io/OldRandomAccessFileTest.java][test_write$BII][38] = -> TRY {  -> raf=new java.io.RandomAccessFile(fileName,"rw",)@ -> TRY { -> raf.write(testBuf,1,1,)@ } -> testBuf=testString.getBytes()@ -> TRY { -> raf.write(testBuf,-1,10,)@ } -> TRY { -> raf.write(testBuf,0,-1,)@ } -> TRY { -> raf.write(testBuf,5,testLength,)@ } -> TRY { -> raf.write(testBuf,3,testLength-5,)@ } CATCH(Exception) { -> fail("Test 5: Unexpected exception: "+e.getMessage(),)@ } -> raf.close()@ -> TRY { -> raf.write( new byte[],)@ } CATCH(IOException) { -> fail("Test 6: Unexpected IOException: "+e.getMessage(),)@ } -> TRY { -> raf.write(testString.getBytes(),)@ } -> bytesRead=fis.read(rbuf,0,testLength,)@ -> assertEquals("Test 8: Incorrect number of bytes written or read;",testLength-5,bytesRead,)@ -> assertEquals("Test 9: Incorrect bytes written or read; ",testString.substring(3,testLength-2,),new String(rbuf,0,bytesRead,),)@ } CATCH(Exception) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/545cb5012cfeafb13506fc1ac1e5e8d8f32a7df1/src/servers/src/org/xtreemfs/sandbox/tests/ReplicationStressTest/ReplicationStressTest.java][writeFile][1] = -> TRY {  -> TRY { -> raf=new RandomAccessFile("rw",mrcClient.getDefaultServerAddress(),VOLUME_NAME+DIR_PATH+file.filename,client,userCredentials,)@ -> IF { -> in.read(data,)@ -> raf.write(data,0,data.length,)@ } ELSE { -> LOOP { -> IF { -> in.read(data,)@ -> raf.write(data,0,data.length,)@raf.getFilePointer()+PART_SIZE<filesize } ELSE { -> file.holes.add(raf.getFilePointer(),)@raf.getFilePointer()+PART_SIZE<filesize -> in.seek(raf.getFilePointer()+PART_SIZE,)@!(filesize<PART_SIZE) && raf.getFilePointer()+PART_SIZE<filesize -> raf.seek(raf.getFilePointer()+PART_SIZE,)@!(filesize<PART_SIZE) && raf.getFilePointer()+PART_SIZE<filesize } -> assert in.getFilePointer()==raf.getFilePointer()@raf.getFilePointer()+PART_SIZE<filesize } -> IF { -> in.read(data,)@ -> raf.write(data,0,data.length,)@raf.getFilePointer()<filesize } -> assert in.getFilePointer()==raf.getFilePointer()@ } -> mrcFilesize=(int) raf.length()@ } FINALLY { -> IF { -> in.close()@in!=null } } } CATCH(Exception) {}
results[https://github.com/exoplatform/jcr/blob/4596f4384dee7590e2e7cc309dece9810d11eec8/exo.jcr.component.ftp/src/main/java/org/exoplatform/services/ftp/command/CmdStor.java][run][1] = -> TRY {  -> TRY { -> IF { -> IF { -> return @resourceNode==null } } ELSE { -> IF { -> IF { -> return @restOffset>resourceNode.getProperty(FtpConst.NodeTypes.JCR_DATA,).getLength()+1 && !(resourceNode==null) } } } -> IF { -> IF { -> return @resourceNode==null && !(created) } -> IF { -> return @resourceNode==null && !(!(created)) && nodeInputStream==null } -> LOOP { -> readed=nodeInputStream.read(buffer,)@!(nodeInputStream==null) && resourceNode==null && !(!(created)) -> cacheOutStream.write(buffer,0,readed,)@!(nodeInputStream==null) && resourceNode==null && !(!(created)) } -> cacheFilePoint=new RandomAccessFile(cacheFile,"rw",)@!(nodeInputStream==null) && resourceNode==null && !(!(created)) -> cacheFilePoint.seek(restOffset,)@!(nodeInputStream==null) && resourceNode==null && !(!(created)) -> LOOP { -> readed=socketInputStream.read(buffer,)@!(nodeInputStream==null) && resourceNode==null && !(!(created)) -> cacheFilePoint.write(buffer,0,readed,)@!(nodeInputStream==null) && resourceNode==null && !(!(created)) } -> cacheFilePoint.close()@!(nodeInputStream==null) && resourceNode==null && !(!(created)) } } CATCH(RepositoryException) { -> IF { -> LOG.trace("An exception occurred: "+rexc.getMessage(),)@LOG.isTraceEnabled() } } CATCH(Exception) { -> LOG.info("Unhandled exception. "+exc.getMessage(),exc,)@ } } CATCH(IOException) {}
results[https://github.com/crissii/water-esb-new/blob/300201139e5b58e682455f55cc92c4721e835e06/modules/messagecenter/src/main/java/com/sunsharing/msgcenter/db/DBUtils.java][updateSendOrConsume][1] = -> TRY { -> IF { -> send=newMsg.addSend(appId,)@ } ELSE { -> send=newMsg.addConsumer(appId,)@ } -> content=newMsg.genneral()@ -> IF { -> return @send.getBytes().length>100 } -> TRY { -> raf1=new RandomAccessFile(new File(path,),"rw",)@!(send.getBytes().length>100) -> IF { -> raf1.seek(newMsg.getStartIndex()+176,)@!(send.getBytes().length>100) } ELSE { -> raf1.seek(newMsg.getStartIndex()+76,)@!(send.getBytes().length>100) } -> raf1.write(send.getBytes(),)@!(send.getBytes().length>100) -> raf1.seek(newMsg.getStartIndex()+newMsg.getSaveLen()-8,)@!(send.getBytes().length>100) -> raf1.write(content,content.length-8,8,)@!(send.getBytes().length>100) } CATCH(Exception) { -> logger.error("写消息文件出错",e,)@!(send.getBytes().length>100) } FINALLY { -> TRY { -> raf1.close()@!(send.getBytes().length>100) } } } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> writeLock.unlock()@ }
results[https://github.com/agueganno/h2geometry/blob/9c3fcfffdb4dbd9c65267839c27ada28d5c176db/h2/src/test/org/h2/test/unit/TestFileSystem.java][testRandomAccess][4] = -> TRY {  -> ra=new RandomAccessFile(file,"rw",)@ -> TRY { -> LOOP { -> pos=(int) Math.min(pos,ra.length(),)@ -> ra.seek(pos,)@ -> random.nextBytes(buffer,)@ -> f.write(ByteBuffer.wrap(buffer,),)@ -> ra.write(buffer,0,buffer.length,)@ -> IF { -> ra.setLength(pos,)@pos<ra.length() } -> assertEquals(ra.getFilePointer(),f.position(),)@ -> len=(int) Math.min(len,ra.length()-ra.getFilePointer(),)@ -> ra.readFully(b1,0,len,)@ -> assertEquals(ra.getFilePointer(),f.position(),)@ -> trace("length "+ra.length(),)@ -> buff.append("length "+ra.length()+"\n",)@ -> assertEquals(ra.length(),f.size(),)@ -> ra.close()@ -> ra=new RandomAccessFile(file,"rw",)@ -> assertEquals(ra.length(),f.size(),)@ } } CATCH(Throwable) { -> e.printStackTrace()@ -> fail("Exception: "+e+"\n"+buff.toString(),)@ } FINALLY { -> f.close()@ -> ra.close()@ -> file.delete()@ -> FileUtils.delete(s,)@ } } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/3e3e391a959df5a1d0406a67c6b39efd11897d97/test/java/io/RandomAccessFile/ParameterCheck.java][doTest][3] = -> TRY {  -> TRY { -> LOOP { -> fout.write(i,)@i<32 } -> raf=new RandomAccessFile(fn,"rw",)@ -> LOOP { -> TRY { -> IF { -> raf.readFully(b,off[i],len[i],)@i<numCases } -> IF { -> raf.read(b,off[i],len[i],)@i<numCases } -> IF { -> raf.write(b,off[i],len[i],)@i<numCases } -> raf.seek(0,)@ } CATCH(IndexOutOfBoundsException) { -> IF { -> printErr(method,numGood,i,"java.lang.IndexOutOfBoundsException",)@i<numCases && results[i] } } CATCH(OutOfMemoryError) { -> printErr(method,numGood,i,"java.lang.OutOfMemoryError",)@i<numCases } } ELSE { -> printErr(method,numGood,i,"No java.lang.IndexOutOfBoundsException",)@i<numCases && !(results[i]) } -> raf.seek(0,)@ -> TRY { -> IF { -> raf.readFully(null,1,2,)@ } -> IF { -> raf.read(null,1,2,)@ } -> IF { -> raf.write(null,1,2,)@ } } } FINALLY { -> IF { -> raf.close()@raf!=null } -> fn.delete()@ } } CATCH(Exception) {}
results[https://github.com/apache/jackrabbit-oak/blob/76796cc3e097b6cf5214fe0618448a7b672656f3/oak-core/src/test/java/org/apache/jackrabbit/mk/fs/FileSystemTest.java][testRandomAccess][1] = -> TRY {  -> ra=new RandomAccessFile(file,"rw",)@ -> TRY { -> LOOP { -> pos=(int) Math.min(pos,ra.length(),)@ -> ra.seek(pos,)@ -> random.nextBytes(buffer,)@ -> f.write(ByteBuffer.wrap(buffer,),)@ -> ra.write(buffer,0,buffer.length,)@ -> IF { -> ra.setLength(pos,)@pos<ra.length() } -> assertEquals("truncate "+pos,ra.getFilePointer(),f.position(),)@ -> len=(int) Math.min(len,ra.length()-ra.getFilePointer(),)@ -> ra.readFully(b1,0,len,)@ -> trace("getFilePointer "+ra.getFilePointer(),)@ -> buff.append("getFilePointer "+ra.getFilePointer()+"\n",)@ -> assertEquals(ra.getFilePointer(),f.position(),)@ -> trace("length "+ra.length(),)@ -> buff.append("length "+ra.length()+"\n",)@ -> assertEquals(ra.length(),f.size(),)@ -> ra.close()@ -> ra=new RandomAccessFile(file,"rw",)@ -> assertEquals(ra.length(),f.size(),)@ } } CATCH(Throwable) { -> e.printStackTrace()@ -> fail("Exception: "+e+"\n"+buff.toString(),)@ } FINALLY { -> f.close()@ -> ra.close()@ -> file.delete()@ -> FileUtils.delete(s,)@ } } CATCH(Exception) {}
results[https://github.com/MIPS/libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/tests/api/java/io/RandomAccessFileTest.java][test_write$BII][14] = -> TRY {  -> raf=new java.io.RandomAccessFile(fileName,"rw",)@ -> TRY { -> raf.write(testBuf,1,1,)@ } -> testBuf=testString.getBytes()@ -> TRY { -> raf.write(testBuf,-1,10,)@ } CATCH(IndexOutOfBoundsException) { -> assertEquals("Test 2: IndexOutOfBoundsException rather than a subclass expected.",IndexOutOfBoundsException.class,e.getClass(),)@ } -> TRY { -> raf.write(testBuf,0,-1,)@ } CATCH(IndexOutOfBoundsException) { -> assertEquals("Test 3: IndexOutOfBoundsException rather than a subclass expected.",IndexOutOfBoundsException.class,e.getClass(),)@ } -> TRY { -> raf.write(testBuf,5,testLength,)@ } CATCH(IndexOutOfBoundsException) { -> assertEquals("Test 4: IndexOutOfBoundsException rather than a subclass expected.",IndexOutOfBoundsException.class,e.getClass(),)@ } -> TRY { -> raf.write(testBuf,3,testLength-5,)@ } CATCH(Exception) { -> fail("Test 5: Unexpected exception: "+e.getMessage(),)@ } -> raf.close()@ -> TRY { -> raf.write( new byte[],)@ } CATCH(IOException) { -> fail("Test 6: Unexpected IOException: "+e.getMessage(),)@ } -> TRY { -> raf.write(testString.getBytes(),)@ } -> bytesRead=fis.read(rbuf,0,testLength,)@ -> assertEquals("Test 8: Incorrect number of bytes written or read;",testLength-5,bytesRead,)@ -> assertEquals("Test 9: Incorrect bytes written or read; ",testString.substring(3,testLength-2,),new String(rbuf,0,bytesRead,),)@ } CATCH(Exception) {}
results[https://github.com/pruiz/signserver/blob/373b746d0266c640fbd934ed4d83f040c0585e50/signserver/modules/SignServer-Lib-iText/src/com/lowagie/text/pdf/PdfSignatureAppearance.java][preClose][3] = -> TRY {  -> IF { } ELSE { } ELSE { } ELSE { -> throw new IllegalArgumentException("Unknown filter: "+getFilter(),)@cryptoDictionary==null } -> IF { -> bf=new ByteBuffer()@tempFile==null && !(cryptoDictionary==null) -> bf.append('[',)@tempFile==null && !(cryptoDictionary==null) -> LOOP { -> bf.append(range[k],).append(' ',)@k<range.length && tempFile==null && !(cryptoDictionary==null) } -> bf.append(']',)@tempFile==null && !(cryptoDictionary==null) -> System.arraycopy(bf.getBuffer(),0,bout,byteRangePosition,bf.size(),)@tempFile==null && !(cryptoDictionary==null) } ELSE { -> TRY { -> raf=new RandomAccessFile(tempFile,"rw",)@!(tempFile==null) && !(cryptoDictionary==null) -> boutLen=(int) raf.length()@tempFile==null && !(cryptoDictionary==null) -> bf=new ByteBuffer()@tempFile==null && !(cryptoDictionary==null) -> bf.append('[',)@tempFile==null && !(cryptoDictionary==null) -> LOOP { -> bf.append(range[k],).append(' ',)@k<range.length && tempFile==null && !(cryptoDictionary==null) } -> bf.append(']',)@tempFile==null && !(cryptoDictionary==null) -> raf.seek(byteRangePosition,)@tempFile==null && !(cryptoDictionary==null) -> raf.write(bf.getBuffer(),0,bf.size(),)@tempFile==null && !(cryptoDictionary==null) } CATCH(IOException) { -> TRY { -> raf.close()@tempFile==null && !(cryptoDictionary==null) } } CATCH(Exception) { -> TRY { -> tempFile.delete()@!(tempFile==null) && !(cryptoDictionary==null) } } CATCH(Exception) { -> throw e@!(tempFile==null) && !(cryptoDictionary==null) } } } CATCH(IOException,DocumentException) {}
results[https://github.com/jgzornoza/SistemaVotacion/blob/161b6e54ca97f210962ca7a341dd2ba745c541a4/VotingToolAndroidProject/libraries/itext/src/main/java/com/itextpdf/text/pdf/PdfSignatureAppearance.java][preClose][3] = -> TRY {  -> IF { } ELSE { } ELSE { } ELSE { -> throw new IllegalArgumentException(MessageLocalization.getComposedMessage("unknown.filter.1",getFilter(),),)@cryptoDictionary==null } -> IF { -> bf=new ByteBuffer()@tempFile==null && !(cryptoDictionary==null) -> bf.append('[',)@tempFile==null && !(cryptoDictionary==null) -> LOOP { -> bf.append(range[k],).append(' ',)@k<range.length && tempFile==null && !(cryptoDictionary==null) } -> bf.append(']',)@tempFile==null && !(cryptoDictionary==null) -> System.arraycopy(bf.getBuffer(),0,bout,byteRangePosition,bf.size(),)@tempFile==null && !(cryptoDictionary==null) } ELSE { -> TRY { -> raf=new RandomAccessFile(tempFile,"rw",)@!(tempFile==null) && !(cryptoDictionary==null) -> boutLen=(int) raf.length()@tempFile==null && !(cryptoDictionary==null) -> bf=new ByteBuffer()@tempFile==null && !(cryptoDictionary==null) -> bf.append('[',)@tempFile==null && !(cryptoDictionary==null) -> LOOP { -> bf.append(range[k],).append(' ',)@k<range.length && tempFile==null && !(cryptoDictionary==null) } -> bf.append(']',)@tempFile==null && !(cryptoDictionary==null) -> raf.seek(byteRangePosition,)@tempFile==null && !(cryptoDictionary==null) -> raf.write(bf.getBuffer(),0,bf.size(),)@tempFile==null && !(cryptoDictionary==null) } CATCH(IOException) { -> TRY { -> raf.close()@tempFile==null && !(cryptoDictionary==null) } } CATCH(Exception) { -> TRY { -> tempFile.delete()@!(tempFile==null) && !(cryptoDictionary==null) } } CATCH(Exception) { -> throw e@!(tempFile==null) && !(cryptoDictionary==null) } } } CATCH(IOException,DocumentException) {}
results[https://github.com/chris-martin/h2/blob/ee2494fc4c6edffd4b6084db7e96bcb0192beb7e/h2/src/test/org/h2/test/unit/TestFileSystem.java][testRandomAccess][3] = -> TRY {  -> ra=new RandomAccessFile(file,"rw",)@ -> TRY { -> LOOP { -> pos=(int) Math.min(pos,ra.length(),)@ -> ra.seek(pos,)@ -> offset=(offset==0)?0:random.nextInt(offset,)@ -> len=(arrayLen==0)?0:random.nextInt(arrayLen-offset,)@ -> byteBuff=createSlicedBuffer(buffer,offset,len,)@ -> random.nextBytes(buffer,)@ -> trace("write "+offset+" len "+len,)@ -> buff.append("write "+offset+" "+len+"\n",)@ -> ra.write(buffer,offset,len,)@ -> IF { -> ra.setLength(pos,)@pos<ra.length() } -> assertEquals(ra.getFilePointer(),f.position(),)@ -> len=random.nextInt(1000,)@ -> offset=random.nextInt(100,)@ -> len=(int) Math.min(len,ra.length()-ra.getFilePointer(),)@ -> trace("readFully "+len,)@ -> buff.append("readFully "+len+"\n",)@ -> ra.readFully(b1,offset,len,)@ -> byteBuff=createSlicedBuffer(b2,offset,len,)@ -> assertEquals(ra.getFilePointer(),f.position(),)@ -> trace("length "+ra.length(),)@ -> buff.append("length "+ra.length()+"\n",)@ -> assertEquals(ra.length(),f.size(),)@ -> ra.close()@ -> ra=new RandomAccessFile(file,"rw",)@ -> assertEquals(ra.length(),f.size(),)@ } } CATCH(Throwable) { -> e.printStackTrace()@ -> fail("Exception: "+e+"\n"+buff.toString(),)@ } FINALLY { -> f.close()@ -> ra.close()@ -> file.delete()@ -> FileUtils.delete(s,)@ } } CATCH(Exception) {}
results[https://github.com/bergerkiller/MyWorlds/blob/59547ba7c1124d86724d61d4de4e63bdd03d8b96/src/com/bergerkiller/bukkit/mw/WorldManager.java][repairRegion][1] = -> TRY { -> raf=new RandomAccessFile(chunkfile,"rw",)@ -> LOOP { -> locations[i]=raf.readInt()@i<1024 } -> LOOP { -> TRY { -> raf.seek(seekindex,)@ -> length=raf.readInt()@ } ELSE { -> IF { -> version=raf.readByte()@ -> raf.read(data,)@ -> IF { -> TRY { } ELSE { -> IF { -> IF { -> raf.seek(seekindex,)@ -> newdata=baos.toByteArray()@ -> raf.writeInt(newdata.length+1,)@ -> raf.writeByte(2,)@ -> raf.write(newdata,0,newdata.length,)@ } } } CATCH(Exception) { -> MyWorlds.plugin.log(Level.WARNING,"Stream  "+i,)@i<locations.length -> ex.printStackTrace()@ } } } -> ex.printStackTrace()@ } } -> IF { -> IF { -> raf.seek(0,)@backupfolder.mkdirs()&&copy(chunkfile,backupfile,) -> LOOP { -> raf.writeInt(location,)@backupfolder.mkdirs()&&copy(chunkfile,backupfile,) } } ELSE { -> return -2@!(backupfolder.mkdirs()&&copy(chunkfile,backupfile,)) } } -> raf.close()@ -> e.printStackTrace()@ } CATCH(IOException) { -> e.printStackTrace()@ } -> TRY { -> IF { -> raf.close()@raf!=null } }
results[https://github.com/bergerkiller/MyWorlds/blob/a7211f683044b3643d3227613c8a96c8cfb189bb/src/main/java/com/bergerkiller/bukkit/mw/WorldManager.java][repairRegion][1] = -> TRY { -> raf=new RandomAccessFile(chunkfile,"rw",)@ -> LOOP { -> locations[i]=raf.readInt()@i<1024 } -> LOOP { -> TRY { -> raf.seek(seekindex,)@ -> length=raf.readInt()@ } ELSE { -> IF { -> version=raf.readByte()@ -> raf.read(data,0,length-1,)@size>0&&length>0 && !(length>4096*size) -> IF { -> TRY { } ELSE { -> IF { -> IF { -> raf.seek(seekindex,)@ -> newdata=baos.toByteArray()@ -> raf.writeInt(newdata.length+1,)@ -> raf.writeByte(2,)@ -> raf.write(newdata,0,newdata.length,)@ } } } CATCH(ZipException) { -> MyWorlds.plugin.log(Level.WARNING,"Chunk at position "+chunkX+"/"+chunkZ+" is not in a valid ZIP format (it's corrupted, and thus lost)",)@ } CATCH(Exception) { -> MyWorlds.plugin.log(Level.WARNING,"Failed to properly read chunk at position "+chunkX+"/"+chunkZ+":",)@ -> ex.printStackTrace()@ } } } } CATCH(Exception) { -> ex.printStackTrace()@ } } -> IF { -> IF { -> raf.seek(0,)@backupfolder.exists()||backupfolder.mkdirs()&&StreamUtil.tryCopyFile(chunkfile,backupfile,) -> LOOP { -> raf.writeInt(location,)@backupfolder.exists()||backupfolder.mkdirs()&&StreamUtil.tryCopyFile(chunkfile,backupfile,) } } ELSE { -> return -2@!(backupfolder.exists()||backupfolder.mkdirs()&&StreamUtil.tryCopyFile(chunkfile,backupfile,)) } } -> raf.close()@ -> e.printStackTrace()@ } CATCH(IOException) { -> e.printStackTrace()@ } -> TRY { -> IF { -> raf.close()@raf!=null } }
