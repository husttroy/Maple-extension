results[https://github.com/apache/activemq/blob/5219fa1a177aba188a48c0d2447dbad17ead9e1e/activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ3167Test.java][testQueueLostMessage][90] = -> TRY {  -> Producer_stop_time=java.lang.System.nanoTime()+10L*1000000000L@ } CATCH(Exception) {}
results[https://github.com/bcoverston/apache-hosted-cassandra/blob/04384943fef3c50b1cb27845c02a5287c983d11a/src/java/org/apache/cassandra/db/commitlog/CommitLogExecutorService.java][processWithSyncBatch][11] = -> TRY {  -> end=System.nanoTime()+(long) 1000000*DatabaseDescriptor.getCommitLogSyncBatchWindow()@!(!(firstTask.getRawCallable() instanceof CommitLog.LogRecordAdder)) } CATCH(Exception) {}
results[https://github.com/pfaffle/MiniChessBot/blob/ce593a5a1757517da227cc2a94ee58db23c897ae/MiniChess/src/State.java][getBestMove][7] = -> TRY { -> searchElapsedTime=System.nanoTime()-searchStartTime*1.0e-9@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/maginatics/guava-libraries/blob/d5bfc481b8204e5c2072998a1e2ce9139d910b24/guava-tests/test/com/google/common/util/concurrent/SimpleTimeLimiterTest.java][testGoodCallableWithEnoughTime][88] = -> TRY {  -> start=System.nanoTime()@ -> assertTheCallTookBetween(start,DELAY_MS,ENOUGH_MS,)@ } CATCH(Exception) {}
results[https://github.com/europeana/uim-core/blob/4d3f70f6312674f53f232ff9a1726c282657dcb1/trunk/uim/external/repox/basic/src/test/java/eu/europeana/uim/repox/rest/RepoxServiceTest.java][setupRepoxService][21] = -> TRY {  -> timeStamp=Long.toString(System.nanoTime(),)@ } CATCH(Exception) {}
results[https://github.com/forcedotcom/SalesforceMobileSDK-Android/blob/2e38d7308e36754759c9eb483cec81fc34afda7d/native/test/SalesforceSDKTest/src/com/salesforce/androidsdk/rest/RestClientTest.java][testCreate][3] = -> TRY {  -> newAccountName=ENTITY_NAME_PREFIX+System.nanoTime()@ -> fields.put("name",newAccountName,)@ } CATCH(Exception) {}
results[https://github.com/escidoc/escidoc-core/blob/60d488d13620f84262a98ffaf2e5aaa430d79fdc/integration-tests/src/test/java/de/escidoc/core/test/EscidocRestSoapTestBase.java][getPidParam][3] = -> TRY {  -> extUrl+=System.nanoTime()@ -> param="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"+"<param last-modification-date=\""+getTheLastModificationDate(id,)+"\"><url>"+extUrl+"</url></param>"@ } CATCH(Exception) {}
results[https://github.com/zeromq/jeromq/blob/416a77165530af77f5ebbe4eacb1673f6692059f/src/test/java/guide/lpserver.java][main][6] = -> TRY {  -> rand=new Random(System.nanoTime(),)@ } CATCH(Exception) {}
results[https://github.com/junit-team/junit/blob/c861b8a24a0663b9f2496214d1a58048d80284a8/src/main/java/org/junit/experimental/max/MaxHistory.java][testStarted][2] = -> TRY {  -> starts.put(description,System.nanoTime(),)@ } CATCH(Exception) {}
results[https://github.com/rafalkrupinski/jetty/blob/d52de82a80fffac6cc7bb3754b936d650d7738c3/jetty-websocket/websocket-core/src/test/java/org/eclipse/jetty/websocket/TestClient.java][ping][8] = -> TRY {  -> _starts.add(System.nanoTime(),)@ } CATCH(Exception) {}
results[https://github.com/junit-team/junit/blob/c861b8a24a0663b9f2496214d1a58048d80284a8/src/main/java/org/junit/experimental/max/MaxHistory.java][testFinished][2] = -> TRY {  -> end=System.nanoTime()@ -> putTestDuration(description,end-start,)@ } CATCH(Exception) {}
results[https://github.com/marymiller/floodlight/blob/3cdb35a9c1502271282da343e271e1aad1a00716/src/test/java/net/floodlightcontroller/core/internal/RoleChangerTest.java][doSendNxRoleRequest][3] = -> TRY {  -> cookie=System.nanoTime()@ -> xid=roleChanger.sendHARoleRequest(sw,role,cookie,)@ } CATCH(Exception) {}
results[https://github.com/tjhickey724/fishgame/blob/ca21f9f815de27ae31a6a6335ac6f85ffb2c45a7/src/game/GameModel.java][writeToLog][1] = -> TRY { -> theTime=System.nanoTime()-this.gameStart@ } CATCH(Exception) { -> System.out.println("Error writing to log "+e,)@ }
results[https://github.com/forcedotcom/phoenix/blob/aa9442701737311801d770b7fe6fa8b991cc759f/phoenix-core/src/test/java/com/salesforce/phoenix/index/IndexMaintainerTest.java][testCompositeRowKeyTimeIndex][4] = -> TRY {  -> timeInNanos=System.nanoTime()@ -> ts.setNanos((int) timeInNanos%1000000000,)@ } CATCH(Exception) {}
results[https://github.com/blizzy78/egit/blob/fed21849f6a0fc2003a30bc036cefbbdf428a8cb/org.eclipse.egit.ui.test/src/org/eclipse/egit/ui/test/commit/CommitEditorTest.java][showAnnotations][3] = -> TRY {  -> setTestFileContent("updated content"+System.nanoTime(),)@ } CATCH(Exception) {}
results[https://github.com/NCIP/cagrid-grid-incubation/blob/b4240fd15c8e4540e7d4d77c616c6b51f6a69828/grid-incubation/incubator/projects/caOS/projects/workflowHelper/src/org/cagrid/workflow/helper/instrumentation/InstrumentationRecord.java][eventStart][1] = -> TRY {  -> startTime=System.nanoTime()@ -> record.setStartTime(startTime,)@ } CATCH(Exception) {}
results[https://github.com/apache/jackrabbit-oak/blob/c2dfcc516a982f7317c9fc90fb767583a36d8574/oak-solr-remote/src/test/java/org/apache/jackrabbit/oak/plugins/index/solr/http/RemoteSolrServerProviderIT.java][canCreateCollections][1] = -> TRY {  -> solrCollection="solr_"+System.nanoTime()@ -> req.setParam("name",solrCollection,)@ } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/249ff22f64878a7eac7a4f62f92e7b706ed76c58/test/javax/management/remote/mandatory/notif/ListenerScaleTest.java][timeNotif][3] = -> TRY { -> startTime=System.nanoTime()@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/tjake/Solandra/blob/a10ea4081e864392cd280044b07c05d7f3273e99/test/lucandra/cluster/IndexManagerTests.java][testCassandraIncrement4][2] = -> TRY {  -> indexName=String.valueOf(System.nanoTime(),)@ } CATCH(Exception) {}
results[https://github.com/Jasig/cas/blob/284e753070bea7ada8ab97ebd8016679df296c17/cas-server-core/src/test/java/org/jasig/cas/authentication/PolicyBasedAuthenticationManagerTests.java][newMockHandler][1] = -> TRY {  -> return newMockHandler("MockAuthenticationHandler"+System.nanoTime(),success,)@ } CATCH(Exception) {}
results[https://github.com/Amooti/SensorStream/blob/15e8debd8b6f8738ad979031aab56815e70f72a4/Sensor/src/main/java/nl/wes/communication/SensorServerHandler.java][messageSent][1] = -> TRY {  -> timeTracker.sentObservation((String) message,System.nanoTime(),)@ } CATCH(Exception) {}
results[https://github.com/radlab/sparrow/blob/e931f47106bd6b974d7642225df9035bc6fc98ea/src/main/java/edu/berkeley/sparrow/examples/ThriftPongClient.java][onComplete][2] = -> TRY { -> System.out.println("Took: "+System.nanoTime()-t0/1000.0*1000.0+"ms",)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/inspirer/textmapper/blob/679caff46babb7df7442941e2fbbe0fcfaa85802/tm-tool/lapg-tool/tests/org/textmapper/lapg/test/common/GeneratedFileTest.java][testUpperDirectory][5] = -> TRY {  -> baseFolder=tempFolder.newFolder("testUpperDirectory"+System.nanoTime(),)@ -> file=new GeneratedFile(baseFolder,"../subfolder/A.txt","content","utf-8",true,)@ } CATCH(Exception) {}
results[https://github.com/EBIBioSamples/biosd_ui/blob/2db21143fe16d215c3961706407da00c5ae1ae51/webapp/src/main/java/uk/ac/ebi/arrayexpress/jobs/ReloadAllJob.java][doExecute][1] = -> TRY { -> newDir="teste"+System.nanoTime()@ -> backDir=new File(backupDirectory+"/"+newDir,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/kijiproject/kiji-mapreduce/blob/2d44f9630c643e9acbc230cfe147a17a07593002/kiji-mapreduce/src/test/java/org/kiji/mapreduce/TestLaunchMapReduce.java][testMapReduce][2] = -> TRY {  -> tmpDir="file:///tmp/hdfs-testing-"+System.nanoTime()@ -> jobConf.set("fs.default.name",tmpDir,)@ -> jobConf.set("fs.default.FS",tmpDir,)@ } CATCH(Exception) {}
results[https://github.com/malensek/galileo/blob/a3c6c9fdfc3546fe0458cc8bae8675d3b5918b19/src/galileo/test/dht/partitioning/SpatialHierarchy.java][testGroup1][3] = -> TRY {  -> tp=new TemporalProperties(System.nanoTime(),)@ -> meta.setTemporalProperties(tp,)@ } CATCH(Exception) {}
results[https://github.com/mabrek/jetty/blob/aee6d2c27559cc45a19757e7e3165befd12c8026/tests/test-sessions/test-sessions-common/src/main/java/org/eclipse/jetty/server/session/AbstractClientCrossContextSessionTest.java][testCrossContextDispatch][6] = -> TRY {  -> random=new Random(System.nanoTime(),)@ -> port=random.nextInt(50000,)+10000@ } CATCH(Exception) {}
results[https://github.com/forcedotcom/SalesforceMobileSDK-Android/blob/aeb022c9a1082ef038801fedaea2dd92a48585d4/libs/test/SalesforceSDKTest/src/com/salesforce/androidsdk/rest/RestClientTest.java][createAccount][3] = -> TRY {  -> newAccountName=ENTITY_NAME_PREFIX+"-"+System.nanoTime()@ -> fields.put("name",newAccountName,)@ -> return new IdName(newAccountId,newAccountName,)@ } CATCH(Exception) {}
results[https://github.com/mammadori/dbpedia/blob/aaf7fb5e9a24c8f90cc36173ed33e416c836aea3/live/src/main/java/org/dbpedia/extraction/live/core/Timer.java][start][1] = -> TRY { -> start.put(TimerName,System.nanoTime(),)@ } CATCH(Exception) { -> logger.error("Cannot start timer \""+TimerName+"\"",)@ }
results[https://github.com/forcedotcom/SalesforceMobileSDK-Android/blob/ccd861a8cb99e908ce5d958a22c2fd7b78c012a3/native/RestExplorer/src/com/salesforce/samples/restexplorer/ExplorerActivity.java][onSuccess][2] = -> TRY { -> duration=System.nanoTime()-start@ -> printRequestInfo(duration,size,statusCode,)@ } CATCH(Exception) { -> printException(e,)@ }
results[https://github.com/airlift/airlift/blob/5b7ced83bd0dec1be2d3272581a5838607655c35/stats/src/main/java/com/proofpoint/stats/TimedStat.java][time][7] = -> TRY {  -> start=System.nanoTime()@ -> addValue(Duration.nanosSince(start,),)@ } CATCH(Exception) {}
results[https://github.com/rafalkrupinski/jetty/blob/727cf815a250f9a2305f3b377f8f0450b9820bd9/jetty-client/src/test/java/org/eclipse/jetty/client/HttpClientStreamTest.java][testFileUpload][1] = -> TRY {  -> responseTime=System.nanoTime()@ -> Assert.assertTrue(requestTime.get()<=responseTime,)@ } CATCH(Exception) {}
results[https://github.com/dzonekl/netxstudio/blob/563c975ee96f508f00341d4d30a9f26acc77171c/tests/com.netxforge.netxstudio.server.test/src/com/netxforge/netxstudio/server/test/component/index/ComponentIndexTest.java][testIndex][1] = -> TRY {  -> nanoTime=System.nanoTime()@ -> System.out.println("index creation took "+modelUtils.timeDurationNanoFromStart(nanoTime,),)@ } CATCH(Exception) {}
results[https://github.com/ontop/ontop/blob/4e3db268f5eb95b52878d47bc99850b5742d969f/obdalib/quest-sesame/src/main/java/sesameWrapper/LUBM50Tests.java][test3InitializingQuest][5] = -> TRY {  -> LOOP { -> start=System.nanoTime()@ } } CATCH(Exception) {}
results[https://github.com/ansgarstrother/bot_lab/blob/76e3dd298563442b67a421c776fb0ef44e778b60/Rover/RoverMapController.java][update][1] = -> TRY { -> new_plan_msg.timestamp=System.nanoTime()@ } CATCH(Exception) { -> System.err.println("Error publishing next plan message: "+e.getMessage(),)@ }
results[https://github.com/sopeco/Software-Performance-Cockpit/blob/9d1208128b8a960cf8601e1c2889095eae7eaed5/org.sopeco.persistence/test/org/sopeco/persistence/ExperimentSeriesRunTest.java][setUp][1] = -> TRY {  -> dummyRun=new ExperimentSeriesRun()@ -> dummyRun.setTimestamp(System.nanoTime(),)@ } CATCH(Exception) {}
results[https://github.com/lalithsuresh/odin-master/blob/82b4a63de3691a0ff55177e4837843a2238ffacd/src/test/java/net/floodlightcontroller/core/internal/OFSwitchImplTest.java][doSendNxRoleRequest][4] = -> TRY {  -> cookie=System.nanoTime()@ -> xid=sw.sendNxRoleRequest(role,cookie,)@ -> assertEquals(cookie,pendingRoleRequest.cookie,)@ } CATCH(Exception) {}
results[https://github.com/corintio/opentestbed/blob/3f3fcecfac6bd5b8a387df88698582412880b00d/src/main/java/ww10/WetenschapsweekStarter.java][main][1] = -> TRY {  -> gameIDGenerator=new GameIDGenerator(System.nanoTime(),)@ -> gameInfo=runner.asyncRunGame(deckFactory,tableSeater,gameIDGenerator,observers,)@ } CATCH(Exception) {}
results[https://github.com/mingfang/disruptor/blob/2e90158d02a1356478b13a2265a754a33246c09e/code/src/perf/com/lmax/disruptor/support/LatencyStepEventHandler.java][onEvent][6] = -> TRY {  -> duration=System.nanoTime()-event.getValue()@ -> histogram.addObservation(duration,)@ } CATCH(Exception) {}
results[https://github.com/ebean-orm/avaje-ebeanorm/blob/ef39bfcf14a56e411918beac4c25a478b917527b/src/main/java/com/avaje/ebeaninternal/server/query/CQuery.java][updateExecutionStatistics][1] = -> TRY { -> exeNano=System.nanoTime()-startNano@ -> executionTimeMicros=TimeUnit.NANOSECONDS.toMicros(exeNano,)@ } CATCH(Exception) { -> logger.error(null,e,)@ }
results[https://github.com/tesla/m2e-core-tests/blob/e6baa6e794fc588ecac6cf4c6d5fb8f0d8a3e15f/org.eclipse.m2e.tests/src/org/eclipse/m2e/tests/ThrowBuildExceptionProjectConfigurator.java][build][1] = -> TRY {  -> throw new Exception(ERROR_MESSAGE+System.currentTimeMillis()+System.nanoTime(),)@ } CATCH(Exception) {}
results[https://github.com/cometd/cometd/blob/fe7b9205e491e238e9eba2a2b9774c939a469e49/cometd-java/cometd-java-client/src/test/java/org/cometd/client/LazyChannelAndMessageTest.java][testLazyChannelWithGlobalTimeout][5] = -> TRY {  -> begin=new AtomicLong()@ -> begin.set(System.nanoTime(),)@ } CATCH(Exception) {}
results[https://github.com/rafalkrupinski/jetty/blob/727cf815a250f9a2305f3b377f8f0450b9820bd9/jetty-client/src/test/java/org/eclipse/jetty/client/HttpDestinationTest.java][test_IdleConnection_IdleTimeout][3] = -> TRY {  -> IF { -> start=System.nanoTime()@ } } CATCH(Exception) {}
results[https://github.com/openplanets/plato/blob/ffb58f0645c4ab587928f6885814a56aa71e30db/minimee/src/main/java/at/tuwien/minimee/util/LinuxCommandMonitor.java][prepareWorkingDirectory][2] = -> TRY {  -> workingDirectory=tempDir+"/profile_"+System.nanoTime()@ -> new File(workingDirectory,).mkdir()@ } CATCH(Exception) {}
results[https://github.com/jonatas/mktc-platform/blob/096a57c4832cd25d0fce14d65094bf0d4957aeeb/source/modules/strategy/src/test/java/org/marketcetera/strategy/StrategyModuleTest.java][requestData][1] = -> TRY {  -> badPayload="some stuff-"+System.nanoTime()@ -> new ExpectedFailure<IllegalRequestParameterValue>(ILLEGAL_REQ_PARM_VALUE,strategy.toString(),badPayload,)@ } CATCH(Exception) {}
results[https://github.com/apache/sling/blob/5432609dcf7593cc21a27a9ca0371a8f723c0d52/contrib/extensions/replication/core/src/test/java/org/apache/sling/replication/agent/impl/SimpleReplicationAgentTest.java][testSyncReplicationWithWorkingDistributionStrategy][2] = -> TRY {  -> request=new ReplicationRequest(System.nanoTime(),ReplicationActionType.ADD,"/",)@ -> response=agent.execute(request,)@ } CATCH(Exception) {}
results[https://github.com/spring-projects/spring-insight-plugins/blob/d030a6a2c5912f1d2591c29e908057eb252e9828/collection-plugins/run-exec/src/test/java/com/springsource/insight/plugin/runexec/ExecutorServiceSubmitCollectionAspectTest.java][testSubmitWithResult][1] = -> TRY {  -> runSubmitTest(Long.valueOf(System.nanoTime(),),)@ } CATCH(Exception) {}
results[https://github.com/vmware-serengeti/serengeti-ws/blob/783a1acb1a72b10dcf56f4956c4544afff8ceea4/server/common/src/main/java/com/vmware/aurora/util/CommandExec.java][run][2] = -> startTime=System.nanoTime()@ -> TRY { -> timeTaken=System.nanoTime()-startTime@ } CATCH(Exception) { -> logger.error(e,)@ }
results[https://github.com/Amooti/SensorStream/blob/15e8debd8b6f8738ad979031aab56815e70f72a4/Sensor/src/main/java/nl/wes/communication/SensorServerHandler.java][messageReceived][1] = -> TRY {  -> timeTracker.receivedObservationRequest((String) message,System.nanoTime(),)@ -> queryString=(String) message.split(",",)@ } CATCH(Exception) {}
results[https://github.com/blacktitan/apache-helix/blob/92be0aa548f2efd12ae635d474917464b07dfb29/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java][handleDataDeleted][2] = -> TRY { -> updateNotificationTime(System.nanoTime(),)@ } CATCH(Exception) { -> ZKExceptionHandler.getInstance().handle(msg,e,)@ }
results[https://github.com/bmule/ehkmt-integration/blob/5c62b08100fca56be58d11ee7a36187e12e92de3/phrs-modules/phrweb/src/main/java/at/srfg/kmt/ehealth/phrs/jsf/utils/OutputPahseListener.java][beforePhase][2] = -> TRY { -> IF { -> startTime=System.nanoTime()@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/corintio/opentestbed/blob/3f3fcecfac6bd5b8a387df88698582412880b00d/src/main/java/CashGameConsoleStarter.java][main][2] = -> TRY {  -> gameIDGenerator=new GameIDGenerator(System.nanoTime(),)@ -> runner.runGame(deckFactory,tableSeater,gameIDGenerator,Arrays.asList(handHistoryWriter,),)@ } CATCH(Exception) {}
results[https://github.com/Metaswitch/jsip/blob/401b4774f18c6d20a38962f6f59e3f2b804d117d/src/performance/uas/Shootme.java][processInvite][4] = -> TRY { -> toTag=""+System.nanoTime()@ -> toHeader.setTag(toTag,)@ -> toHeader.setTag(toTag,)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/blacktitan/apache-helix/blob/c0d27b1fcff3bedf3eb0259ffd14eea695ab2c38/helix-core/src/main/java/com/linkedin/helix/agent/zk/CallbackHandler.java][handleDataDeleted][9] = -> TRY { -> updateNotificationTime(System.nanoTime(),)@ } CATCH(Exception) { -> ZKExceptionHandler.getInstance().handle(e,)@ }
results[https://github.com/zhongl/iPage/blob/dcd1d1f94cb1ca256ef277bdf2585efbaa69c0b3/src/main/java/com/github/zhongl/journal/CallByCountOrElapse.java][tryCall][4] = -> TRY {  -> now=System.nanoTime()@ -> currentElpaseMilliseconds+=TimeUnit.NANOSECONDS.toMillis(now-lastTime,)@ -> IF { -> return false@currentElpaseMilliseconds<elapseMilliseconds } } CATCH(Exception) {}
results[https://github.com/forcedotcom/dataloader/blob/ae99e44a5f9de63644905ffb3b8ec86746bb10a0/src/test/java/com/salesforce/dataloader/process/CsvEncodingProcessTest.java][testUnicodeExtraction][1] = -> TRY {  -> name=System.nanoTime()+"☠"@ -> accountId=insertAccount(name,)@ -> validateExtraction(name,testConfig,)@ } CATCH(Exception) {}
results[https://github.com/brooklyncentral/brooklyn/blob/c33db4c1eb2e834c74fa4a71b6ed00653b629bd2/core/src/test/java/brooklyn/entity/group/zoneaware/InterAvailabilityZoneDynamicClusterTest.java][testAbandonsFailingZone][2] = -> TRY {  -> startTime=System.nanoTime()@ -> currentTime=new AtomicLong(startTime,)@ -> currentTime.set(startTime+TimeUnit.MILLISECONDS.toNanos(1000*60*60+1,),)@ } CATCH(Exception) {}
results[https://github.com/MarvinToll/SOAj_2.3/blob/478ce36272513028bea2d54a71fa73c3e40424da/soaj-core/src/main/java/info/soaj/core/testing/SjcIncontainerTC.java][tearDown][4] = -> TRY {  -> System.out.println("\n\t*** Teardown "+SjcTestCaseUtil.formatTestName(this,getName(),)+"; milliseconds = "+System.nanoTime()-this.serverStartTime/1000000+"\n",)@ } CATCH(Exception) {}
results[https://github.com/corintio/opentestbed/blob/bef356ee91a97a47bbb07a18644e8ce3c6b43508/src/main/java/TournamentConsoleStarter.java][main][1] = -> TRY {  -> gameIDGenerator=new GameIDGenerator(System.nanoTime(),)@ -> runner.runGame(deckFactory,tableSeater,gameIDGenerator,Arrays.asList(handHistoryWriter,rank,),)@ } CATCH(Exception) {}
results[https://github.com/jsr107/jsr107tck/blob/a60fd59aa9c5dbf61199f6801c06a0ee317fbed1/cache-tests/src/test/java/org/jsr107/tck/statistics/JMXTest.java][setUp][1] = -> TRY {  -> cacheManager=getCacheManager(this.getClass().getName()+System.nanoTime(),)@ } CATCH(Exception) {}
results[https://github.com/MarvinToll/SOAj_2.3/blob/478ce36272513028bea2d54a71fa73c3e40424da/soaj-core/src/main/java/info/soaj/core/testing/SjcOutsideContainerTC.java][tearDown][4] = -> TRY {  -> jvmEndTime=System.nanoTime()@ -> System.out.println("\n\n\t*** TearDown "+SjcTestCaseUtil.formatTestName(this,getName(),)+"; milliseconds = "+jvmEndTime-this.jvmStartTime/100000+"\n",)@ } CATCH(Exception) {}
results[https://github.com/saetre/TABuss/blob/cea9f28757d5dbd1238836f20819ec9c769cec71/src/org/ubicompforall/BusTUC/Main/Helpers.java][runStandard][2] = -> IF { -> TRY { -> time=System.nanoTime()@ } CATCH(Exception) { -> e.printStackTrace()@ } }
results[https://github.com/andrewphorn/ClassiCube-Client/blob/6b9bd6ca9cb919e6af0dd05d18e29c8c793f749c/src/main/java/com/mojang/minecraft/Minecraft.java][onFrame][1] = -> TRY { -> actualNow=System.nanoTime()/1000000L@ } CATCH(Exception) { -> setCurrentScreen(new ErrorScreen("Client error","The game broke! ["+ex+"]",),)@ -> ex.printStackTrace()@ }
results[https://github.com/sasq64/droidsound/blob/6be69f52c901fa689d7536c9aa31ba0624a07f6a/tests/src/com/ssb/droidsound/test/SongTest.java][setUp][1] = -> TRY {  -> f=Environment.getExternalStorageDirectory()@ -> tempDir=new File(f,"testmusic"+System.nanoTime(),)@ -> tempDir.mkdir()@ } CATCH(Exception) {}
results[https://github.com/forcedotcom/aura/blob/6271f6865c587062e5acee0e633029075cb67b6c/aura-impl/src/test/java/org/auraframework/impl/ClientOutOfSyncUITest.java][testGetServerRenderingAfterMarkupChange][2] = -> TRY {  -> url=getUrl(cmpDesc,)@ -> openNoAura(url,)@ -> openNoAura(url+"?nonce="+System.nanoTime(),)@ } CATCH(Exception) {}
results[https://github.com/jonatas/mktc-platform/blob/9a575fe2af823da12f6c1784fe547e2c65dc0755/source/modules/strategy/src/test/java/org/marketcetera/strategy/LanguageTestBase.java][cancelReplace][1] = -> TRY {  -> unsubmittedOrderID=new OrderID("this-order-id-does-not-exist-"+System.nanoTime(),)@ -> AbstractRunningStrategy.setProperty("orderID",unsubmittedOrderID.toString(),)@ } CATCH(Exception) {}
results[https://github.com/willuhn/jameica/blob/677f3c15ffba2c741c2c9a0e9cfe741948f8f304/src/de/willuhn/jameica/security/SSLFactory.java][init][2] = -> TRY {  -> random=SecureRandom.getInstance("SHA1PRNG",)@ -> random.setSeed(System.nanoTime(),)@ -> random.nextBytes(serno,)@ } CATCH(Exception) {}
results[https://github.com/nickman/shorthand/blob/5826aba839a2a1258501a9a73e9a2e55bb1a2f0b/agent/src/main/java/com/heliosapm/BodyWrapTest.java][instrument][1] = -> TRY { -> aname=""+System.nanoTime()@ -> annonClass=cp.makeClass(aname,)@ } CATCH(Exception) { -> log("Instrumentation failed. Stack trace follows:",)@ -> ex.printStackTrace(System.err,)@ }
results[https://github.com/haku/Morrigan/blob/bc07ea92b665125fe83405d872b5be9f631cfc5d/com.vaguehope.morrigan.model.media_impl.tests/src/com/vaguehope/morrigan/model/media/internal/db/mmdb/MixedMediaSqliteLayerOuterTest.java][itSearchesForSingleItemByName][1] = -> TRY {  -> mediaNameFragment="some_media_file_"+System.nanoTime()@ -> expected=mockMediaTrackWithNameContaining(mediaNameFragment,)@ -> assertSingleResult(expected,runSearch(mediaNameFragment,),)@ } CATCH(Exception) {}
results[https://github.com/nh2/dsa42/blob/a3344930f86373a401dac87c175135c2809befa7/unterlagen/code/Reversi2008/src/main/java/de/schelklingen2008/reversi/ai/AIToyBoxApp.java][main][1] = -> TRY {  -> strategyName=REVERSI_STRATEGY.toString()@ -> username="cc"+strategyName+System.nanoTime()%1000@ -> creds=new UsernamePasswordCreds(new Name(username,),password,)@ } CATCH(Exception) {}
results[https://github.com/jonatas/mktc-platform/blob/9a575fe2af823da12f6c1784fe547e2c65dc0755/source/modules/strategy/src/test/java/org/marketcetera/strategy/LanguageTestBase.java][underlying][1] = -> TRY {  -> invalidSymbol="there-is-no-underlying-for-this-symbol-"+System.nanoTime()@ -> assertFalse(underlyings.containsKey(invalidSymbol,),)@ -> doUnderlyingTest(invalidSymbol,null,)@ } CATCH(Exception) {}
results[https://github.com/jonatas/mktc-platform/blob/6b7c72fabb6a7c0042bf2fc67b95c76e6bef5bf0/source/core/src/test/java/org/marketcetera/event/beans/EventBeanTest.java][doCopyTest][1] = -> TRY {  -> messageId=System.nanoTime()@ -> inBean.setMessageId(messageId,)@ -> verifyEventBean(inBean,messageId,timestamp,source,)@ -> verifyEventBean(newBean,messageId,timestamp,source,)@ } CATCH(Exception) {}
results[https://github.com/concord-consortium/geogebra/blob/a5830fb4574ce16420579be6f850a9eb1213ec52/geogebra/org/mathpiper/builtin/functions/core/CurrentTime.java][evaluate][2] = -> TRY {  -> currentTime=System.nanoTime()@ -> getTopOfStackPointer(aEnvironment,aStackTop,).setCons(AtomCons.getInstance(aEnvironment,""+currentTime,),)@ } CATCH(Exception) {}
results[https://github.com/concord-consortium/geogebra/blob/00ba719632db66447da4a30f35569e7464a523f8/geogebra/org/mathpiper/builtin/functions/core/SystemTimer.java][evaluate][2] = -> TRY {  -> currentTime=System.nanoTime()@ -> getTopOfStackPointer(aEnvironment,aStackTop,).setCons(AtomCons.getInstance(aEnvironment,aStackTop,""+currentTime,),)@ } CATCH(Exception) {}
results[https://github.com/codefireXperiment/libcore/blob/f4ba11accbbda9fa136510304174579a0f23c65b/jsr166-tests/src/test/java/jsr166/ExchangerTest.java][realRun][1] = -> TRY {  -> startTime=System.nanoTime()@ -> assertTrue(millisElapsedSince(startTime,)>=timeoutMillis(),)@ } CATCH(Exception) {}
results[https://github.com/haku/Morrigan/blob/bc07ea92b665125fe83405d872b5be9f631cfc5d/com.vaguehope.morrigan.model.media_impl.tests/src/com/vaguehope/morrigan/model/media/internal/db/mmdb/MixedMediaSqliteLayerOuterTest.java][itSearchesForSingleItemByTag][1] = -> TRY {  -> tag="some_media_tag_"+System.nanoTime()@ -> expected=mockMediaFileWithTags(tag,)@ -> assertSingleResult(expected,runSearch(tag,),)@ } CATCH(Exception) {}
results[https://github.com/jonatas/mktc-platform/blob/0f528d00254fd77010d062d87476e602ce8aa967/source/core/src/test/java/org/marketcetera/marketdata/AbstractMarketDataFeedCredentialsTest.java][testValidate][1] = -> TRY {  -> url="http://url-"+System.nanoTime()@ -> credentials=new MockMarketDataFeedCredentials(url,)@ -> assertEquals(url,credentials.getURL(),)@ } CATCH(Exception) {}
results[https://github.com/jonatas/mktc-platform/blob/096a57c4832cd25d0fce14d65094bf0d4957aeeb/source/modules/strategy/src/test/java/org/marketcetera/strategy/StrategyModuleTest.java][fileParameterTest][1] = -> TRY {  -> badFile=new File("this-file-really-should-not-exist-"+System.nanoTime(),)@ -> new ExpectedFailure<ModuleCreationException>(FILE_DOES_NOT_EXIST_OR_IS_NOT_READABLE,badFile.getAbsolutePath(),)@ } CATCH(Exception) {}
results[https://github.com/kijiproject/kiji-mapreduce/blob/2d44f9630c643e9acbc230cfe147a17a07593002/kiji-mapreduce/src/test/java/org/kiji/mapreduce/IntegrationTestKijiBulkLoad.java][makeRandomPath][3] = -> TRY {  -> random=new Random(System.nanoTime(),)@ -> return new Path(base,String.format("/%s-%s",prefix,random.nextLong(),),)@ } CATCH(Exception) {}
results[https://github.com/blacktitan/apache-helix/blob/c0d27b1fcff3bedf3eb0259ffd14eea695ab2c38/helix-core/src/main/java/com/linkedin/helix/agent/file/CallbackHandlerForFile.java][onPropertyChange][3] = -> TRY { -> IF { -> updateNotificationTime(System.nanoTime(),)@ } } CATCH(Exception) { -> LOG.error("fail onPropertyChange",e,)@ }
results[https://github.com/inspirer/textmapper/blob/05cc63996cd4acefb094c849221b00a5ebf431ef/tm-tool/textmapper/tests/org/textmapper/tool/test/common/GeneratedFileTest.java][testSubFolder][3] = -> TRY {  -> baseFolder=tempFolder.newFolder("testSubFolder"+System.nanoTime(),)@ -> new GeneratedFile(baseFolder,"AAA","content","utf-8",true,).create()@ -> file=new GeneratedFile(baseFolder,"AAA/BB/A.txt","content","utf-8",true,)@ } CATCH(Exception) {}
results[https://github.com/kjin/cs5643/blob/318933cb3d75cd0bdf410c2772f1137f8106a89a/cs5643_proj3/src/cs5643/rigidbody/RigidImageSimulation.java][writeFrame][8] = -> timeNS=-System.nanoTime()@ -> TRY { -> timeNS+=System.nanoTime()@ -> System.out.println(timeNS/1000000+"ms:  Wrote image: "+filename,)@ } CATCH(Exception) { -> e.printStackTrace()@ -> System.out.println("OOPS: "+e,)@ }
results[https://github.com/armangal/SmartExecutor/blob/2ad303558049927a64234849a7acb9da70b7d642/src/main/java/org/smexec/jmx/AbstractJmxStatDataHolder.java][snapshotAvgCPUTime][2] = -> TRY { -> IF { -> currentTime=System.nanoTime()@ } -> cpuPercentage=calculateCPUTimePercentage(currentCPUTime,previousCPUTime,currentTime,previousCPUMeasurementTime,)@ } CATCH(Exception) { -> logger.error("Error while measuring CPU usage ",e,)@ }
results[https://github.com/franzinc/agraph-java-client/blob/9742b1d4a16d569c71d41de28560dd451fb2f97f/src/test/Util.java][waitFor][2] = -> TRY {  -> start=System.nanoTime()@ -> LOOP { -> IF { -> return ret@System.nanoTime()-start<maxWait && !(ret==null||Boolean.FALSE.equals(ret,)) } } } CATCH(Exception) {}
results[https://github.com/InMobi/incubator-falcon/blob/bdadf2ed680b338d3ec48cb179300f50db69fee0/common/src/test/java/org/apache/falcon/security/CurrentUserTest.java][testGetUser][4] = -> TRY {  -> id=Long.toString(System.nanoTime(),)@ -> CurrentUser.authenticate(id,)@ -> Assert.assertEquals(CurrentUser.getUser(),id,)@ } CATCH(Exception) {}
results[https://github.com/inspirer/textmapper/blob/679caff46babb7df7442941e2fbbe0fcfaa85802/tm-tool/lapg-tool/tests/org/textmapper/lapg/test/common/GeneratedFileTest.java][testCreate][3] = -> TRY {  -> baseFolder=tempFolder.newFolder("testCreate"+System.nanoTime(),)@ -> file=new GeneratedFile(baseFolder,"A.java","package p;\r\n"+"\r\n"+"import xxx.A;\r\n"+"import xxx.C;\r\n"+"\r\n"+"class X extends xxx.@B {\r\n"+"\tpublic final xxx.@D A;\r\n"+"}\r\n","utf-8",true,)@ -> written=FileUtil.getFileContents(new FileInputStream(new File(baseFolder,"A.java",),),"utf-8",)@ } CATCH(Exception) {}
results[https://github.com/escidoc/escidoc-core/blob/6a07ec24f21c021289e0dbdf9cdc2f0cff05f212/integration-tests/src/test/java/de/escidoc/core/test/om/item/ItemVersioningIT.java][testLifecycleVersions02][2] = -> TRY {  -> COMPONENT_2_CONTENT_CATEGORY=String.valueOf(System.nanoTime(),)@ -> substitute(component,"/component/properties/content-category",COMPONENT_2_CONTENT_CATEGORY,)@ -> requiredValues.put("/item/components/component/properties/content-category[text()='"+COMPONENT_2_CONTENT_CATEGORY+"']",null,)@ } CATCH(Exception) {}
results[https://github.com/zenbones/SmallMind/blob/f29931c743d4f8096d334fbd22c7653c864eb3bb/quorum/src/main/java/org/smallmind/quorum/pool/connection/ConnectionPin.java][serve][3] = -> TRY {  -> FINALLY { -> IF { -> leaseStartNanos=System.nanoTime()@ } } } CATCH(Exception) {}
results[https://github.com/zeromq/jeromq/blob/c529e392bc595c92c3b134c2b74df8e59d182e0d/src/test/java/guide/spworker.java][main][2] = -> TRY {  -> rand=new Random(System.nanoTime(),)@ -> identity=String.format("%04X-%04X",rand.nextInt(0x10000,),rand.nextInt(0x10000,),)@ } CATCH(Exception) {}
results[https://github.com/zonedabone/CommandIt/blob/049dd2f3a08b010409a344d951e1665a5fbe90d0/src/org/zone/commandit/util/Updater.java][installUpdate][1] = -> t=System.nanoTime()/1000000@ -> Message.sendMessage(cs,"update.start",newVersion,)@ -> TRY { -> Message.sendMessage(cs,"update.finished",(double) System.nanoTime()/1000000-t/1000,)@ } CATCH(Exception) { -> Message.sendMessage(cs,"update_fetch_failed",e,)@ }
results[https://github.com/jonatas/mktc-platform/blob/9a575fe2af823da12f6c1784fe547e2c65dc0755/source/modules/strategy/src/test/java/org/marketcetera/strategy/LanguageTestBase.java][optionPositionAsOf][2] = -> TRY {  -> invalidSymbol="there-is-no-position-for-this-symbol-"+System.nanoTime()@ -> invalidOption=new Option(invalidSymbol,DateUtils.dateToString(new Date(),DateUtils.DAYS,),EventTestBase.generateDecimalValue(),OptionType.Call,)@ } CATCH(Exception) {}
results[https://github.com/jonatas/mktc-platform/blob/096a57c4832cd25d0fce14d65094bf0d4957aeeb/source/modules/strategy/src/test/java/org/marketcetera/strategy/StrategyModuleTest.java][propertiesParameterTest][1] = -> TRY {  -> properties=new Properties()@ -> verifyStrategyStartsAndStops(RubyLanguageTest.STRATEGY_NAME,RUBY,RubyLanguageTest.STRATEGY,properties,null,null,)@ -> properties.setProperty("some-key","some value "+System.nanoTime(),)@ -> verifyStrategyStartsAndStops(RubyLanguageTest.STRATEGY_NAME,RUBY,RubyLanguageTest.STRATEGY,properties,null,null,)@ } CATCH(Exception) {}
results[https://github.com/jrecursive/mecha/blob/4babb2dc24116a6ba2b8ba4c0d7af59b37966796/src/mecha/db/Slab.java][main][2] = -> TRY {  -> testObj=new JSONObject()@ -> testObj.put("value",System.nanoTime(),)@ -> bytez=testObj.toString().getBytes()@ } CATCH(Exception) {}
results[https://github.com/MarvinToll/SOAj_2.3/blob/f935650c6878f4331ce60d2071206ed863f500ff/soaj-core/src/main/java/info/soaj/core/bo/SjcThreadLocalBO.java][calculateElapsedTime][1] = -> TRY { -> startTime=getInstanceGM(startTimeKey,)@ -> elapsedTime=System.nanoTime()-startTime.longValue()/1000000@ } CATCH(Exception) { -> throw new SjcCalculateSE(new SjcExceptionPO(SjcThreadLocalBO.CLASS_NAME,Method_Name,),"A calculation could not be completed using the start time key ["+startTimeKey+"].",e,)@ }
results[https://github.com/LafayetteCollegeLibraries/metadb-dss/blob/56a7a36a410e9db7abdea0f08e96de822be6c3be/webapp-src/src/edu/lafayette/metadb/model/imagemgt/ImageGenerator.java][run][1] = -> MetaDbHelper.note(this.threadName+" started at "+System.nanoTime(),)@ -> TRY { -> MetaDbHelper.note(this.threadName+" ending at "+System.nanoTime(),)@ } CATCH(Exception) { -> MetaDbHelper.note("Error converting the file "+inputFilePath+": "+e,)@ }
results[https://github.com/NCIP/cagrid-grid-incubation/blob/b4240fd15c8e4540e7d4d77c616c6b51f6a69828/grid-incubation/incubator/projects/caOS/projects/workflowHelper/src/org/cagrid/workflow/helper/instrumentation/InstrumentationRecord.java][eventEnd][1] = -> TRY {  -> IF { -> throw new Exception("Could not find the record for the received event ("+event+")",)@record==null } -> endTime=System.nanoTime()@!(record==null) -> record.setEndTime(endTime,)@!(record==null) } CATCH(Exception) {}
results[https://github.com/blacktitan/apache-helix/blob/92be0aa548f2efd12ae635d474917464b07dfb29/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java][handleChildChange][1] = -> TRY { -> updateNotificationTime(System.nanoTime(),)@ } CATCH(Exception) { -> msg="exception in handling child-change. instance: "+_manager.getInstanceName()+", parentPath: "+parentPath+", listener: "+_listener@ -> ZKExceptionHandler.getInstance().handle(msg,e,)@ }
results[https://github.com/forcedotcom/SalesforceMobileSDK-Android/blob/8af4e4b4b9d0436f2a9a93ea10c3e50f5ff85323/native/SalesforceSDKTest/src/com/salesforce/androidsdk/rest/RestClientTest.java][testUpdate][2] = -> TRY {  -> updatedAccountName=ENTITY_NAME_PREFIX+"-"+System.nanoTime()@ -> fields.put("name",updatedAccountName,)@ -> assertEquals("Wrong row returned",updatedAccountName,response.asJSONObject().getString("Name",),)@ } CATCH(Exception) {}
results[https://github.com/tpietzsch/jAER/blob/612b5de31090f268818f25bcf88a44ea6913d27d/host/java/src/net/sf/jaer/util/TobiLogger.java][setEnabled][1] = } ELSE { -> TRY { -> startingTime=(nanotimeEnabled)?System.nanoTime():System.currentTimeMillis()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/muleforge/JMX/blob/4c21e67221aa8d9421fab85ef9e538d0ed38ad10/src/test/java/org/mule/providers/jmx/JmxNotificationAdapterTestCase.java][getValidMessage][1] = -> TRY {  -> notification=new Notification("type",this,System.nanoTime(),System.currentTimeMillis(),"test notification",)@ -> notification.setUserData(new ArrayList(),)@ } CATCH(Exception) {}
